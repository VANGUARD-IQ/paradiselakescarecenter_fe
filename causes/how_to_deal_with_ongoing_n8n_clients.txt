Everybody says that you should be selling  your n8n automations to other businesses, but nobody talks about what you should be  doing after the sale. Do you host it? Do they host it? What do you do about the API  keys? Let's break down what really happens when you deliver automations to clients, and  why most creators are skipping the hard part.
First, we need to talk about whether you're  self-hosting it or it's being hosted in the cloud.
Right off the bat, I can tell you, if you have a  really big client with a lot of automations, you do not want to be using the n8n cloud. You want to  be self-hosting. The reason why is you're going to be saving a lot of money down the road when it  comes to how many automations you're running.
Also, if you self-host it, you have control over  the infrastructure, which means that you can give them really beefy servers that allow them to  run massive volume with their automations. Now, the n8n cloud might be a little bit  better if you or your clients are worried about security. If you're working  with something like a lawyer or a doctor, it might be who of you to just let n8n deal with  all the security stuff so you don't have to.
Because if you deploy a server and somebody hacks  into it. It's not going to be good news. Another thing you need to take into account is that  with self-hosted n8n, you can use custom nodes, whereas on the cloud, you're not able to do that.  All in all, I recommend the self-hosted option for 99% of our clients. That being said, if you have  a client who's worried about security, who wants to be a little bit more hands-on and doesn't care  about the price, then the cloud might make sense.
Now that we've got that out of the  way, who's actually managing the n8n instance? Most of our clients have their  own n8n instances. Whether they come to us with the infrastructure already built  or they want us to build it for them, most business owners want to have control of  their own infrastructure. If a client comes to you and they have no infrastructure, you  can charge a setup fee to deploy their n8n.
If you're going to do this, you should have  the client create their own hosting account, put their card on file, and then  you can jump in and buy the server you need. Or you can tell the  client which server you need, in which case they'll buy it for you and give  you the credentials. Some clients, they don't want to deal with any of that hassle, and they  would rather have you manage their n8n instance.
In that case, you can deploy a server  under your own hosting account and charge them a monthly maintenance fee  to keep that server alive. Usually, this scenario happens when you have a monthly  retainer client, where you're constantly building and improving new workflows.  Finally, you have the hybrid model. Now, in this model, the client hosts their own  infrastructure and you charge a maintenance fee, but you keep their infrastructure up to  date and make sure that nothing goes down.
Let's talk about delivering the workflow.  99% of your clients are going to want you to log into their n8n and install the workflow  using the production credentials. The reason for this is because API keys change. Sometimes  API responses change, and sometimes things just go a little bit wrong. Even though it  worked under the test environment. So when you turn in the workflow, all they have to do is  click one button and it's live on their servers.
You're also going to want to package it with  some documentation of the workflow and where they need to go to change credentials  if they ever need to. It's a really good idea to include any information  about the services they may be using, where they can find the webhooks, where they can  find their API keys, just in case in the future, if you guys are no longer part of the picture,  that they can troubleshoot their own system.
Though it's super rare, every once in a while you  might get a client that wants you to turn in a JSON file. These clients are often very technical  and may even be reselling your automations to other people. In that case, the only thing  you might want to do is put the JSON file in a Notion page with a little bit of documentation  handed to the client, and you're good to go.
Now let's talk about API keys.  Generally, while you're building, you would like to use test credentials.  This is so that you don't mess up any infrastructure they may already have in place  and everything runs smoothly. That being said, some APIs are badly built and you switch  from the test environment to the production environment. Some problems might occur. Though  this isn't very common, it does happen and you need to be aware of it. Most of the time the  client is responsible for giving you any API keys that you might need. They might do that by  giving you access to one of their accounts, by adding you to one of the services they're using,  or by simply asking, where do I find my API key?
If you're going to send passwords or API keys  back and forth, do not do it by email or SMS.
Instead, you want to use a service like  Dashlane or One Time Secret in order to send those credentials for any services or  credentials that already have nodes built, where you need the client to log in something  like Google or OneDrive, you can hop on a quick call with the client and go over that and make  sure everything is connected in n8n before you hand over the project. And for any other services  that use things like the HTTP node. It is a good idea to leave an edit node at the beginning  of the workflow to grab those API keys from.
That way, if you have multiple HTTP nodes in the  workflow, calling the same service, all you have to do is change one API key and it works for  all of them. Now let's talk about guarantees and maintenance contracts. By default, we give all  of our workflows a 30-day guarantee that they are going to work. And if any APIs change or anything  breaks, we are always there to help our clients.
That being said, some clients want the extra  security of making sure that you're on call whenever anything breaks or when small  changes need to be done. In that case, we'll charge a monthly maintenance fee to  be on call, depending on how much work the client needs month over month, that price will  go up or down. If they need new workflows and improvements on old workflows, very often,  then that price will be pretty high. If they just want us to be there, if something  breaks, that price will be relatively low.
I hope that you guys enjoyed this video.  If you guys would like some more help with n8n, I am hosting a free community to  help you guys out. There, we have challenges to earn some real cash money. I also answer  any questions that get posted in the group.
So if that's something you're interested in, please check out the link down below.  And you guys have a wonderful day!