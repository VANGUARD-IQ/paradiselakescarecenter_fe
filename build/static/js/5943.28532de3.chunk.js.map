{"version":3,"file":"static/js/5943.28532de3.chunk.js","mappings":"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","sources":["pages/employees/EmployeeDetails.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Card,\n    CardBody,\n    VStack,\n    HStack,\n    Text,\n    Button,\n    Badge,\n    Divider,\n    Grid,\n    GridItem,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n    Stat,\n    StatLabel,\n    StatNumber,\n    useToast,\n    Skeleton,\n    SkeletonText,\n    IconButton,\n    useBreakpointValue,\n    Flex,\n    Tag,\n    Wrap,\n    WrapItem,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport {\n    EditIcon,\n    DeleteIcon,\n    ArrowBackIcon,\n    EmailIcon,\n    PhoneIcon,\n    CalendarIcon,\n} from \"@chakra-ui/icons\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport employeesModuleConfig from \"./moduleConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst GET_EMPLOYEE = gql`\n    query GetEmployee($id: ID!) {\n        employee(id: $id) {\n            id\n            employeeNumber\n            fName\n            lName\n            email\n            phoneNumber\n            mobileNumber\n            role\n            department\n            position\n            status\n            startDate\n            endDate\n            hourlyRate\n            annualSalary\n            address {\n                street\n                city\n                state\n                postcode\n                country\n            }\n            dateOfBirth\n            taxFileNumber\n            superannuationFund\n            bankAccountName\n            bankAccountNumber\n            bankBSB\n            emergencyContact {\n                name\n                relationship\n                phone\n                email\n            }\n            qualifications\n            certifications\n            notes\n            contractType\n            workingRights\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\nconst DELETE_EMPLOYEE = gql`\n    mutation DeleteEmployee($id: ID!) {\n        deleteEmployee(id: $id)\n    }\n`;\n\nconst EmployeeDetails: React.FC = () => {\n    usePageTitle(\"Employee Details\");\n\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n    const primaryHover = getColor(\"primaryHover\", colorMode);\n    const successGreen = getColor(\"successGreen\", colorMode);\n    const errorRed = getColor(\"status.error\", colorMode);\n\n    // Responsive values\n    const isMobile = useBreakpointValue({ base: true, md: false });\n    const buttonSize = useBreakpointValue({ base: \"sm\", md: \"md\" });\n\n    // Queries\n    const { data, loading, error } = useQuery(GET_EMPLOYEE, {\n        variables: { id },\n        skip: !id,\n    });\n\n    const [deleteEmployee] = useMutation(DELETE_EMPLOYEE, {\n        onCompleted: () => {\n            toast({\n                title: \"Employee deleted\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n            navigate(\"/employees\");\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error deleting employee\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        },\n    });\n\n    const employee = data?.employee;\n\n    // Format currency\n    const formatCurrency = (amount?: number) => {\n        if (!amount) return \"-\";\n        return new Intl.NumberFormat('en-AU', {\n            style: 'currency',\n            currency: 'AUD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format(amount);\n    };\n\n    // Format date\n    const formatDate = (date?: string) => {\n        if (!date) return \"-\";\n        return new Date(date).toLocaleDateString('en-AU', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    };\n\n    // Calculate employment duration\n    const calculateDuration = () => {\n        if (!employee?.startDate) return \"-\";\n        const start = new Date(employee.startDate);\n        const end = employee.endDate ? new Date(employee.endDate) : new Date();\n        const months = (end.getFullYear() - start.getFullYear()) * 12 + (end.getMonth() - start.getMonth());\n        const years = Math.floor(months / 12);\n        const remainingMonths = months % 12;\n        if (years > 0) {\n            return `${years} year${years > 1 ? 's' : ''}${remainingMonths > 0 ? `, ${remainingMonths} month${remainingMonths > 1 ? 's' : ''}` : ''}`;\n        }\n        return `${months} month${months !== 1 ? 's' : ''}`;\n    };\n\n    // Get status color\n    const getStatusColor = (status?: string) => {\n        switch (status) {\n            case \"ACTIVE\": return \"green\";\n            case \"INACTIVE\": return \"gray\";\n            case \"ON_LEAVE\": return \"orange\";\n            case \"TERMINATED\": return \"red\";\n            default: return \"gray\";\n        }\n    };\n\n    // Handle delete\n    const handleDelete = async () => {\n        if (window.confirm(`Are you sure you want to delete ${employee?.fName} ${employee?.lName}?`)) {\n            await deleteEmployee({ variables: { id } });\n        }\n    };\n\n    if (loading) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={employeesModuleConfig} />\n                <Container maxW=\"container.xl\" py={8}>\n                    <VStack spacing={6} align=\"stretch\">\n                        <Skeleton height=\"60px\" />\n                        <Card bg={cardGradientBg} borderColor={cardBorder}>\n                            <CardBody>\n                                <VStack spacing={4}>\n                                    <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" />\n                                    <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" />\n                                </VStack>\n                            </CardBody>\n                        </Card>\n                    </VStack>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error || !employee) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={employeesModuleConfig} />\n                <Container maxW=\"container.xl\" py={8}>\n                    <Text color={errorRed}>\n                        {error ? `Error: ${error.message}` : \"Employee not found\"}\n                    </Text>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={employeesModuleConfig} />\n\n            <Container maxW=\"container.xl\" px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                    {/* Header */}\n                    <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\" gap={4}>\n                        <HStack>\n                            <IconButton\n                                aria-label=\"Back\"\n                                icon={<ArrowBackIcon />}\n                                variant=\"ghost\"\n                                color={textPrimary}\n                                onClick={() => navigate(\"/employees\")}\n                                size={buttonSize}\n                            />\n                            <VStack align=\"start\" spacing={0}>\n                                <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading} size={{ base: \"md\", md: \"lg\" }}>\n                                    {employee.fName} {employee.lName}\n                                </Heading>\n                                {employee.position && (\n                                    <Text color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>\n                                        {employee.position}\n                                    </Text>\n                                )}\n                            </VStack>\n                        </HStack>\n                        <HStack>\n                            <Button\n                                leftIcon={<EditIcon />}\n                                variant=\"outline\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                onClick={() => navigate(`/employees/edit/${id}`)}\n                                size={buttonSize}\n                            >\n                                Edit\n                            </Button>\n                            <Button\n                                leftIcon={<DeleteIcon />}\n                                colorScheme=\"red\"\n                                variant=\"outline\"\n                                onClick={handleDelete}\n                                size={buttonSize}\n                            >\n                                Delete\n                            </Button>\n                        </HStack>\n                    </Flex>\n\n                    {/* Quick Stats */}\n                    <Grid templateColumns={{ base: \"repeat(2, 1fr)\", md: \"repeat(4, 1fr)\" }} gap={{ base: 3, md: 4 }}>\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"lg\"\n                        >\n                            <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                <Stat>\n                                    <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>Status</StatLabel>\n                                    <Badge colorScheme={getStatusColor(employee.status)} fontSize={{ base: \"sm\", md: \"md\" }} mt={1}>\n                                        {employee.status || \"Unknown\"}\n                                    </Badge>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"lg\"\n                        >\n                            <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                <Stat>\n                                    <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>Employee #</StatLabel>\n                                    <StatNumber color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                        {employee.employeeNumber || \"N/A\"}\n                                    </StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"lg\"\n                        >\n                            <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                <Stat>\n                                    <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>Department</StatLabel>\n                                    <StatNumber color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                        {employee.department || \"N/A\"}\n                                    </StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"lg\"\n                        >\n                            <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                <Stat>\n                                    <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>Duration</StatLabel>\n                                    <StatNumber color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                        {calculateDuration()}\n                                    </StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                    </Grid>\n\n                    {/* Detailed Information */}\n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                    >\n                        <CardBody>\n                            <Tabs isFitted variant=\"enclosed\" colorScheme=\"purple\">\n                                <TabList>\n                                    <Tab color={textPrimary} _selected={{ color: primaryColor, borderColor: primaryColor }} fontSize={{ base: \"sm\", md: \"md\" }}>\n                                        Personal\n                                    </Tab>\n                                    <Tab color={textPrimary} _selected={{ color: primaryColor, borderColor: primaryColor }} fontSize={{ base: \"sm\", md: \"md\" }}>\n                                        Employment\n                                    </Tab>\n                                    <Tab color={textPrimary} _selected={{ color: primaryColor, borderColor: primaryColor }} fontSize={{ base: \"sm\", md: \"md\" }}>\n                                        Financial\n                                    </Tab>\n                                    <Tab color={textPrimary} _selected={{ color: primaryColor, borderColor: primaryColor }} fontSize={{ base: \"sm\", md: \"md\" }}>\n                                        Other\n                                    </Tab>\n                                </TabList>\n\n                                <TabPanels>\n                                    {/* Personal Information */}\n                                    <TabPanel>\n                                        <VStack spacing={6} align=\"stretch\">\n                                            <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={{ base: 4, md: 6 }}>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Full Name</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.fName} {employee.lName}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Date of Birth</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {formatDate(employee.dateOfBirth)}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Email</Text>\n                                                    <HStack>\n                                                        <EmailIcon color={textMuted} boxSize={{ base: 3, md: 4 }} />\n                                                        <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                            {employee.email || \"-\"}\n                                                        </Text>\n                                                    </HStack>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Mobile</Text>\n                                                    <HStack>\n                                                        <PhoneIcon color={textMuted} boxSize={{ base: 3, md: 4 }} />\n                                                        <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                            {employee.mobileNumber || \"-\"}\n                                                        </Text>\n                                                    </HStack>\n                                                </GridItem>\n                                            </Grid>\n\n                                            {employee.address && (employee.address.street || employee.address.city) && (\n                                                <>\n                                                    <Divider borderColor={cardBorder} />\n                                                    <Box>\n                                                        <Text color={textMuted} fontSize=\"sm\" mb={2}>Address</Text>\n                                                        <Text color={textPrimary}>\n                                                            {employee.address.street && `${employee.address.street}, `}\n                                                            {employee.address.city && `${employee.address.city}, `}\n                                                            {employee.address.state && `${employee.address.state} `}\n                                                            {employee.address.postcode}\n                                                        </Text>\n                                                        {employee.address.country && (\n                                                            <Text color={textSecondary} fontSize=\"sm\">\n                                                                {employee.address.country}\n                                                            </Text>\n                                                        )}\n                                                    </Box>\n                                                </>\n                                            )}\n\n                                            {employee.emergencyContact && employee.emergencyContact.name && (\n                                                <>\n                                                    <Divider borderColor={cardBorder} />\n                                                    <Box>\n                                                        <Text color={textMuted} fontSize=\"sm\" mb={2}>Emergency Contact</Text>\n                                                        <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={3}>\n                                                            <GridItem>\n                                                                <Text color={textPrimary}>\n                                                                    {employee.emergencyContact.name}\n                                                                </Text>\n                                                                {employee.emergencyContact.relationship && (\n                                                                    <Text color={textSecondary} fontSize=\"sm\">\n                                                                        {employee.emergencyContact.relationship}\n                                                                    </Text>\n                                                                )}\n                                                            </GridItem>\n                                                            <GridItem>\n                                                                {employee.emergencyContact.phone && (\n                                                                    <HStack>\n                                                                        <PhoneIcon color={textMuted} boxSize={3} />\n                                                                        <Text color={textSecondary} fontSize=\"sm\">\n                                                                            {employee.emergencyContact.phone}\n                                                                        </Text>\n                                                                    </HStack>\n                                                                )}\n                                                                {employee.emergencyContact.email && (\n                                                                    <HStack>\n                                                                        <EmailIcon color={textMuted} boxSize={3} />\n                                                                        <Text color={textSecondary} fontSize=\"sm\">\n                                                                            {employee.emergencyContact.email}\n                                                                        </Text>\n                                                                    </HStack>\n                                                                )}\n                                                            </GridItem>\n                                                        </Grid>\n                                                    </Box>\n                                                </>\n                                            )}\n                                        </VStack>\n                                    </TabPanel>\n\n                                    {/* Employment Information */}\n                                    <TabPanel>\n                                        <VStack spacing={6} align=\"stretch\">\n                                            <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={{ base: 4, md: 6 }}>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Role</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.role?.replace(/_/g, ' ') || \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Department</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.department || \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Position</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.position || \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Contract Type</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.contractType || \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Start Date</Text>\n                                                    <HStack>\n                                                        <CalendarIcon color={textMuted} boxSize={{ base: 3, md: 4 }} />\n                                                        <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                            {formatDate(employee.startDate)}\n                                                        </Text>\n                                                    </HStack>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>End Date</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.endDate ? formatDate(employee.endDate) : \"Ongoing\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Working Rights</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.workingRights || \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Employment Duration</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {calculateDuration()}\n                                                    </Text>\n                                                </GridItem>\n                                            </Grid>\n                                        </VStack>\n                                    </TabPanel>\n\n                                    {/* Financial Information */}\n                                    <TabPanel>\n                                        <VStack spacing={6} align=\"stretch\">\n                                            <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={{ base: 4, md: 6 }}>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Hourly Rate</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {formatCurrency(employee.hourlyRate)}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Annual Salary</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {formatCurrency(employee.annualSalary)}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Tax File Number</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.taxFileNumber ? \"***-***-\" + employee.taxFileNumber.slice(-3) : \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Superannuation Fund</Text>\n                                                    <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }}>\n                                                        {employee.superannuationFund || \"-\"}\n                                                    </Text>\n                                                </GridItem>\n                                            </Grid>\n\n                                            {(employee.bankAccountName || employee.bankBSB || employee.bankAccountNumber) && (\n                                                <>\n                                                    <Divider borderColor={cardBorder} />\n                                                    <Box>\n                                                        <Text color={textMuted} fontSize=\"sm\" mb={2}>Bank Account Details</Text>\n                                                        <Grid templateColumns={{ base: \"1fr\", md: \"repeat(3, 1fr)\" }} gap={3}>\n                                                            <GridItem>\n                                                                <Text color={textSecondary} fontSize=\"xs\">Account Name</Text>\n                                                                <Text color={textPrimary}>\n                                                                    {employee.bankAccountName || \"-\"}\n                                                                </Text>\n                                                            </GridItem>\n                                                            <GridItem>\n                                                                <Text color={textSecondary} fontSize=\"xs\">BSB</Text>\n                                                                <Text color={textPrimary}>\n                                                                    {employee.bankBSB || \"-\"}\n                                                                </Text>\n                                                            </GridItem>\n                                                            <GridItem>\n                                                                <Text color={textSecondary} fontSize=\"xs\">Account Number</Text>\n                                                                <Text color={textPrimary}>\n                                                                    {employee.bankAccountNumber ? \"****\" + employee.bankAccountNumber.slice(-4) : \"-\"}\n                                                                </Text>\n                                                            </GridItem>\n                                                        </Grid>\n                                                    </Box>\n                                                </>\n                                            )}\n                                        </VStack>\n                                    </TabPanel>\n\n                                    {/* Other Information */}\n                                    <TabPanel>\n                                        <VStack spacing={6} align=\"stretch\">\n                                            {employee.qualifications && employee.qualifications.length > 0 && (\n                                                <Box>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={2}>Qualifications</Text>\n                                                    <Wrap>\n                                                        {employee.qualifications.map((qual: string, index: number) => (\n                                                            <WrapItem key={index}>\n                                                                <Tag size=\"md\" variant=\"solid\" colorScheme=\"purple\">\n                                                                    {qual}\n                                                                </Tag>\n                                                            </WrapItem>\n                                                        ))}\n                                                    </Wrap>\n                                                </Box>\n                                            )}\n\n                                            {employee.certifications && employee.certifications.length > 0 && (\n                                                <Box>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={2}>Certifications</Text>\n                                                    <Wrap>\n                                                        {employee.certifications.map((cert: string, index: number) => (\n                                                            <WrapItem key={index}>\n                                                                <Tag size=\"md\" variant=\"solid\" colorScheme=\"green\">\n                                                                    {cert}\n                                                                </Tag>\n                                                            </WrapItem>\n                                                        ))}\n                                                    </Wrap>\n                                                </Box>\n                                            )}\n\n                                            {employee.notes && (\n                                                <Box>\n                                                    <Text color={textMuted} fontSize=\"sm\" mb={2}>Notes</Text>\n                                                    <Text color={textPrimary} whiteSpace=\"pre-wrap\">\n                                                        {employee.notes}\n                                                    </Text>\n                                                </Box>\n                                            )}\n\n                                            <Divider borderColor={cardBorder} />\n\n                                            <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={3}>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\">Created</Text>\n                                                    <Text color={textSecondary}>\n                                                        {formatDate(employee.createdAt)}\n                                                    </Text>\n                                                </GridItem>\n                                                <GridItem>\n                                                    <Text color={textMuted} fontSize=\"sm\">Last Updated</Text>\n                                                    <Text color={textSecondary}>\n                                                        {formatDate(employee.updatedAt)}\n                                                    </Text>\n                                                </GridItem>\n                                            </Grid>\n                                        </VStack>\n                                    </TabPanel>\n                                </TabPanels>\n                            </Tabs>\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default EmployeeDetails;"],"names":["GET_EMPLOYEE","gql","_templateObject","_taggedTemplateLiteral","DELETE_EMPLOYEE","_templateObject2","EmployeeDetails","_employee$role","usePageTitle","id","useParams","navigate","useNavigate","toast","useToast","colorMode","useColorMode","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","errorRed","buttonSize","useBreakpointValue","base","md","data","loading","error","useQuery","variables","skip","deleteEmployee","useMutation","onCompleted","title","status","duration","isClosable","onError","description","message","employee","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","date","Date","toLocaleDateString","year","month","day","calculateDuration","startDate","start","end","endDate","months","getFullYear","getMonth","years","Math","floor","remainingMonths","concat","_jsxs","Box","bg","minH","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","employeesModuleConfig","Container","maxW","py","VStack","spacing","align","Skeleton","height","Card","borderColor","CardBody","SkeletonText","mt","noOfLines","FooterWithFourColumns","Text","color","display","flexDirection","px","flex","Flex","justify","wrap","gap","HStack","IconButton","icon","ArrowBackIcon","variant","onClick","size","Heading","fontFamily","brandConfig","fonts","heading","fName","lName","position","fontSize","Button","leftIcon","EditIcon","DeleteIcon","colorScheme","async","window","confirm","Grid","templateColumns","backdropFilter","boxShadow","border","borderRadius","Stat","StatLabel","Badge","getStatusColor","StatNumber","employeeNumber","department","Tabs","isFitted","TabList","Tab","_selected","TabPanels","TabPanel","GridItem","mb","dateOfBirth","EmailIcon","boxSize","email","PhoneIcon","mobileNumber","address","street","city","_Fragment","Divider","state","postcode","country","emergencyContact","name","relationship","phone","role","replace","contractType","CalendarIcon","workingRights","hourlyRate","annualSalary","taxFileNumber","slice","superannuationFund","bankAccountName","bankBSB","bankAccountNumber","qualifications","length","Wrap","map","qual","index","WrapItem","Tag","certifications","cert","notes","whiteSpace","createdAt","updatedAt"],"sourceRoot":""}