{"version":3,"file":"static/js/4002.daee1d62.chunk.js","mappings":"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","sources":["pages/projects/new.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Box,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    Container,\n    FormControl,\n    FormLabel,\n    Heading,\n    Input,\n    Select,\n    Stack,\n    Textarea,\n    useToast,\n    VStack,\n    HStack,\n    Text,\n    Tooltip,\n    IconButton,\n} from \"@chakra-ui/react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\nimport projectsModuleConfig from \"./moduleConfig\";\nimport { Project, ProjectTask, ProjectInput } from \"../../generated/graphql\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// Query to get all clients for the dropdown\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n    }\n  }\n`;\n\n// Mutation to create a new project\nconst CREATE_PROJECT = gql`\n  mutation CreateProject($input: ProjectInput!) {\n    createProject(input: $input) {\n      id\n      projectName\n      projectGoal\n      projectDescription\n      billingClient {\n        id\n        fName\n        lName\n        email\n      }\n      members {\n        id\n      }\n      tasks {\n        id\n        description\n        status\n        assignedTo {\n          id\n        }\n        media {\n          url\n          description\n        }\n        billed\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n// GraphQL mutations for AI improvement\nconst IMPROVE_DESCRIPTION = gql`\n  mutation ImproveDescription($text: String!, $context: String) {\n    improveDescription(text: $text, context: $context)\n  }\n`;\n\nconst IMPROVE_TAGLINE = gql`\n  mutation ImproveTagline($text: String!, $context: String) {\n    improveTagline(text: $text, context: $context)\n  }\n`;\n\ninterface FormData {\n    projectName: string;\n    projectGoal: string;\n    projectDescription: string;\n    clientId: string;\n}\n\nconst NewProject = () => {\n    usePageTitle(\"New Project\");\n    const [searchParams] = useSearchParams();\n    const clientId = searchParams.get(\"clientId\");\n\n    // Modify initial form data to include clientId from URL\n    const initialFormData: FormData = {\n        projectName: \"\",\n        projectGoal: \"\",\n        projectDescription: \"\",\n        clientId: clientId || \"\", // Pre-select client if ID exists\n    };\n\n    const [formData, setFormData] = useState<FormData>(initialFormData);\n    const navigate = useNavigate();\n    const toast = useToast();\n\n    // AI improvement state\n    const [isImprovingProjectName, setIsImprovingProjectName] = useState(false);\n    const [isImprovingProjectGoal, setIsImprovingProjectGoal] = useState(false);\n    const [isImprovingProjectDescription, setIsImprovingProjectDescription] = useState(false);\n\n    // Consistent styling from brandConfig\n    const bg = getColor(\"background.main\");\n    const cardGradientBg = getColor(\"background.cardGradient\");\n    const cardBorder = getColor(\"border.darkCard\");\n    const textPrimary = getColor(\"text.primaryDark\");\n    const textSecondary = getColor(\"text.secondaryDark\");\n    const textMuted = getColor(\"text.mutedDark\");\n\n    // Get clients for dropdown\n    const { data: clientsData, loading: clientsLoading } = useQuery(GET_CLIENTS);\n\n    // AI improvement mutations\n    const [improveDescriptionMutation] = useMutation(IMPROVE_DESCRIPTION);\n    const [improveTaglineMutation] = useMutation(IMPROVE_TAGLINE);\n\n    // Create project mutation\n    const [createProject, { loading: createLoading }] = useMutation(CREATE_PROJECT, {\n        onCompleted: (data) => {\n            console.log(\"Mutation completed successfully:\", data);\n            toast({\n                title: \"Project Created\",\n                description: \"New project has been created successfully\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n            navigate(`/project/${data.createProject.id}`);\n        },\n        onError: (error) => {\n            console.error(\"Detailed mutation error:\", {\n                message: error.message,\n                graphQLErrors: error.graphQLErrors,\n                networkError: error.networkError,\n                extraInfo: error.extraInfo,\n                clientErrors: error.clientErrors\n            });\n\n            // More user-friendly error message\n            const errorMessage = error.graphQLErrors?.[0]?.extensions?.validationErrors\n                ? JSON.stringify(error.graphQLErrors[0].extensions.validationErrors, null, 2)\n                : error.message;\n\n            toast({\n                title: \"Error creating project\",\n                description: errorMessage,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        },\n    });\n\n    // Add useEffect to set client when data loads\n    useEffect(() => {\n        if (clientId && clientsData?.clients) {\n            setFormData(prev => ({\n                ...prev,\n                clientId: clientId\n            }));\n        }\n    }, [clientId, clientsData]);\n\n    const handleChange = (\n        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>\n    ) => {\n        const { name, value } = e.target;\n        setFormData((prev) => ({\n            ...prev,\n            [name]: value,\n        }));\n    };\n\n    // Helper function to clean AI responses\n    const cleanAIResponse = (text: string): string => {\n        // Remove surrounding quotes if present\n        let cleaned = text.trim();\n        if ((cleaned.startsWith('\"') && cleaned.endsWith('\"')) || \n            (cleaned.startsWith(\"'\") && cleaned.endsWith(\"'\"))) {\n            cleaned = cleaned.slice(1, -1);\n        }\n        \n        // Remove any preamble text like \"Here is the improved...\"\n        const patterns = [\n            /^Here is the improved [^:]*:\\s*/i,\n            /^Improved [^:]*:\\s*/i,\n            /^The improved [^:]*:\\s*/i\n        ];\n        \n        for (const pattern of patterns) {\n            cleaned = cleaned.replace(pattern, '');\n        }\n        \n        return cleaned.trim();\n    };\n\n    // Generate AI contexts\n    const getProjectNameContext = (value: string) => {\n        return `Please improve this project name to be more professional, clear, and descriptive while keeping the core intent. Make it suitable for business project documentation. Return ONLY the improved project name without any preamble, explanation, or quotes. Original name: \"${value}\"`;\n    };\n\n    const getProjectGoalContext = (value: string) => {\n        const projectName = formData.projectName ? ` for the project \"${formData.projectName}\"` : '';\n        return `Please create a single, concise project goal${projectName} in maximum 17 words. Make it clear, specific, and actionable. Focus on the main objective. Return ONLY the improved goal without any preamble, explanation, or quotes. Original goal: \"${value}\"`;\n    };\n\n    const getProjectDescriptionContext = (value: string) => {\n        return `Please create a concise, professional project description in one paragraph with maximum 70 words. The description should be clear and explain what the project is about, its purpose, and what it aims to achieve. Make it suitable for business documentation. DO NOT include the project name or title in the description - just provide the descriptive content. Return ONLY the improved description without any preamble, explanation, quotes, or project name. Original input: \"${value}\"`;\n    };\n\n    // AI improvement handlers\n    const handleImproveProjectName = async () => {\n        const value = formData.projectName;\n        if (!value.trim()) {\n            toast({\n                title: \"No text to improve\",\n                description: \"Please enter a project name first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsImprovingProjectName(true);\n        try {\n            const context = getProjectNameContext(value);\n            const { data } = await improveDescriptionMutation({\n                variables: { text: value, context }\n            });\n            if (data?.improveDescription) {\n                setFormData(prev => ({ ...prev, projectName: cleanAIResponse(data.improveDescription) }));\n                toast({\n                    title: \"✨ Project name improved!\",\n                    description: \"Claude has enhanced your project name\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving project name:', error);\n            toast({\n                title: \"Improvement failed\",\n                description: error instanceof Error ? error.message : \"Failed to improve project name. Please try again.\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsImprovingProjectName(false);\n        }\n    };\n\n    const handleImproveProjectDescription = async () => {\n        const value = formData.projectDescription;\n        if (!value.trim()) {\n            toast({\n                title: \"No text to improve\",\n                description: \"Please enter a project description first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsImprovingProjectDescription(true);\n        try {\n            const context = getProjectDescriptionContext(value);\n            const { data } = await improveDescriptionMutation({\n                variables: { text: value, context }\n            });\n            if (data?.improveDescription) {\n                setFormData(prev => ({ ...prev, projectDescription: cleanAIResponse(data.improveDescription) }));\n                toast({\n                    title: \"✨ Project description improved!\",\n                    description: \"Claude has enhanced your project description\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving project description:', error);\n            toast({\n                title: \"Improvement failed\",\n                description: error instanceof Error ? error.message : \"Failed to improve project description. Please try again.\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsImprovingProjectDescription(false);\n        }\n    };\n\n    const handleImproveProjectGoal = async () => {\n        const value = formData.projectGoal;\n        if (!value.trim()) {\n            toast({\n                title: \"No text to improve\",\n                description: \"Please enter a project goal first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsImprovingProjectGoal(true);\n        try {\n            const context = getProjectGoalContext(value);\n            const { data } = await improveDescriptionMutation({\n                variables: { text: value, context }\n            });\n            if (data?.improveDescription) {\n                setFormData(prev => ({ ...prev, projectGoal: cleanAIResponse(data.improveDescription) }));\n                toast({\n                    title: \"✨ Project goal improved!\",\n                    description: \"Claude has enhanced your project goal\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving project goal:', error);\n            toast({\n                title: \"Improvement failed\",\n                description: error instanceof Error ? error.message : \"Failed to improve project goal. Please try again.\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsImprovingProjectGoal(false);\n        }\n    };\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (!formData.clientId) {\n            toast({\n                title: \"Error\",\n                description: \"Please select a client\",\n                status: \"error\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        // Enhanced logging before submission\n        console.log(\"=== Project Submission ===\");\n        console.log(\"Form Data:\", {\n            raw: formData,\n            processed: {\n                projectName: formData.projectName,\n                projectGoal: formData.projectGoal,\n                projectDescription: formData.projectDescription,\n                billingClient: formData.clientId,\n            }\n        });\n\n        try {\n            const mutationInput = {\n                projectName: formData.projectName,\n                projectGoal: formData.projectGoal,\n                projectDescription: formData.projectDescription,\n                billingClient: formData.clientId,\n            };\n\n            console.log(\"Mutation Input:\", mutationInput);\n\n            const response = await createProject({\n                variables: {\n                    input: mutationInput\n                },\n            });\n\n            console.log(\"Mutation Response:\", response);\n\n        } catch (error: any) {\n            console.error(\"Error creating project:\", {\n                error,\n                formData,\n                errorType: error.constructor.name,\n                errorStack: error.stack\n            });\n        }\n    };\n\n    return (\n        <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n            <Container maxW=\"container.md\" py={12} flex=\"1\">\n                <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"xl\"\n                    overflow=\"hidden\"\n                >\n                    <CardHeader borderBottom=\"1px\" borderColor={cardBorder}>\n                        <VStack align=\"start\" spacing={2}>\n                            <Heading\n                                size=\"lg\"\n                                color={textPrimary}\n                                fontFamily={brandConfig.fonts.heading}\n                                fontWeight=\"600\"\n                            >\n                                📁 Create New Project\n                            </Heading>\n                        </VStack>\n                    </CardHeader>\n\n                    <CardBody p={8}>\n                        <form onSubmit={handleSubmit}>\n                            <Stack spacing={6}>\n                                <FormControl isRequired>\n                                    <FormLabel\n                                        color={textPrimary}\n                                        fontWeight=\"500\"\n                                        fontSize=\"sm\"\n                                        mb={2}\n                                    >\n                                        Client\n                                    </FormLabel>\n                                    <Stack direction=\"row\" spacing={4}>\n                                        <Select\n                                            name=\"clientId\"\n                                            value={formData.clientId}\n                                            onChange={handleChange}\n                                            placeholder=\"Select client\"\n                                            isDisabled={clientsLoading}\n                                            bg=\"rgba(0, 0, 0, 0.2)\"\n                                            border=\"1px\"\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            borderRadius=\"lg\"\n                                            _placeholder={{ color: textMuted }}\n                                            _focus={{\n                                                borderColor: textSecondary,\n                                                boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                                                outline: \"none\"\n                                            }}\n                                            _hover={{\n                                                borderColor: textSecondary\n                                            }}\n                                            size=\"lg\"\n                                            fontFamily={brandConfig.fonts.body}\n                                            flex=\"1\"\n                                        >\n                                            {clientsData?.clients?.map((client: any) => (\n                                                <option key={client.id} value={client.id} style={{ backgroundColor: '#1a1a1a' }}>\n                                                    {client.fName} {client.lName} ({client.email})\n                                                </option>\n                                            ))}\n                                        </Select>\n                                        <Button\n                                            bg=\"white\"\n                                            color=\"black\"\n                                            _hover={{ \n                                                bg: \"gray.100\",\n                                                transform: \"translateY(-2px)\"\n                                            }}\n                                            onClick={() => navigate(\"/newclient\")}\n                                            size=\"lg\"\n                                            flexShrink={0}\n                                            boxShadow=\"0 2px 4px rgba(255, 255, 255, 0.1)\"\n                                        >\n                                            New Client\n                                        </Button>\n                                    </Stack>\n                                </FormControl>\n\n                                <FormControl isRequired>\n                                    <HStack justify=\"space-between\" align=\"center\" mb={2}>\n                                        <FormLabel\n                                            color={textPrimary}\n                                            fontWeight=\"500\"\n                                            fontSize=\"sm\"\n                                            mb={0}\n                                        >\n                                            Project Name\n                                        </FormLabel>\n                                        <HStack spacing={2}>\n                                            <Tooltip \n                                                label={\n                                                    <Box p={2} maxW=\"500px\">\n                                                        <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                        <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                            {getProjectNameContext(formData.projectName || \"[your text here]\")}\n                                                        </Text>\n                                                    </Box>\n                                                }\n                                                placement=\"top\"\n                                                hasArrow\n                                                bg=\"gray.700\"\n                                                color=\"white\"\n                                            >\n                                                <Button\n                                                    size=\"sm\"\n                                                    variant=\"outline\"\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                    bg=\"rgba(0, 0, 0, 0.2)\"\n                                                    _hover={{\n                                                        borderColor: textSecondary,\n                                                        bg: \"rgba(255, 255, 255, 0.05)\"\n                                                    }}\n                                                    isDisabled={!formData.projectName.trim()}\n                                                    isLoading={isImprovingProjectName}\n                                                    onClick={handleImproveProjectName}\n                                                    leftIcon={<Text>✨</Text>}\n                                                >\n                                                    AI Improve\n                                                </Button>\n                                            </Tooltip>\n                                            <IconButton\n                                                aria-label=\"Copy AI context\"\n                                                icon={<Text>📋</Text>}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                isDisabled={!formData.projectName.trim()}\n                                                onClick={() => {\n                                                    if (formData.projectName.trim()) {\n                                                        navigator.clipboard.writeText(getProjectNameContext(formData.projectName));\n                                                        toast({\n                                                            title: \"AI context copied!\",\n                                                            description: \"The project name context has been copied to your clipboard\",\n                                                            status: \"success\",\n                                                            duration: 2000,\n                                                        });\n                                                    }\n                                                }}\n                                                title=\"Copy AI context to clipboard\"\n                                            />\n                                        </HStack>\n                                    </HStack>\n                                    <Input\n                                        name=\"projectName\"\n                                        value={formData.projectName}\n                                        onChange={handleChange}\n                                        placeholder=\"Enter project name\"\n                                        bg=\"rgba(0, 0, 0, 0.2)\"\n                                        border=\"1px\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        borderRadius=\"lg\"\n                                        _placeholder={{ color: textMuted }}\n                                        _focus={{\n                                            borderColor: textSecondary,\n                                            boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                                            outline: \"none\"\n                                        }}\n                                        _hover={{\n                                            borderColor: textSecondary\n                                        }}\n                                        size=\"lg\"\n                                        fontFamily={brandConfig.fonts.body}\n                                    />\n                                </FormControl>\n\n                                <FormControl isRequired>\n                                    <HStack justify=\"space-between\" align=\"center\" mb={2}>\n                                        <FormLabel\n                                            color={textPrimary}\n                                            fontWeight=\"500\"\n                                            fontSize=\"sm\"\n                                            mb={0}\n                                        >\n                                            Project Goal\n                                        </FormLabel>\n                                        <HStack spacing={2}>\n                                            <Tooltip \n                                                label={\n                                                    <Box p={2} maxW=\"500px\">\n                                                        <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                        <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                            {getProjectGoalContext(formData.projectGoal || \"[your text here]\")}\n                                                        </Text>\n                                                    </Box>\n                                                }\n                                                placement=\"top\"\n                                                hasArrow\n                                                bg=\"gray.700\"\n                                                color=\"white\"\n                                            >\n                                                <Button\n                                                    size=\"sm\"\n                                                    variant=\"outline\"\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                    bg=\"rgba(0, 0, 0, 0.2)\"\n                                                    _hover={{\n                                                        borderColor: textSecondary,\n                                                        bg: \"rgba(255, 255, 255, 0.05)\"\n                                                    }}\n                                                    isDisabled={!formData.projectGoal.trim()}\n                                                    isLoading={isImprovingProjectGoal}\n                                                    onClick={handleImproveProjectGoal}\n                                                    leftIcon={<Text>✨</Text>}\n                                                >\n                                                    AI Improve\n                                                </Button>\n                                            </Tooltip>\n                                            <IconButton\n                                                aria-label=\"Copy AI context\"\n                                                icon={<Text>📋</Text>}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                isDisabled={!formData.projectGoal.trim()}\n                                                onClick={() => {\n                                                    if (formData.projectGoal.trim()) {\n                                                        navigator.clipboard.writeText(getProjectGoalContext(formData.projectGoal));\n                                                        toast({\n                                                            title: \"AI context copied!\",\n                                                            description: \"The project goal context has been copied to your clipboard\",\n                                                            status: \"success\",\n                                                            duration: 2000,\n                                                        });\n                                                    }\n                                                }}\n                                                title=\"Copy AI context to clipboard\"\n                                            />\n                                        </HStack>\n                                    </HStack>\n                                    <Textarea\n                                        name=\"projectGoal\"\n                                        value={formData.projectGoal}\n                                        onChange={handleChange}\n                                        placeholder=\"Enter a concise project goal (max 17 words)...\"\n                                        rows={2}\n                                        bg=\"rgba(0, 0, 0, 0.2)\"\n                                        border=\"1px\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        borderRadius=\"lg\"\n                                        _placeholder={{ color: textMuted }}\n                                        _focus={{\n                                            borderColor: textSecondary,\n                                            boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                                            outline: \"none\"\n                                        }}\n                                        _hover={{\n                                            borderColor: textSecondary\n                                        }}\n                                        fontFamily={brandConfig.fonts.body}\n                                    />\n                                </FormControl>\n\n                                <FormControl>\n                                    <HStack justify=\"space-between\" align=\"center\" mb={2}>\n                                        <FormLabel\n                                            color={textPrimary}\n                                            fontWeight=\"500\"\n                                            fontSize=\"sm\"\n                                            mb={0}\n                                        >\n                                            Project Description\n                                        </FormLabel>\n                                        <HStack spacing={2}>\n                                            <Tooltip \n                                                label={\n                                                    <Box p={2} maxW=\"600px\">\n                                                        <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                        <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                            {getProjectDescriptionContext(formData.projectDescription || \"[your text here]\")}\n                                                        </Text>\n                                                    </Box>\n                                                }\n                                                placement=\"top\"\n                                                hasArrow\n                                                bg=\"gray.700\"\n                                                color=\"white\"\n                                            >\n                                                <Button\n                                                    size=\"sm\"\n                                                    variant=\"outline\"\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                    bg=\"rgba(0, 0, 0, 0.2)\"\n                                                    _hover={{\n                                                        borderColor: textSecondary,\n                                                        bg: \"rgba(255, 255, 255, 0.05)\"\n                                                    }}\n                                                    isDisabled={!formData.projectDescription.trim()}\n                                                    isLoading={isImprovingProjectDescription}\n                                                    onClick={handleImproveProjectDescription}\n                                                    leftIcon={<Text>✨</Text>}\n                                                >\n                                                    AI Improve\n                                                </Button>\n                                            </Tooltip>\n                                            <IconButton\n                                                aria-label=\"Copy AI context\"\n                                                icon={<Text>📋</Text>}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                isDisabled={!formData.projectDescription.trim()}\n                                                onClick={() => {\n                                                    if (formData.projectDescription.trim()) {\n                                                        navigator.clipboard.writeText(getProjectDescriptionContext(formData.projectDescription));\n                                                        toast({\n                                                            title: \"AI context copied!\",\n                                                            description: \"The project description context has been copied to your clipboard\",\n                                                            status: \"success\",\n                                                            duration: 2000,\n                                                        });\n                                                    }\n                                                }}\n                                                title=\"Copy AI context to clipboard\"\n                                            />\n                                        </HStack>\n                                    </HStack>\n                                    <Textarea\n                                        name=\"projectDescription\"\n                                        value={formData.projectDescription}\n                                        onChange={handleChange}\n                                        placeholder=\"Provide a brief description of what this project involves (max 70 words)...\"\n                                        rows={4}\n                                        bg=\"rgba(0, 0, 0, 0.2)\"\n                                        border=\"1px\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        borderRadius=\"lg\"\n                                        _placeholder={{ color: textMuted }}\n                                        _focus={{\n                                            borderColor: textSecondary,\n                                            boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                                            outline: \"none\"\n                                        }}\n                                        _hover={{\n                                            borderColor: textSecondary\n                                        }}\n                                        fontFamily={brandConfig.fonts.body}\n                                    />\n                                </FormControl>\n\n                                <Button\n                                    type=\"submit\"\n                                    bg=\"white\"\n                                    color=\"black\"\n                                    _hover={{ \n                                        bg: \"gray.100\",\n                                        transform: \"translateY(-2px)\"\n                                    }}\n                                    _active={{ transform: \"translateY(1px)\" }}\n                                    isLoading={createLoading}\n                                    size=\"lg\"\n                                    width=\"full\"\n                                    borderRadius=\"lg\"\n                                    fontWeight=\"600\"\n                                    boxShadow=\"0 2px 4px rgba(255, 255, 255, 0.1)\"\n                                    fontFamily={brandConfig.fonts.body}\n                                >\n                                    Create Project\n                                </Button>\n                            </Stack>\n                        </form>\n                    </CardBody>\n                </Card>\n            </Container>\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default NewProject; "],"names":["GET_CLIENTS","gql","_templateObject","_taggedTemplateLiteral","CREATE_PROJECT","_templateObject2","IMPROVE_DESCRIPTION","_templateObject3","IMPROVE_TAGLINE","_templateObject4","NewProject","_clientsData$clients","usePageTitle","searchParams","useSearchParams","clientId","get","initialFormData","projectName","projectGoal","projectDescription","formData","setFormData","useState","navigate","useNavigate","toast","useToast","isImprovingProjectName","setIsImprovingProjectName","isImprovingProjectGoal","setIsImprovingProjectGoal","isImprovingProjectDescription","setIsImprovingProjectDescription","bg","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","data","clientsData","loading","clientsLoading","useQuery","improveDescriptionMutation","useMutation","improveTaglineMutation","createProject","createLoading","onCompleted","console","log","title","description","status","duration","isClosable","concat","id","onError","error","_error$graphQLErrors","_error$graphQLErrors$","_error$graphQLErrors$2","message","graphQLErrors","networkError","extraInfo","clientErrors","errorMessage","extensions","validationErrors","JSON","stringify","useEffect","clients","prev","_objectSpread","handleChange","e","name","value","target","cleanAIResponse","text","cleaned","trim","startsWith","endsWith","slice","patterns","pattern","replace","getProjectNameContext","getProjectGoalContext","getProjectDescriptionContext","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","projectsModuleConfig","Container","maxW","py","flex","Card","backdropFilter","boxShadow","border","borderColor","borderRadius","overflow","CardHeader","borderBottom","VStack","align","spacing","Heading","size","color","fontFamily","brandConfig","fonts","heading","fontWeight","CardBody","p","onSubmit","async","preventDefault","raw","processed","billingClient","mutationInput","response","variables","input","errorType","constructor","errorStack","stack","Stack","FormControl","isRequired","FormLabel","fontSize","mb","direction","Select","onChange","placeholder","isDisabled","_placeholder","_focus","outline","_hover","body","map","client","style","backgroundColor","fName","lName","email","Button","transform","onClick","flexShrink","HStack","justify","Tooltip","label","Text","whiteSpace","placement","hasArrow","variant","isLoading","context","improveDescription","Error","leftIcon","IconButton","icon","navigator","clipboard","writeText","Input","Textarea","rows","type","_active","width","FooterWithFourColumns"],"sourceRoot":""}