{"version":3,"file":"static/js/3091.cb1bc6de.chunk.js","mappings":"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","sources":["pages/clients/ClientDetails.tsx"],"sourcesContent":["import React from \"react\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Container,\n  Card,\n  CardHeader,\n  CardBody,\n  Heading,\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Text,\n  useToast,\n  HStack,\n  Box,\n  Grid,\n  Badge,\n  Link,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  Tooltip,\n  Code,\n  VStack,\n  Divider,\n  IconButton,\n  Skeleton,\n  SimpleGrid,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { AddIcon, ExternalLinkIcon, CopyIcon, InfoIcon, EditIcon, ViewIcon } from \"@chakra-ui/icons\";\nimport { FiShoppingCart, FiGlobe, FiPackage, FiDollarSign, FiCalendar, FiFileText } from \"react-icons/fi\";\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport clientsModuleConfig from \"./moduleConfig\";\n\ninterface FormData {\n  fName: string;\n  lName: string;\n  email: string;\n  phoneNumber: string;\n}\n\nconst GET_CLIENT = gql`\n  query GetClient($id: ID!) {\n    client(id: $id) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst UPDATE_CLIENT = gql`\n  mutation UpdateClient($id: ID!, $input: UpdateClientInput!) {\n    updateClient(id: $id, input: $input) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n    }\n  }\n`;\n\nconst GET_WEBSITES_BY_CLIENT = gql`\n  query GetWebsitesByClient($clientId: ID!) {\n    websitesByClient(clientId: $clientId) {\n      id\n      name\n      domain\n      websiteUrl\n      clientId\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_PRODUCTS_BY_CLIENT = gql`\n  query GetProductsByClient($clientId: ID!) {\n    productsByClient(clientId: $clientId) {\n      id\n      name\n      description\n      price\n      status\n      createdAt\n    }\n  }\n`;\n\nexport default function ClientDetails() {\n  usePageTitle(\"Client Details\");\n  const { id } = useParams<{ id: string }>();\n  const toast = useToast();\n  const navigate = useNavigate();\n  const { colorMode } = useColorMode();\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [formData, setFormData] = React.useState<FormData>({\n    fName: \"\",\n    lName: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n  });\n\n  // Brand-specific colors from brandConfig with theme support\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const accentBlue = colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\";\n  const accentHover = colorMode === 'light' ? \"#0051D0\" : \"#2563EB\";\n\n  const { loading, error, data } = useQuery(GET_CLIENT, {\n    variables: { id },\n    onCompleted: (data) => {\n      setFormData({\n        fName: data.client.fName || \"\",\n        lName: data.client.lName || \"\",\n        email: data.client.email || \"\",\n        phoneNumber: data.client.phoneNumber || \"\",\n      });\n    },\n  });\n\n  const { data: websitesData, loading: websitesLoading } = useQuery(GET_WEBSITES_BY_CLIENT, {\n    variables: { clientId: id },\n  });\n\n  const { data: productsData, loading: productsLoading } = useQuery(GET_PRODUCTS_BY_CLIENT, {\n    variables: { clientId: id },\n    skip: !id,\n  });\n\n  const [updateClient, { loading: updateLoading }] = useMutation(\n    UPDATE_CLIENT,\n    {\n      onCompleted: () => {\n        toast({\n          title: \"Success\",\n          description: \"Client information updated successfully\",\n          status: \"success\",\n          duration: 5000,\n        });\n        setIsEditing(false);\n      },\n      onError: (error) => {\n        toast({\n          title: \"Error\",\n          description: error.message,\n          status: \"error\",\n          duration: 5000,\n        });\n      },\n    }\n  );\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Only include fields that have values\n    const updateInput: any = {};\n    if (formData.fName && formData.fName.trim()) updateInput.fName = formData.fName.trim();\n    if (formData.lName && formData.lName.trim()) updateInput.lName = formData.lName.trim();\n    if (formData.email && formData.email.trim()) updateInput.email = formData.email.trim();\n    if (formData.phoneNumber && formData.phoneNumber.trim()) updateInput.phoneNumber = formData.phoneNumber.trim();\n\n    updateClient({\n      variables: {\n        id,\n        input: updateInput,\n      },\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleCopyId = async (clientId: string) => {\n    try {\n      await navigator.clipboard.writeText(clientId);\n      toast({\n        title: \"ID Copied\",\n        description: \"Client ID has been copied to clipboard\",\n        status: \"success\",\n        duration: 2000,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy ID\",\n        status: \"error\",\n        duration: 3000,\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\">\n        <NavbarWithCallToAction />\n        <Container maxW=\"6xl\" py={12}>\n          <Skeleton height=\"400px\" borderRadius=\"lg\" />\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (error || !data?.client) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\">\n        <NavbarWithCallToAction />\n        <Container maxW=\"6xl\" py={12}>\n          <Alert status=\"error\">\n            <AlertIcon />\n            <AlertTitle>Error!</AlertTitle>\n            <AlertDescription>\n              {error?.message || \"Client not found\"}\n            </AlertDescription>\n          </Alert>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const client = data.client;\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={clientsModuleConfig} />\n      <Container maxW=\"100%\" py={4} px={{ base: 4, md: 8 }} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Main Client Card */}\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            borderRadius=\"lg\"\n            border=\"1px\"\n            borderColor={cardBorder}\n          >\n            <CardHeader>\n              <HStack justify=\"space-between\">\n                <VStack align=\"start\" spacing={1}>\n                  <Heading size=\"lg\" color={textPrimary}>Client Details</Heading>\n                  <Text fontSize=\"sm\" color={textMuted}>\n                    Manage client information and related services\n                  </Text>\n                </VStack>\n                {isEditing ? (\n                  <HStack spacing={2}>\n                    <Button\n                      onClick={() => setIsEditing(false)}\n                      variant=\"ghost\"\n                      color={textPrimary}\n                      _hover={{ bg: colorMode === 'light' ? \"rgba(0, 0, 0, 0.05)\" : \"rgba(255, 255, 255, 0.05)\" }}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleSubmit}\n                      isLoading={updateLoading}\n                      bg={accentBlue}\n                      color=\"white\"\n                      _hover={{ bg: accentHover }}\n                    >\n                      Save Changes\n                    </Button>\n                  </HStack>\n                ) : (\n                  <Button\n                    onClick={() => setIsEditing(true)}\n                    leftIcon={<EditIcon />}\n                    variant=\"outline\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{\n                      bg: colorMode === 'light' ? \"rgba(0, 122, 255, 0.05)\" : \"rgba(59, 130, 246, 0.1)\",\n                      borderColor: accentBlue\n                    }}\n                  >\n                    Edit Client\n                  </Button>\n                )}\n              </HStack>\n            </CardHeader>\n            <CardBody>\n              <Stack spacing={6}>\n                {/* Client ID Section with Tooltip */}\n                <Box>\n                  <HStack mb={2}>\n                    <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>\n                      Client/Practitioner ID\n                    </Text>\n                    <Tooltip \n                      label=\"This unique ID identifies the client in the system. It also serves as their Practitioner ID when they provide services to other clients.\"\n                      hasArrow\n                      placement=\"top\"\n                    >\n                      <InfoIcon boxSize={3} color={textMuted} />\n                    </Tooltip>\n                  </HStack>\n                  <HStack\n                    spacing={2}\n                    p={3}\n                    bg={colorMode === 'light' ? \"rgba(0, 0, 0, 0.05)\" : \"rgba(0, 0, 0, 0.2)\"}\n                    borderRadius=\"md\"\n                    cursor=\"pointer\"\n                    onClick={() => handleCopyId(client.id)}\n                    _hover={{\n                      bg: colorMode === 'light' ? \"rgba(0, 122, 255, 0.1)\" : \"rgba(59, 130, 246, 0.1)\"\n                    }}\n                    transition=\"all 0.2s\"\n                  >\n                    <Code \n                      fontSize=\"sm\" \n                      bg=\"transparent\" \n                      color={textPrimary}\n                      wordBreak=\"break-all\"\n                    >\n                      {client.id}\n                    </Code>\n                    <IconButton\n                      aria-label=\"Copy ID\"\n                      icon={<CopyIcon />}\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      color={textMuted}\n                      _hover={{ color: textPrimary }}\n                    />\n                  </HStack>\n                </Box>\n\n                <Divider borderColor={cardBorder} />\n\n                {/* Basic Information Form */}\n                <form onSubmit={handleSubmit}>\n                  <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={6}>\n                    <FormControl>\n                      <FormLabel color={textSecondary} fontSize=\"sm\">\n                        First Name\n                      </FormLabel>\n                      <Input\n                        name=\"fName\"\n                        value={formData.fName}\n                        onChange={handleInputChange}\n                        isReadOnly={!isEditing}\n                        bg={isEditing\n                          ? (colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\")\n                          : \"transparent\"}\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _hover={{ borderColor: isEditing ? accentBlue : cardBorder }}\n                        _focus={{\n                          borderColor: accentBlue,\n                          boxShadow: `0 0 0 1px ${accentBlue}`\n                        }}\n                      />\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textSecondary} fontSize=\"sm\">\n                        Last Name\n                      </FormLabel>\n                      <Input\n                        name=\"lName\"\n                        value={formData.lName}\n                        onChange={handleInputChange}\n                        isReadOnly={!isEditing}\n                        bg={isEditing\n                          ? (colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\")\n                          : \"transparent\"}\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _hover={{ borderColor: isEditing ? accentBlue : cardBorder }}\n                        _focus={{\n                          borderColor: accentBlue,\n                          boxShadow: `0 0 0 1px ${accentBlue}`\n                        }}\n                      />\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textSecondary} fontSize=\"sm\">\n                        Email Address\n                      </FormLabel>\n                      <Input\n                        name=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        isReadOnly={!isEditing}\n                        bg={isEditing\n                          ? (colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\")\n                          : \"transparent\"}\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _hover={{ borderColor: isEditing ? accentBlue : cardBorder }}\n                        _focus={{\n                          borderColor: accentBlue,\n                          boxShadow: `0 0 0 1px ${accentBlue}`\n                        }}\n                      />\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textSecondary} fontSize=\"sm\">\n                        Phone Number\n                      </FormLabel>\n                      <Input\n                        name=\"phoneNumber\"\n                        value={formData.phoneNumber}\n                        onChange={handleInputChange}\n                        isReadOnly={!isEditing}\n                        bg={isEditing\n                          ? (colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\")\n                          : \"transparent\"}\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _hover={{ borderColor: isEditing ? accentBlue : cardBorder }}\n                        _focus={{\n                          borderColor: accentBlue,\n                          boxShadow: `0 0 0 1px ${accentBlue}`\n                        }}\n                      />\n                    </FormControl>\n                  </Grid>\n                </form>\n              </Stack>\n            </CardBody>\n          </Card>\n\n          {/* Related Services Section */}\n          <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>\n            {/* Products Section */}\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              borderRadius=\"lg\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <CardHeader>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1}>\n                    <HStack>\n                      <FiPackage color={textPrimary} />\n                      <Heading size=\"md\" color={textPrimary}>Products</Heading>\n                    </HStack>\n                    <Tooltip \n                      label=\"View and manage products created by this client for sale on the platform\"\n                      hasArrow\n                    >\n                      <Text fontSize=\"xs\" color={textMuted} cursor=\"help\">\n                        Client's product catalog\n                      </Text>\n                    </Tooltip>\n                  </VStack>\n                  <Button\n                    size=\"sm\"\n                    leftIcon={<AddIcon />}\n                    bg={accentBlue}\n                    color=\"white\"\n                    _hover={{ bg: accentHover }}\n                    onClick={() => navigate(`/products/new?clientId=${id}`)}\n                  >\n                    New Product\n                  </Button>\n                </HStack>\n              </CardHeader>\n              <CardBody>\n                {productsLoading ? (\n                  <VStack spacing={3}>\n                    <Skeleton height=\"60px\" width=\"100%\" />\n                    <Skeleton height=\"60px\" width=\"100%\" />\n                  </VStack>\n                ) : productsData?.productsByClient?.length > 0 ? (\n                  <VStack spacing={3} align=\"stretch\">\n                    {productsData.productsByClient.slice(0, 3).map((product: any) => (\n                      <Box\n                        key={product.id}\n                        p={3}\n                        bg=\"rgba(0, 0, 0, 0.2)\"\n                        borderRadius=\"md\"\n                        cursor=\"pointer\"\n                        onClick={() => navigate(`/products/${product.id}`)}\n                        _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n                        transition=\"all 0.2s\"\n                      >\n                        <HStack justify=\"space-between\">\n                          <VStack align=\"start\" spacing={0}>\n                            <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\">\n                              {product.name}\n                            </Text>\n                            <Text fontSize=\"xs\" color={textMuted}>\n                              ${product.price}\n                            </Text>\n                          </VStack>\n                          <Badge colorScheme={product.status === 'ACTIVE' ? 'green' : 'gray'}>\n                            {product.status}\n                          </Badge>\n                        </HStack>\n                      </Box>\n                    ))}\n                    {productsData.productsByClient.length > 3 && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        color={textSecondary}\n                        onClick={() => navigate(`/products?clientId=${id}`)}\n                      >\n                        View all {productsData.productsByClient.length} products\n                      </Button>\n                    )}\n                  </VStack>\n                ) : (\n                  <Text fontSize=\"sm\" color={textMuted}>\n                    No products created yet\n                  </Text>\n                )}\n              </CardBody>\n            </Card>\n\n            {/* Websites Section */}\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              borderRadius=\"lg\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <CardHeader>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1}>\n                    <HStack>\n                      <FiGlobe color={textPrimary} />\n                      <Heading size=\"md\" color={textPrimary}>Websites</Heading>\n                    </HStack>\n                    <Tooltip \n                      label=\"Manage websites owned by this client including domains and hosting\"\n                      hasArrow\n                    >\n                      <Text fontSize=\"xs\" color={textMuted} cursor=\"help\">\n                        Client's web properties\n                      </Text>\n                    </Tooltip>\n                  </VStack>\n                  <Button\n                    size=\"sm\"\n                    leftIcon={<AddIcon />}\n                    bg={accentBlue}\n                    color=\"white\"\n                    _hover={{ bg: accentHover }}\n                    onClick={() => navigate(`/websites/new?clientId=${id}`)}\n                  >\n                    New Website\n                  </Button>\n                </HStack>\n              </CardHeader>\n              <CardBody>\n                {websitesLoading ? (\n                  <VStack spacing={3}>\n                    <Skeleton height=\"60px\" width=\"100%\" />\n                    <Skeleton height=\"60px\" width=\"100%\" />\n                  </VStack>\n                ) : websitesData?.websitesByClient?.length > 0 ? (\n                  <VStack spacing={3} align=\"stretch\">\n                    {websitesData.websitesByClient.slice(0, 3).map((website: any) => (\n                      <Box\n                        key={website.id}\n                        p={3}\n                        bg=\"rgba(0, 0, 0, 0.2)\"\n                        borderRadius=\"md\"\n                        cursor=\"pointer\"\n                        onClick={() => navigate(`/websites/${website.id}`)}\n                        _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n                        transition=\"all 0.2s\"\n                      >\n                        <HStack justify=\"space-between\">\n                          <VStack align=\"start\" spacing={0}>\n                            <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\">\n                              {website.name}\n                            </Text>\n                            <Text fontSize=\"xs\" color={textMuted}>\n                              {website.domain || \"No domain\"}\n                            </Text>\n                          </VStack>\n                          <IconButton\n                            aria-label=\"View website\"\n                            icon={<ExternalLinkIcon />}\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            color={textMuted}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              if (website.websiteUrl) {\n                                window.open(website.websiteUrl, '_blank');\n                              }\n                            }}\n                          />\n                        </HStack>\n                      </Box>\n                    ))}\n                    {websitesData.websitesByClient.length > 3 && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        color={textSecondary}\n                        onClick={() => navigate(`/websites?clientId=${id}`)}\n                      >\n                        View all {websitesData.websitesByClient.length} websites\n                      </Button>\n                    )}\n                  </VStack>\n                ) : (\n                  <Text fontSize=\"sm\" color={textMuted}>\n                    No websites created yet\n                  </Text>\n                )}\n              </CardBody>\n            </Card>\n          </SimpleGrid>\n\n          {/* Additional Services Row */}\n          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>\n            {/* Bills Section */}\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              borderRadius=\"lg\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <CardBody>\n                <VStack spacing={3} align=\"stretch\">\n                  <HStack>\n                    <FiDollarSign color={textPrimary} />\n                    <Text fontWeight=\"medium\" color={textPrimary}>Bills & Invoices</Text>\n                  </HStack>\n                  <Tooltip label=\"View all bills and invoices for this client\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      borderColor={cardBorder}\n                      color={textSecondary}\n                      _hover={{ bg: \"rgba(59, 130, 246, 0.1)\", borderColor: accentBlue }}\n                      onClick={() => navigate(`/bills?clientId=${id}`)}\n                    >\n                      View Bills\n                    </Button>\n                  </Tooltip>\n                </VStack>\n              </CardBody>\n            </Card>\n\n            {/* Sessions Section */}\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              borderRadius=\"lg\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <CardBody>\n                <VStack spacing={3} align=\"stretch\">\n                  <HStack>\n                    <FiCalendar color={textPrimary} />\n                    <Text fontWeight=\"medium\" color={textPrimary}>Sessions</Text>\n                  </HStack>\n                  <Tooltip label=\"View all sessions and appointments for this client\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      borderColor={cardBorder}\n                      color={textSecondary}\n                      _hover={{ bg: \"rgba(59, 130, 246, 0.1)\", borderColor: accentBlue }}\n                      onClick={() => navigate(`/sessions?clientId=${id}`)}\n                    >\n                      View Sessions\n                    </Button>\n                  </Tooltip>\n                </VStack>\n              </CardBody>\n            </Card>\n\n            {/* Projects Section */}\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              borderRadius=\"lg\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <CardBody>\n                <VStack spacing={3} align=\"stretch\">\n                  <HStack>\n                    <FiFileText color={textPrimary} />\n                    <Text fontWeight=\"medium\" color={textPrimary}>Projects</Text>\n                  </HStack>\n                  <Tooltip label=\"View all projects for this client\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      borderColor={cardBorder}\n                      color={textSecondary}\n                      _hover={{ bg: \"rgba(59, 130, 246, 0.1)\", borderColor: accentBlue }}\n                      onClick={() => navigate(`/projects?clientId=${id}`)}\n                    >\n                      View Projects\n                    </Button>\n                  </Tooltip>\n                </VStack>\n              </CardBody>\n            </Card>\n          </SimpleGrid>\n        </VStack>\n      </Container>\n      <FooterWithFourColumns />\n    </Box>\n  );\n}"],"names":["GET_CLIENT","gql","_templateObject","_taggedTemplateLiteral","UPDATE_CLIENT","_templateObject2","GET_WEBSITES_BY_CLIENT","_templateObject3","GET_PRODUCTS_BY_CLIENT","_templateObject4","ClientDetails","_productsData$product","_websitesData$website","usePageTitle","id","useParams","toast","useToast","navigate","useNavigate","colorMode","useColorMode","isEditing","setIsEditing","React","formData","setFormData","fName","lName","email","phoneNumber","bg","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","accentBlue","accentHover","loading","error","data","useQuery","variables","onCompleted","client","websitesData","websitesLoading","clientId","productsData","productsLoading","skip","updateClient","updateLoading","useMutation","title","description","status","duration","onError","message","handleSubmit","e","preventDefault","updateInput","trim","input","handleInputChange","_objectSpread","target","name","value","_jsxs","Box","minHeight","children","_jsx","NavbarWithCallToAction","Container","maxW","py","Skeleton","height","borderRadius","FooterWithFourColumns","Alert","AlertIcon","AlertTitle","AlertDescription","display","flexDirection","ModuleBreadcrumb","moduleConfig","clientsModuleConfig","px","base","md","flex","VStack","spacing","align","Card","backdropFilter","boxShadow","border","borderColor","CardHeader","HStack","justify","Heading","size","color","Text","fontSize","Button","onClick","variant","_hover","isLoading","leftIcon","EditIcon","CardBody","Stack","mb","fontWeight","Tooltip","label","hasArrow","placement","InfoIcon","boxSize","p","cursor","async","navigator","clipboard","writeText","handleCopyId","transition","Code","wordBreak","IconButton","icon","CopyIcon","Divider","onSubmit","Grid","templateColumns","gap","FormControl","FormLabel","Input","onChange","isReadOnly","_focus","concat","type","SimpleGrid","columns","FiPackage","AddIcon","width","productsByClient","length","slice","map","product","price","Badge","colorScheme","FiGlobe","websitesByClient","website","domain","ExternalLinkIcon","stopPropagation","websiteUrl","window","open","FiDollarSign","FiCalendar","FiFileText"],"sourceRoot":""}