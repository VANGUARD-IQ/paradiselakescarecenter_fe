{"version":3,"file":"static/js/8031.735d1abf.chunk.js","mappings":"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","sources":["pages/youtubetoipfs/EditVideoDetails.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Input,\n  Textarea,\n  Switch,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Card,\n  CardBody,\n  CardHeader,\n  useToast,\n  Badge,\n  Divider,\n  IconButton,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  WrapItem,\n  InputGroup,\n  InputRightElement,\n  Alert,\n  AlertIcon,\n  Spinner,\n  Center,\n  Select,\n  Tooltip\n} from '@chakra-ui/react';\nimport {\n  FiArrowLeft,\n  FiSave,\n  FiEye,\n  FiCopy,\n  FiShare2,\n  FiTrash2,\n  FiGlobe,\n  FiLock,\n  FiPlus,\n  FiExternalLink,\n  FiShield\n} from 'react-icons/fi';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport youtubeToIPFSModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst GET_VIDEO = gql`\n  query IPFSVideo($id: String!) {\n    ipfsVideo(id: $id) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      source\n      fileSize\n      mimeType\n      uploadedBy\n      uploadedByName\n      tags\n      viewCount\n      isPublic\n      isPrivateFile\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_VIDEO_BY_HASH = gql`\n  query IPFSVideoByHash($ipfsHash: String!) {\n    ipfsVideoByHash(ipfsHash: $ipfsHash) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      source\n      fileSize\n      mimeType\n      uploadedBy\n      uploadedByName\n      tags\n      viewCount\n      isPublic\n      isPrivateFile\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst UPDATE_VIDEO = gql`\n  mutation UpdateIPFSVideo($id: String!, $input: IPFSVideoInput!) {\n    updateIPFSVideo(id: $id, input: $input) {\n      id\n      title\n      description\n      tags\n      isPublic\n      isPrivateFile\n      ipfsUrl\n    }\n  }\n`;\n\nconst DELETE_VIDEO = gql`\n  mutation DeleteIPFSVideo($id: String!) {\n    deleteIPFSVideo(id: $id)\n  }\n`;\n\n// Sharing mutations - commented out until backend supports sharing\n// const SHARE_VIDEO = gql`\n//   mutation ShareIPFSVideo($videoId: String!, $userId: String!, $permission: String!) {\n//     shareIPFSVideo(videoId: $videoId, userId: $userId, permission: $permission) {\n//       id\n//       sharedWith {\n//         userId\n//         userName\n//         permission\n//         sharedAt\n//       }\n//     }\n//   }\n// `;\n\n// const UNSHARE_VIDEO = gql`\n//   mutation UnshareIPFSVideo($videoId: String!, $userId: String!) {\n//     unshareIPFSVideo(videoId: $videoId, userId: $userId) {\n//       id\n//       sharedWith {\n//         userId\n//         userName\n//         permission\n//         sharedAt\n//       }\n//     }\n//   }\n// `;\n\nconst EditVideoDetails: React.FC = () => {\n  usePageTitle(\"Edit Video Details\");\n  const navigate = useNavigate();\n  const { id } = useParams<{ id: string }>();\n  const toast = useToast();\n  const bg = getColor(\"background.main\");\n  const cardGradientBg = getColor(\"background.cardGradient\");\n  const cardBorder = getColor(\"border.darkCard\");\n  const textColor = \"white\";\n  const mutedTextColor = \"gray.300\";\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [tags, setTags] = useState<string[]>([]);\n  const [newTag, setNewTag] = useState('');\n  const [isPublic, setIsPublic] = useState(false);\n  const [isPrivateFile, setIsPrivateFile] = useState(false);\n  // const [shareEmail, setShareEmail] = useState('');\n  // const [sharePermission, setSharePermission] = useState('view');\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Check if id is IPFS hash (starts with Qm or baf) or database ID\n  const isIPFSHash = id?.startsWith('Qm') || id?.startsWith('baf');\n\n  const { data, loading, error } = useQuery(\n    isIPFSHash ? GET_VIDEO_BY_HASH : GET_VIDEO,\n    {\n      variables: isIPFSHash ? { ipfsHash: id } : { id },\n      skip: !id,\n      onCompleted: (data) => {\n        const video = data?.ipfsVideo || data?.ipfsVideoByHash;\n        if (video) {\n          setTitle(video.title || '');\n          setDescription(video.description || '');\n          setTags(video.tags || []);\n          setIsPublic(video.isPublic || false);\n          setIsPrivateFile(video.isPrivateFile || false);\n        }\n      }\n    }\n  );\n\n  const [updateVideo] = useMutation(UPDATE_VIDEO, {\n    onCompleted: () => {\n      toast({\n        title: 'Video updated successfully',\n        status: 'success',\n        duration: 3000,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to update video',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  });\n\n  const [deleteVideo] = useMutation(DELETE_VIDEO, {\n    onCompleted: () => {\n      toast({\n        title: 'Video deleted successfully',\n        status: 'success',\n        duration: 3000,\n      });\n      navigate('/youtubetoipfs');\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to delete video',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n      setIsDeleting(false);\n    }\n  });\n\n  // Sharing mutations - commented out until backend supports sharing\n  // const [shareVideo] = useMutation(SHARE_VIDEO, {\n  //   refetchQueries: [{ query: GET_VIDEO, variables: { id } }],\n  //   onCompleted: () => {\n  //     toast({\n  //       title: 'Video shared successfully',\n  //       status: 'success',\n  //       duration: 3000,\n  //     });\n  //     setShareEmail('');\n  //   },\n  //   onError: (error) => {\n  //     toast({\n  //       title: 'Failed to share video',\n  //       description: error.message,\n  //       status: 'error',\n  //       duration: 5000,\n  //     });\n  //   }\n  // });\n\n  // const [unshareVideo] = useMutation(UNSHARE_VIDEO, {\n  //   refetchQueries: [{ query: GET_VIDEO, variables: { id } }],\n  //   onCompleted: () => {\n  //     toast({\n  //       title: 'Access removed successfully',\n  //       status: 'success',\n  //       duration: 3000,\n  //     });\n  //   },\n  //   onError: (error) => {\n  //     toast({\n  //       title: 'Failed to remove access',\n  //       description: error.message,\n  //       status: 'error',\n  //       duration: 5000,\n  //     });\n  //   }\n  // });\n\n  const handleSave = async () => {\n    const videoData = data?.ipfsVideo || data?.ipfsVideoByHash;\n    const videoId = videoData?.id; // Always use the database ID for updates\n\n    if (!videoId) {\n      toast({\n        title: 'Error: Video ID not found',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    await updateVideo({\n      variables: {\n        id: videoId,\n        input: {\n          title,\n          description,\n          tags,\n          isPublic,\n          isPrivateFile\n        }\n      }\n    });\n  };\n\n  const handleDelete = async () => {\n    if (!window.confirm('Are you sure you want to delete this video? This action cannot be undone.')) {\n      return;\n    }\n\n    const videoData = data?.ipfsVideo || data?.ipfsVideoByHash;\n    const videoId = videoData?.id; // Always use the database ID for delete\n\n    if (!videoId) {\n      toast({\n        title: 'Error: Video ID not found',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsDeleting(true);\n    await deleteVideo({ variables: { id: videoId } });\n  };\n\n  const handleAddTag = () => {\n    if (newTag && !tags.includes(newTag)) {\n      setTags([...tags, newTag]);\n      setNewTag('');\n    }\n  };\n\n  const handleRemoveTag = (tag: string) => {\n    setTags(tags.filter(t => t !== tag));\n  };\n\n  // Sharing functions - commented out until backend supports sharing\n  // const handleShare = async () => {\n  //   if (!shareEmail) {\n  //     toast({\n  //       title: 'Please enter an email or user ID',\n  //       status: 'warning',\n  //       duration: 3000,\n  //     });\n  //     return;\n  //   }\n  //   await shareVideo({\n  //     variables: {\n  //       videoId: id,\n  //       userId: shareEmail, // This could be email or userId\n  //       permission: sharePermission\n  //     }\n  //   });\n  // };\n\n  // const handleUnshare = async (userId: string) => {\n  //   await unshareVideo({\n  //     variables: {\n  //       videoId: id,\n  //       userId\n  //     }\n  //   });\n  // };\n\n  const copyShareLink = () => {\n    const shareUrl = `${window.location.origin}/youtubetoipfs/video/${data?.ipfsVideo?.ipfsHash || id}`;\n    navigator.clipboard.writeText(shareUrl);\n    toast({\n      title: 'Share link copied to clipboard',\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <Box flex=\"1\">\n          <Container maxW=\"6xl\" py={8}>\n            <Center>\n              <Spinner size=\"xl\" color={textColor} />\n            </Center>\n          </Container>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const videoData = data?.ipfsVideo || data?.ipfsVideoByHash;\n  if (error || !videoData) {\n    return (\n      <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <Box flex=\"1\">\n          <Container maxW=\"6xl\" py={8}>\n            <Center>\n              <VStack spacing={4}>\n                <Text fontSize=\"xl\" color={mutedTextColor}>\n                  Video not found or you don't have permission to edit it\n                </Text>\n                <Button onClick={() => navigate('/youtubetoipfs')}>\n                  Back to Gallery\n                </Button>\n              </VStack>\n            </Center>\n          </Container>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const video = data.ipfsVideo || data.ipfsVideoByHash;\n\n  return (\n    <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={youtubeToIPFSModuleConfig} />\n\n      <Box flex=\"1\">\n        <Container maxW=\"6xl\" py={8}>\n          <VStack spacing={6} align=\"stretch\">\n            {/* Header */}\n            <HStack justify=\"space-between\">\n              <Button\n                leftIcon={<FiArrowLeft />}\n                variant=\"ghost\"\n                onClick={() => navigate(`/youtubetoipfs/video/${id}`)}\n              >\n                Back to Video\n              </Button>\n              <HStack>\n                <Button\n                  leftIcon={<FiEye />}\n                  variant=\"outline\"\n                  onClick={() => window.open(`/youtubetoipfs/video/${video.id}`, '_blank')}\n                >\n                  View Public Page\n                </Button>\n                <Button\n                  leftIcon={<FiSave />}\n                  colorScheme=\"blue\"\n                  onClick={handleSave}\n                >\n                  Save Changes\n                </Button>\n              </HStack>\n            </HStack>\n\n            {/* Basic Details */}\n            <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n              <CardHeader>\n                <Heading size=\"md\" color={textColor}>Basic Details</Heading>\n              </CardHeader>\n              <CardBody>\n                <VStack spacing={4} align=\"stretch\">\n                  <FormControl>\n                    <FormLabel color={textColor}>Title</FormLabel>\n                    <Input\n                      value={title}\n                      onChange={(e) => setTitle(e.target.value)}\n                      placeholder=\"Enter video title\"\n                      bg=\"whiteAlpha.100\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      color={textColor}\n                      _placeholder={{ color: mutedTextColor }}\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={textColor}>Description</FormLabel>\n                    <Textarea\n                      value={description}\n                      onChange={(e) => setDescription(e.target.value)}\n                      placeholder=\"Enter video description\"\n                      bg=\"whiteAlpha.100\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      color={textColor}\n                      _placeholder={{ color: mutedTextColor }}\n                      rows={4}\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={textColor}>Tags</FormLabel>\n                    <Wrap mb={2}>\n                      {tags.map((tag) => (\n                        <WrapItem key={tag}>\n                          <Tag size=\"md\" colorScheme=\"blue\">\n                            <TagLabel>{tag}</TagLabel>\n                            <TagCloseButton onClick={() => handleRemoveTag(tag)} />\n                          </Tag>\n                        </WrapItem>\n                      ))}\n                    </Wrap>\n                    <InputGroup>\n                      <Input\n                        value={newTag}\n                        onChange={(e) => setNewTag(e.target.value)}\n                        onKeyPress={(e) => e.key === 'Enter' && handleAddTag()}\n                        placeholder=\"Add a tag\"\n                        bg=\"whiteAlpha.100\"\n                        border=\"1px solid\"\n                        borderColor={cardBorder}\n                        color={textColor}\n                        _placeholder={{ color: mutedTextColor }}\n                      />\n                      <InputRightElement>\n                        <IconButton\n                          icon={<FiPlus />}\n                          aria-label=\"Add tag\"\n                          size=\"sm\"\n                          onClick={handleAddTag}\n                        />\n                      </InputRightElement>\n                    </InputGroup>\n                  </FormControl>\n                </VStack>\n              </CardBody>\n            </Card>\n\n            {/* Privacy Settings */}\n            <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n              <CardHeader>\n                <Heading size=\"md\" color={textColor}>Privacy Settings</Heading>\n              </CardHeader>\n              <CardBody>\n                <VStack spacing={4} align=\"stretch\">\n                  <FormControl>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <FormLabel htmlFor=\"public-switch\" mb=\"0\" color={textColor}>\n                        <HStack>\n                          {isPublic ? <FiGlobe /> : <FiLock />}\n                          <Text>Make video public</Text>\n                        </HStack>\n                      </FormLabel>\n                      <Switch\n                        id=\"public-switch\"\n                        isChecked={isPublic}\n                        onChange={(e) => setIsPublic(e.target.checked)}\n                        colorScheme=\"green\"\n                      />\n                    </Box>\n                    <FormHelperText color={mutedTextColor} mt={2}>\n                      {isPublic\n                        ? \"Anyone with the link can view this video without logging in.\"\n                        : \"Only you and people you share with can view this video.\"\n                      }\n                    </FormHelperText>\n                  </FormControl>\n\n                  <Divider borderColor={cardBorder} />\n\n                  <FormControl>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <FormLabel htmlFor=\"private-file-switch\" mb=\"0\" color={textColor}>\n                        <HStack>\n                          <FiShield />\n                          <Text>Private Pinata File</Text>\n                        </HStack>\n                      </FormLabel>\n                      <Switch\n                        id=\"private-file-switch\"\n                        isChecked={isPrivateFile}\n                        onChange={(e) => setIsPrivateFile(e.target.checked)}\n                        colorScheme=\"orange\"\n                      />\n                    </Box>\n                    <FormHelperText color={mutedTextColor} mt={2}>\n                      {isPrivateFile\n                        ? \"This video is stored as a private file on Pinata and uses authenticated gateway access.\"\n                        : \"This video is stored as a public file on Pinata and can be accessed via any IPFS gateway.\"\n                      }\n                    </FormHelperText>\n                  </FormControl>\n\n                  <Divider borderColor={cardBorder} />\n\n                  {/* Share Link */}\n                  <Box>\n                    <Text fontWeight=\"bold\" mb={2} color={textColor}>Share Link</Text>\n                    <InputGroup>\n                      <Input\n                        value={`${window.location.origin}/youtubetoipfs/video/${video.ipfsHash || id}`}\n                        isReadOnly\n                        bg=\"whiteAlpha.100\"\n                        border=\"1px solid\"\n                        borderColor={cardBorder}\n                        color={textColor}\n                      />\n                      <InputRightElement width=\"4.5rem\">\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={copyShareLink}>\n                          <FiCopy />\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                    {isPublic && (\n                      <Alert status=\"info\" mt={2} bg=\"blue.900\" border=\"1px solid\" borderColor=\"blue.700\">\n                        <AlertIcon />\n                        <Text fontSize=\"sm\">This link can be shared publicly. Anyone can view the video.</Text>\n                      </Alert>\n                    )}\n                  </Box>\n                </VStack>\n              </CardBody>\n            </Card>\n\n            {/* Sharing with Specific Users - Hidden until backend supports it */}\n            {/* Will be implemented when backend supports sharing functionality */}\n\n            {/* Danger Zone */}\n            <Card bg=\"red.900\" border=\"1px solid\" borderColor=\"red.700\">\n              <CardHeader>\n                <Heading size=\"md\" color={textColor}>Danger Zone</Heading>\n              </CardHeader>\n              <CardBody>\n                <VStack align=\"stretch\" spacing={4}>\n                  <Text color={mutedTextColor}>\n                    Once you delete a video, there is no going back. The video will be removed from our database,\n                    but the IPFS content may still exist on the network.\n                  </Text>\n                  <Button\n                    leftIcon={<FiTrash2 />}\n                    colorScheme=\"red\"\n                    variant=\"outline\"\n                    onClick={handleDelete}\n                    isLoading={isDeleting}\n                    loadingText=\"Deleting...\"\n                  >\n                    Delete Video Permanently\n                  </Button>\n                </VStack>\n              </CardBody>\n            </Card>\n          </VStack>\n        </Container>\n      </Box>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default EditVideoDetails;"],"names":["GET_VIDEO","gql","_templateObject","_taggedTemplateLiteral","GET_VIDEO_BY_HASH","_templateObject2","UPDATE_VIDEO","_templateObject3","DELETE_VIDEO","_templateObject4","EditVideoDetails","usePageTitle","navigate","useNavigate","id","useParams","toast","useToast","bg","getColor","cardGradientBg","cardBorder","textColor","mutedTextColor","title","setTitle","useState","description","setDescription","tags","setTags","newTag","setNewTag","isPublic","setIsPublic","isPrivateFile","setIsPrivateFile","isDeleting","setIsDeleting","isIPFSHash","startsWith","data","loading","error","useQuery","variables","ipfsHash","skip","onCompleted","video","ipfsVideo","ipfsVideoByHash","updateVideo","useMutation","status","duration","onError","message","deleteVideo","handleAddTag","includes","_jsxs","Box","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","flex","Container","maxW","py","Center","Spinner","size","color","FooterWithFourColumns","videoData","VStack","spacing","Text","fontSize","Button","onClick","ModuleBreadcrumb","moduleConfig","youtubeToIPFSModuleConfig","align","HStack","justify","leftIcon","FiArrowLeft","variant","concat","FiEye","window","open","FiSave","colorScheme","async","videoId","input","Card","border","borderColor","CardHeader","Heading","CardBody","FormControl","FormLabel","Input","value","onChange","e","target","placeholder","_placeholder","Textarea","rows","Wrap","mb","map","tag","WrapItem","Tag","TagLabel","TagCloseButton","filter","t","handleRemoveTag","InputGroup","onKeyPress","key","InputRightElement","IconButton","icon","FiPlus","alignItems","htmlFor","FiGlobe","FiLock","Switch","isChecked","checked","FormHelperText","mt","Divider","FiShield","fontWeight","location","origin","isReadOnly","width","h","copyShareLink","_data$ipfsVideo","shareUrl","navigator","clipboard","writeText","FiCopy","Alert","AlertIcon","FiTrash2","confirm","isLoading","loadingText"],"sourceRoot":""}