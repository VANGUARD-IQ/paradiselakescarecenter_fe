{"version":3,"file":"static/js/5959.69cbc077.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/Unlock.mjs","pages/passwords/PasswordPermissions.tsx"],"sourcesContent":["import { createIcon } from '@chakra-ui/react';\n\nconst UnlockIcon = createIcon({\n  d: \"M19.5,9.5h-.75V6.75A6.751,6.751,0,0,0,5.533,4.811a1.25,1.25,0,1,0,2.395.717A4.251,4.251,0,0,1,16.25,6.75V9a.5.5,0,0,1-.5.5H4.5a2,2,0,0,0-2,2V22a2,2,0,0,0,2,2h15a2,2,0,0,0,2-2V11.5A2,2,0,0,0,19.5,9.5Zm-9.5,6a2,2,0,1,1,3,1.723V19.5a1,1,0,0,1-2,0V17.223A1.994,1.994,0,0,1,10,15.5Z\",\n  displayName: \"UnlockIcon\"\n});\n\nexport { UnlockIcon };\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    Card,\n    CardBody,\n    VStack,\n    HStack,\n    Button,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Badge,\n    Switch,\n    useToast,\n    Avatar,\n    Input,\n    InputGroup,\n    InputLeftElement,\n    Select,\n    SimpleGrid,\n    Stat,\n    StatLabel,\n    StatNumber,\n    StatHelpText,\n    Icon,\n    Divider,\n    Alert,\n    AlertIcon,\n    AlertTitle,\n    AlertDescription,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalCloseButton,\n    useDisclosure,\n    Checkbox,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport { SearchIcon, LockIcon, UnlockIcon } from \"@chakra-ui/icons\";\nimport { FaUserShield, FaUserCog, FaUserLock, FaHistory, FaShieldAlt, FaUser, FaUsers, FaKey } from \"react-icons/fa\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport passwordsModuleConfig from \"./moduleConfig\";\nimport { format } from \"date-fns\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { Client, ClientPermission } from \"../../generated/graphql\";\n\n// GraphQL Queries and Mutations\nconst GET_CLIENTS_WITH_PERMISSIONS = gql`\n    query GetClientsWithPermissions {\n        clients {\n            id\n            fName\n            lName\n            email\n            phoneNumber\n            permissions\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\nconst UPDATE_CLIENT_PERMISSIONS = gql`\n    mutation UpdateClient($id: ID!, $input: ClientInput!) {\n        updateClient(id: $id, input: $input) {\n            id\n            permissions\n        }\n    }\n`;\n\n\nconst PasswordPermissions: React.FC = () => {\n    usePageTitle(\"Password Permissions\");\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [filterRole, setFilterRole] = useState<string>(\"all\");\n    const [selectedClients, setSelectedClients] = useState<string[]>([]);\n    const { isOpen: isBulkModalOpen, onOpen: onBulkModalOpen, onClose: onBulkModalClose } = useDisclosure();\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const bgCard = getColor(\"background.cardGradient\", colorMode);\n    const borderCard = getColor(\"border.darkCard\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n    const primaryHover = getColor(\"primaryHover\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const successGreen = getColor(\"successGreen\", colorMode);\n    const errorRed = getColor(\"status.error\", colorMode);\n    const warningYellow = getColor(\"status.warning\", colorMode);\n    const infoBlue = getColor(\"status.info\", colorMode);\n\n    // Queries\n    const { data: clientsData, loading: clientsLoading, refetch: refetchClients } = useQuery(GET_CLIENTS_WITH_PERMISSIONS);\n\n    // Mutations\n    const [updatePermissions] = useMutation(UPDATE_CLIENT_PERMISSIONS, {\n        onCompleted: () => {\n            toast({\n                title: \"Permissions updated\",\n                description: \"Client permissions have been successfully updated.\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n            refetchClients();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error updating permissions\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    // Calculate stats\n    const stats = React.useMemo(() => {\n        if (!clientsData?.clients) return { total: 0, admins: 0, users: 0 };\n        \n        const clients = clientsData.clients;\n        return {\n            total: clients.length,\n            admins: clients.filter((c: Client) => c.permissions?.includes(ClientPermission.PasswordAdmin)).length,\n            users: clients.filter((c: Client) => c.permissions?.includes(ClientPermission.PasswordUser)).length,\n        };\n    }, [clientsData]);\n\n    // Filter clients based on role and search\n    const filteredClients = React.useMemo(() => {\n        if (!clientsData?.clients) return [];\n        \n        let filtered = [...clientsData.clients];\n        \n        // Filter by role\n        if (filterRole === \"admin\") {\n            filtered = filtered.filter(c => c.permissions?.includes(\"PASSWORD_ADMIN\"));\n        } else if (filterRole === \"user\") {\n            filtered = filtered.filter(c => c.permissions?.includes(\"PASSWORD_USER\") && !c.permissions?.includes(\"PASSWORD_ADMIN\"));\n        } else if (filterRole === \"none\") {\n            filtered = filtered.filter(c => !c.permissions?.includes(\"PASSWORD_ADMIN\") && !c.permissions?.includes(\"PASSWORD_USER\"));\n        }\n        \n        // Filter by search term\n        if (searchTerm) {\n            const search = searchTerm.toLowerCase();\n            filtered = filtered.filter(c =>\n                c.fName?.toLowerCase().includes(search) ||\n                c.lName?.toLowerCase().includes(search) ||\n                c.email?.toLowerCase().includes(search) ||\n                c.phoneNumber?.includes(search)\n            );\n        }\n        \n        return filtered;\n    }, [clientsData, filterRole, searchTerm]);\n\n    const handlePermissionToggle = async (clientId: string, permission: string, currentHasPermission: boolean) => {\n        const client = clientsData?.clients.find((c: Client) => c.id === clientId);\n        if (!client) return;\n\n        let newPermissions = [...(client.permissions || [])];\n        \n        if (currentHasPermission) {\n            // Remove permission\n            newPermissions = newPermissions.filter(p => p !== permission);\n        } else {\n            // Add permission\n            if (!newPermissions.includes(permission)) {\n                newPermissions.push(permission);\n            }\n        }\n\n        await updatePermissions({\n            variables: {\n                id: clientId,\n                input: {\n                    permissions: newPermissions\n                }\n            }\n        });\n    };\n\n    const handleBulkUpdate = async (permission: string, grant: boolean) => {\n        if (selectedClients.length === 0) {\n            toast({\n                title: \"No clients selected\",\n                description: \"Please select at least one client to update.\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        // Update each selected client\n        for (const clientId of selectedClients) {\n            const client = clientsData?.clients.find((c: Client) => c.id === clientId);\n            if (!client) continue;\n\n            let newPermissions = [...(client.permissions || [])];\n            \n            if (grant) {\n                if (!newPermissions.includes(permission)) {\n                    newPermissions.push(permission);\n                }\n            } else {\n                newPermissions = newPermissions.filter(p => p !== permission);\n            }\n\n            await updatePermissions({\n                variables: {\n                    id: clientId,\n                    input: {\n                        permissions: newPermissions\n                    }\n                }\n            });\n        }\n\n        toast({\n            title: \"Bulk update completed\",\n            description: `Updated ${selectedClients.length} users`,\n            status: \"success\",\n            duration: 3000,\n            isClosable: true,\n        });\n        \n        setSelectedClients([]);\n        onBulkModalClose();\n    };\n\n    const getRoleBadge = (permissions: string[]) => {\n        if (!permissions) return <Badge colorScheme=\"gray\" fontSize=\"xs\">None</Badge>;\n        \n        if (permissions.includes(\"PASSWORD_ADMIN\")) {\n            return <Badge colorScheme=\"purple\" fontSize=\"xs\">Admin</Badge>;\n        } else if (permissions.includes(\"PASSWORD_USER\")) {\n            return <Badge colorScheme=\"blue\" fontSize=\"xs\">User</Badge>;\n        }\n        return <Badge colorScheme=\"gray\" fontSize=\"xs\">None</Badge>;\n    };\n\n    const selectAll = () => {\n        setSelectedClients(filteredClients.map(c => c.id));\n    };\n\n    const deselectAll = () => {\n        setSelectedClients([]);\n    };\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n\n            <Container maxW=\"container.xl\" py={8}>\n                <VStack spacing={8} align=\"stretch\">\n                    {/* Header */}\n                    <Box>\n                        <HStack justify=\"space-between\" mb={4}>\n                            <VStack align=\"start\" spacing={1}>\n                                <Heading \n                                    size=\"xl\" \n                                    color={textPrimary}\n                                    fontFamily={brandConfig.fonts.heading}\n                                >\n                                    <Icon as={FaUserShield} mr={3} />\n                                    Password Permissions\n                                </Heading>\n                                <Text color={textSecondary}>\n                                    Manage who can issue and view passwords\n                                </Text>\n                            </VStack>\n                            {selectedClients.length > 0 && (\n                                <Button\n                                    colorScheme=\"blue\"\n                                    size=\"lg\"\n                                    onClick={onBulkModalOpen}\n                                    leftIcon={<Icon as={FaUserCog} />}\n                                >\n                                    Bulk Update ({selectedClients.length})\n                                </Button>\n                            )}\n                        </HStack>\n                    </Box>\n\n                    {/* Statistics */}\n                    <SimpleGrid columns={{ base: 1, md: 4 }} spacing={6}>\n                        <Card bg={bgCard} borderColor={borderCard} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Total Users</StatLabel>\n                                    <StatNumber color={textPrimary}>\n                                        {stats.total}\n                                    </StatNumber>\n                                    <StatHelpText color={textSecondary}>\n                                        <Icon as={FaUser} mr={1} />\n                                        All registered users\n                                    </StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n\n                        <Card bg={bgCard} borderColor={borderCard} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Password Admins</StatLabel>\n                                    <StatNumber color={primaryColor}>\n                                        {stats.admins}\n                                    </StatNumber>\n                                    <StatHelpText color={textSecondary}>\n                                        <Icon as={FaShieldAlt} mr={1} />\n                                        Can issue passwords\n                                    </StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n\n                        <Card bg={bgCard} borderColor={borderCard} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Password Users</StatLabel>\n                                    <StatNumber color={infoBlue}>\n                                        {stats.users}\n                                    </StatNumber>\n                                    <StatHelpText color={textSecondary}>\n                                        <Icon as={FaKey} mr={1} />\n                                        Can view passwords\n                                    </StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n\n                        <Card bg={bgCard} borderColor={borderCard} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>No Access</StatLabel>\n                                    <StatNumber color={warningYellow}>\n                                        {stats.total - stats.admins - stats.users}\n                                    </StatNumber>\n                                    <StatHelpText color={textSecondary}>\n                                        <Icon as={FaUsers} mr={1} />\n                                        Need permissions\n                                    </StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                    </SimpleGrid>\n\n                    {/* Tabs for Permission Management */}\n                    <Card bg={bgCard} borderColor={borderCard} borderWidth=\"1px\">\n                        <CardBody>\n                            <Tabs colorScheme=\"blue\">\n                                <TabList>\n                                    <Tab color={textPrimary}>User Permissions</Tab>\n                                    <Tab color={textPrimary}>Role Definitions</Tab>\n                                </TabList>\n\n                                <TabPanels>\n                                    {/* User Permissions Tab */}\n                                    <TabPanel>\n                                        {/* Search and Filter */}\n                                        <HStack spacing={4} mb={6}>\n                                            <InputGroup flex={1}>\n                                                <InputLeftElement>\n                                                    <SearchIcon color={textMuted} />\n                                                </InputLeftElement>\n                                                <Input\n                                                    placeholder=\"Search users by name or email...\"\n                                                    value={searchTerm}\n                                                    onChange={(e) => setSearchTerm(e.target.value)}\n                                                    bg={colorMode === 'light' ? 'white' : 'rgba(0, 0, 0, 0.2)'}\n                                                    border=\"1px solid\"\n                                                    borderColor={borderCard}\n                                                    color={textPrimary}\n                                                    _placeholder={{ color: textMuted }}\n                                                />\n                                            </InputGroup>\n                                            <Select\n                                                w=\"200px\"\n                                                value={filterRole}\n                                                onChange={(e) => setFilterRole(e.target.value)}\n                                                bg={colorMode === 'light' ? 'white' : 'rgba(0, 0, 0, 0.2)'}\n                                                border=\"1px solid\"\n                                                borderColor={borderCard}\n                                                color={textPrimary}\n                                            >\n                                                <option value=\"all\">All Users</option>\n                                                <option value=\"admin\">Password Admins</option>\n                                                <option value=\"user\">Password Users Only</option>\n                                                <option value=\"none\">No Permissions</option>\n                                            </Select>\n                                            {filteredClients.length > 0 && (\n                                                <HStack>\n                                                    <Button size=\"sm\" variant=\"outline\" onClick={selectAll}>\n                                                        Select All\n                                                    </Button>\n                                                    <Button size=\"sm\" variant=\"outline\" onClick={deselectAll}>\n                                                        Deselect All\n                                                    </Button>\n                                                </HStack>\n                                            )}\n                                        </HStack>\n\n                                        {/* Users Table */}\n                                        <Box overflowX=\"auto\">\n                                            <Table variant=\"simple\">\n                                                <Thead>\n                                                    <Tr>\n                                                        <Th color={textMuted}>Select</Th>\n                                                        <Th color={textMuted}>User</Th>\n                                                        <Th color={textMuted}>Contact</Th>\n                                                        <Th color={textMuted}>Current Role</Th>\n                                                        <Th color={textMuted}>Password Admin</Th>\n                                                        <Th color={textMuted}>Password User</Th>\n                                                        <Th color={textMuted}>Last Updated</Th>\n                                                    </Tr>\n                                                </Thead>\n                                                <Tbody>\n                                                    {filteredClients.map((client: Client) => (\n                                                        <Tr key={client.id}>\n                                                            <Td>\n                                                                <Checkbox\n                                                                    isChecked={selectedClients.includes(client.id)}\n                                                                    onChange={(e) => {\n                                                                        if (e.target.checked) {\n                                                                            setSelectedClients([...selectedClients, client.id]);\n                                                                        } else {\n                                                                            setSelectedClients(selectedClients.filter(id => id !== client.id));\n                                                                        }\n                                                                    }}\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <HStack spacing={3}>\n                                                                    <Avatar\n                                                                        size=\"sm\"\n                                                                        name={`${client.fName} ${client.lName}`}\n                                                                        bg={primaryColor}\n                                                                    />\n                                                                    <VStack align=\"start\" spacing={0}>\n                                                                        <Text color={textPrimary} fontWeight=\"medium\">\n                                                                            {client.fName} {client.lName}\n                                                                        </Text>\n                                                                        <Text color={textMuted} fontSize=\"xs\">\n                                                                            ID: {client.id.slice(-6)}\n                                                                        </Text>\n                                                                    </VStack>\n                                                                </HStack>\n                                                            </Td>\n                                                            <Td>\n                                                                <VStack align=\"start\" spacing={0}>\n                                                                    <Text color={textSecondary} fontSize=\"sm\">\n                                                                        {client.email}\n                                                                    </Text>\n                                                                    <Text color={textMuted} fontSize=\"xs\">\n                                                                        {client.phoneNumber}\n                                                                    </Text>\n                                                                </VStack>\n                                                            </Td>\n                                                            <Td>\n                                                                {getRoleBadge(client.permissions as string[] || [])}\n                                                            </Td>\n                                                            <Td>\n                                                                <Switch\n                                                                    isChecked={client.permissions?.includes(ClientPermission.PasswordAdmin) || false}\n                                                                    onChange={() => handlePermissionToggle(\n                                                                        client.id,\n                                                                        \"PASSWORD_ADMIN\",\n                                                                        client.permissions?.includes(ClientPermission.PasswordAdmin) || false\n                                                                    )}\n                                                                    colorScheme=\"purple\"\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <Switch\n                                                                    isChecked={client.permissions?.includes(ClientPermission.PasswordUser) || false}\n                                                                    onChange={() => handlePermissionToggle(\n                                                                        client.id,\n                                                                        \"PASSWORD_USER\",\n                                                                        client.permissions?.includes(ClientPermission.PasswordUser) || false\n                                                                    )}\n                                                                    colorScheme=\"blue\"\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <Text color={textMuted} fontSize=\"xs\">\n                                                                    {format(new Date(client.updatedAt), \"MMM dd, yyyy\")}\n                                                                </Text>\n                                                            </Td>\n                                                        </Tr>\n                                                    ))}\n                                                </Tbody>\n                                            </Table>\n\n                                            {filteredClients.length === 0 && (\n                                                <Box py={8} textAlign=\"center\">\n                                                    <Text color={textMuted}>No users found matching your criteria</Text>\n                                                </Box>\n                                            )}\n                                        </Box>\n                                    </TabPanel>\n\n                                    {/* Role Definitions Tab */}\n                                    <TabPanel>\n                                        <VStack spacing={6} align=\"stretch\">\n                                            <Card bg=\"rgba(0, 0, 0, 0.2)\" borderColor={borderCard} borderWidth=\"1px\">\n                                                <CardBody>\n                                                    <HStack spacing={4} mb={4}>\n                                                        <Icon as={FaUserShield} boxSize={8} color={primaryColor} />\n                                                        <VStack align=\"start\" spacing={1} flex={1}>\n                                                            <Heading size=\"md\" color={textPrimary}>\n                                                                Password Admin\n                                                            </Heading>\n                                                            <Badge colorScheme=\"purple\">PASSWORD_ADMIN</Badge>\n                                                        </VStack>\n                                                    </HStack>\n                                                    <Text color={textSecondary} mb={4}>\n                                                        Full access to password management system with the ability to create, edit, and share passwords.\n                                                    </Text>\n                                                    <VStack align=\"start\" spacing={2}>\n                                                        <Text color={textPrimary} fontWeight=\"semibold\">Permissions:</Text>\n                                                        <VStack align=\"start\" spacing={1} pl={4}>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Create new passwords</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Edit all passwords</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Share passwords with clients</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">View access logs</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Manage permissions</Text>\n                                                            </HStack>\n                                                        </VStack>\n                                                    </VStack>\n                                                </CardBody>\n                                            </Card>\n\n                                            <Card bg=\"rgba(0, 0, 0, 0.2)\" borderColor={borderCard} borderWidth=\"1px\">\n                                                <CardBody>\n                                                    <HStack spacing={4} mb={4}>\n                                                        <Icon as={FaUserLock} boxSize={8} color={infoBlue} />\n                                                        <VStack align=\"start\" spacing={1} flex={1}>\n                                                            <Heading size=\"md\" color={textPrimary}>\n                                                                Password User\n                                                            </Heading>\n                                                            <Badge colorScheme=\"blue\">PASSWORD_USER</Badge>\n                                                        </VStack>\n                                                    </HStack>\n                                                    <Text color={textSecondary} mb={4}>\n                                                        Limited access to view passwords that have been shared with them or issued to them.\n                                                    </Text>\n                                                    <VStack align=\"start\" spacing={2}>\n                                                        <Text color={textPrimary} fontWeight=\"semibold\">Permissions:</Text>\n                                                        <VStack align=\"start\" spacing={1} pl={4}>\n                                                            <HStack>\n                                                                <Icon as={UnlockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">View passwords issued to them</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={UnlockIcon} color={successGreen} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Access shared passwords via link</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={errorRed} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Cannot create passwords</Text>\n                                                            </HStack>\n                                                            <HStack>\n                                                                <Icon as={LockIcon} color={errorRed} />\n                                                                <Text color={textSecondary} fontSize=\"sm\">Cannot edit passwords</Text>\n                                                            </HStack>\n                                                        </VStack>\n                                                    </VStack>\n                                                </CardBody>\n                                            </Card>\n                                        </VStack>\n                                    </TabPanel>\n                                </TabPanels>\n                            </Tabs>\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            {/* Bulk Update Modal */}\n            <Modal isOpen={isBulkModalOpen} onClose={onBulkModalClose} size=\"lg\">\n                <ModalOverlay />\n                <ModalContent bg={bgCard} borderColor={borderCard} borderWidth=\"1px\">\n                    <ModalHeader color={textPrimary}>Bulk Update Permissions</ModalHeader>\n                    <ModalCloseButton color={textMuted} />\n                    <ModalBody>\n                        <VStack spacing={4} align=\"stretch\">\n                            <Alert status=\"info\">\n                                <AlertIcon />\n                                <Text fontSize=\"sm\">\n                                    You have selected {selectedClients.length} user(s) to update.\n                                </Text>\n                            </Alert>\n                            \n                            <Text color={textSecondary}>\n                                Choose the permissions you want to grant or revoke for the selected users:\n                            </Text>\n\n                            <VStack spacing={3} align=\"stretch\">\n                                <Button\n                                    leftIcon={<Icon as={FaUserShield} />}\n                                    colorScheme=\"purple\"\n                                    variant=\"outline\"\n                                    onClick={() => handleBulkUpdate(\"PASSWORD_ADMIN\", true)}\n                                >\n                                    Grant Password Admin\n                                </Button>\n                                <Button\n                                    leftIcon={<Icon as={FaUserShield} />}\n                                    colorScheme=\"red\"\n                                    variant=\"outline\"\n                                    onClick={() => handleBulkUpdate(\"PASSWORD_ADMIN\", false)}\n                                >\n                                    Revoke Password Admin\n                                </Button>\n                                <Divider />\n                                <Button\n                                    leftIcon={<Icon as={FaUserLock} />}\n                                    colorScheme=\"blue\"\n                                    variant=\"outline\"\n                                    onClick={() => handleBulkUpdate(\"PASSWORD_USER\", true)}\n                                >\n                                    Grant Password User\n                                </Button>\n                                <Button\n                                    leftIcon={<Icon as={FaUserLock} />}\n                                    colorScheme=\"red\"\n                                    variant=\"outline\"\n                                    onClick={() => handleBulkUpdate(\"PASSWORD_USER\", false)}\n                                >\n                                    Revoke Password User\n                                </Button>\n                            </VStack>\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" mr={3} onClick={onBulkModalClose} color={textSecondary}>\n                            Cancel\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default PasswordPermissions;"],"names":["UnlockIcon","createIcon","d","displayName","GET_CLIENTS_WITH_PERMISSIONS","gql","_templateObject","_taggedTemplateLiteral","UPDATE_CLIENT_PERMISSIONS","_templateObject2","PasswordPermissions","usePageTitle","toast","useToast","colorMode","useColorMode","searchTerm","setSearchTerm","useState","filterRole","setFilterRole","selectedClients","setSelectedClients","isOpen","isBulkModalOpen","onOpen","onBulkModalOpen","onClose","onBulkModalClose","useDisclosure","bgMain","getColor","bgCard","borderCard","primaryColor","textPrimary","textSecondary","textMuted","successGreen","errorRed","warningYellow","infoBlue","data","clientsData","loading","clientsLoading","refetch","refetchClients","useQuery","updatePermissions","useMutation","onCompleted","title","description","status","duration","isClosable","onError","error","message","stats","React","clients","total","admins","users","length","filter","c","_c$permissions","permissions","includes","ClientPermission","PasswordAdmin","_c$permissions2","PasswordUser","filteredClients","filtered","_c$permissions3","_c$permissions4","_c$permissions5","_c$permissions6","_c$permissions7","search","toLowerCase","_c$fName","_c$lName","_c$email","_c$phoneNumber","fName","lName","email","phoneNumber","handlePermissionToggle","async","clientId","permission","currentHasPermission","client","find","id","newPermissions","p","push","variables","input","handleBulkUpdate","grant","concat","_jsxs","Box","bg","minH","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","passwordsModuleConfig","Container","maxW","py","VStack","spacing","align","HStack","justify","mb","Heading","size","color","fontFamily","brandConfig","fonts","heading","Icon","as","FaUserShield","mr","Text","Button","colorScheme","onClick","leftIcon","FaUserCog","SimpleGrid","columns","base","md","Card","borderColor","borderWidth","CardBody","Stat","StatLabel","StatNumber","StatHelpText","FaUser","FaShieldAlt","FaKey","FaUsers","Tabs","TabList","Tab","TabPanels","TabPanel","InputGroup","flex","InputLeftElement","SearchIcon","Input","placeholder","value","onChange","e","target","border","_placeholder","Select","w","variant","selectAll","map","deselectAll","overflowX","Table","Thead","Tr","Th","Tbody","_client$permissions","_client$permissions3","Td","Checkbox","isChecked","checked","Avatar","name","fontWeight","fontSize","slice","Badge","Switch","_client$permissions2","_client$permissions4","format","Date","updatedAt","textAlign","boxSize","pl","LockIcon","FaUserLock","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Alert","AlertIcon","Divider","ModalFooter","FooterWithFourColumns"],"sourceRoot":""}