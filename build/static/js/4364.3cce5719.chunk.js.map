{"version":3,"file":"static/js/4364.3cce5719.chunk.js","mappings":"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","sources":["pages/projects/TimelineView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport {\n  Box,\n  Container,\n  Heading,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Image,\n  Divider,\n  Spinner,\n  SimpleGrid,\n  Button,\n  Icon,\n  IconButton,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\";\nimport { FiClock, FiCalendar, FiChevronLeft, FiMaximize, FiPlayCircle, FiFileText } from \"react-icons/fi\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport projectsModuleConfig from \"./moduleConfig\";\nimport { format } from \"date-fns\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\n// Configure pdf.js worker for react-pdf v10 with Create React App\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { normalizeMediaUrl } from \"../../helpers\";\nimport { LoginWithSmsModal } from \"../authentication\";\nimport { ProjectTask } from \"../../generated/graphql\";\n\n// Query to get project details with tasks and their media\nconst GET_PROJECT_TIMELINE = gql`\n  query GetProjectTimeline($id: ID!) {\n    project(id: $id) {\n      id\n      projectName\n      projectGoal\n      createdAt\n      tasks {\n        id\n        description\n        status\n        order\n        createdAt\n        updatedAt\n        media {\n          url\n          description\n          fileType\n        }\n      }\n    }\n  }\n`;\n\n// Helper function to format dates\nconst formatDate = (dateString: string) => {\n  try {\n    console.log(`Attempting to format date: ${dateString}`);\n    const date = new Date(dateString);\n\n    // Check if the date is valid\n    if (isNaN(date.getTime())) {\n      console.log(`Invalid date created from: ${dateString}`);\n      return dateString;\n    }\n\n    console.log(`Parsed date: ${date.toString()}`);\n    return format(date, \"MMMM d, yyyy, h:mm a\");\n  } catch (error) {\n    console.error(`Error formatting date: ${dateString}`, error);\n    return dateString;\n  }\n};\n\n// Interface for timeline item\ninterface TimelineItem {\n  id: string;\n  type: \"task\" | \"media\";\n  taskId?: string;\n  taskDescription?: string;\n  taskStatus?: string;\n  url?: string;\n  fileType?: string;\n  description?: string;\n  createdAt: string;\n}\n\nconst TimelineView = () => {\n  usePageTitle(\"Project Timeline\");\n  const { id } = useParams<{ id: string }>();\n  const { isAuthenticated, user } = useAuth();\n  \n  // Dark glassmorphic theme colors\n  const bg = getColor(\"background.main\");\n  const cardGradientBg = getColor(\"background.cardGradient\");\n  const cardBorder = getColor(\"border.darkCard\");\n  const textPrimary = getColor(\"text.primaryDark\");\n  const textSecondary = getColor(\"text.secondaryDark\");\n  const textMuted = getColor(\"text.mutedDark\");\n  const cardBg = cardGradientBg;\n  const borderColor = cardBorder;\n\n  // For modal image/video viewing\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [selectedMedia, setSelectedMedia] = useState<{ url: string; type: string } | null>(null);\n\n  // For lazy loading\n  const [visibleItems, setVisibleItems] = useState<number>(10);\n  const loaderRef = useRef<HTMLDivElement>(null);\n  const [hasMore, setHasMore] = useState<boolean>(true);\n\n  // Timeline items state\n  const [timelineItems, setTimelineItems] = useState<TimelineItem[]>([]);\n  \n  // Login modal state\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n\n  // GraphQL query - authentication check commented out for testing\n  const { loading, error, data } = useQuery(GET_PROJECT_TIMELINE, {\n    variables: { id },\n    // skip: !isAuthenticated, // COMMENTED OUT FOR TESTING\n    onCompleted: (receivedData) => {\n      console.log(\"GraphQL query completed, data:\", receivedData);\n      if (receivedData?.project?.tasks) {\n        console.log(`Project has ${receivedData.project.tasks.length} tasks`);\n      } else {\n        console.log(\"No tasks found in the response or tasks array is empty\");\n      }\n    },\n    onError: (err) => {\n      console.error(\"GraphQL query error:\", err.message);\n    }\n  });\n\n  // Process data into chronological timeline\n  useEffect(() => {\n    if (data?.project) {\n      console.log(\"Project data received:\", data.project);\n      console.log(\"Tasks array:\", data.project.tasks);\n\n      const items: TimelineItem[] = [];\n\n      // Add tasks to timeline\n      if (Array.isArray(data.project.tasks)) {\n        data.project.tasks.forEach((task: any) => {\n          console.log(\"Processing task:\", task);\n\n          // Skip adding task creation items - we only want media/evidence\n\n          // Add task media\n          if (task && task.id && task.media && Array.isArray(task.media) && task.media.length > 0) {\n            console.log(`Task ${task.id} has ${task.media.length} media items`);\n            task.media.forEach((media: any, index: number) => {\n              if (media && media.url) {\n                items.push({\n                  id: `media-${task.id}-${index}`,\n                  type: \"media\",\n                  taskId: task.id,\n                  taskDescription: task.description || \"Unknown task\",\n                  url: media.url,\n                  fileType: media.fileType || \"image/jpeg\",\n                  description: media.description || \"\",\n                  // Media items don't have createdAt in our schema, so use task's updatedAt\n                  createdAt: task.updatedAt || task.createdAt || data.project.createdAt || new Date().toISOString(),\n                });\n              }\n            });\n          }\n        });\n      } else {\n        console.warn(\"Project tasks is not an array:\", data.project.tasks);\n      }\n\n      // Sort by date\n      items.sort((a, b) => {\n        // Safely parse dates, using current time as fallback\n        const getTime = (dateStr: string): number => {\n          try {\n            const date = new Date(dateStr);\n            return isNaN(date.getTime()) ? Date.now() : date.getTime();\n          } catch (e) {\n            return Date.now();\n          }\n        };\n\n        const dateA = getTime(a.createdAt);\n        const dateB = getTime(b.createdAt);\n        return dateB - dateA; // Most recent first\n      });\n\n      console.log(\"Final timeline items:\", items);\n\n      setTimelineItems(items);\n      setHasMore(items.length > visibleItems);\n    } else {\n      console.log(\"No project data received or project is undefined\");\n    }\n  }, [data, visibleItems]);\n\n  // Intersection observer for lazy loading\n  const observer = useRef<IntersectionObserver | null>(null);\n  const lastItemRef = useCallback((node: HTMLDivElement) => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setVisibleItems(prev => prev + 10);\n      }\n    });\n\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n\n  // Handle media click\n  const handleMediaClick = (url: string, fileType: string) => {\n    setSelectedMedia({ url, type: fileType });\n    onOpen();\n  };\n\n  // Check authentication on mount - COMMENTED OUT FOR TESTING\n  // useEffect(() => {\n  //   if (!isAuthenticated) {\n  //     setIsLoginModalOpen(true);\n  //   }\n  // }, [isAuthenticated]);\n\n  // Handle login modal close\n  const handleLoginModalClose = () => {\n    setIsLoginModalOpen(false);\n    // If user closes modal without logging in, they can't see the timeline\n    if (!isAuthenticated) {\n      // Don't redirect - let them see the login required state\n    }\n  };\n\n  // Handle successful login\n  const handleLoginSuccess = () => {\n    setIsLoginModalOpen(false);\n    // User stays on timeline page after successful login\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n        <Container maxW=\"container.xl\" py={10} flex=\"1\">\n          <VStack spacing={8} align=\"center\">\n            <Spinner size=\"xl\" color={getColor(\"primary\")} thickness=\"4px\" />\n            <Text color={textPrimary} fontFamily={brandConfig.fonts.body}>\n              Loading project timeline...\n            </Text>\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n        <Container maxW=\"container.xl\" py={10} flex=\"1\">\n          <VStack spacing={6} align=\"start\">\n            <Heading size=\"lg\" color={getColor(\"status.error\")} fontFamily={brandConfig.fonts.heading}>\n              Error Loading Timeline\n            </Heading>\n            <Text color={textSecondary} fontFamily={brandConfig.fonts.body}>\n              {error.message}\n            </Text>\n            <Button\n              as={Link}\n              to={`/project/${id}`}\n              bg={getComponent(\"button\", \"primaryBg\")}\n              color=\"white\"\n              _hover={{ bg: getComponent(\"button\", \"primaryHover\") }}\n              fontFamily={brandConfig.fonts.body}\n            >\n              <Icon as={FiChevronLeft} mr={2} />\n              Back to Project\n            </Button>\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (!data || !data.project) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n        <Container maxW=\"container.xl\" py={10} flex=\"1\">\n          <VStack spacing={6} align=\"start\">\n            <Heading size=\"lg\" color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n              Project Not Found\n            </Heading>\n            <Button\n              as={Link}\n              to=\"/projects\"\n              bg={getComponent(\"button\", \"primaryBg\")}\n              color=\"white\"\n              _hover={{ bg: getComponent(\"button\", \"primaryHover\") }}\n              fontFamily={brandConfig.fonts.body}\n            >\n              <Icon as={FiChevronLeft} mr={2} />\n              Back to Projects\n            </Button>\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  // Show authentication required state if not logged in - COMMENTED OUT FOR TESTING\n  // if (!isAuthenticated) {\n  //   return (\n  //     <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n  //       <NavbarWithCallToAction />\n  //       <Container maxW=\"container.xl\" py={10} flex=\"1\">\n  //         <VStack spacing={8} align=\"center\">\n  //           <Heading size=\"xl\" color={getColor(\"text.primary\")} fontFamily={brandConfig.fonts.heading}>\n  //             Authentication Required\n  //           </Heading>\n  //           <Text fontSize=\"lg\" color={getColor(\"text.secondary\")} fontFamily={brandConfig.fonts.body}>\n  //             Please log in to view the project timeline\n  //           </Text>\n  //           <Button\n  //             size=\"lg\"\n  //             bg={getComponent(\"button\", \"primaryBg\")}\n  //             color={getColor(\"text.inverse\")}\n  //             _hover={{ bg: getComponent(\"button\", \"primaryHover\") }}\n  //             onClick={() => setIsLoginModalOpen(true)}\n  //             fontFamily={brandConfig.fonts.body}\n  //           >\n  //             Log In to Continue\n  //           </Button>\n  //         </VStack>\n  //       </Container>\n  //       <FooterWithFourColumns />\n  //       <LoginWithSmsModal\n  //         isOpen={isLoginModalOpen}\n  //         onClose={handleLoginModalClose}\n  //         onLoginSuccess={handleLoginSuccess}\n  //       />\n  //     </Box>\n  //   );\n  // }\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n      <Container maxW=\"container.xl\" py={10} flex=\"1\">\n        <VStack spacing={8} align=\"stretch\">\n          <HStack justify=\"space-between\" wrap=\"wrap\" gap={4}>\n            <VStack align=\"start\" spacing={1}>\n              <Heading size=\"xl\" color={brandConfig.colors.text.inverse} fontFamily={brandConfig.fonts.heading}>\n                {data.project.projectName} - Evidence Timeline\n              </Heading>\n              <Text color={brandConfig.colors.text.inverse} fontFamily={brandConfig.fonts.body}>\n                Project started on {formatDate(data.project.createdAt)}\n              </Text>\n            </VStack>\n            <Button\n              as={Link}\n              to={`/project/${id}`}\n              bg={getComponent(\"button\", \"secondaryBg\")}\n              color={brandConfig.colors.text.inverse}\n              borderColor={borderColor}\n              _hover={{ \n                bg: getComponent(\"button\", \"secondaryHover\"),\n                borderColor: getColor(\"primary\")\n              }}\n              variant=\"outline\"\n              fontFamily={brandConfig.fonts.body}\n            >\n              <Icon as={FiChevronLeft} mr={2} color={brandConfig.colors.text.inverse} />\n              Back to Project\n            </Button>\n          </HStack>\n\n          <Divider borderColor={borderColor} />\n\n          <Box p={4} bg={getColor(\"status.info\")} borderRadius=\"md\" mb={6}>\n            <Text color={getColor(\"text.inverse\")} fontFamily={brandConfig.fonts.body}>\n              This timeline shows all evidence files uploaded for this project. Media uploads are displayed in chronological order. Scroll down to load more items.\n            </Text>\n          </Box>\n\n          {/* Timeline content */}\n          <VStack spacing={8} align=\"stretch\" position=\"relative\">\n            {/* Timeline line */}\n            <Box\n              position=\"absolute\"\n              left=\"24px\"\n              top={0}\n              bottom={0}\n              width=\"2px\"\n              bg={getColor(\"primary\")}\n              zIndex={1}\n            />\n\n            {timelineItems.slice(0, visibleItems).map((item, index) => (\n              <Box\n                key={item.id}\n                ref={index === visibleItems - 1 ? lastItemRef : null}\n                position=\"relative\"\n                pl={{ base: 10, md: 16 }}\n                ml={2}\n              >\n                {/* Timeline dot */}\n                <Box\n                  position=\"absolute\"\n                  left={0}\n                  top={0}\n                  width=\"12px\"\n                  height=\"12px\"\n                  borderRadius=\"full\"\n                  bg={getColor(\"secondary\")}\n                  border=\"2px solid\"\n                  borderColor={getColor(\"primary\")}\n                  zIndex={2}\n                  mt={2}\n                />\n\n                {/* Timeline content */}\n                <VStack align=\"start\" spacing={3}>\n                  {/* Date indicator */}\n                  <HStack>\n                    <Icon as={FiCalendar} color={getColor(\"text.muted\")} />\n                    <Text fontSize=\"sm\" color={getColor(\"text.muted\")} fontFamily={brandConfig.fonts.body}>\n                      {formatDate(item.createdAt)}\n                    </Text>\n                  </HStack>\n\n                  {/* Content card */}\n                  <Box\n                    bg={cardBg}\n                    borderRadius=\"md\"\n                    borderWidth=\"1px\"\n                    borderColor={borderColor}\n                    p={4}\n                    shadow=\"md\"\n                    width=\"full\"\n                  >\n                    {item.type === \"task\" ? (\n                      // Task item - should never show now\n                      <VStack align=\"start\" spacing={2}>\n                        <Badge colorScheme=\"green\" px={2} py={1}>Task Created</Badge>\n                        <Text fontSize=\"lg\" fontWeight=\"bold\" color={getColor(\"text.primary\")} fontFamily={brandConfig.fonts.body}>\n                          {item.taskDescription}\n                        </Text>\n                        <Badge\n                          colorScheme={\n                            item.taskStatus === \"COMPLETED\" ? \"green\" :\n                              item.taskStatus === \"IN_PROGRESS\" ? \"yellow\" : \"gray\"\n                          }\n                        >\n                          {item.taskStatus === \"COMPLETED\" ? \"Completed\" :\n                            item.taskStatus === \"IN_PROGRESS\" ? \"In Progress\" : \"Pending\"}\n                        </Badge>\n                      </VStack>\n                    ) : (\n                      // Media item\n                      <VStack align=\"start\" spacing={3}>\n                        <HStack>\n                          <Badge colorScheme=\"purple\" px={2} py={1}>\n                            Evidence File\n                          </Badge>\n                          <Text fontSize=\"sm\" color={getColor(\"text.muted\")} fontFamily={brandConfig.fonts.body}>\n                            for task: {item.taskDescription}\n                          </Text>\n                        </HStack>\n\n                        {item.description && (\n                          <Text color={getColor(\"text.primary\")} fontFamily={brandConfig.fonts.body}>\n                            {item.description}\n                          </Text>\n                        )}\n\n                        {/* Media preview */}\n                        <Box width=\"full\" position=\"relative\">\n                          {item.url && (\n                            <>\n                              {(item.fileType === \"application/pdf\" || item.url.toLowerCase().includes(\"pdf\")) ? (\n                                // PDF preview - consistent with ProjectPage and TaskModal\n                                <Box\n                                  maxH=\"300px\"\n                                  overflow=\"hidden\"\n                                  position=\"relative\"\n                                  cursor=\"pointer\"\n                                  borderRadius=\"md\"\n                                  border=\"1px solid\"\n                                  borderColor={borderColor}\n                                  onClick={() => window.open(normalizeMediaUrl(item.url!), \"_blank\")}\n                                >\n                                  <Document\n                                    file={normalizeMediaUrl(item.url!)}\n                                    onLoadSuccess={({ numPages }) => {\n                                      console.log(\"Timeline PDF loaded successfully:\", { url: item.url, numPages });\n                                    }}\n                                    onLoadError={(error) => {\n                                      console.error(\"Timeline PDF load error:\", error, \"URL:\", item.url);\n                                    }}\n                                  >\n                                    <Page pageNumber={1} width={300} />\n                                  </Document>\n                                  <Button\n                                    position=\"absolute\"\n                                    bottom={2}\n                                    right={2}\n                                    size=\"sm\"\n                                    colorScheme=\"blue\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      window.open(normalizeMediaUrl(item.url!), \"_blank\");\n                                    }}\n                                  >\n                                    Open PDF\n                                  </Button>\n                                </Box>\n                              ) : (item.fileType === \"video/mp4\" || item.url.toLowerCase().includes(\".mp4\")) ? (\n                                // Video preview - consistent with ProjectPage\n                                <Box\n                                  position=\"relative\"\n                                  borderRadius=\"md\"\n                                  overflow=\"hidden\"\n                                  maxH=\"300px\"\n                                  border=\"1px solid\"\n                                  borderColor={borderColor}\n                                >\n                                  <video\n                                    src={normalizeMediaUrl(item.url)}\n                                    controls\n                                    style={{\n                                      width: \"100%\",\n                                      maxHeight: \"300px\",\n                                      objectFit: \"cover\"\n                                    }}\n                                    onClick={(e) => e.stopPropagation()}\n                                  />\n                                  <Badge\n                                    position=\"absolute\"\n                                    top={2}\n                                    left={2}\n                                    colorScheme=\"blue\"\n                                    fontSize=\"xs\"\n                                  >\n                                    Video\n                                  </Badge>\n                                  <IconButton\n                                    aria-label=\"View full screen\"\n                                    icon={<FiMaximize />}\n                                    size=\"sm\"\n                                    position=\"absolute\"\n                                    bottom={2}\n                                    right={2}\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleMediaClick(normalizeMediaUrl(item.url!), item.fileType!);\n                                    }}\n                                    bg=\"blackAlpha.600\"\n                                    color=\"white\"\n                                    _hover={{ bg: \"blackAlpha.800\" }}\n                                  />\n                                </Box>\n                              ) : (\n                                // Image preview - consistent with ProjectPage\n                                <Box\n                                  position=\"relative\"\n                                  borderRadius=\"md\"\n                                  overflow=\"hidden\"\n                                  maxH=\"300px\"\n                                  cursor=\"pointer\"\n                                  border=\"1px solid\"\n                                  borderColor={borderColor}\n                                  onClick={() => handleMediaClick(normalizeMediaUrl(item.url!), item.fileType || \"image\")}\n                                >\n                                  <Image\n                                    src={normalizeMediaUrl(item.url)}\n                                    alt={item.description || \"Project evidence\"}\n                                    width=\"100%\"\n                                    maxH=\"300px\"\n                                    objectFit=\"cover\"\n                                    onError={(e) => {\n                                      console.error(\"Timeline image load error:\", e, \"URL:\", normalizeMediaUrl(item.url));\n                                    }}\n                                  />\n                                  <Badge\n                                    position=\"absolute\"\n                                    top={2}\n                                    left={2}\n                                    colorScheme=\"purple\"\n                                    fontSize=\"xs\"\n                                  >\n                                    {item.description ? \"Proof of Work\" : \"Evidence\"}\n                                  </Badge>\n                                  <IconButton\n                                    aria-label=\"View full size\"\n                                    icon={<FiMaximize />}\n                                    size=\"sm\"\n                                    position=\"absolute\"\n                                    bottom={2}\n                                    right={2}\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleMediaClick(normalizeMediaUrl(item.url!), item.fileType || \"image\");\n                                    }}\n                                    bg=\"blackAlpha.600\"\n                                    color=\"white\"\n                                    _hover={{ bg: \"blackAlpha.800\" }}\n                                  />\n                                </Box>\n                              )}\n                            </>\n                          )}\n                        </Box>\n                      </VStack>\n                    )}\n                  </Box>\n                </VStack>\n              </Box>\n            ))}\n\n            {/* Loader at the bottom */}\n            {hasMore && (\n              <Box ref={loaderRef} textAlign=\"center\" py={8}>\n                <Spinner size=\"md\" />\n              </Box>\n            )}\n\n            {!hasMore && timelineItems.length > 0 && (\n              <Box textAlign=\"center\" py={8}>\n                <Text color={getColor(\"text.muted\")} fontFamily={brandConfig.fonts.body}>\n                  End of timeline\n                </Text>\n              </Box>\n            )}\n\n            {timelineItems.length === 0 && (\n              <Box textAlign=\"center\" py={12}>\n                <Heading size=\"md\" color={getColor(\"text.primary\")} fontFamily={brandConfig.fonts.heading}>\n                  No evidence files available\n                </Heading>\n                <Text mt={2} color={getColor(\"text.muted\")} fontFamily={brandConfig.fonts.body}>\n                  This project doesn&apos;t have any uploaded evidence files yet.\n                </Text>\n              </Box>\n            )}\n          </VStack>\n        </VStack>\n      </Container>\n      <FooterWithFourColumns />\n\n      {/* Media modal */}\n      <Modal isOpen={isOpen} onClose={onClose} size=\"6xl\" isCentered>\n        <ModalOverlay />\n        <ModalContent bg=\"transparent\" boxShadow=\"none\" maxW=\"90vw\">\n          <ModalCloseButton color=\"white\" bg=\"blackAlpha.600\" _hover={{ bg: \"blackAlpha.800\" }} />\n          <ModalBody p={0}>\n            {selectedMedia && (\n              selectedMedia.type === \"video/mp4\" || selectedMedia.url.toLowerCase().includes(\".mp4\") ? (\n                <Box maxH=\"90vh\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                  <video\n                    src={normalizeMediaUrl(selectedMedia.url)}\n                    controls\n                    autoPlay\n                    style={{ maxHeight: \"90vh\", maxWidth: \"100%\", margin: \"0 auto\" }}\n                  />\n                </Box>\n              ) : (\n                <Image\n                  src={normalizeMediaUrl(selectedMedia.url)}\n                  alt=\"Full size view\"\n                  maxH=\"90vh\"\n                  margin=\"0 auto\"\n                  objectFit=\"contain\"\n                />\n              )\n            )}\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n\n      {/* Login Modal for unauthenticated users */}\n      <LoginWithSmsModal\n        isOpen={isLoginModalOpen}\n        onClose={handleLoginModalClose}\n        onLoginSuccess={handleLoginSuccess}\n      />\n    </Box>\n  );\n};\n\nexport default TimelineView; "],"names":["pdfjs","workerSrc","concat","GET_PROJECT_TIMELINE","gql","_templateObject","_taggedTemplateLiteral","formatDate","dateString","console","log","date","Date","isNaN","getTime","toString","format","error","TimelineView","usePageTitle","id","useParams","isAuthenticated","user","useAuth","bg","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","cardBg","borderColor","isOpen","onOpen","onClose","useDisclosure","selectedMedia","setSelectedMedia","useState","visibleItems","setVisibleItems","loaderRef","useRef","hasMore","setHasMore","timelineItems","setTimelineItems","isLoginModalOpen","setIsLoginModalOpen","loading","data","useQuery","variables","onCompleted","receivedData","_receivedData$project","project","tasks","length","onError","err","message","useEffect","items","Array","isArray","forEach","task","media","index","url","push","type","taskId","taskDescription","description","fileType","createdAt","updatedAt","toISOString","warn","sort","a","b","dateStr","now","e","dateA","observer","lastItemRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prev","observe","handleMediaClick","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","projectsModuleConfig","Container","maxW","py","flex","VStack","spacing","align","Spinner","size","color","thickness","Text","fontFamily","brandConfig","fonts","body","FooterWithFourColumns","Heading","heading","Button","as","Link","to","getComponent","_hover","Icon","FiChevronLeft","mr","HStack","justify","wrap","gap","colors","text","inverse","projectName","variant","Divider","p","borderRadius","mb","position","left","top","bottom","width","zIndex","slice","map","item","ref","pl","base","md","ml","height","border","mt","FiCalendar","fontSize","borderWidth","shadow","Badge","colorScheme","px","fontWeight","taskStatus","_Fragment","toLowerCase","includes","maxH","overflow","cursor","onClick","window","open","normalizeMediaUrl","Document","file","onLoadSuccess","_ref","numPages","onLoadError","Page","pageNumber","right","stopPropagation","src","controls","style","maxHeight","objectFit","IconButton","icon","FiMaximize","Image","alt","textAlign","Modal","isCentered","ModalOverlay","ModalContent","boxShadow","ModalCloseButton","ModalBody","justifyContent","alignItems","autoPlay","maxWidth","margin","LoginWithSmsModal","handleLoginModalClose","onLoginSuccess","handleLoginSuccess"],"sourceRoot":""}