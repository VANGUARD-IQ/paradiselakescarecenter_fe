{"version":3,"file":"static/js/1817.8d05e6c6.chunk.js","mappings":"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","sources":["pages/tenant-management/ModuleDeployment.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n    Box,\n    Container,\n    Heading,\n    VStack,\n    HStack,\n    Text,\n    Card,\n    CardHeader,\n    CardBody,\n    Button,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Badge,\n    useToast,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useDisclosure,\n    FormControl,\n    FormLabel,\n    Select,\n    Input,\n    Checkbox,\n    CheckboxGroup,\n    Stack,\n    Alert,\n    AlertIcon,\n    Progress,\n    IconButton,\n    Tooltip,\n    SimpleGrid,\n    Stat,\n    StatLabel,\n    StatNumber,\n    useColorModeValue,\n    useColorMode,\n    Divider,\n    Spinner\n} from \"@chakra-ui/react\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { ArrowBackIcon, RepeatIcon, AddIcon, ExternalLinkIcon, SettingsIcon } from \"@chakra-ui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport tenantManagementModuleConfig from \"./moduleConfig\";\nimport { getColor, getComponent } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL Operations\nconst GET_TENANTS_DEPLOYMENT_STATUS = gql`\n  query GetTenantsDeploymentStatus {\n    tenants {\n      id\n      name\n      status\n      subscriptionTier\n      githubRepo\n      githubOwner\n      deploymentUrl\n      lastDeployment\n      moduleConfig {\n        moduleId\n        version\n        enabled\n        enabledAt\n      }\n      branding {\n        siteName\n      }\n      client {\n        id\n        fName\n        lName\n        email\n        businessName\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_AVAILABLE_MODULES = gql`\n  query GetAvailableModules {\n    availableModules {\n      id\n      name\n      description\n      icon\n      version\n      requiredTier\n    }\n  }\n`;\n\nconst DEPLOY_MODULE_TO_TENANTS = gql`\n  mutation DeployModuleToTenants($moduleId: String!, $tenantIds: [ID!]!) {\n    deployModuleToTenants(moduleId: $moduleId, tenantIds: $tenantIds) {\n      moduleId\n      totalTenants\n      successfulDeployments\n      failedDeployments\n      results {\n        tenantId\n        tenantName\n        repoName\n        success\n        error\n        commitSha\n      }\n    }\n  }\n`;\n\nconst CREATE_CLIENT_REPO = gql`\n  mutation CreateClientRepo($clientRepoName: String!, $clientGithubOwner: String!, $clientGithubToken: String!) {\n    createClientRepo(clientRepoName: $clientRepoName, clientGithubOwner: $clientGithubOwner, clientGithubToken: $clientGithubToken)\n  }\n`;\n\nconst UPDATE_TENANT_GITHUB_INFO = gql`\n  mutation UpdateTenant($id: ID!, $input: UpdateTenantInput!) {\n    updateTenant(id: $id, input: $input) {\n      id\n      githubRepo\n      githubOwner\n      deploymentUrl\n      lastDeployment\n    }\n  }\n`;\n\nconst DEPLOY_MODULE_TO_TENANT = gql`\n  mutation DeployModuleToTenant($moduleId: String!, $tenantId: String!) {\n    deployModuleToTenant(moduleId: $moduleId, tenantId: $tenantId) {\n      tenantId\n      tenantName\n      success\n      error\n      commitSha\n    }\n  }\n`;\n\nconst ENABLE_MODULE_FOR_TENANT = gql`\n  mutation EnableModuleForTenant($tenantId: ID!, $moduleId: String!, $version: String) {\n    enableModuleForTenant(tenantId: $tenantId, moduleId: $moduleId, version: $version) {\n      id\n      moduleConfig {\n        moduleId\n        version\n        enabled\n        enabledAt\n      }\n    }\n  }\n`;\n\n// Available modules will be fetched from GraphQL\n\nconst ModuleDeployment = () => {\n    usePageTitle(\"Module Deployment\");\n\n    const { colorMode } = useColorMode();\n    const navigate = useNavigate();\n    const toast = useToast();\n    const bg = getColor(\"background.main\", colorMode);\n\n  // Consistent styling from brandConfig\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const infoBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.darkSurface\", colorMode);\n\n    // State for modals\n    const { isOpen: isDeployOpen, onOpen: onDeployOpen, onClose: onDeployClose } = useDisclosure();\n    const { isOpen: isRepoOpen, onOpen: onRepoOpen, onClose: onRepoClose } = useDisclosure();\n\n    // Form state\n    const [selectedModule, setSelectedModule] = React.useState(\"\");\n    const [selectedTenants, setSelectedTenants] = React.useState<string[]>([]);\n    const [repoName, setRepoName] = React.useState(\"\");\n    const [githubOwner, setGithubOwner] = React.useState(\"tommycp3\");\n    const [githubToken, setGithubToken] = React.useState(\"\");\n    const [selectedTenantForRepo, setSelectedTenantForRepo] = React.useState<any>(null);\n\n    // Loading states\n    const [isDeploying, setIsDeploying] = React.useState(false);\n    const [isCreatingRepo, setIsCreatingRepo] = React.useState(false);\n    const [deploymentLogs, setDeploymentLogs] = React.useState<string[]>([]);\n    const [currentDeploymentTenant, setCurrentDeploymentTenant] = React.useState<string>(\"\");\n    const [showDeploymentModal, setShowDeploymentModal] = React.useState(false);\n\n    const { data, loading, error, refetch } = useQuery(GET_TENANTS_DEPLOYMENT_STATUS);\n    const { data: modulesData, loading: modulesLoading } = useQuery(GET_AVAILABLE_MODULES);\n    const [deployModuleToTenants] = useMutation(DEPLOY_MODULE_TO_TENANTS);\n    const [deployModuleToTenant] = useMutation(DEPLOY_MODULE_TO_TENANT);\n    const [enableModuleForTenant] = useMutation(ENABLE_MODULE_FOR_TENANT);\n    const [createClientRepo] = useMutation(CREATE_CLIENT_REPO);\n    const [updateTenant] = useMutation(UPDATE_TENANT_GITHUB_INFO);\n\n    const tenants = data?.tenants || [];\n\n    // Function to add logs with timestamp\n    const addDeploymentLog = (message: string) => {\n        const timestamp = new Date().toLocaleTimeString();\n        const logMessage = `[${timestamp}] ${message}`;\n        setDeploymentLogs(prev => [...prev, logMessage]);\n        console.log(`🚀 DEPLOYMENT: ${logMessage}`);\n    };\n\n    // Function to clear logs\n    const clearDeploymentLogs = () => {\n        setDeploymentLogs([]);\n    };\n\n    const handleModuleDeployment = async () => {\n        if (!selectedModule || selectedTenants.length === 0) {\n            toast({\n                title: \"Missing Information\",\n                description: \"Please select a module and at least one tenant\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        setIsDeploying(true);\n\n        try {\n            const result = await deployModuleToTenants({\n                variables: {\n                    moduleId: selectedModule,\n                    tenantIds: selectedTenants\n                }\n            });\n\n            const deploymentResult = result.data.deployModuleToTenants;\n\n            toast({\n                title: \"Deployment Complete\",\n                description: `${deploymentResult.successfulDeployments}/${deploymentResult.totalTenants} deployments successful`,\n                status: deploymentResult.failedDeployments === 0 ? \"success\" : \"warning\",\n                duration: 5000,\n                isClosable: true,\n            });\n\n            // Reset form\n            setSelectedModule(\"\");\n            setSelectedTenants([]);\n            onDeployClose();\n            refetch();\n\n        } catch (error) {\n            toast({\n                title: \"Deployment Failed\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        } finally {\n            setIsDeploying(false);\n        }\n    };\n\n    const handleSingleTenantDeployment = async (tenantId: string, moduleId: string, tenantName: string) => {\n        // Initialize deployment modal\n        setCurrentDeploymentTenant(tenantName);\n        clearDeploymentLogs();\n        setShowDeploymentModal(true);\n        setIsDeploying(true);\n\n        try {\n            addDeploymentLog(`🚀 Starting deployment of ${moduleId} module to ${tenantName}`);\n            addDeploymentLog(`📋 Tenant ID: ${tenantId}`);\n            \n            const tenant = tenants.find((t: any) => t.id === tenantId);\n            if (tenant) {\n                addDeploymentLog(`📂 Target Repository: ${tenant.githubOwner}/${tenant.githubRepo}`);\n                addDeploymentLog(`🌐 Deployment URL: ${tenant.deploymentUrl || 'Not configured'}`);\n            }\n\n            addDeploymentLog(`📡 Sending deployment request to backend...`);\n\n            const result = await deployModuleToTenant({\n                variables: {\n                    moduleId,\n                    tenantId\n                }\n            });\n\n            const deploymentResult = result.data.deployModuleToTenant;\n\n            if (deploymentResult.success) {\n                addDeploymentLog(`✅ Backend deployment request successful`);\n                addDeploymentLog(`📝 Commit SHA: ${deploymentResult.commitSha || 'Not provided'}`);\n                addDeploymentLog(`🎉 Module ${moduleId} successfully deployed to ${tenantName}!`);\n                addDeploymentLog(`📁 Files copied to repository: ${tenant?.githubOwner}/${tenant?.githubRepo}`);\n                addDeploymentLog(`🔄 Repository has been updated with new module files`);\n\n                // Enable the module for the tenant\n                addDeploymentLog(`🔧 Enabling module ${moduleId} for tenant...`);\n                try {\n                    const moduleVersion = modulesData?.availableModules?.find((m: any) => m.id === moduleId)?.version || 'latest';\n                    \n                    await enableModuleForTenant({\n                        variables: {\n                            tenantId: tenantId,\n                            moduleId: moduleId,\n                            version: moduleVersion\n                        }\n                    });\n\n                    addDeploymentLog(`✅ Module ${moduleId} enabled in tenant configuration`);\n                    addDeploymentLog(`📋 Module is now active and accessible on the client site`);\n                } catch (enableError) {\n                    addDeploymentLog(`⚠️ Warning: Module deployed but failed to enable in tenant config`);\n                    addDeploymentLog(`🔧 Error: ${enableError instanceof Error ? enableError.message : 'Unknown enable error'}`);\n                    addDeploymentLog(`💡 You may need to manually enable the module in tenant settings`);\n                }\n\n                toast({\n                    title: \"✅ Deployment Successful!\",\n                    description: `${moduleId} module deployed and enabled for ${tenantName}`,\n                    status: \"success\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n            } else {\n                addDeploymentLog(`❌ Deployment failed: ${deploymentResult.error || 'Unknown error'}`);\n                addDeploymentLog(`💡 Check the error details above for troubleshooting`);\n\n                toast({\n                    title: \"❌ Deployment Failed\",\n                    description: deploymentResult.error || \"Unknown error occurred\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n            }\n\n            addDeploymentLog(`🔄 Refreshing tenant data...`);\n            refetch();\n            addDeploymentLog(`✅ Deployment process completed`);\n\n        } catch (error) {\n            addDeploymentLog(`💥 Deployment error occurred: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            addDeploymentLog(`❌ Deployment failed with exception`);\n\n            toast({\n                title: \"Deployment Error\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        } finally {\n            setIsDeploying(false);\n        }\n    };\n\n    const handleCreateRepo = async () => {\n        if (!repoName || !githubOwner || !githubToken || !selectedTenantForRepo) {\n            toast({\n                title: \"Missing Information\",\n                description: \"Please fill in all required fields\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        setIsCreatingRepo(true);\n\n        try {\n            const result = await createClientRepo({\n                variables: {\n                    clientRepoName: repoName,\n                    clientGithubOwner: githubOwner,\n                    clientGithubToken: githubToken\n                }\n            });\n\n            // Update tenant with GitHub info\n            await updateTenant({\n                variables: {\n                    id: selectedTenantForRepo.id,\n                    input: {\n                        githubRepo: repoName,\n                        deploymentUrl: `https://github.com/${githubOwner}/${repoName}`\n                    }\n                }\n            });\n\n            toast({\n                title: \"Repository Created\",\n                description: `Successfully created ${githubOwner}/${repoName}`,\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n            });\n\n            // Reset form\n            setRepoName(\"\");\n            setGithubOwner(\"tommycp3\");\n            setGithubToken(\"\");\n            setSelectedTenantForRepo(null);\n            onRepoClose();\n            refetch();\n\n        } catch (error) {\n            toast({\n                title: \"Repository Creation Failed\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        } finally {\n            setIsCreatingRepo(false);\n        }\n    };\n\n    const openRepoCreation = (tenant: any) => {\n        setSelectedTenantForRepo(tenant);\n        setRepoName(tenant.name ? `${tenant.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}-frontend` : \"\");\n        onRepoOpen();\n    };\n\n    const getRepoStatus = (tenant: any) => {\n        if (!tenant.githubRepo) {\n            return { status: \"No Repo\", color: \"red\", icon: \"❌\" };\n        }\n        if (!tenant.lastDeployment) {\n            return { status: \"Never Deployed\", color: \"orange\", icon: \"⚠️\" };\n        }\n\n        const daysSince = Math.floor((Date.now() - new Date(tenant.lastDeployment).getTime()) / (1000 * 60 * 60 * 24));\n\n        if (daysSince === 0) {\n            return { status: \"Updated Today\", color: \"green\", icon: \"✅\" };\n        } else if (daysSince < 7) {\n            return { status: `${daysSince}d ago`, color: \"yellow\", icon: \"🟡\" };\n        } else {\n            return { status: `${daysSince}d ago`, color: \"orange\", icon: \"⚠️\" };\n        }\n    };\n\n    if (loading) {\n        return (\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                    <VStack spacing={8}>\n                        <Spinner size=\"xl\" />\n                        <Text>Loading tenant deployment status...</Text>\n                    </VStack>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error) {\n        return (\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                    <Alert status=\"error\">\n                        <AlertIcon />\n                        <Text>Error loading deployment status: {error.message}</Text>\n                    </Alert>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const tenantsWithRepos = tenants.filter((t: any) => t.githubRepo);\n    const tenantsWithoutRepos = tenants.filter((t: any) => !t.githubRepo);\n    const recentDeployments = tenants.filter((t: any) => t.lastDeployment);\n\n    return (\n        <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={tenantManagementModuleConfig} />\n            <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                <VStack spacing={8} align=\"stretch\">\n                    {/* Header */}\n                    <HStack justify=\"space-between\">\n                        <VStack align=\"start\" spacing={2}>\n                            <HStack>\n                                <Button\n                                    variant=\"ghost\"\n                                    onClick={() => navigate(\"/admin/tenants\")}\n                                    leftIcon={<ArrowBackIcon />}\n                                >\n                                    Back to Tenants\n                                </Button>\n                            </HStack>\n                            <Heading size=\"lg\" color={textPrimary}>📦 Module Deployment</Heading>\n                            <Text color={textMuted}>Deploy and manage modules across all tenant sites</Text>\n                        </VStack>\n                        <HStack spacing={3}>\n                            <Button\n                                colorScheme=\"blue\"\n                                onClick={() => navigate(\"/tenants/quick-deploy\")}\n                                leftIcon={<RepeatIcon />}\n                            >\n                                ⚡ Quick Deploy\n                            </Button>\n                            <Button\n                                colorScheme=\"green\"\n                                onClick={() => navigate(\"/admin/tenants/new\")}\n                                leftIcon={<AddIcon />}\n                            >\n                                Create New Site\n                            </Button>\n                        </HStack>\n                    </HStack>\n\n                    {/* Stats Cards */}\n                    <SimpleGrid columns={{ base: 1, md: 4 }} spacing={6}>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel>Total Tenants</StatLabel>\n                                    <StatNumber fontSize=\"2xl\">{tenants.length}</StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel>With Repositories</StatLabel>\n                                    <StatNumber fontSize=\"2xl\" color=\"green.500\">\n                                        {tenantsWithRepos.length}\n                                    </StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel>Need Repository</StatLabel>\n                                    <StatNumber fontSize=\"2xl\" color=\"red.500\">\n                                        {tenantsWithoutRepos.length}\n                                    </StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel>Recent Deployments</StatLabel>\n                                    <StatNumber fontSize=\"2xl\" color=\"blue.500\">\n                                        {recentDeployments.length}\n                                    </StatNumber>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                    </SimpleGrid>\n\n                    {/* Available Modules Reference */}\n                    <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                        <CardHeader>\n                            <VStack align=\"start\" spacing={2}>\n                                <Heading size=\"md\" color={textPrimary}>📚 Available Business Modules Reference</Heading>\n                                <Text color={textMuted} fontSize=\"sm\">\n                                    Complete list of all available modules in the system with their requirements\n                                </Text>\n                            </VStack>\n                        </CardHeader>\n                        <CardBody>\n                            {modulesLoading ? (\n                                <VStack spacing={4}>\n                                    <Spinner />\n                                    <Text>Loading available modules...</Text>\n                                </VStack>\n                            ) : modulesData?.availableModules ? (\n                                <SimpleGrid columns={{ base: 1, sm: 2, md: 3, lg: 4 }} spacing={4}>\n                                    {modulesData.availableModules.map((module: any) => (\n                                        <VStack key={module.id} align=\"start\" p={4} border=\"1px\" borderColor={cardBorder} borderRadius=\"md\" bg={infoBg} spacing={3}>\n                                            <HStack spacing={3}>\n                                                <Text fontSize=\"xl\">{module.icon}</Text>\n                                                <VStack align=\"start\" spacing={0}>\n                                                    <Text fontWeight=\"bold\" fontSize=\"md\">\n                                                        {module.name}\n                                                    </Text>\n                                                    <Text fontSize=\"xs\" color=\"gray.500\">\n                                                        {module.id}\n                                                    </Text>\n                                                </VStack>\n                                            </HStack>\n                                            <Text fontSize=\"sm\" color={textMuted} lineHeight=\"short\">\n                                                {module.description}\n                                            </Text>\n                                            <HStack spacing={2}>\n                                                <Badge size=\"sm\" colorScheme=\"blue\">\n                                                    v{module.version}\n                                                </Badge>\n                                                <Badge \n                                                    size=\"sm\" \n                                                    colorScheme={\n                                                        module.requiredTier === 'FREE' ? 'green' :\n                                                        module.requiredTier === 'BASIC' ? 'blue' :\n                                                        module.requiredTier === 'PREMIUM' ? 'purple' :\n                                                        'orange'\n                                                    }\n                                                >\n                                                    {module.requiredTier}\n                                                </Badge>\n                                            </HStack>\n                                        </VStack>\n                                    ))}\n                                </SimpleGrid>\n                            ) : (\n                                <Alert status=\"warning\">\n                                    <AlertIcon />\n                                    <Text>No modules available or failed to load</Text>\n                                </Alert>\n                            )}\n                        </CardBody>\n                    </Card>\n\n                    {/* Tenants Table */}\n                    <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                        <CardHeader>\n                            <HStack justify=\"space-between\">\n                                <Heading size=\"md\" color={textPrimary}>Tenant Deployment Status</Heading>\n                                <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => refetch()}\n                                    leftIcon={<RepeatIcon />}\n                                >\n                                    Refresh\n                                </Button>\n                            </HStack>\n                        </CardHeader>\n                        <CardBody p={0}>\n                            <Box overflowX=\"auto\">\n                                <Table variant=\"simple\">\n                                    <Thead>\n                                        <Tr>\n                                            <Th>Site Name</Th>\n                                            <Th>Client</Th>\n                                            <Th>Repository Status</Th>\n                                            <Th>Last Deployment</Th>\n                                            <Th>Enabled Modules</Th>\n                                            <Th>Actions</Th>\n                                        </Tr>\n                                    </Thead>\n                                    <Tbody>\n                                        {tenants.map((tenant: any) => {\n                                            const repoStatus = getRepoStatus(tenant);\n                                            const enabledModules = tenant.moduleConfig?.filter((m: any) => m.enabled) || [];\n\n                                            return (\n                                                <Tr key={tenant.id}>\n                                                    <Td>\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            <Text fontWeight=\"bold\">\n                                                                {tenant.branding?.siteName || tenant.name}\n                                                            </Text>\n                                                            <Badge colorScheme={tenant.status === 'ACTIVE' ? 'green' : 'gray'}>\n                                                                {tenant.status}\n                                                            </Badge>\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td>\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            <Text fontSize=\"sm\">\n                                                                {tenant.client?.businessName ||\n                                                                    `${tenant.client?.fName} ${tenant.client?.lName}`}\n                                                            </Text>\n                                                            <Text fontSize=\"xs\" color=\"gray.500\">\n                                                                {tenant.client?.email}\n                                                            </Text>\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td>\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            <HStack>\n                                                                <Text>{repoStatus.icon}</Text>\n                                                                <Badge colorScheme={repoStatus.color}>\n                                                                    {repoStatus.status}\n                                                                </Badge>\n                                                            </HStack>\n                                                            {tenant.githubRepo && (\n                                                                <Text fontSize=\"xs\" color=\"gray.500\">\n                                                                    {tenant.githubOwner}/{tenant.githubRepo}\n                                                                </Text>\n                                                            )}\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td>\n                                                        {tenant.lastDeployment ? (\n                                                            <VStack align=\"start\" spacing={1}>\n                                                                <Text fontSize=\"sm\">\n                                                                    {new Date(tenant.lastDeployment).toLocaleDateString()}\n                                                                </Text>\n                                                                <Text fontSize=\"xs\" color=\"gray.500\">\n                                                                    {new Date(tenant.lastDeployment).toLocaleTimeString()}\n                                                                </Text>\n                                                            </VStack>\n                                                        ) : (\n                                                            <Text fontSize=\"sm\" color=\"gray.500\">\n                                                                Never deployed\n                                                            </Text>\n                                                        )}\n                                                    </Td>\n                                                    <Td>\n                                                        <VStack align=\"start\" spacing={2} maxW=\"300px\">\n                                                            <HStack spacing={1} flexWrap=\"wrap\">\n                                                                {enabledModules.length > 0 ? (\n                                                                    enabledModules.map((module: any) => {\n                                                                        const moduleInfo = modulesData?.availableModules?.find((m: any) => m.id === module.moduleId);\n                                                                        return (\n                                                                            <Badge \n                                                                                key={module.moduleId} \n                                                                                size=\"sm\" \n                                                                                colorScheme=\"green\"\n                                                                                title={`${moduleInfo?.name || module.moduleId} - v${module.version} (${moduleInfo?.requiredTier || 'Unknown'})`}\n                                                                            >\n                                                                                {moduleInfo?.icon || \"📦\"} {moduleInfo?.name || module.moduleId}\n                                                                            </Badge>\n                                                                        );\n                                                                    })\n                                                                ) : (\n                                                                    <Badge size=\"sm\" colorScheme=\"gray\">\n                                                                        No modules enabled\n                                                                    </Badge>\n                                                                )}\n                                                            </HStack>\n                                                            {enabledModules.length > 0 && (\n                                                                <Text fontSize=\"xs\" color=\"gray.500\">\n                                                                    {enabledModules.length} module{enabledModules.length !== 1 ? 's' : ''} enabled\n                                                                </Text>\n                                                            )}\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td>\n                                                        <HStack spacing={2}>\n                                                            {!tenant.githubRepo ? (\n                                                                <Tooltip label=\"Create GitHub Repository\">\n                                                                    <IconButton\n                                                                        aria-label=\"Create repo\"\n                                                                        icon={<AddIcon />}\n                                                                        size=\"sm\"\n                                                                        colorScheme=\"green\"\n                                                                        onClick={() => openRepoCreation(tenant)}\n                                                                    />\n                                                                </Tooltip>\n                                                            ) : (\n                                                                <>\n                                                                    <Tooltip label=\"Deploy Modules\">\n                                                                        <IconButton\n                                                                            aria-label=\"Deploy modules\"\n                                                                            icon={<RepeatIcon />}\n                                                                            size=\"sm\"\n                                                                            colorScheme=\"blue\"\n                                                                            onClick={() => {\n                                                                                setSelectedTenants([tenant.id]);\n                                                                                onDeployOpen();\n                                                                            }}\n                                                                        />\n                                                                    </Tooltip>\n                                                                    {tenant.deploymentUrl && (\n                                                                        <Tooltip label=\"View Repository\">\n                                                                            <IconButton\n                                                                                as=\"a\"\n                                                                                href={tenant.deploymentUrl}\n                                                                                target=\"_blank\"\n                                                                                aria-label=\"View repo\"\n                                                                                icon={<ExternalLinkIcon />}\n                                                                                size=\"sm\"\n                                                                                variant=\"outline\"\n                                                                            />\n                                                                        </Tooltip>\n                                                                    )}\n                                                                </>\n                                                            )}\n                                                            <Tooltip label=\"Edit Tenant\">\n                                                                <IconButton\n                                                                    aria-label=\"Edit tenant\"\n                                                                    icon={<SettingsIcon />}\n                                                                    size=\"sm\"\n                                                                    variant=\"outline\"\n                                                                    onClick={() => navigate(`/admin/tenants/${tenant.id}/edit`)}\n                                                                />\n                                                            </Tooltip>\n                                                        </HStack>\n                                                    </Td>\n                                                </Tr>\n                                            );\n                                        })}\n                                    </Tbody>\n                                </Table>\n                            </Box>\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            {/* Module Deployment Modal */}\n            <Modal isOpen={isDeployOpen} onClose={onDeployClose} size=\"xl\">\n                <ModalOverlay />\n                <ModalContent bg={cardGradientBg} color={textPrimary} borderColor={cardBorder} borderWidth=\"1px\">\n                    <ModalHeader color={textPrimary}>Deploy Module to Tenants</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <VStack spacing={6} align=\"stretch\">\n                            <FormControl>\n                                <FormLabel>Select Module</FormLabel>\n                                <Select\n                                    placeholder=\"Choose a module to deploy\"\n                                    value={selectedModule}\n                                    onChange={(e) => setSelectedModule(e.target.value)}\n                                    disabled={modulesLoading}\n                                >\n                                    {modulesData?.availableModules?.map((module: any) => (\n                                        <option key={module.id} value={module.id}>\n                                            {module.icon} {module.name}\n                                        </option>\n                                    ))}\n                                </Select>\n                            </FormControl>\n\n                            <FormControl>\n                                <FormLabel>Select Tenants</FormLabel>\n                                <Box maxHeight=\"300px\" overflowY=\"auto\" border=\"1px\" borderColor={cardBorder} borderRadius=\"md\" p={4}>\n                                    <CheckboxGroup\n                                        value={selectedTenants}\n                                        onChange={(values) => setSelectedTenants(values as string[])}\n                                    >\n                                        <Stack spacing={3}>\n                                            {tenants\n                                                .map((tenant: any) => (\n                                                    <Checkbox key={tenant.id} value={tenant.id}>\n                                                        <VStack align=\"start\" spacing={0}>\n                                                            <Text fontWeight=\"bold\">\n                                                                {tenant.branding?.siteName || tenant.name}\n                                                            </Text>\n                                                            <Text fontSize=\"sm\" color=\"gray.500\">\n                                                                {tenant.githubRepo ? `${tenant.githubOwner}/${tenant.githubRepo}` : 'No repository yet'}\n                                                            </Text>\n                                                        </VStack>\n                                                    </Checkbox>\n                                                ))}\n                                        </Stack>\n                                    </CheckboxGroup>\n                                </Box>\n                            </FormControl>\n\n                            {isDeploying && (\n                                <Alert status=\"info\">\n                                    <AlertIcon />\n                                    <VStack align=\"start\" spacing={2} w=\"full\">\n                                        <Text>Deploying {selectedModule} to {selectedTenants.length} tenant(s)...</Text>\n                                        <Progress size=\"sm\" isIndeterminate w=\"full\" />\n                                    </VStack>\n                                </Alert>\n                            )}\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" mr={3} onClick={onDeployClose}>\n                            Cancel\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={handleModuleDeployment}\n                            isLoading={isDeploying}\n                            loadingText=\"Deploying...\"\n                            isDisabled={!selectedModule || selectedTenants.length === 0}\n                        >\n                            Deploy to {selectedTenants.length} Tenant{selectedTenants.length !== 1 ? 's' : ''}\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Create Repository Modal */}\n            <Modal isOpen={isRepoOpen} onClose={onRepoClose} size=\"lg\">\n                <ModalOverlay />\n                <ModalContent bg={cardGradientBg} color={textPrimary} borderColor={cardBorder} borderWidth=\"1px\">\n                    <ModalHeader color={textPrimary}>Create GitHub Repository</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <VStack spacing={6} align=\"stretch\">\n                            {selectedTenantForRepo && (\n                                <Alert status=\"info\">\n                                    <AlertIcon />\n                                    <Text>\n                                        Creating repository for: <strong>{selectedTenantForRepo.branding?.siteName || selectedTenantForRepo.name}</strong>\n                                    </Text>\n                                </Alert>\n                            )}\n\n                            <FormControl isRequired>\n                                <FormLabel>Repository Name</FormLabel>\n                                <Input\n                                    value={repoName}\n                                    onChange={(e) => setRepoName(e.target.value)}\n                                    placeholder=\"client-business-frontend\"\n                                />\n                            </FormControl>\n\n                            <FormControl isRequired>\n                                <FormLabel>GitHub Owner</FormLabel>\n                                <Input\n                                    value={githubOwner}\n                                    onChange={(e) => setGithubOwner(e.target.value)}\n                                    placeholder=\"tommycp3\"\n                                />\n                            </FormControl>\n\n                            <FormControl isRequired>\n                                <FormLabel>GitHub Personal Access Token</FormLabel>\n                                <Input\n                                    type=\"password\"\n                                    value={githubToken}\n                                    onChange={(e) => setGithubToken(e.target.value)}\n                                    placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n                                />\n                                <Text fontSize=\"sm\" color=\"gray.500\" mt={1}>\n                                    Requires 'repo' permissions to create repositories\n                                </Text>\n                            </FormControl>\n\n                            {!selectedTenantForRepo?.id && (\n                                <FormControl>\n                                    <FormLabel>Select Tenant (Optional)</FormLabel>\n                                    <Select\n                                        placeholder=\"Choose tenant to link repository\"\n                                        onChange={(e) => {\n                                            const tenant = tenants.find((t: any) => t.id === e.target.value);\n                                            setSelectedTenantForRepo(tenant || {});\n                                        }}\n                                    >\n                                        {tenants\n                                            .filter((t: any) => !t.githubRepo) // Only show tenants without repos\n                                            .map((tenant: any) => (\n                                                <option key={tenant.id} value={tenant.id}>\n                                                    {tenant.branding?.siteName || tenant.name}\n                                                </option>\n                                            ))}\n                                    </Select>\n                                </FormControl>\n                            )}\n\n                            {isCreatingRepo && (\n                                <Alert status=\"info\">\n                                    <AlertIcon />\n                                    <VStack align=\"start\" spacing={2} w=\"full\">\n                                        <Text>Creating repository {githubOwner}/{repoName}...</Text>\n                                        <Progress size=\"sm\" isIndeterminate w=\"full\" />\n                                    </VStack>\n                                </Alert>\n                            )}\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" mr={3} onClick={onRepoClose}>\n                            Cancel\n                        </Button>\n                        <Button\n                            colorScheme=\"green\"\n                            onClick={handleCreateRepo}\n                            isLoading={isCreatingRepo}\n                            loadingText=\"Creating...\"\n                            isDisabled={!repoName || !githubOwner || !githubToken}\n                        >\n                            Create Repository\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Deployment Progress Modal */}\n            <Modal isOpen={showDeploymentModal} onClose={() => setShowDeploymentModal(false)} size=\"xl\">\n                <ModalOverlay />\n                <ModalContent bg={cardGradientBg} color={textPrimary} borderColor={cardBorder} borderWidth=\"1px\">\n                    <ModalHeader color={textPrimary}>\n                        <HStack>\n                            <Text>🚀 Deploying to {currentDeploymentTenant}</Text>\n                            {isDeploying && <Spinner size=\"sm\" />}\n                        </HStack>\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <VStack spacing={4} align=\"stretch\">\n                            <Alert status={isDeploying ? \"info\" : \"success\"}>\n                                <AlertIcon />\n                                <Text>\n                                    {isDeploying \n                                        ? \"Deployment in progress... Please wait\" \n                                        : \"Deployment completed! Check the logs below for details.\"\n                                    }\n                                </Text>\n                            </Alert>\n\n                            <Box>\n                                <Text fontWeight=\"bold\" mb={2}>📋 Deployment Logs:</Text>\n                                <Box\n                                    bg=\"gray.900\"\n                                    color=\"green.300\"\n                                    p={4}\n                                    borderRadius=\"md\"\n                                    fontFamily=\"mono\"\n                                    fontSize=\"sm\"\n                                    maxHeight=\"400px\"\n                                    overflowY=\"auto\"\n                                    border=\"1px solid\"\n                                    borderColor=\"gray.600\"\n                                >\n                                    {deploymentLogs.length > 0 ? (\n                                        deploymentLogs.map((log, index) => (\n                                            <Box key={index} mb={1}>\n                                                {log}\n                                            </Box>\n                                        ))\n                                    ) : (\n                                        <Text color=\"gray.500\">No logs yet...</Text>\n                                    )}\n                                    {isDeploying && (\n                                        <Box>\n                                            <Text color=\"yellow.300\">⏳ Waiting for deployment to complete...</Text>\n                                        </Box>\n                                    )}\n                                </Box>\n                            </Box>\n\n                            {!isDeploying && (\n                                <Alert status=\"success\">\n                                    <AlertIcon />\n                                    <VStack align=\"start\" spacing={1}>\n                                        <Text fontWeight=\"bold\">Deployment Summary:</Text>\n                                        <Text fontSize=\"sm\">\n                                            • Module files have been copied to the target repository\n                                        </Text>\n                                        <Text fontSize=\"sm\">\n                                            • Repository has been updated with the latest changes\n                                        </Text>\n                                        <Text fontSize=\"sm\">\n                                            • You can now access the deployed module on the client site\n                                        </Text>\n                                    </VStack>\n                                </Alert>\n                            )}\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button\n                            variant=\"ghost\"\n                            mr={3}\n                            onClick={() => {\n                                navigator.clipboard.writeText(deploymentLogs.join('\\n'));\n                                toast({\n                                    title: \"Logs copied to clipboard\",\n                                    status: \"success\",\n                                    duration: 2000,\n                                });\n                            }}\n                        >\n                            📋 Copy Logs\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={() => setShowDeploymentModal(false)}\n                            isDisabled={isDeploying}\n                        >\n                            {isDeploying ? \"Please wait...\" : \"Close\"}\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default ModuleDeployment; "],"names":["GET_TENANTS_DEPLOYMENT_STATUS","gql","_templateObject","_taggedTemplateLiteral","GET_AVAILABLE_MODULES","_templateObject2","DEPLOY_MODULE_TO_TENANTS","_templateObject3","CREATE_CLIENT_REPO","_templateObject4","UPDATE_TENANT_GITHUB_INFO","_templateObject5","DEPLOY_MODULE_TO_TENANT","_templateObject6","ENABLE_MODULE_FOR_TENANT","_templateObject7","ModuleDeployment","_modulesData$availabl4","_selectedTenantForRep","usePageTitle","colorMode","useColorMode","navigate","useNavigate","toast","useToast","bg","getColor","cardGradientBg","cardBorder","textPrimary","textMuted","infoBg","isOpen","isDeployOpen","onOpen","onDeployOpen","onClose","onDeployClose","useDisclosure","isRepoOpen","onRepoOpen","onRepoClose","selectedModule","setSelectedModule","React","selectedTenants","setSelectedTenants","repoName","setRepoName","githubOwner","setGithubOwner","githubToken","setGithubToken","selectedTenantForRepo","setSelectedTenantForRepo","isDeploying","setIsDeploying","isCreatingRepo","setIsCreatingRepo","deploymentLogs","setDeploymentLogs","currentDeploymentTenant","setCurrentDeploymentTenant","showDeploymentModal","setShowDeploymentModal","data","loading","error","refetch","useQuery","modulesData","modulesLoading","deployModuleToTenants","useMutation","deployModuleToTenant","enableModuleForTenant","createClientRepo","updateTenant","tenants","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","Container","maxW","py","flex","VStack","spacing","Spinner","size","Text","FooterWithFourColumns","Alert","status","AlertIcon","message","tenantsWithRepos","filter","t","githubRepo","tenantsWithoutRepos","recentDeployments","lastDeployment","ModuleBreadcrumb","moduleConfig","tenantManagementModuleConfig","align","HStack","justify","Button","variant","onClick","leftIcon","ArrowBackIcon","Heading","color","colorScheme","RepeatIcon","AddIcon","SimpleGrid","columns","base","md","Card","borderColor","borderWidth","CardBody","Stat","StatLabel","StatNumber","fontSize","length","CardHeader","availableModules","sm","lg","map","module","p","border","borderRadius","icon","fontWeight","name","id","lineHeight","description","Badge","version","requiredTier","overflowX","Table","Thead","Tr","Th","Tbody","tenant","_tenant$moduleConfig","_tenant$branding","_tenant$client","_tenant$client2","_tenant$client3","_tenant$client4","repoStatus","daysSince","Math","floor","Date","now","getTime","concat","getRepoStatus","enabledModules","m","enabled","Td","branding","siteName","client","businessName","fName","lName","email","toLocaleDateString","toLocaleTimeString","flexWrap","_modulesData$availabl3","moduleInfo","find","moduleId","title","_Fragment","Tooltip","label","IconButton","deploymentUrl","as","href","target","ExternalLinkIcon","toLowerCase","replace","openRepoCreation","SettingsIcon","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","Select","placeholder","value","onChange","e","disabled","maxHeight","overflowY","CheckboxGroup","values","Stack","_tenant$branding2","Checkbox","w","Progress","isIndeterminate","ModalFooter","mr","async","deploymentResult","variables","tenantIds","successfulDeployments","totalTenants","failedDeployments","duration","isClosable","Error","isLoading","loadingText","isDisabled","isRequired","Input","type","mt","_tenant$branding3","clientRepoName","clientGithubOwner","clientGithubToken","input","mb","fontFamily","log","index","navigator","clipboard","writeText","join"],"sourceRoot":""}