{"version":3,"file":"static/js/5974.015cc772.chunk.js","mappings":"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","sources":["pages/opportunities/OpportunitiesList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Heading,\n  Button,\n  HStack,\n  VStack,\n  Text,\n  useToast,\n  SimpleGrid,\n  Badge,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Spinner,\n  Card,\n  CardBody,\n  CardHeader,\n  Tooltip,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Select,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Progress,\n  Center,\n  useColorMode\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport {\n  FiPlus,\n  FiMoreVertical,\n  FiEdit,\n  FiTrash2,\n  FiTrendingUp,\n  FiSearch,\n  FiCalendar,\n  FiPhone,\n  FiMail\n} from 'react-icons/fi';\nimport { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport opportunitiesModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL Queries\nconst GET_OPPORTUNITIES = gql`\n  query GetOpportunities($status: OpportunityStatus, $stage: String) {\n    opportunities(status: $status, stage: $stage) {\n      id\n      title\n      description\n      clientId\n      clientName\n      clientEmail\n      clientPhone\n      value\n      stage\n      status\n      priority\n      probability\n      expectedRevenue\n      expectedCloseDate\n      lastActivityDate\n      assignedTo\n      assignedToName\n      source\n      taskCount\n      completedTaskCount\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_OPPORTUNITY_STAGES = gql`\n  query GetOpportunityStages {\n    opportunityStages {\n      id\n      name\n      code\n      order\n      color\n      icon\n      defaultProbability\n      isWonStage\n      isLostStage\n      currentOpportunities\n    }\n  }\n`;\n\nconst GET_OPPORTUNITY_STATS = gql`\n  query GetOpportunityStats {\n    activeCount: opportunityCount(status: ACTIVE)\n    wonCount: opportunityCount(status: WON)\n    lostCount: opportunityCount(status: LOST)\n    totalValue: totalOpportunityValue(status: ACTIVE)\n    wonValue: totalOpportunityValue(status: WON)\n  }\n`;\n\nconst MOVE_OPPORTUNITY_STAGE = gql`\n  mutation MoveOpportunityStage($id: String!, $newStage: String!) {\n    moveOpportunityStage(id: $id, newStage: $newStage) {\n      id\n      stage\n      status\n      probability\n      expectedRevenue\n    }\n  }\n`;\n\nconst DELETE_OPPORTUNITY = gql`\n  mutation DeleteOpportunity($id: String!) {\n    deleteOpportunity(id: $id)\n  }\n`;\n\ninterface Opportunity {\n  id: string;\n  title: string;\n  description?: string;\n  clientId: string;\n  clientName?: string;\n  clientEmail?: string;\n  clientPhone?: string;\n  value: number;\n  stage: string;\n  status: string;\n  priority: string;\n  probability: number;\n  expectedRevenue?: number;\n  expectedCloseDate?: string;\n  lastActivityDate?: string;\n  assignedTo?: string;\n  assignedToName?: string;\n  source?: string;\n  taskCount: number;\n  completedTaskCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Stage {\n  id: string;\n  name: string;\n  code: string;\n  order: number;\n  color: string;\n  icon?: string;\n  defaultProbability: number;\n  isWonStage: boolean;\n  isLostStage: boolean;\n  currentOpportunities: number;\n}\n\nconst OpportunityCard: React.FC<{\n  opportunity: Opportunity;\n  onEdit: () => void;\n  onDelete: () => void;\n}> = ({ opportunity, onEdit, onDelete }) => {\n  const { colorMode } = useColorMode();\n  // Brand styling variables\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'CRITICAL': return 'red';\n      case 'HIGH': return 'orange';\n      case 'MEDIUM': return 'yellow';\n      case 'LOW': return 'gray';\n      default: return 'gray';\n    }\n  };\n\n  return (\n    <Card\n      bg={cardGradientBg}\n      backdropFilter=\"blur(10px)\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      border=\"1px\"\n      borderColor={cardBorder}\n      borderRadius=\"lg\"\n      mb={3}\n      cursor=\"pointer\"\n      onClick={onEdit}\n      _hover={{\n        transform: \"translateY(-2px)\",\n        boxShadow: \"0 12px 40px 0 rgba(0, 0, 0, 0.5)\",\n        transition: \"all 0.2s\"\n      }}\n    >\n      <CardBody p={3}>\n        <VStack align=\"stretch\" spacing={2}>\n          <HStack justify=\"space-between\">\n            <Text fontWeight=\"bold\" fontSize=\"sm\" noOfLines={1} color={textPrimary}>\n              {opportunity.title}\n            </Text>\n            <Menu>\n              <MenuButton\n                as={IconButton}\n                icon={<FiMoreVertical />}\n                variant=\"ghost\"\n                color={textPrimary}\n                size=\"xs\"\n                onClick={(e) => e.stopPropagation()}\n              />\n              <MenuList bg={cardGradientBg} borderColor={cardBorder}>\n                <MenuItem icon={<FiEdit />} onClick={(e) => { e.stopPropagation(); onEdit(); }}>\n                  Edit\n                </MenuItem>\n                <MenuItem icon={<FiTrash2 />} onClick={(e) => { e.stopPropagation(); onDelete(); }} color=\"red.500\">\n                  Delete\n                </MenuItem>\n              </MenuList>\n            </Menu>\n          </HStack>\n\n          <HStack spacing={2}>\n            <Badge colorScheme={getPriorityColor(opportunity.priority)} size=\"sm\">\n              {opportunity.priority}\n            </Badge>\n            <Text fontSize=\"xs\" color={textMuted}>\n              {opportunity.clientName}\n            </Text>\n          </HStack>\n\n          <HStack justify=\"space-between\">\n            <Text fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n              ${opportunity.value.toLocaleString()}\n            </Text>\n            <Text fontSize=\"xs\" color={textMuted}>\n              {opportunity.probability}%\n            </Text>\n          </HStack>\n\n          {opportunity.expectedCloseDate && (\n            <HStack fontSize=\"xs\" color={textMuted}>\n              <FiCalendar />\n              <Text>\n                {new Date(opportunity.expectedCloseDate).toLocaleDateString()}\n              </Text>\n            </HStack>\n          )}\n\n          <VStack spacing={1} align=\"stretch\">\n            <HStack justify=\"space-between\" fontSize=\"xs\">\n              <Text color={textMuted}>Tasks</Text>\n              <Text color={textPrimary} fontWeight=\"medium\">\n                {opportunity.completedTaskCount || 0} of {opportunity.taskCount || 0}\n              </Text>\n            </HStack>\n            {opportunity.taskCount > 0 && (\n              <Progress\n                value={(opportunity.completedTaskCount / opportunity.taskCount) * 100}\n                size=\"xs\"\n                colorScheme=\"green\"\n              />\n            )}\n          </VStack>\n\n          <HStack fontSize=\"xs\" color=\"gray.500\" justify=\"space-between\">\n            <HStack spacing={2}>\n              {opportunity.clientEmail && (\n                <HStack spacing={1}>\n                  <FiMail />\n                  <Text>{opportunity.clientEmail}</Text>\n                </HStack>\n              )}\n            </HStack>\n            <HStack>\n              {opportunity.clientPhone && (\n                <Tooltip label={opportunity.clientPhone}>\n                  <span><FiPhone /></span>\n                </Tooltip>\n              )}\n            </HStack>\n          </HStack>\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nconst OpportunitiesList: React.FC = () => {\n  usePageTitle(\"Opportunities\");\n\n  const navigate = useNavigate();\n  const toast = useToast();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('ALL');\n  const { colorMode } = useColorMode();\n\n  // Queries\n  const { data: opportunitiesData, loading: loadingOpportunities, refetch } = useQuery(GET_OPPORTUNITIES, {\n    variables: { status: filterStatus === 'ALL' ? undefined : filterStatus }\n  });\n\n  const { data: stagesData, loading: loadingStages } = useQuery(GET_OPPORTUNITY_STAGES);\n  const { data: statsData } = useQuery(GET_OPPORTUNITY_STATS);\n\n  // Mutations\n  const [moveStage] = useMutation(MOVE_OPPORTUNITY_STAGE);\n  const [deleteOpportunity] = useMutation(DELETE_OPPORTUNITY);\n\n  const opportunities = opportunitiesData?.opportunities || [];\n  const stages = stagesData?.opportunityStages || [];\n\n  // Group opportunities by stage\n  const opportunitiesByStage = stages.reduce((acc: any, stage: Stage) => {\n    acc[stage.code] = opportunities.filter((opp: Opportunity) => opp.stage === stage.code);\n    return acc;\n  }, {});\n\n  const handleDragEnd = async (result: any) => {\n    if (!result.destination) return;\n\n    const { draggableId, destination } = result;\n    const newStage = destination.droppableId;\n\n    try {\n      await moveStage({\n        variables: {\n          id: draggableId,\n          newStage: newStage\n        }\n      });\n\n      toast({\n        title: 'Opportunity moved',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      refetch();\n    } catch (error: any) {\n      toast({\n        title: 'Failed to move opportunity',\n        description: error.message || 'An error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!window.confirm('Are you sure you want to delete this opportunity?')) return;\n\n    try {\n      await deleteOpportunity({ variables: { id } });\n      toast({\n        title: 'Opportunity deleted',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n    } catch (error: any) {\n      toast({\n        title: 'Failed to delete opportunity',\n        description: error.message || 'An error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  // Brand styling variables\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const buttonBg = getColor(\"button.bg\", colorMode);\n  const buttonHoverBg = getColor(\"button.hoverBg\", colorMode);\n\n  if (loadingOpportunities || loadingStages) {\n    return (\n      <Box>\n        <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n        <Box maxW=\"100%\" px={{ base: 4, md: 8 }} py={8} flex=\"1\">\n          <Center>\n            <Spinner size=\"xl\" />\n          </Center>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n\n      <Box maxW=\"100%\" px={{ base: 4, md: 8 }} py={8} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <VStack spacing={4} align=\"stretch\">\n            <Heading size={{ base: 'md', md: 'lg' }} color={textPrimary}>Opportunities Pipeline</Heading>\n            <HStack spacing={2} flexWrap=\"wrap\">\n              <Button\n                leftIcon={<FiTrendingUp />}\n                variant=\"outline\"\n                size={{ base: 'sm', md: 'md' }}\n                borderColor={colorMode === 'light' ? 'gray.300' : 'rgba(255, 255, 255, 0.3)'}\n                color={textPrimary}\n                _hover={{ bg: colorMode === 'light' ? 'gray.50' : cardGradientBg }}\n                onClick={() => navigate('/opportunities/dashboard')}\n              >\n                Dashboard\n              </Button>\n              <Button\n                leftIcon={<FiPlus />}\n                size={{ base: 'sm', md: 'md' }}\n                bg={buttonBg}\n                color=\"white\"\n                _hover={{ bg: buttonHoverBg }}\n                onClick={() => navigate('/opportunities/new')}\n              >\n                New Opportunity\n              </Button>\n            </HStack>\n          </VStack>\n\n          {/* Stats */}\n          <SimpleGrid columns={{ base: 1, md: 5 }} spacing={4}>\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Active Opportunities</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">{statsData?.activeCount || 0}</StatNumber>\n                  <StatHelpText color={textMuted}>\n                    ${(statsData?.totalValue || 0).toLocaleString()} total value\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Won</StatLabel>\n                  <StatNumber color=\"#48BB78\" fontSize=\"2xl\">{statsData?.wonCount || 0}</StatNumber>\n                  <StatHelpText color={textMuted}>\n                    ${(statsData?.wonValue || 0).toLocaleString()} revenue\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Lost</StatLabel>\n                  <StatNumber color=\"#F56565\" fontSize=\"2xl\">{statsData?.lostCount || 0}</StatNumber>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Win Rate</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">\n                    {statsData?.wonCount && statsData?.lostCount\n                      ? Math.round((statsData.wonCount / (statsData.wonCount + statsData.lostCount)) * 100)\n                      : 0}%\n                  </StatNumber>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Total Tasks</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">\n                    {(() => {\n                      const totalCompleted = opportunities.reduce((sum: number, opp: Opportunity) => sum + (opp.completedTaskCount || 0), 0);\n                      const totalTasks = opportunities.reduce((sum: number, opp: Opportunity) => sum + (opp.taskCount || 0), 0);\n                      return `${totalCompleted}/${totalTasks}`;\n                    })()}\n                  </StatNumber>\n                  <StatHelpText color={textMuted}>\n                    {(() => {\n                      const totalCompleted = opportunities.reduce((sum: number, opp: Opportunity) => sum + (opp.completedTaskCount || 0), 0);\n                      const totalTasks = opportunities.reduce((sum: number, opp: Opportunity) => sum + (opp.taskCount || 0), 0);\n                      const percentage = totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0;\n                      return `${percentage}% complete`;\n                    })()}\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n          </SimpleGrid>\n\n          {/* Filters */}\n          <HStack spacing={4}>\n            <InputGroup maxW=\"300px\">\n              <InputLeftElement pointerEvents=\"none\">\n                <FiSearch color={textMuted} />\n              </InputLeftElement>\n              <Input\n                placeholder=\"Search opportunities...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                bg={colorMode === 'light' ? 'white' : cardGradientBg}\n                color={textPrimary}\n                borderColor={cardBorder}\n                _placeholder={{ color: textMuted }}\n                _hover={{ borderColor: textSecondary }}\n                _focus={{\n                  borderColor: getColor(\"primary\", colorMode),\n                  boxShadow: `0 0 0 1px ${getColor(\"primary\", colorMode)}`,\n                }}\n              />\n            </InputGroup>\n\n            <Select\n              maxW=\"200px\"\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              bg={colorMode === 'light' ? 'white' : cardGradientBg}\n              color={textPrimary}\n              borderColor={cardBorder}\n              _hover={{ borderColor: textSecondary }}\n              _focus={{\n                borderColor: getColor(\"primary\", colorMode),\n                boxShadow: `0 0 0 1px ${getColor(\"primary\", colorMode)}`,\n              }}\n            >\n              <option value=\"ALL\">All Status</option>\n              <option value=\"ACTIVE\">Active Filter</option>\n              <option value=\"WON\">Won</option>\n              <option value=\"LOST\">Lost</option>\n              <option value=\"ON_HOLD\">On Hold</option>\n            </Select>\n          </HStack>\n\n          {/* Kanban Board */}\n          <Box overflowX=\"auto\">\n            <DragDropContext onDragEnd={handleDragEnd}>\n              <HStack align=\"stretch\" spacing={4} minW={stages.length * 300}>\n                {stages.map((stage: Stage) => (\n                  <Box key={stage.code} minW=\"300px\" flex=\"1\">\n                    <VStack align=\"stretch\" spacing={2}>\n                      <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                      >\n                        <CardHeader py={3}>\n                          <HStack justify=\"space-between\">\n                            <HStack>\n                              {stage.icon && <Text>{stage.icon}</Text>}\n                              <Text fontWeight=\"bold\" color={textPrimary}>{stage.name}</Text>\n                            </HStack>\n                            <Badge colorScheme=\"blue\" bg={colorMode === 'light' ? 'blue.100' : 'rgba(56, 178, 255, 0.2)'} color={colorMode === 'light' ? 'blue.800' : 'white'}>\n                              {opportunitiesByStage[stage.code]?.length || 0}\n                            </Badge>\n                          </HStack>\n                          <Box\n                            h=\"2px\"\n                            bg={stage.color}\n                            mt={2}\n                            borderRadius=\"full\"\n                          />\n                        </CardHeader>\n                      </Card>\n\n                      <Droppable droppableId={stage.code}>\n                        {(provided: any, snapshot: any) => (\n                          <VStack\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                            align=\"stretch\"\n                            spacing={0}\n                            minH=\"400px\"\n                            bg={snapshot.isDraggingOver ? 'blue.50' : 'transparent'}\n                            p={2}\n                            borderRadius=\"md\"\n                            transition=\"background 0.2s\"\n                          >\n                            {opportunitiesByStage[stage.code]?.map((opp: Opportunity, index: number) => (\n                              <Draggable key={opp.id} draggableId={opp.id} index={index}>\n                                {(provided: any, snapshot: any) => (\n                                  <Box\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    opacity={snapshot.isDragging ? 0.5 : 1}\n                                  >\n                                    <OpportunityCard\n                                      opportunity={opp}\n                                      onEdit={() => navigate(`/opportunities/${opp.id}`)}\n                                      onDelete={() => handleDelete(opp.id)}\n                                    />\n                                  </Box>\n                                )}\n                              </Draggable>\n                            ))}\n                            {provided.placeholder}\n                          </VStack>\n                        )}\n                      </Droppable>\n                    </VStack>\n                  </Box>\n                ))}\n              </HStack>\n            </DragDropContext>\n          </Box>\n        </VStack>\n      </Box>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default OpportunitiesList;"],"names":["GET_OPPORTUNITIES","gql","_templateObject","_taggedTemplateLiteral","GET_OPPORTUNITY_STAGES","_templateObject2","GET_OPPORTUNITY_STATS","_templateObject3","MOVE_OPPORTUNITY_STAGE","_templateObject4","DELETE_OPPORTUNITY","_templateObject5","OpportunityCard","_ref","opportunity","onEdit","onDelete","colorMode","useColorMode","cardGradientBg","getColor","cardBorder","textPrimary","textMuted","_jsx","Card","bg","backdropFilter","boxShadow","border","borderColor","borderRadius","mb","cursor","onClick","_hover","transform","transition","children","CardBody","p","_jsxs","VStack","align","spacing","HStack","justify","Text","fontWeight","fontSize","noOfLines","color","title","Menu","MenuButton","as","IconButton","icon","FiMoreVertical","variant","size","e","stopPropagation","MenuList","MenuItem","FiEdit","FiTrash2","Badge","colorScheme","priority","getPriorityColor","clientName","value","toLocaleString","probability","expectedCloseDate","FiCalendar","Date","toLocaleDateString","completedTaskCount","taskCount","Progress","clientEmail","FiMail","clientPhone","Tooltip","label","FiPhone","OpportunitiesList","usePageTitle","navigate","useNavigate","toast","useToast","searchTerm","setSearchTerm","useState","filterStatus","setFilterStatus","data","opportunitiesData","loading","loadingOpportunities","refetch","useQuery","variables","status","undefined","stagesData","loadingStages","statsData","moveStage","useMutation","deleteOpportunity","opportunities","stages","opportunityStages","opportunitiesByStage","reduce","acc","stage","code","filter","opp","bgMain","textSecondary","buttonBg","buttonHoverBg","Box","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","opportunitiesModuleConfig","maxW","px","base","md","py","flex","Center","Spinner","minH","display","flexDirection","Heading","flexWrap","Button","leftIcon","FiTrendingUp","FiPlus","SimpleGrid","columns","Stat","StatLabel","StatNumber","activeCount","StatHelpText","totalValue","wonCount","wonValue","lostCount","Math","round","totalCompleted","sum","totalTasks","concat","percentage","InputGroup","InputLeftElement","pointerEvents","FiSearch","Input","placeholder","onChange","target","_placeholder","_focus","Select","overflowX","DragDropContext","onDragEnd","async","result","destination","draggableId","newStage","droppableId","id","duration","isClosable","error","description","message","minW","length","map","_opportunitiesByStage","CardHeader","name","h","mt","Droppable","provided","snapshot","_opportunitiesByStage2","_objectSpread","ref","innerRef","droppableProps","isDraggingOver","index","Draggable","draggableProps","dragHandleProps","opacity","isDragging","window","confirm","handleDelete","FooterWithFourColumns"],"sourceRoot":""}