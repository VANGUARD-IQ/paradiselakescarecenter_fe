{"version":3,"file":"static/js/5494.2f62ce36.chunk.js","mappings":"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","sources":["pages/clients/components/ClientSearchSelector.tsx","pages/calendars/components/TagSelector.tsx","pages/calendars/graphql/eventTasks.graphql.ts","pages/calendars/components/EventTasksTab.tsx","pages/calendars/components/EventNotesTab.tsx","pages/calendars/components/BookingDetailsView.tsx","pages/calendars/EventModal.tsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  VStack,\n  HStack,\n  Checkbox,\n  CheckboxGroup,\n  Text,\n  Tag,\n  TagLabel,\n  Wrap,\n  WrapItem,\n  Badge,\n  Button,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Divider,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { useQuery, gql } from '@apollo/client';\nimport { getColor, getComponent } from '../../../brandConfig';\nimport { Client } from \"../../../generated/graphql\";\n\nconst SEARCH_CLIENTS = gql`\n  query SearchClients($search: String, $tags: [String!]) {\n    searchClients(search: $search, tags: $tags) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      tags\n    }\n  }\n`;\n\nconst GET_ALL_TAGS = gql`\n  query GetAllClientTags {\n    allClientTags\n  }\n`;\n\n\ninterface ClientSearchSelectorProps {\n  selectedClients: string[];\n  onSelectionChange: (clients: string[]) => void;\n  allowMultiple?: boolean;\n  placeholder?: string;\n}\n\nexport const ClientSearchSelector: React.FC<ClientSearchSelectorProps> = ({\n  selectedClients,\n  onSelectionChange,\n  allowMultiple = true,\n  placeholder = \"Search clients by name, email, or phone...\"\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [expandedSections, setExpandedSections] = useState<number[]>([0, 1]);\n  const toast = useToast();\n  \n  // Query all available tags\n  const { data: tagsData } = useQuery(GET_ALL_TAGS);\n  \n  // Search clients based on search term and tags\n  const { loading, data, error } = useQuery(SEARCH_CLIENTS, {\n    variables: {\n      search: searchTerm || undefined,\n      tags: selectedTags.length > 0 ? selectedTags : undefined,\n    },\n    skip: !searchTerm && selectedTags.length === 0,\n  });\n  \n  const textSecondary = getColor(\"text.secondary\");\n  const textMuted = getColor(\"text.muted\");\n  const borderColor = getColor(\"border.light\");\n  \n  const handleClientToggle = (clientId: string) => {\n    if (allowMultiple) {\n      if (selectedClients.includes(clientId)) {\n        onSelectionChange(selectedClients.filter(id => id !== clientId));\n      } else {\n        onSelectionChange([...selectedClients, clientId]);\n      }\n    } else {\n      onSelectionChange([clientId]);\n    }\n  };\n  \n  const handleTagToggle = (tag: string) => {\n    setSelectedTags(prev =>\n      prev.includes(tag)\n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n  \n  const handleSelectAll = () => {\n    if (data?.searchClients) {\n      const allIds = data.searchClients.map((client: Client) => client.id);\n      onSelectionChange(allIds);\n    }\n  };\n  \n  const handleClearSelection = () => {\n    onSelectionChange([]);\n  };\n  \n  const selectedCount = selectedClients.length;\n  const totalCount = data?.searchClients?.length || 0;\n  \n  return (\n    <VStack spacing={4} align=\"stretch\">\n      <Accordion allowMultiple index={expandedSections} onChange={(expandedIndex) => setExpandedSections(expandedIndex as number[])}>\n        {/* Search Section */}\n        <AccordionItem border=\"none\">\n          <AccordionButton px={0}>\n            <Box flex=\"1\" textAlign=\"left\">\n              <Text fontWeight=\"medium\">Search Clients</Text>\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n          <AccordionPanel px={0}>\n            <VStack spacing={3} align=\"stretch\">\n              {/* Search Input */}\n              <InputGroup>\n                <InputLeftElement pointerEvents=\"none\">\n                  <SearchIcon color={textMuted} />\n                </InputLeftElement>\n                <Input\n                  placeholder={placeholder}\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  bg={getComponent(\"form\", \"fieldBg\")}\n                  border=\"1px\"\n                  borderColor={getComponent(\"form\", \"fieldBorder\")}\n                  _focus={{\n                    borderColor: getComponent(\"form\", \"fieldBorderFocus\"),\n                    boxShadow: getComponent(\"form\", \"fieldShadowFocus\"),\n                  }}\n                />\n              </InputGroup>\n              \n              {/* Client Results */}\n              {loading && (\n                <HStack justify=\"center\" py={4}>\n                  <Spinner size=\"sm\" />\n                  <Text fontSize=\"sm\" color={textSecondary}>Searching...</Text>\n                </HStack>\n              )}\n              \n              {error && (\n                <Alert status=\"error\" borderRadius=\"md\">\n                  <AlertIcon />\n                  Error searching clients: {error.message}\n                </Alert>\n              )}\n              \n              {data?.searchClients && data.searchClients.length > 0 && (\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\" color={textSecondary}>\n                      Found {totalCount} client{totalCount !== 1 ? 's' : ''}\n                    </Text>\n                    {allowMultiple && (\n                      <HStack spacing={2}>\n                        <Button size=\"xs\" variant=\"link\" onClick={handleSelectAll}>\n                          Select All\n                        </Button>\n                        {selectedCount > 0 && (\n                          <Button size=\"xs\" variant=\"link\" onClick={handleClearSelection}>\n                            Clear\n                          </Button>\n                        )}\n                      </HStack>\n                    )}\n                  </HStack>\n                  \n                  <VStack\n                    align=\"stretch\"\n                    spacing={1}\n                    maxH=\"200px\"\n                    overflowY=\"auto\"\n                    border=\"1px\"\n                    borderColor={borderColor}\n                    borderRadius=\"md\"\n                    p={2}\n                  >\n                    {data.searchClients.map((client: Client) => (\n                      <Box\n                        key={client.id}\n                        p={2}\n                        borderRadius=\"md\"\n                        _hover={{ bg: getColor(\"background.overlay\") }}\n                      >\n                        <HStack justify=\"space-between\">\n                          <HStack \n                            spacing={3} \n                            flex={1}\n                            cursor=\"pointer\"\n                            onClick={() => handleClientToggle(client.id)}\n                          >\n                            <Box onClick={(e) => e.stopPropagation()}>\n                              <Checkbox\n                                isChecked={selectedClients.includes(client.id)}\n                                onChange={() => handleClientToggle(client.id)}\n                              />\n                            </Box>\n                            <VStack align=\"start\" spacing={0}>\n                              <Text fontSize=\"sm\" fontWeight=\"medium\">\n                                {client.fName} {client.lName}\n                              </Text>\n                              <Text fontSize=\"xs\" color={textMuted}>\n                                {client.email || client.phoneNumber || 'No contact info'}\n                              </Text>\n                            </VStack>\n                          </HStack>\n                          {client.tags && client.tags.length > 0 && (\n                            <Wrap spacing={1}>\n                              {client.tags.slice(0, 2).map(tag => (\n                                <WrapItem key={tag}>\n                                  <Tag size=\"sm\" variant=\"subtle\" colorScheme=\"blue\">\n                                    <TagLabel>{tag}</TagLabel>\n                                  </Tag>\n                                </WrapItem>\n                              ))}\n                              {client.tags.length > 2 && (\n                                <WrapItem>\n                                  <Badge fontSize=\"xs\" colorScheme=\"gray\">\n                                    +{client.tags.length - 2}\n                                  </Badge>\n                                </WrapItem>\n                              )}\n                            </Wrap>\n                          )}\n                        </HStack>\n                      </Box>\n                    ))}\n                  </VStack>\n                </Box>\n              )}\n              \n              {data?.searchClients && data.searchClients.length === 0 && (\n                <Text fontSize=\"sm\" color={textMuted} textAlign=\"center\" py={4}>\n                  No clients found matching your search\n                </Text>\n              )}\n            </VStack>\n          </AccordionPanel>\n        </AccordionItem>\n        \n        {/* Tag Filter Section */}\n        <AccordionItem border=\"none\">\n          <AccordionButton px={0}>\n            <Box flex=\"1\" textAlign=\"left\">\n              <HStack>\n                <Text fontWeight=\"medium\">Filter by Tags</Text>\n                {selectedTags.length > 0 && (\n                  <Badge colorScheme=\"blue\" fontSize=\"xs\">\n                    {selectedTags.length} selected\n                  </Badge>\n                )}\n              </HStack>\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n          <AccordionPanel px={0}>\n            {tagsData?.allClientTags && tagsData.allClientTags.length > 0 ? (\n              <VStack align=\"stretch\" spacing={3}>\n                <Text fontSize=\"sm\" color={textSecondary}>\n                  Select tags to filter clients:\n                </Text>\n                <Wrap spacing={2}>\n                  {tagsData.allClientTags.map((tag: string) => (\n                    <WrapItem key={tag}>\n                      <Tag\n                        size=\"md\"\n                        variant={selectedTags.includes(tag) ? \"solid\" : \"outline\"}\n                        colorScheme={selectedTags.includes(tag) ? \"blue\" : \"gray\"}\n                        cursor=\"pointer\"\n                        onClick={() => handleTagToggle(tag)}\n                        _hover={{\n                          transform: \"scale(1.05)\",\n                        }}\n                      >\n                        <TagLabel>{tag}</TagLabel>\n                      </Tag>\n                    </WrapItem>\n                  ))}\n                </Wrap>\n                {selectedTags.length > 0 && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => setSelectedTags([])}\n                  >\n                    Clear Tag Filters\n                  </Button>\n                )}\n              </VStack>\n            ) : (\n              <Text fontSize=\"sm\" color={textMuted} textAlign=\"center\" py={4}>\n                No tags available\n              </Text>\n            )}\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n      \n      {/* Selection Summary */}\n      {selectedCount > 0 && (\n        <Box>\n          <Divider my={2} />\n          <HStack justify=\"space-between\">\n            <Text fontSize=\"sm\" color={textSecondary}>\n              {selectedCount} client{selectedCount !== 1 ? 's' : ''} selected\n            </Text>\n            <Button\n              size=\"xs\"\n              variant=\"ghost\"\n              onClick={handleClearSelection}\n              colorScheme=\"red\"\n            >\n              Clear Selection\n            </Button>\n          </HStack>\n        </Box>\n      )}\n    </VStack>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Wrap,\n  WrapItem,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Button,\n  HStack,\n  VStack,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverHeader,\n  Grid,\n  Text,\n  useToast,\n  Tooltip,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { FaTag, FaPlus, FaCheck } from 'react-icons/fa';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\n\n// GraphQL queries and mutations\nconst GET_CALENDAR_TAGS = gql`\n  query GetCalendarTags($calendarId: String!) {\n    calendarTags(calendarId: $calendarId) {\n      id\n      name\n      color\n      description\n      usageCount\n    }\n  }\n`;\n\nconst UPSERT_CALENDAR_TAG = gql`\n  mutation UpsertCalendarTag($calendarId: String!, $input: CalendarTagInput!) {\n    upsertCalendarTag(calendarId: $calendarId, input: $input) {\n      id\n      name\n      color\n      description\n    }\n  }\n`;\n\nconst SUGGEST_TAG_COLORS = gql`\n  query SuggestTagColors {\n    suggestTagColors\n  }\n`;\n\ninterface TagSelectorProps {\n  calendarId: string;\n  selectedTags: string[];\n  onTagsChange: (tags: string[]) => void;\n  placeholder?: string;\n}\n\nexport const TagSelector: React.FC<TagSelectorProps> = ({\n  calendarId,\n  selectedTags,\n  onTagsChange,\n  placeholder = \"Add tags...\",\n}) => {\n  const { colorMode } = useColorMode();\n  const toast = useToast();\n  const [newTagName, setNewTagName] = useState('');\n  const [selectedColor, setSelectedColor] = useState('#BAE1FF');\n  const [isAddingTag, setIsAddingTag] = useState(false);\n  const [tagColors, setTagColors] = useState<Record<string, string>>({});\n\n  // Fetch existing tags\n  const { data: tagsData, refetch: refetchTags } = useQuery(GET_CALENDAR_TAGS, {\n    variables: { calendarId },\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Fetch suggested colors\n  const { data: colorsData } = useQuery(SUGGEST_TAG_COLORS);\n\n  // Mutation for creating/updating tags\n  const [upsertTag] = useMutation(UPSERT_CALENDAR_TAG);\n\n  // Build tag color map\n  useEffect(() => {\n    if (tagsData?.calendarTags) {\n      const colorMap: Record<string, string> = {};\n      tagsData.calendarTags.forEach((tag: any) => {\n        colorMap[tag.name] = tag.color;\n      });\n      setTagColors(colorMap);\n    }\n  }, [tagsData]);\n\n  // Handle adding a new tag\n  const handleAddTag = async () => {\n    if (!newTagName.trim()) return;\n\n    try {\n      // Create the tag in the backend\n      await upsertTag({\n        variables: {\n          calendarId,\n          input: {\n            name: newTagName.trim(),\n            color: selectedColor,\n          }\n        },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n\n      // Add to selected tags\n      if (!selectedTags.includes(newTagName.trim())) {\n        onTagsChange([...selectedTags, newTagName.trim()]);\n      }\n\n      // Reset form and close popover\n      setNewTagName('');\n      setIsAddingTag(false);\n      \n      // Refetch tags to update the list\n      refetchTags();\n      \n      toast({\n        title: 'Tag created',\n        status: 'success',\n        duration: 2000,\n      });\n    } catch (error) {\n      console.error('Error creating tag:', error);\n      toast({\n        title: 'Error creating tag',\n        description: 'Failed to create the tag',\n        status: 'error',\n        duration: 3000,\n      });\n    }\n  };\n\n  // Handle selecting an existing tag\n  const handleSelectTag = (tagName: string) => {\n    if (!selectedTags.includes(tagName)) {\n      onTagsChange([...selectedTags, tagName]);\n    }\n  };\n\n  // Handle removing a tag\n  const handleRemoveTag = (tagName: string) => {\n    onTagsChange(selectedTags.filter(t => t !== tagName));\n  };\n\n  // Get suggested colors\n  const suggestedColors = colorsData?.suggestTagColors || [\n    '#FFB3BA', '#FFDFBA', '#FFFFBA', '#BAFFC9', '#BAE1FF',\n    '#E0BBE4', '#C7CEEA', '#FFDAC1', '#B5EAD7', '#FFE5B4'\n  ];\n\n  // Get existing tags\n  const existingTags = tagsData?.calendarTags || [];\n  const availableTags = existingTags.filter((tag: any) => \n    !selectedTags.includes(tag.name)\n  );\n\n  return (\n    <VStack align=\"stretch\" spacing={3}>\n      {/* Selected Tags */}\n      {selectedTags.length > 0 && (\n        <Wrap spacing={2}>\n          {selectedTags.map((tag) => (\n            <WrapItem key={tag}>\n              <Tag\n                size=\"md\"\n                borderRadius=\"full\"\n                variant=\"solid\"\n                backgroundColor={tagColors[tag] || '#E2E8F0'}\n                color={tagColors[tag] ? 'gray.800' : 'white'}\n              >\n                <TagLabel>{tag}</TagLabel>\n                <TagCloseButton onClick={() => handleRemoveTag(tag)} />\n              </Tag>\n            </WrapItem>\n          ))}\n        </Wrap>\n      )}\n\n      {/* Add Tag Input */}\n      <HStack>\n        <Popover \n          isOpen={isAddingTag} \n          onClose={() => {\n            setIsAddingTag(false);\n            setNewTagName('');\n          }}\n          closeOnBlur={false}\n          placement=\"bottom-start\"\n          returnFocusOnClose={false}\n        >\n          <PopoverTrigger>\n            <InputGroup size=\"sm\">\n              <InputLeftElement>\n                <FaTag color=\"gray.300\" />\n              </InputLeftElement>\n              <Input\n                placeholder={placeholder}\n                value={newTagName}\n                onChange={(e) => setNewTagName(e.target.value)}\n                onClick={() => setIsAddingTag(true)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' && newTagName.trim()) {\n                    handleAddTag();\n                  } else if (e.key === 'Escape') {\n                    setIsAddingTag(false);\n                    setNewTagName('');\n                  }\n                }}\n              />\n            </InputGroup>\n          </PopoverTrigger>\n          <PopoverContent width=\"300px\">\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader>\n              {newTagName ? 'Create New Tag' : 'Select or Create Tag'}\n            </PopoverHeader>\n            <PopoverBody>\n              <VStack align=\"stretch\" spacing={3}>\n                {/* Existing tags */}\n                {availableTags.length > 0 && !newTagName && (\n                  <Box>\n                    <Text fontSize=\"xs\" color=\"gray.500\" mb={2}>\n                      Existing Tags\n                    </Text>\n                    <Wrap spacing={2}>\n                      {availableTags.map((tag: any) => (\n                        <WrapItem key={tag.id}>\n                          <Tag\n                            size=\"sm\"\n                            borderRadius=\"full\"\n                            variant=\"solid\"\n                            backgroundColor={tag.color}\n                            color=\"gray.800\"\n                            cursor=\"pointer\"\n                            onClick={() => {\n                              handleSelectTag(tag.name);\n                              setIsAddingTag(false);\n                            }}\n                            _hover={{ opacity: 0.8 }}\n                          >\n                            <TagLabel>{tag.name}</TagLabel>\n                            {tag.usageCount > 0 && (\n                              <Text fontSize=\"xs\" ml={1} opacity={0.7}>\n                                ({tag.usageCount})\n                              </Text>\n                            )}\n                          </Tag>\n                        </WrapItem>\n                      ))}\n                    </Wrap>\n                  </Box>\n                )}\n\n                {/* Color picker for new tag */}\n                {newTagName && (\n                  <Box>\n                    <Text fontSize=\"xs\" color=\"gray.500\" mb={2}>\n                      Choose Color\n                    </Text>\n                    <Grid templateColumns=\"repeat(5, 1fr)\" gap={2}>\n                      {suggestedColors.slice(0, 10).map((color: string) => (\n                        <Tooltip key={color} label={color}>\n                          <Box\n                            w=\"32px\"\n                            h=\"32px\"\n                            borderRadius=\"md\"\n                            backgroundColor={color}\n                            cursor=\"pointer\"\n                            border={selectedColor === color ? '2px solid' : '1px solid'}\n                            borderColor={selectedColor === color ? 'blue.500' : 'gray.300'}\n                            onClick={() => setSelectedColor(color)}\n                            display=\"flex\"\n                            alignItems=\"center\"\n                            justifyContent=\"center\"\n                          >\n                            {selectedColor === color && (\n                              <FaCheck size={12} color=\"gray.700\" />\n                            )}\n                          </Box>\n                        </Tooltip>\n                      ))}\n                    </Grid>\n                    \n                    <Button\n                      size=\"sm\"\n                      colorScheme=\"blue\"\n                      width=\"full\"\n                      mt={3}\n                      onClick={handleAddTag}\n                      leftIcon={<FaPlus />}\n                    >\n                      Create Tag\n                    </Button>\n                  </Box>\n                )}\n              </VStack>\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      </HStack>\n    </VStack>\n  );\n};","import { gql } from '@apollo/client';\n\nexport const GET_EVENT_TASKS = gql`\n  query GetEventTasks($calendarEventId: String!) {\n    calendarEventTasks(calendarEventId: $calendarEventId) {\n      id\n      title\n      description\n      status\n      completed\n      completedAt\n      completedBy\n      dueDate\n      order\n      assignedTo\n      notes\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n      checklistItems {\n        id\n        title\n        completed\n        completedAt\n        completedBy\n        order\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const CREATE_EVENT_TASK = gql`\n  mutation CreateEventTask($input: CalendarEventTaskInput!) {\n    createCalendarEventTask(input: $input) {\n      id\n      title\n      description\n      status\n      completed\n      completedAt\n      dueDate\n      order\n      assignedTo\n      notes\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n      checklistItems {\n        id\n        title\n        completed\n        completedAt\n        order\n      }\n    }\n  }\n`;\n\nexport const UPDATE_EVENT_TASK = gql`\n  mutation UpdateEventTask($id: String!, $input: CalendarEventTaskInput!) {\n    updateCalendarEventTask(id: $id, input: $input) {\n      id\n      title\n      description\n      status\n      completed\n      completedAt\n      dueDate\n      order\n      assignedTo\n      notes\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n      checklistItems {\n        id\n        title\n        completed\n        completedAt\n        order\n      }\n    }\n  }\n`;\n\nexport const TOGGLE_TASK_COMPLETION = gql`\n  mutation ToggleTaskCompletion($id: String!) {\n    toggleCalendarEventTaskCompletion(id: $id) {\n      id\n      completed\n      completedAt\n      status\n      progressPercentage\n    }\n  }\n`;\n\nexport const DELETE_EVENT_TASK = gql`\n  mutation DeleteEventTask($id: String!) {\n    deleteCalendarEventTask(id: $id)\n  }\n`;\n\nexport const ADD_CHECKLIST_ITEM = gql`\n  mutation AddChecklistItem($taskId: String!, $item: CalendarEventTaskChecklistItemInput!) {\n    addCalendarEventTaskChecklistItem(taskId: $taskId, item: $item) {\n      id\n      checklistItems {\n        id\n        title\n        completed\n        completedAt\n        order\n      }\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n    }\n  }\n`;\n\nexport const UPDATE_CHECKLIST_ITEM = gql`\n  mutation UpdateChecklistItem($input: UpdateCalendarEventTaskChecklistInput!) {\n    updateCalendarEventTaskChecklistItem(input: $input) {\n      id\n      checklistItems {\n        id\n        title\n        completed\n        completedAt\n        order\n      }\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n      completed\n      status\n    }\n  }\n`;\n\nexport const REMOVE_CHECKLIST_ITEM = gql`\n  mutation RemoveChecklistItem($taskId: String!, $checklistItemId: String!) {\n    removeCalendarEventTaskChecklistItem(taskId: $taskId, checklistItemId: $checklistItemId) {\n      id\n      checklistItems {\n        id\n        title\n        completed\n        order\n      }\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n    }\n  }\n`;\n\nexport const GET_INCOMPLETE_TASKS = gql`\n  query GetIncompleteTasks($calendarId: String) {\n    incompleteTasks(calendarId: $calendarId) {\n      id\n      title\n      description\n      status\n      completed\n      dueDate\n      calendarEventId\n      totalChecklistItems\n      completedChecklistItems\n      progressPercentage\n      checklistItems {\n        id\n        title\n        completed\n        order\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  HStack,\n  VStack,\n  Text,\n  Input,\n  IconButton,\n  Progress,\n  Badge,\n  Collapse,\n  useToast,\n  Divider,\n  Textarea,\n  FormControl,\n  FormLabel,\n} from '@chakra-ui/react';\nimport { AddIcon, DeleteIcon, ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons';\nimport {\n  GET_EVENT_TASKS,\n  CREATE_EVENT_TASK,\n  UPDATE_EVENT_TASK,\n  DELETE_EVENT_TASK,\n  ADD_CHECKLIST_ITEM,\n  UPDATE_CHECKLIST_ITEM,\n  REMOVE_CHECKLIST_ITEM,\n  TOGGLE_TASK_COMPLETION,\n} from '../graphql/eventTasks.graphql';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface EventTasksTabProps {\n  eventId: string;\n}\n\ninterface ChecklistItem {\n  id: string;\n  title: string;\n  completed: boolean;\n  order: number;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  completed: boolean;\n  checklistItems: ChecklistItem[];\n  progressPercentage: number;\n  totalChecklistItems: number;\n  completedChecklistItems: number;\n}\n\nexport const EventTasksTab: React.FC<EventTasksTabProps> = ({ eventId }) => {\n  const toast = useToast();\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [expandedTasks, setExpandedTasks] = useState<Set<string>>(new Set());\n  const [newChecklistItems, setNewChecklistItems] = useState<{ [taskId: string]: string }>({});\n\n  const { data, loading, refetch } = useQuery(GET_EVENT_TASKS, {\n    variables: { calendarEventId: eventId },\n    skip: !eventId,\n  });\n\n  const [createTask] = useMutation(CREATE_EVENT_TASK, {\n    onCompleted: () => {\n      toast({ title: 'Task created', status: 'success', duration: 2000 });\n      setNewTaskTitle('');\n      refetch();\n    },\n    onError: (error) => {\n      toast({ title: 'Error creating task', description: error.message, status: 'error', duration: 3000 });\n    },\n  });\n\n  const [updateTask] = useMutation(UPDATE_EVENT_TASK, {\n    onCompleted: () => {\n      toast({ title: 'Task updated', status: 'success', duration: 2000 });\n      refetch();\n    },\n  });\n\n  const [deleteTask] = useMutation(DELETE_EVENT_TASK, {\n    onCompleted: () => {\n      toast({ title: 'Task deleted', status: 'success', duration: 2000 });\n      refetch();\n    },\n  });\n\n  const [toggleCompletion] = useMutation(TOGGLE_TASK_COMPLETION, {\n    onCompleted: () => {\n      refetch();\n    },\n  });\n\n  const [addChecklistItem] = useMutation(ADD_CHECKLIST_ITEM, {\n    onCompleted: () => {\n      refetch();\n    },\n  });\n\n  const [updateChecklistItem] = useMutation(UPDATE_CHECKLIST_ITEM, {\n    onCompleted: () => {\n      refetch();\n    },\n  });\n\n  const [removeChecklistItem] = useMutation(REMOVE_CHECKLIST_ITEM, {\n    onCompleted: () => {\n      refetch();\n    },\n  });\n\n  const handleCreateTask = async () => {\n    if (!newTaskTitle.trim()) return;\n\n    await createTask({\n      variables: {\n        input: {\n          calendarEventId: eventId,\n          title: newTaskTitle,\n          checklistItems: [],\n        },\n      },\n    });\n  };\n\n  const handleToggleTask = (taskId: string) => {\n    toggleCompletion({ variables: { id: taskId } });\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTask({ variables: { id: taskId } });\n  };\n\n  const toggleTaskExpansion = (taskId: string) => {\n    const newExpanded = new Set(expandedTasks);\n    if (newExpanded.has(taskId)) {\n      newExpanded.delete(taskId);\n    } else {\n      newExpanded.add(taskId);\n    }\n    setExpandedTasks(newExpanded);\n  };\n\n  const handleAddChecklistItem = (taskId: string) => {\n    const title = newChecklistItems[taskId];\n    if (!title?.trim()) return;\n\n    addChecklistItem({\n      variables: {\n        taskId,\n        item: {\n          id: uuidv4(),\n          title,\n          completed: false,\n          order: 0,\n        },\n      },\n    });\n\n    setNewChecklistItems({ ...newChecklistItems, [taskId]: '' });\n  };\n\n  const handleToggleChecklistItem = (taskId: string, itemId: string, currentStatus: boolean) => {\n    updateChecklistItem({\n      variables: {\n        input: {\n          taskId,\n          checklistItemId: itemId,\n          completed: !currentStatus,\n        },\n      },\n    });\n  };\n\n  const handleRemoveChecklistItem = (taskId: string, itemId: string) => {\n    removeChecklistItem({\n      variables: {\n        taskId,\n        checklistItemId: itemId,\n      },\n    });\n  };\n\n  const tasks: Task[] = data?.calendarEventTasks || [];\n\n  if (loading) {\n    return <Text>Loading tasks...</Text>;\n  }\n\n  return (\n    <VStack align=\"stretch\" spacing={4}>\n      <Text fontSize=\"lg\" fontWeight=\"bold\">\n        Event Tasks\n      </Text>\n\n      {/* Add New Task */}\n      <HStack>\n        <Input\n          placeholder=\"Add a new task...\"\n          value={newTaskTitle}\n          onChange={(e) => setNewTaskTitle(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleCreateTask()}\n        />\n        <IconButton\n          aria-label=\"Add task\"\n          icon={<AddIcon />}\n          onClick={handleCreateTask}\n          colorScheme=\"blue\"\n          isDisabled={!newTaskTitle.trim()}\n        />\n      </HStack>\n\n      {/* Task List */}\n      <VStack align=\"stretch\" spacing={3}>\n        {tasks.map((task) => (\n          <Box key={task.id} borderWidth={1} borderRadius=\"md\" p={3}>\n            <HStack justify=\"space-between\" mb={2}>\n              <HStack flex={1} spacing={3}>\n                <Checkbox\n                  isChecked={task.completed}\n                  onChange={() => handleToggleTask(task.id)}\n                  size=\"lg\"\n                />\n                <VStack align=\"start\" spacing={0} flex={1}>\n                  <Text\n                    fontWeight=\"medium\"\n                    textDecoration={task.completed ? 'line-through' : 'none'}\n                    opacity={task.completed ? 0.6 : 1}\n                  >\n                    {task.title}\n                  </Text>\n                  {task.checklistItems.length > 0 && (\n                    <HStack spacing={2} fontSize=\"sm\">\n                      <Text color=\"gray.600\">\n                        {task.completedChecklistItems}/{task.totalChecklistItems} completed\n                      </Text>\n                      <Progress\n                        value={task.progressPercentage}\n                        size=\"sm\"\n                        width=\"100px\"\n                        colorScheme=\"green\"\n                        borderRadius=\"full\"\n                      />\n                    </HStack>\n                  )}\n                </VStack>\n              </HStack>\n              <HStack>\n                <IconButton\n                  aria-label=\"Toggle checklist\"\n                  icon={expandedTasks.has(task.id) ? <ChevronUpIcon /> : <ChevronDownIcon />}\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => toggleTaskExpansion(task.id)}\n                />\n                <IconButton\n                  aria-label=\"Delete task\"\n                  icon={<DeleteIcon />}\n                  size=\"sm\"\n                  colorScheme=\"red\"\n                  variant=\"ghost\"\n                  onClick={() => handleDeleteTask(task.id)}\n                />\n              </HStack>\n            </HStack>\n\n            {/* Checklist Items */}\n            <Collapse in={expandedTasks.has(task.id)} animateOpacity>\n              <VStack align=\"stretch\" spacing={2} mt={3} pl={8}>\n                <Divider />\n                {task.checklistItems.map((item) => (\n                  <HStack key={item.id} spacing={2}>\n                    <Checkbox\n                      isChecked={item.completed}\n                      onChange={() => handleToggleChecklistItem(task.id, item.id, item.completed)}\n                      size=\"sm\"\n                    />\n                    <Text\n                      flex={1}\n                      fontSize=\"sm\"\n                      textDecoration={item.completed ? 'line-through' : 'none'}\n                      opacity={item.completed ? 0.6 : 1}\n                    >\n                      {item.title}\n                    </Text>\n                    <IconButton\n                      aria-label=\"Remove item\"\n                      icon={<DeleteIcon />}\n                      size=\"xs\"\n                      variant=\"ghost\"\n                      onClick={() => handleRemoveChecklistItem(task.id, item.id)}\n                    />\n                  </HStack>\n                ))}\n\n                {/* Add Checklist Item */}\n                <HStack mt={2}>\n                  <Input\n                    placeholder=\"Add checklist item...\"\n                    value={newChecklistItems[task.id] || ''}\n                    onChange={(e) =>\n                      setNewChecklistItems({ ...newChecklistItems, [task.id]: e.target.value })\n                    }\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddChecklistItem(task.id)}\n                    size=\"sm\"\n                  />\n                  <IconButton\n                    aria-label=\"Add item\"\n                    icon={<AddIcon />}\n                    size=\"sm\"\n                    onClick={() => handleAddChecklistItem(task.id)}\n                    isDisabled={!newChecklistItems[task.id]?.trim()}\n                  />\n                </HStack>\n              </VStack>\n            </Collapse>\n          </Box>\n        ))}\n      </VStack>\n\n      {tasks.length === 0 && (\n        <Box textAlign=\"center\" py={8} color=\"gray.500\">\n          <Text>No tasks yet. Add your first task above!</Text>\n        </Box>\n      )}\n    </VStack>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  VStack,\n  Text,\n  Textarea,\n  Button,\n  useToast,\n} from '@chakra-ui/react';\n\ninterface EventNotesTabProps {\n  eventNotes?: string;\n  onSave: (notes: string) => void;\n}\n\nexport const EventNotesTab: React.FC<EventNotesTabProps> = ({ eventNotes = '', onSave }) => {\n  const [notes, setNotes] = useState(eventNotes);\n  const [hasChanges, setHasChanges] = useState(false);\n  const toast = useToast();\n\n  useEffect(() => {\n    setNotes(eventNotes || '');\n    setHasChanges(false);\n  }, [eventNotes]);\n\n  const handleNotesChange = (value: string) => {\n    setNotes(value);\n    setHasChanges(value !== eventNotes);\n  };\n\n  const handleSave = () => {\n    onSave(notes);\n    setHasChanges(false);\n    toast({\n      title: 'Notes saved',\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  return (\n    <VStack align=\"stretch\" spacing={4} height=\"100%\">\n      <Text fontSize=\"lg\" fontWeight=\"bold\">\n        Event Notes\n      </Text>\n\n      <Textarea\n        placeholder=\"Add notes for this event... You can use this space to document preparation steps, important details, follow-up actions, or any other information related to this event.\"\n        value={notes}\n        onChange={(e) => handleNotesChange(e.target.value)}\n        minHeight=\"300px\"\n        resize=\"vertical\"\n      />\n\n      <Button\n        colorScheme=\"blue\"\n        onClick={handleSave}\n        isDisabled={!hasChanges}\n        alignSelf=\"flex-end\"\n      >\n        Save Notes\n      </Button>\n\n      <Box fontSize=\"sm\" color=\"gray.600\" mt={2}>\n        <Text>💡 Tip: Use notes to:</Text>\n        <Text ml={4}>• Document meeting agendas and outcomes</Text>\n        <Text ml={4}>• Track preparation steps for the event</Text>\n        <Text ml={4}>• Record important decisions or action items</Text>\n        <Text ml={4}>• Store reference links or resources</Text>\n      </Box>\n    </VStack>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  VStack,\n  HStack,\n  Box,\n  Text,\n  Heading,\n  Badge,\n  Divider,\n  Icon,\n  Button,\n  SimpleGrid,\n  Card,\n  CardBody,\n  useColorMode,\n  Select,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { FiUser, FiMail, FiPhone, FiMapPin, FiDollarSign, FiClock, FiCalendar, FiExternalLink, FiFileText, FiCheck, FiFolder } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport { getColor } from '../../../brandConfig';\nimport { gql, useMutation, useQuery } from '@apollo/client';\n\nconst UPDATE_EVENT = gql`\n  mutation UpdateEvent($id: String!, $input: CalendarEventInput!) {\n    updateEvent(id: $id, input: $input) {\n      id\n      metadata\n    }\n  }\n`;\n\nconst GET_CLIENT_BY_EMAIL = gql`\n  query GetClientByEmail($email: String!) {\n    clientByEmail(email: $email) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n    }\n  }\n`;\n\nconst CREATE_PROJECT = gql`\n  mutation CreateProject($input: ProjectInput!) {\n    createProject(input: $input) {\n      id\n      projectName\n      projectGoal\n      projectDescription\n      billingClient {\n        id\n        fName\n        lName\n      }\n    }\n  }\n`;\n\nconst GET_PROJECT_BY_ID = gql`\n  query GetProject($id: ID!) {\n    project(id: $id) {\n      id\n      projectName\n    }\n  }\n`;\n\ninterface BookingDetailsViewProps {\n  event: any;\n  calendarId: string;\n  onCancel?: () => void;\n  onReschedule?: () => void;\n  onSendReminder?: () => void;\n  onPaymentStatusUpdate?: () => void;\n}\n\n/**\n * BookingDetailsView - Read-only view for public booking events\n * Shows booker information, payment status, custom answers, and booking actions\n */\nexport const BookingDetailsView: React.FC<BookingDetailsViewProps> = ({\n  event,\n  calendarId,\n  onCancel,\n  onReschedule,\n  onSendReminder,\n  onPaymentStatusUpdate,\n}) => {\n  const { colorMode } = useColorMode();\n  const toast = useToast();\n  const metadata = event.extendedProps?.metadata || event.metadata || {};\n  const { isOpen: isProjectModalOpen, onOpen: onProjectModalOpen, onClose: onProjectModalClose } = useDisclosure();\n\n  // Extract booking information from metadata FIRST (before using in queries)\n  const bookerName = metadata['X-BOOKER-NAME'] || 'Unknown';\n  const bookerEmail = metadata['X-BOOKER-EMAIL'] || '';\n  const bookerPhone = metadata['X-BOOKER-PHONE'] || '';\n  const bookerTimezone = metadata['X-BOOKER-TIMEZONE'] || 'UTC';\n  const bookingStatus = metadata['X-BOOKING-STATUS'] || 'CONFIRMED';\n  const paymentStatus = metadata['X-PAYMENT-STATUS'] || 'NOT_REQUIRED';\n  const paymentAmount = metadata['X-PAYMENT-AMOUNT'];\n  const paymentCurrency = metadata['X-PAYMENT-CURRENCY'] || 'USD';\n  const meetingLink = metadata['X-MEETING-LINK'];\n  const bookingToken = metadata['X-BOOKING-TOKEN'];\n  const existingProjectId = metadata['X-PROJECT-ID'];\n\n  // Local state for payment status\n  const [localPaymentStatus, setLocalPaymentStatus] = useState(paymentStatus);\n\n  // Project form state\n  const eventTypeName = event.title?.split(' - ')[0] || 'Booking Session';\n  const [projectFormData, setProjectFormData] = useState({\n    projectName: eventTypeName,\n    projectGoal: `Complete ${eventTypeName} session and deliver outcomes`,\n    projectDescription: `Project for ${bookerName}'s ${eventTypeName} booked on ${format(new Date(), 'MMMM d, yyyy')}`,\n  });\n\n  // Query to check if client exists\n  const { data: clientData, loading: loadingClient } = useQuery(GET_CLIENT_BY_EMAIL, {\n    variables: { email: bookerEmail },\n    skip: !bookerEmail, // Skip query if no email\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || '',\n      },\n    },\n  });\n\n  const clientExists = !!clientData?.clientByEmail;\n  const existingClient = clientData?.clientByEmail;\n\n  // Query to check if project exists\n  const { data: projectData, loading: loadingProject, refetch: refetchProject } = useQuery(GET_PROJECT_BY_ID, {\n    variables: { id: existingProjectId || '' },\n    skip: !existingProjectId,\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || '',\n      },\n    },\n  });\n\n  const projectExists = !!projectData?.project;\n  const existingProject = projectData?.project;\n\n  // Mutation to create project\n  const [createProject, { loading: creatingProject }] = useMutation(CREATE_PROJECT, {\n    onCompleted: async (data) => {\n      const createdProjectId = data.createProject.id;\n      const createdProjectName = data.createProject.projectName;\n\n      toast({\n        title: 'Project Created',\n        description: `\"${createdProjectName}\" has been created successfully`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // Update event metadata with project ID\n      try {\n        await updateEvent({\n          variables: {\n            id: event.id,\n            input: {\n              calendarId: calendarId,\n              title: event.title,\n              startTime: event.start || event.startTime,\n              endTime: event.end || event.endTime,\n              metadata: {\n                ...metadata,\n                'X-PROJECT-ID': createdProjectId,\n                'X-PROJECT-NAME': createdProjectName,\n              },\n            },\n          },\n          context: {\n            headers: {\n              'x-tenant-id': localStorage.getItem('tenantId') || '',\n            },\n          },\n        });\n\n        // Refetch project data\n        await refetchProject();\n\n        // Close modal\n        onProjectModalClose();\n\n        toast({\n          title: 'Booking Updated',\n          description: 'Project has been linked to this booking',\n          status: 'success',\n          duration: 2000,\n          isClosable: true,\n        });\n      } catch (error) {\n        console.error('Error linking project to booking:', error);\n        toast({\n          title: 'Warning',\n          description: 'Project created but failed to link to booking',\n          status: 'warning',\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating project',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  // Mutation to update event metadata\n  const [updateEvent, { loading: updating }] = useMutation(UPDATE_EVENT, {\n    onCompleted: () => {\n      toast({\n        title: 'Payment status updated',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      if (onPaymentStatusUpdate) {\n        onPaymentStatusUpdate();\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating payment status',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const textPrimary = getColor(colorMode === 'light' ? 'text.primary' : 'text.primaryDark', colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? 'text.secondary' : 'text.secondaryDark', colorMode);\n  const bgCard = colorMode === 'light' ? 'white' : 'gray.800';\n  const borderColor = colorMode === 'light' ? 'gray.200' : 'gray.600';\n\n  // Parse dates from event - handle both FullCalendar format and raw event format\n  const startDate = event.start ? new Date(event.start) :\n                    event.startTime ? new Date(event.startTime) : null;\n  const endDate = event.end ? new Date(event.end) :\n                  event.endTime ? new Date(event.endTime) : null;\n\n  console.log('📅 BookingDetailsView - Event data:', {\n    event,\n    metadata,\n    startDate,\n    endDate,\n    startRaw: event.start,\n    startTime: event.startTime,\n    endRaw: event.end,\n    endTime: event.endTime\n  });\n\n  // Handler to update payment status\n  const handlePaymentStatusChange = async (newStatus: string) => {\n    setLocalPaymentStatus(newStatus);\n\n    try {\n      // Update the event metadata\n      await updateEvent({\n        variables: {\n          id: event.id,\n          input: {\n            calendarId: calendarId, // Use the calendarId prop passed from EventModal\n            title: event.title,\n            startTime: event.start || event.startTime,\n            endTime: event.end || event.endTime,\n            metadata: {\n              ...metadata,\n              'X-PAYMENT-STATUS': newStatus,\n            },\n          },\n        },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || '',\n          },\n        },\n      });\n\n      toast({\n        title: 'Payment status updated',\n        description: `Status changed to ${newStatus}`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // Call the callback if provided\n      if (onPaymentStatusUpdate) {\n        onPaymentStatusUpdate();\n      }\n    } catch (error) {\n      console.error('Error updating payment status:', error);\n\n      // Revert the local state on error\n      setLocalPaymentStatus(paymentStatus);\n\n      toast({\n        title: 'Error updating payment status',\n        description: error instanceof Error ? error.message : 'Failed to update payment status',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  // Handler to create a client from booker information\n  const handleCreateClient = () => {\n    // Split name into first and last\n    const nameParts = bookerName.split(' ');\n    const firstName = nameParts[0] || '';\n    const lastName = nameParts.slice(1).join(' ') || '';\n\n    // Create URL with query parameters to pre-fill the client form\n    const clientParams = new URLSearchParams({\n      fName: firstName,\n      lName: lastName,\n      email: bookerEmail,\n      phoneNumber: bookerPhone,\n      source: 'booking',\n      bookingToken: bookingToken || '',\n    });\n\n    // Open in new tab\n    window.open(`/clients/new?${clientParams.toString()}`, '_blank');\n  };\n\n  // Handler to create project from booking\n  const handleCreateProject = async () => {\n    if (!clientExists) {\n      toast({\n        title: 'Client required',\n        description: 'Please create a client record first',\n        status: 'warning',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    try {\n      await createProject({\n        variables: {\n          input: {\n            projectName: projectFormData.projectName,\n            projectGoal: projectFormData.projectGoal,\n            projectDescription: projectFormData.projectDescription,\n            billingClient: existingClient.id,\n          },\n        },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || '',\n          },\n        },\n      });\n    } catch (error) {\n      console.error('Error creating project:', error);\n    }\n  };\n\n  // Handler to create a bill from this booking\n  const handleIssueBill = () => {\n    if (!clientExists) {\n      toast({\n        title: 'Client not found',\n        description: 'Please create a client record first using the \"Create Client\" button',\n        status: 'warning',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    if (!projectExists) {\n      toast({\n        title: 'Project required',\n        description: 'Please create a project first using the \"Create Project\" button',\n        status: 'warning',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // Get event type name from the title (format: \"EventType - BookerName\")\n    const eventTypeName = event.title?.split(' - ')[0] || 'Booking Session';\n\n    // Calculate amount in dollars (stored as cents in metadata)\n    const amountInDollars = paymentAmount ? (paymentAmount / 100).toFixed(2) : '0.00';\n\n    // Create URL with query parameters to pre-fill the bill\n    const billParams = new URLSearchParams({\n      // Pre-fill line item\n      itemName: eventTypeName,\n      itemPrice: amountInDollars,\n      itemQuantity: '1',\n      // Pre-fill client info\n      clientEmail: bookerEmail,\n      clientName: bookerName,\n      clientPhone: bookerPhone,\n      // Add currency\n      currency: paymentCurrency,\n      // Add project ID\n      projectId: existingProjectId || '',\n      // Add notes\n      notes: `Bill for booking on ${startDate ? format(startDate, 'MMMM d, yyyy') : ''} at ${startDate ? format(startDate, 'h:mm a') : ''}. Booking Token: ${bookingToken}. Project: ${existingProject?.projectName || 'N/A'}`\n    });\n\n    // Open in new tab\n    window.open(`/bills/new?${billParams.toString()}`, '_blank');\n  };\n\n  // Extract custom question answers\n  const customAnswers: Array<{ question: string; answer: string }> = [];\n  Object.keys(metadata).forEach(key => {\n    if (key.startsWith('X-BOOKING-QUESTION-')) {\n      const index = key.replace('X-BOOKING-QUESTION-', '');\n      const answerKey = `X-BOOKING-ANSWER-${index}`;\n      if (metadata[answerKey]) {\n        customAnswers.push({\n          question: metadata[key],\n          answer: metadata[answerKey],\n        });\n      }\n    }\n  });\n\n  // Payment status badge color\n  const getPaymentStatusColor = () => {\n    switch (localPaymentStatus) {\n      case 'COMPLETED': return 'green';\n      case 'PENDING': return 'yellow';\n      case 'FAILED': return 'red';\n      case 'REFUNDED': return 'orange';\n      case 'NOT_REQUIRED': return 'gray';\n      default: return 'gray';\n    }\n  };\n\n  // Booking status badge color\n  const getBookingStatusColor = () => {\n    switch (bookingStatus) {\n      case 'CONFIRMED': return 'green';\n      case 'PENDING': return 'yellow';\n      case 'CANCELLED': return 'red';\n      default: return 'gray';\n    }\n  };\n\n  return (\n    <VStack spacing={6} align=\"stretch\" width=\"100%\">\n      {/* Header Section */}\n      <Box>\n        <HStack spacing={2} mb={2}>\n          <Icon as={FiCalendar} color=\"blue.500\" boxSize={5} />\n          <Heading size=\"md\" color={textPrimary}>\n            Public Booking Details\n          </Heading>\n        </HStack>\n        <HStack spacing={2}>\n          <Badge colorScheme={getBookingStatusColor()} fontSize=\"sm\">\n            {bookingStatus}\n          </Badge>\n          {paymentStatus !== 'NOT_REQUIRED' && (\n            <Badge colorScheme={getPaymentStatusColor()} fontSize=\"sm\">\n              Payment: {paymentStatus}\n            </Badge>\n          )}\n        </HStack>\n      </Box>\n\n      <Divider />\n\n      {/* Booker Information */}\n      <Card bg={bgCard} borderColor={borderColor} borderWidth=\"1px\">\n        <CardBody>\n          <Heading size=\"sm\" color={textPrimary} mb={4}>\n            Booker Information\n          </Heading>\n          <VStack align=\"stretch\" spacing={3}>\n            <HStack>\n              <Icon as={FiUser} color={textSecondary} />\n              <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                Name:\n              </Text>\n              <Text color={textPrimary} fontWeight=\"medium\">\n                {bookerName}\n              </Text>\n            </HStack>\n\n            {bookerEmail && (\n              <HStack>\n                <Icon as={FiMail} color={textSecondary} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Email:\n                </Text>\n                <Text color={textPrimary} fontWeight=\"medium\">\n                  {bookerEmail}\n                </Text>\n              </HStack>\n            )}\n\n            {bookerPhone && (\n              <HStack>\n                <Icon as={FiPhone} color={textSecondary} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Phone:\n                </Text>\n                <Text color={textPrimary} fontWeight=\"medium\">\n                  {bookerPhone}\n                </Text>\n              </HStack>\n            )}\n\n            <HStack>\n              <Icon as={FiClock} color={textSecondary} />\n              <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                Timezone:\n              </Text>\n              <Text color={textPrimary} fontWeight=\"medium\">\n                {bookerTimezone}\n              </Text>\n            </HStack>\n\n            {/* Client Status and Create Button */}\n            <Divider />\n            <Box>\n              {loadingClient ? (\n                <Text fontSize=\"sm\" color={textSecondary}>\n                  Checking client status...\n                </Text>\n              ) : clientExists ? (\n                <VStack align=\"stretch\" spacing={2}>\n                  <HStack spacing={2}>\n                    <Icon as={FiCheck} color=\"green.500\" />\n                    <Text fontSize=\"sm\" color=\"green.600\" fontWeight=\"medium\">\n                      Client exists in database\n                    </Text>\n                    <Badge colorScheme=\"green\" fontSize=\"xs\">\n                      {existingClient?.fName} {existingClient?.lName}\n                    </Badge>\n                  </HStack>\n                  <Button\n                    leftIcon={<Icon as={FiExternalLink} />}\n                    colorScheme=\"green\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(`/client/${existingClient?.id}`, '_blank')}\n                    width=\"full\"\n                  >\n                    View Client Details\n                  </Button>\n                </VStack>\n              ) : (\n                <VStack align=\"stretch\" spacing={2}>\n                  <HStack spacing={2}>\n                    <Icon as={FiUser} color=\"orange.500\" />\n                    <Text fontSize=\"sm\" color=\"orange.600\" fontWeight=\"medium\">\n                      Client not found in database\n                    </Text>\n                  </HStack>\n                  <Button\n                    leftIcon={<Icon as={FiUser} />}\n                    colorScheme=\"orange\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleCreateClient}\n                    width=\"full\"\n                  >\n                    Create Client Record\n                  </Button>\n                  <Text fontSize=\"xs\" color={textSecondary}>\n                    Opens pre-filled client form in new tab\n                  </Text>\n                </VStack>\n              )}\n            </Box>\n          </VStack>\n        </CardBody>\n      </Card>\n\n      {/* Appointment Details */}\n      <Card bg={bgCard} borderColor={borderColor} borderWidth=\"1px\">\n        <CardBody>\n          <Heading size=\"sm\" color={textPrimary} mb={4}>\n            Appointment Details\n          </Heading>\n          <VStack align=\"stretch\" spacing={3}>\n            {startDate && (\n              <HStack>\n                <Icon as={FiCalendar} color={textSecondary} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Date:\n                </Text>\n                <Text color={textPrimary} fontWeight=\"medium\">\n                  {format(startDate, 'EEEE, MMMM d, yyyy')}\n                </Text>\n              </HStack>\n            )}\n\n            {startDate && endDate && (\n              <HStack>\n                <Icon as={FiClock} color={textSecondary} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Time:\n                </Text>\n                <Text color={textPrimary} fontWeight=\"medium\">\n                  {format(startDate, 'h:mm a')} - {format(endDate, 'h:mm a')}\n                </Text>\n              </HStack>\n            )}\n\n            {event.extendedProps?.location && (\n              <HStack align=\"start\">\n                <Icon as={FiMapPin} color={textSecondary} mt={1} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Location:\n                </Text>\n                <Text color={textPrimary} fontWeight=\"medium\">\n                  {typeof event.extendedProps.location === 'string'\n                    ? event.extendedProps.location\n                    : event.extendedProps.location?.name || event.extendedProps.location?.details || 'N/A'}\n                </Text>\n              </HStack>\n            )}\n\n            {meetingLink && (\n              <HStack>\n                <Icon as={FiExternalLink} color={textSecondary} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Meeting Link:\n                </Text>\n                <Button\n                  as=\"a\"\n                  href={meetingLink}\n                  target=\"_blank\"\n                  size=\"sm\"\n                  colorScheme=\"blue\"\n                  variant=\"link\"\n                  rightIcon={<FiExternalLink />}\n                >\n                  Join Meeting\n                </Button>\n              </HStack>\n            )}\n          </VStack>\n        </CardBody>\n      </Card>\n\n      {/* Payment Information */}\n      {paymentStatus !== 'NOT_REQUIRED' && (\n        <Card bg={bgCard} borderColor={borderColor} borderWidth=\"1px\">\n          <CardBody>\n            <Heading size=\"sm\" color={textPrimary} mb={4}>\n              Payment Information\n            </Heading>\n            <VStack align=\"stretch\" spacing={3}>\n              <HStack>\n                <Icon as={FiDollarSign} color={textSecondary} />\n                <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                  Amount:\n                </Text>\n                <Text color={textPrimary} fontWeight=\"medium\">\n                  {paymentAmount ? `${paymentCurrency} $${(paymentAmount / 100).toFixed(2)}` : 'N/A'}\n                </Text>\n              </HStack>\n\n              <VStack align=\"stretch\" spacing={2}>\n                <HStack>\n                  <Text color={textSecondary} fontSize=\"sm\" width=\"100px\">\n                    Status:\n                  </Text>\n                  <Badge colorScheme={getPaymentStatusColor()}>\n                    {localPaymentStatus}\n                  </Badge>\n                </HStack>\n                <Box>\n                  <Text color={textSecondary} fontSize=\"xs\" mb={1}>\n                    Update Payment Status:\n                  </Text>\n                  <Select\n                    value={localPaymentStatus}\n                    onChange={(e) => handlePaymentStatusChange(e.target.value)}\n                    size=\"sm\"\n                    isDisabled={updating}\n                  >\n                    <option value=\"NOT_REQUIRED\">Not Required</option>\n                    <option value=\"PENDING\">Pending</option>\n                    <option value=\"COMPLETED\">Completed</option>\n                    <option value=\"FAILED\">Failed</option>\n                    <option value=\"REFUNDED\">Refunded</option>\n                  </Select>\n                </Box>\n              </VStack>\n\n              {/* Project Management Section */}\n              <Divider />\n              <Box>\n                {loadingProject ? (\n                  <Text fontSize=\"sm\" color={textSecondary}>\n                    Checking project status...\n                  </Text>\n                ) : projectExists ? (\n                  <VStack align=\"stretch\" spacing={2}>\n                    <HStack spacing={2}>\n                      <Icon as={FiCheck} color=\"green.500\" />\n                      <Text fontSize=\"sm\" color=\"green.600\" fontWeight=\"medium\">\n                        Project linked to booking\n                      </Text>\n                      <Badge colorScheme=\"green\" fontSize=\"xs\">\n                        {existingProject?.projectName}\n                      </Badge>\n                    </HStack>\n                    <Button\n                      leftIcon={<Icon as={FiExternalLink} />}\n                      colorScheme=\"green\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => window.open(`/project/${existingProjectId}`, '_blank')}\n                      width=\"full\"\n                    >\n                      View Project\n                    </Button>\n                  </VStack>\n                ) : (\n                  <VStack align=\"stretch\" spacing={2}>\n                    <HStack spacing={2}>\n                      <Icon as={FiFolder} color=\"blue.500\" />\n                      <Text fontSize=\"sm\" color=\"blue.600\" fontWeight=\"medium\">\n                        No project linked yet\n                      </Text>\n                    </HStack>\n                    <Button\n                      leftIcon={<Icon as={FiFolder} />}\n                      colorScheme=\"blue\"\n                      variant=\"solid\"\n                      size=\"sm\"\n                      onClick={onProjectModalOpen}\n                      width=\"full\"\n                      isDisabled={!clientExists}\n                    >\n                      Create Project\n                    </Button>\n                    {!clientExists && (\n                      <Text fontSize=\"xs\" color={textSecondary}>\n                        Create a client record first before creating a project\n                      </Text>\n                    )}\n                  </VStack>\n                )}\n              </Box>\n\n              {/* Issue Bill Button */}\n              <Divider />\n              <Box>\n                <Button\n                  leftIcon={<Icon as={FiFileText} />}\n                  colorScheme={projectExists ? \"purple\" : \"gray\"}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleIssueBill}\n                  width=\"full\"\n                  isDisabled={!projectExists}\n                >\n                  Issue Bill\n                </Button>\n                <Text fontSize=\"xs\" color={textSecondary} mt={2}>\n                  {projectExists\n                    ? 'Create a formal invoice for this booking'\n                    : 'Create a project first before issuing a bill'}\n                </Text>\n              </Box>\n            </VStack>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Custom Question Answers */}\n      {customAnswers.length > 0 && (\n        <Card bg={bgCard} borderColor={borderColor} borderWidth=\"1px\">\n          <CardBody>\n            <Heading size=\"sm\" color={textPrimary} mb={4}>\n              Additional Information\n            </Heading>\n            <VStack align=\"stretch\" spacing={3}>\n              {customAnswers.map((qa, index) => (\n                <Box key={index}>\n                  <Text color={textSecondary} fontSize=\"sm\" mb={1}>\n                    {qa.question}\n                  </Text>\n                  <Text color={textPrimary} fontWeight=\"medium\" pl={4}>\n                    {qa.answer}\n                  </Text>\n                </Box>\n              ))}\n            </VStack>\n          </CardBody>\n        </Card>\n      )}\n\n      {/* Actions */}\n      <Divider />\n      <SimpleGrid columns={{ base: 1, md: 3 }} spacing={3}>\n        {onSendReminder && (\n          <Button colorScheme=\"blue\" variant=\"outline\" onClick={onSendReminder}>\n            Send Reminder\n          </Button>\n        )}\n        {onReschedule && (\n          <Button colorScheme=\"orange\" variant=\"outline\" onClick={onReschedule}>\n            Reschedule\n          </Button>\n        )}\n        {onCancel && (\n          <Button colorScheme=\"red\" variant=\"outline\" onClick={onCancel}>\n            Cancel Booking\n          </Button>\n        )}\n      </SimpleGrid>\n\n      {/* Booking Token (for admin reference) */}\n      {bookingToken && (\n        <Box pt={2}>\n          <Text color={textSecondary} fontSize=\"xs\">\n            Booking Token: {bookingToken}\n          </Text>\n        </Box>\n      )}\n\n      {/* Project Creation Modal */}\n      <Modal isOpen={isProjectModalOpen} onClose={onProjectModalClose} size=\"lg\">\n        <ModalOverlay backdropFilter=\"blur(4px)\" />\n        <ModalContent bg={bgCard} borderColor={borderColor} borderWidth=\"1px\">\n          <ModalHeader color={textPrimary}>\n            <HStack spacing={2}>\n              <Icon as={FiFolder} color=\"blue.500\" />\n              <Text>Create Project for Booking</Text>\n            </HStack>\n          </ModalHeader>\n          <ModalCloseButton color={textSecondary} />\n\n          <ModalBody pb={6}>\n            <VStack spacing={4} align=\"stretch\">\n              <Box bg={colorMode === 'light' ? 'blue.50' : 'blue.900'} p={3} borderRadius=\"md\">\n                <Text fontSize=\"sm\" color={textPrimary}>\n                  <strong>Client:</strong> {bookerName} ({bookerEmail})\n                </Text>\n                <Text fontSize=\"sm\" color={textPrimary}>\n                  <strong>Session:</strong> {eventTypeName}\n                </Text>\n              </Box>\n\n              <FormControl isRequired>\n                <FormLabel color={textPrimary} fontSize=\"sm\">\n                  Project Name\n                </FormLabel>\n                <Input\n                  value={projectFormData.projectName}\n                  onChange={(e) =>\n                    setProjectFormData({ ...projectFormData, projectName: e.target.value })\n                  }\n                  placeholder=\"Enter project name\"\n                  bg={colorMode === 'light' ? 'white' : 'gray.700'}\n                  borderColor={borderColor}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl isRequired>\n                <FormLabel color={textPrimary} fontSize=\"sm\">\n                  Project Goal (max 17 words)\n                </FormLabel>\n                <Textarea\n                  value={projectFormData.projectGoal}\n                  onChange={(e) =>\n                    setProjectFormData({ ...projectFormData, projectGoal: e.target.value })\n                  }\n                  placeholder=\"Enter project goal\"\n                  rows={2}\n                  bg={colorMode === 'light' ? 'white' : 'gray.700'}\n                  borderColor={borderColor}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textPrimary} fontSize=\"sm\">\n                  Project Description (max 70 words)\n                </FormLabel>\n                <Textarea\n                  value={projectFormData.projectDescription}\n                  onChange={(e) =>\n                    setProjectFormData({ ...projectFormData, projectDescription: e.target.value })\n                  }\n                  placeholder=\"Enter project description\"\n                  rows={3}\n                  bg={colorMode === 'light' ? 'white' : 'gray.700'}\n                  borderColor={borderColor}\n                  color={textPrimary}\n                />\n              </FormControl>\n            </VStack>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={onProjectModalClose}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleCreateProject}\n              isLoading={creatingProject}\n              leftIcon={<Icon as={FiFolder} />}\n            >\n              Create Project\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </VStack>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  Button,\n  Stack,\n  HStack,\n  VStack,\n  Switch,\n  Text,\n  useToast,\n  InputGroup,\n  InputLeftAddon,\n  Badge,\n  IconButton,\n  Box,\n  Divider,\n  Link,\n  Tooltip,\n  Radio,\n  RadioGroup,\n  FormHelperText,\n  Icon,\n  useColorMode,\n  useBreakpointValue,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel\n} from '@chakra-ui/react';\nimport { AddIcon, DeleteIcon, CalendarIcon, BellIcon, InfoIcon, EmailIcon } from '@chakra-ui/icons';\nimport { FiMapPin, FiUsers, FiRepeat, FiMessageSquare, FiMail, FiCalendar, FiCheckSquare, FiFileText } from 'react-icons/fi';\nimport { ClientSearchSelector } from '../clients/components/ClientSearchSelector';\nimport { TagSelector } from './components/TagSelector';\nimport { getColor } from '../../brandConfig';\nimport { EventTasksTab } from './components/EventTasksTab';\nimport { EventNotesTab } from './components/EventNotesTab';\nimport { BookingDetailsView } from './components/BookingDetailsView';\n\n/**\n * iCALENDAR METADATA STANDARD (RFC 5545 Section 3.8.8.2)\n * \n * All custom properties in metadata MUST use \"X-\" prefix for non-standard properties.\n * This ensures compatibility with iCalendar standard and allows for proper synchronization\n * with external calendar systems (Google Calendar, Outlook, etc.)\n * \n * STANDARD X-PROPERTIES FOR THIS APPLICATION:\n * \n * Event Classification:\n * - X-EVENT-TYPE: Event type (STANDARD, SMS_BROADCAST, EMAIL_BROADCAST, BOTH_BROADCAST)\n * \n * SMS Broadcast Properties:\n * - X-SMS-CONTENT: SMS message content (max 160 chars recommended)\n * - X-SMS-RECIPIENT-LIST: ID of the recipient list for SMS\n * - X-SMS-TEMPLATE-ID: Optional SMS template identifier\n * \n * Email Broadcast Properties:\n * - X-EMAIL-SUBJECT: Email subject line\n * - X-EMAIL-CONTENT: Email body content (HTML supported)\n * - X-EMAIL-RECIPIENT-LIST: ID of the recipient list for email\n * - X-EMAIL-TEMPLATE-ID: Optional email template identifier\n * \n * Broadcast Scheduling:\n * - X-BROADCAST-SCHEDULED: ISO 8601 datetime for scheduled send\n * - X-BROADCAST-STATUS: Status of broadcast (PENDING, SENT, FAILED)\n * - X-BROADCAST-SENT-COUNT: Number of messages sent\n * \n * System Properties:\n * - X-CREATED-BY: System identifier (e.g., 'business-builder-calendar')\n * - X-ICAL-VERSION: RFC version compliance (e.g., 'RFC5545')\n * - X-MODULE-TYPE: If linked to another module (e.g., 'SMS_CAMPAIGN')\n * - X-MODULE-REF-ID: Reference ID in the linked module\n * \n * Example metadata object:\n * {\n *   \"X-EVENT-TYPE\": \"SMS_BROADCAST\",\n *   \"X-SMS-CONTENT\": \"Reminder: Your appointment is tomorrow at 9 AM\",\n *   \"X-SMS-RECIPIENT-LIST\": \"active-clients-list\",\n *   \"X-BROADCAST-SCHEDULED\": \"2025-09-15T09:00:00Z\",\n *   \"X-BROADCAST-STATUS\": \"PENDING\",\n *   \"X-CREATED-BY\": \"business-builder-calendar\",\n *   \"X-ICAL-VERSION\": \"RFC5545\"\n * }\n * \n * CRON JOB QUERIES:\n * Cron jobs can query events using these metadata fields:\n * - Find all SMS broadcasts: { \"metadata.X-EVENT-TYPE\": \"SMS_BROADCAST\" }\n * - Find pending broadcasts: { \"metadata.X-BROADCAST-STATUS\": \"PENDING\" }\n * - Find scheduled broadcasts: { \"metadata.X-BROADCAST-SCHEDULED\": { $lte: new Date() } }\n */\n\nconst CREATE_EVENT = gql`\n  mutation CreateEvent($input: CalendarEventInput!) {\n    createEvent(input: $input) {\n      id\n      title\n      startTime\n      endTime\n    }\n  }\n`;\n\nconst UPDATE_EVENT = gql`\n  mutation UpdateEvent($id: String!, $input: CalendarEventInput!) {\n    updateEvent(id: $id, input: $input) {\n      id\n      title\n      startTime\n      endTime\n    }\n  }\n`;\n\nconst CANCEL_EVENT = gql`\n  mutation CancelEvent($id: String!, $reason: String) {\n    cancelEvent(id: $id, reason: $reason)\n  }\n`;\n\ninterface EventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  calendarId: string;\n  event?: any;\n  initialDate?: string;\n  initialTimeRange?: { start: string; end: string; isAllDay?: boolean };\n  onSuccess: () => void;\n}\n\nconst EventModal: React.FC<EventModalProps> = ({\n  isOpen,\n  onClose,\n  calendarId,\n  event,\n  initialDate,\n  initialTimeRange,\n  onSuccess\n}) => {\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n  const isEdit = !!event && !!event.id;  // Only edit mode if event has an ID\n\n  // Check if this is a public booking event\n  const isPublicBooking = event?.extendedProps?.metadata?.['X-EVENT-TYPE'] === 'PUBLIC_BOOKING' ||\n                          event?.metadata?.['X-EVENT-TYPE'] === 'PUBLIC_BOOKING';\n\n  // Theme-aware colors\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.darkSurface\", colorMode);\n  const formBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.taskCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    startTime: '',\n    endTime: '',\n    allDay: false,\n    location: '',\n    status: 'CONFIRMED',\n    visibility: 'PUBLIC',\n    eventType: 'STANDARD', // STANDARD, SMS_BROADCAST, EMAIL_BROADCAST, BOTH_BROADCAST\n    broadcastData: {\n      smsContent: '',\n      emailSubject: '',\n      emailContent: '',\n      recipientListId: '',\n      selectedClientIds: [] as string[],\n      recipientCount: 0,\n      scheduledSendTime: '',\n      useAlphaId: false // Add option to use AlphaId for SMS\n    },\n    attendees: [] as Array<{ email: string; name: string }>,\n    recurrence: {\n      enabled: false,\n      frequency: 'DAILY',\n      interval: 1,\n      endDate: ''\n    },\n    reminders: [\n      { minutes: 15, type: 'NOTIFICATION' }\n    ],\n    attachments: [] as Array<{ name: string; url: string }>,\n    metadata: {} as Record<string, any>,\n    categories: [] as string[],\n    eventNotes: ''\n  });\n\n  const [newAttendeeEmail, setNewAttendeeEmail] = useState('');\n  const [newAttendeeName, setNewAttendeeName] = useState('');\n\n  useEffect(() => {\n    console.log('🎬 EventModal opened');\n    console.log('📝 Initial event prop:', event);\n    console.log('📅 Calendar ID:', calendarId);\n    console.log('📆 Initial Date:', initialDate);\n    console.log('⏰ Initial Time Range:', initialTimeRange);\n    console.log('✏️ Edit Mode:', isEdit);\n    \n    if (event && event.id) {\n      console.log('🔧 Setting up edit mode with event:', event);\n      const startTime = new Date(event.startTime);\n      const endTime = new Date(event.endTime);\n      \n      // Format for datetime-local input (which expects local time)\n      const formatDateTimeLocal = (date: Date) => {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        const hours = String(date.getHours()).padStart(2, '0');\n        const minutes = String(date.getMinutes()).padStart(2, '0');\n        return `${year}-${month}-${day}T${hours}:${minutes}`;\n      };\n      \n      // Debug logging for metadata\n      console.log('🔍 Event data loaded:');\n      console.log('  Event ID:', event.id);\n      console.log('  Full metadata:', event.metadata);\n      console.log('  Metadata type:', typeof event.metadata);\n      console.log('  X-EVENT-TYPE:', event.metadata?.['X-EVENT-TYPE']);\n      console.log('  Event type resolved:', event.metadata?.['X-EVENT-TYPE'] || event.metadata?.eventType || 'STANDARD');\n      \n      // If metadata is a string, try to parse it\n      let parsedMetadata = event.metadata;\n      if (typeof event.metadata === 'string') {\n        try {\n          parsedMetadata = JSON.parse(event.metadata);\n          console.log('  Parsed metadata:', parsedMetadata);\n        } catch (e) {\n          console.error('  Failed to parse metadata:', e);\n        }\n      }\n      \n      setFormData({\n        title: event.title || '',\n        description: event.description || '',\n        startTime: formatDateTimeLocal(startTime),\n        endTime: formatDateTimeLocal(endTime),\n        allDay: event.isAllDay || event.allDay || false,\n        location: event.location?.address || event.location || '',\n        status: event.status || 'CONFIRMED',\n        visibility: event.visibility || 'PUBLIC',\n        eventType: event.metadata?.['X-EVENT-TYPE'] || event.metadata?.eventType || 'STANDARD',\n        broadcastData: {\n          smsContent: event.metadata?.['X-SMS-CONTENT'] || event.metadata?.broadcastData?.smsContent || '',\n          emailSubject: event.metadata?.['X-EMAIL-SUBJECT'] || event.metadata?.broadcastData?.emailSubject || '',\n          emailContent: event.metadata?.['X-EMAIL-CONTENT'] || event.metadata?.broadcastData?.emailContent || '',\n          recipientListId: event.metadata?.['X-SMS-RECIPIENT-LIST'] || event.metadata?.['X-EMAIL-RECIPIENT-LIST'] || event.metadata?.broadcastData?.recipientListId || '',\n          selectedClientIds: event.metadata?.['X-SELECTED-CLIENT-IDS'] || event.metadata?.broadcastData?.selectedClientIds || [],\n          recipientCount: event.metadata?.broadcastData?.recipientCount || 0,\n          scheduledSendTime: event.metadata?.['X-BROADCAST-SCHEDULED'] || event.metadata?.broadcastData?.scheduledSendTime || '',\n          useAlphaId: event.metadata?.['X-USE-ALPHA-ID'] || event.metadata?.broadcastData?.useAlphaId || false\n        },\n        attendees: event.attendees?.map((a: any) => ({\n          clientId: a.clientId,\n          email: a.email,\n          name: a.name,\n          status: a.status,\n          role: a.role,\n          isOrganizer: a.isOrganizer,\n          rsvpRequired: a.rsvpRequired\n        })) || [],\n        recurrence: {\n          enabled: !!event.recurrence,\n          frequency: event.recurrence?.frequency || 'DAILY',\n          interval: event.recurrence?.interval || 1,\n          endDate: event.recurrence?.endDate || ''\n        },\n        reminders: event.reminders?.map((r: any) => ({\n          minutes: r.minutesBefore || r.minutes || 15,\n          type: r.method === 'PUSH' ? 'NOTIFICATION' : r.method || 'EMAIL'\n        })) || [{ minutes: 15, type: 'NOTIFICATION' }],\n        attachments: event.attachments?.map((a: any) => ({\n          name: a.name,\n          url: a.url\n        })) || [],\n        metadata: event.metadata || {},\n        categories: event.categories || [],\n        eventNotes: event.eventNotes || ''\n      });\n    } else if (initialTimeRange) {\n      // Use the time range from drag selection\n      console.log('⏰ Setting up create mode with time range:', initialTimeRange);\n\n      setFormData(prev => ({\n        ...prev,\n        title: '',\n        description: '',\n        startTime: initialTimeRange.start,\n        endTime: initialTimeRange.end,\n        allDay: initialTimeRange.isAllDay || false,  // Use isAllDay flag from selection\n        status: 'CONFIRMED',\n        visibility: 'PUBLIC',\n        eventType: 'STANDARD',\n        broadcastData: {\n          smsContent: '',\n          emailSubject: '',\n          emailContent: '',\n          recipientListId: '',\n          selectedClientIds: [],\n          recipientCount: 0,\n          scheduledSendTime: '',\n          useAlphaId: false\n        },\n        attendees: [],\n        reminders: [{ minutes: 15, type: 'NOTIFICATION' }],\n        attachments: [],\n        metadata: {},\n        categories: []\n      }));\n    } else if (initialDate) {\n      // Set times based on clicked date for new event\n      console.log('📅 Setting up create mode with date:', initialDate);\n      \n      // Create a date from the clicked date string\n      // FullCalendar gives us YYYY-MM-DD format\n      const [year, month, day] = initialDate.split('-').map(Number);\n      \n      // Create start time at 9 AM local time on the clicked date\n      const start = new Date(year, month - 1, day, 9, 0, 0); // month is 0-indexed\n      \n      // Create end time 10 minutes later\n      const end = new Date(year, month - 1, day, 9, 10, 0);\n      \n      // Format for datetime-local input (which expects local time in ISO format without timezone)\n      const formatDateTimeLocal = (date: Date) => {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        const hours = String(date.getHours()).padStart(2, '0');\n        const minutes = String(date.getMinutes()).padStart(2, '0');\n        return `${year}-${month}-${day}T${hours}:${minutes}`;\n      };\n      \n      const startTimeFormatted = formatDateTimeLocal(start);\n      const endTimeFormatted = formatDateTimeLocal(end);\n      \n      console.log('📅 Clicked date:', initialDate);\n      console.log('⏰ Start time:', start);\n      console.log('⏰ End time:', end);\n      console.log('📝 Start formatted:', startTimeFormatted);\n      console.log('📝 End formatted:', endTimeFormatted);\n      \n      setFormData(prev => ({\n        ...prev,\n        title: '',\n        description: '',\n        startTime: startTimeFormatted,\n        endTime: endTimeFormatted,\n        allDay: true,  // Default to all day when clicking on a day in month view\n        status: 'CONFIRMED',\n        visibility: 'PUBLIC',\n        eventType: 'STANDARD',\n        broadcastData: {\n          smsContent: '',\n          emailSubject: '',\n          emailContent: '',\n          recipientListId: '',\n          selectedClientIds: [],\n          recipientCount: 0,\n          scheduledSendTime: '',\n          useAlphaId: false\n        },\n        attendees: [],\n        reminders: [{ minutes: 15, type: 'NOTIFICATION' }],\n        attachments: [],\n        metadata: {},\n        categories: []\n      }));\n    } else {\n      // Fallback for new event without specific date\n      const now = new Date();\n      const start = new Date(now);\n      // Round to next hour\n      start.setHours(start.getHours() + 1, 0, 0, 0);\n      const end = new Date(start);\n      // Add 10 minutes for default duration\n      end.setMinutes(end.getMinutes() + 10);\n      \n      setFormData(prev => ({\n        ...prev,\n        startTime: start.toISOString().slice(0, 16),\n        endTime: end.toISOString().slice(0, 16)\n      }));\n    }\n  }, [event, initialDate, initialTimeRange, isEdit]);\n\n  const [createEvent, { loading: creating }] = useMutation(CREATE_EVENT, {\n    onCompleted: (data) => {\n      console.log('✅ Event created successfully:', data);\n      \n      // Check if this was an iCal invite event\n      const isICalInvite = formData.eventType === 'ICAL_INVITE';\n      const hasAttendees = formData.attendees && formData.attendees.length > 0;\n      const hasSelectedClients = formData.broadcastData.selectedClientIds && formData.broadcastData.selectedClientIds.length > 0;\n      const recipientCount = (hasAttendees ? formData.attendees.length : 0) + \n                            (hasSelectedClients ? formData.broadcastData.selectedClientIds.length : 0);\n      \n      if (isICalInvite && recipientCount > 0) {\n        toast({\n          title: 'Event created and invitations sent',\n          description: `Calendar invitations have been sent to ${recipientCount} recipient${recipientCount > 1 ? 's' : ''}`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true\n        });\n      } else {\n        toast({\n          title: 'Event created',\n          status: 'success',\n          duration: 3000\n        });\n      }\n      onSuccess();\n    },\n    onError: (error) => {\n      console.error('❌ Error creating event:', error);\n      console.error('Error details:', error.graphQLErrors);\n      console.error('Network error:', error.networkError);\n      toast({\n        title: 'Error creating event',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const [updateEvent, { loading: updating }] = useMutation(UPDATE_EVENT, {\n    onCompleted: (data) => {\n      console.log('✅ Event updated successfully:', data);\n      toast({\n        title: 'Event updated',\n        description: 'Your changes have been saved',\n        status: 'success',\n        duration: 3000,\n        isClosable: true\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      console.error('❌ Error updating event:', error);\n      console.error('Error details:', error.graphQLErrors);\n      console.error('Network error:', error.networkError);\n      toast({\n        title: 'Error updating event',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const [cancelEvent, { loading: deleting }] = useMutation(CANCEL_EVENT, {\n    onCompleted: () => {\n      toast({\n        title: 'Event cancelled successfully',\n        status: 'success',\n        duration: 3000\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error cancelling event',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const handleDelete = () => {\n    if (window.confirm('Are you sure you want to cancel this event? This action cannot be undone.')) {\n      cancelEvent({ \n        variables: { \n          id: event.id,\n          reason: 'Event cancelled by user'\n        },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n    }\n  };\n\n  const handleSubmit = () => {\n    console.log('🚀 EventModal - Starting event submission');\n    console.log('📝 Form Data:', formData);\n    console.log('📅 Calendar ID:', calendarId);\n    console.log('✏️ Is Edit Mode:', isEdit);\n    console.log('🆔 Event ID (if editing):', event?.id);\n    \n    const input: any = {\n      calendarId,\n      title: formData.title,\n      description: formData.description || undefined,\n      startTime: formData.allDay \n        ? new Date(new Date(formData.startTime).setHours(0, 0, 0, 0)).toISOString()\n        : new Date(formData.startTime).toISOString(),\n      endTime: formData.allDay\n        ? new Date(new Date(formData.endTime).setHours(23, 59, 59, 999)).toISOString()\n        : new Date(formData.endTime).toISOString(),\n      isAllDay: formData.allDay,\n      status: formData.status,\n      visibility: formData.visibility,\n      categories: formData.categories\n    };\n    \n    // Add metadata following iCalendar X-property standards (RFC 5545 Section 3.8.8.2)\n    // X-properties must begin with \"X-\" prefix for non-standard properties\n    if (formData.eventType !== 'STANDARD' || formData.broadcastData.smsContent || formData.broadcastData.emailSubject) {\n      input.metadata = {\n        // Standard extension for event type\n        'X-EVENT-TYPE': formData.eventType,\n        \n        // For iCal invites, mark that invitations should be sent\n        ...(formData.eventType === 'ICAL_INVITE' && {\n          'X-SEND-ICAL-INVITES': 'true',\n          'X-ICAL-METHOD': 'REQUEST'\n        }),\n        \n        // SMS broadcast properties\n        ...(formData.broadcastData.smsContent && {\n          'X-SMS-CONTENT': formData.broadcastData.smsContent,\n          'X-SMS-RECIPIENT-LIST': formData.broadcastData.recipientListId || '',\n          'X-SELECTED-CLIENT-IDS': formData.broadcastData.selectedClientIds,\n          'X-USE-ALPHA-ID': formData.broadcastData.useAlphaId\n        }),\n        \n        // Email broadcast properties\n        ...(formData.broadcastData.emailSubject && {\n          'X-EMAIL-SUBJECT': formData.broadcastData.emailSubject,\n          'X-EMAIL-CONTENT': formData.broadcastData.emailContent,\n          'X-EMAIL-RECIPIENT-LIST': formData.broadcastData.recipientListId || '',\n          'X-SELECTED-CLIENT-IDS': formData.broadcastData.selectedClientIds\n        }),\n        \n        // Broadcast scheduling\n        ...(formData.broadcastData.scheduledSendTime && {\n          'X-BROADCAST-SCHEDULED': formData.broadcastData.scheduledSendTime\n        }),\n        \n        // Additional custom properties\n        'X-CREATED-BY': 'business-builder-calendar',\n        'X-ICAL-VERSION': 'RFC5545'\n      };\n    }\n    \n    console.log('📊 Base Input Object:', input);\n\n    // Clean and add attendees if present\n    if (formData.attendees.length > 0) {\n      input.attendees = formData.attendees.map((a: any) => ({\n        clientId: a.clientId,\n        email: a.email,\n        name: a.name,\n        role: a.role || 'REQ_PARTICIPANT',\n        status: a.status || 'NEEDS_ACTION',\n        isOrganizer: a.isOrganizer || false,\n        rsvpRequired: a.rsvpRequired !== undefined ? a.rsvpRequired : true\n      }));\n      console.log('👥 Attendees:', input.attendees);\n    }\n\n    // Clean and add attachments if present\n    if (formData.attachments && formData.attachments.length > 0) {\n      input.attachments = formData.attachments.map((a: any) => ({\n        name: a.name,\n        url: a.url,\n        mimeType: a.mimeType,\n        size: a.size\n      }));\n      console.log('📎 Attachments:', input.attachments);\n    }\n\n    // Only add location if it has data\n    if (formData.location) {\n      // Location is always stored as a string in formData\n      input.location = {\n        address: formData.location\n      };\n      console.log('📍 Location:', input.location);\n    }\n\n    // Transform reminders to match backend schema\n    if (formData.reminders && formData.reminders.length > 0) {\n      input.reminders = formData.reminders.map((r: any) => ({\n        minutesBefore: r.minutesBefore || r.minutes || 15,\n        method: r.method || (r.type === 'NOTIFICATION' ? 'PUSH' : r.type) || 'EMAIL',\n        enabled: r.enabled !== undefined ? r.enabled : true\n      }));\n      console.log('🔔 Reminders:', input.reminders);\n    }\n\n    if (formData.recurrence.enabled) {\n      input.isRecurring = true;\n      input.recurrence = {\n        frequency: formData.recurrence.frequency,\n        interval: formData.recurrence.interval,\n        until: formData.recurrence.endDate ? new Date(formData.recurrence.endDate).toISOString() : null\n      };\n      console.log('🔄 Recurrence:', input.recurrence);\n    }\n\n    console.log('🎯 Final Input Object to send:', JSON.stringify(input, null, 2));\n\n    if (isEdit) {\n      if (!event?.id) {\n        console.error('❌ ERROR: Trying to update event but no event ID provided!');\n        toast({\n          title: 'Error',\n          description: 'Cannot update event: Event ID is missing',\n          status: 'error',\n          duration: 5000\n        });\n        return;\n      }\n      console.log('📤 Calling updateEvent with ID:', event.id);\n      console.log('📤 Variables:', { id: event.id, input });\n      updateEvent({ \n        variables: { id: event.id, input },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n    } else {\n      console.log('📤 Calling createEvent');\n      console.log('📤 Variables:', { input });\n      createEvent({ \n        variables: { input },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSwitchChange = (field: string) => (checked: boolean) => {\n    if (field === 'allDay') {\n      if (checked) {\n        // When enabling all-day, preserve the end date if it's different from start date\n        // Only set end to match start if end is not set or is before start\n        setFormData(prev => {\n          const startDate = prev.startTime ? prev.startTime.split('T')[0] : '';\n          const endDate = prev.endTime ? prev.endTime.split('T')[0] : '';\n\n          // If end date is not set or is before start date, set it to start date\n          const newEndTime = (!endDate || endDate < startDate) ? prev.startTime : prev.endTime;\n\n          return {\n            ...prev,\n            [field]: checked,\n            endTime: newEndTime\n          };\n        });\n      } else {\n        // When disabling all-day, just update the field\n        setFormData(prev => ({ ...prev, [field]: checked }));\n      }\n    } else {\n      setFormData(prev => ({ ...prev, [field]: checked }));\n    }\n  };\n\n  const handleRecurrenceChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      recurrence: { ...prev.recurrence, [field]: value }\n    }));\n  };\n\n  const addAttendee = () => {\n    if (newAttendeeEmail) {\n      setFormData(prev => ({\n        ...prev,\n        attendees: [...prev.attendees, { email: newAttendeeEmail, name: newAttendeeName }]\n      }));\n      setNewAttendeeEmail('');\n      setNewAttendeeName('');\n    }\n  };\n\n  const removeAttendee = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      attendees: prev.attendees.filter((_, i) => i !== index)\n    }));\n  };\n\n  const addReminder = () => {\n    setFormData(prev => ({\n      ...prev,\n      reminders: [...prev.reminders, { minutes: 15, type: 'NOTIFICATION' }]\n    }));\n  };\n\n  const updateReminder = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      reminders: prev.reminders.map((r, i) => \n        i === index ? { ...r, [field]: value } : r\n      )\n    }));\n  };\n\n  const removeReminder = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      reminders: prev.reminders.filter((_, i) => i !== index)\n    }));\n  };\n\n  // Draggable modal state\n  const [position, setPosition] = useState({ x: 100, y: 50 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const modalRef = useRef<HTMLDivElement>(null);\n  const titleInputRef = useRef<HTMLInputElement>(null);\n\n  // Handle drag start\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if ((e.target as HTMLElement).closest('.modal-drag-handle')) {\n      setIsDragging(true);\n      setDragStart({\n        x: e.clientX - position.x,\n        y: e.clientY - position.y,\n      });\n    }\n  };\n\n  // Handle dragging\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (isDragging) {\n        setPosition({\n          x: e.clientX - dragStart.x,\n          y: e.clientY - dragStart.y,\n        });\n      }\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n    };\n\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, dragStart]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"4xl\"\n      closeOnOverlayClick={false}\n      initialFocusRef={titleInputRef}\n    >\n      <ModalOverlay bg=\"blackAlpha.300\" />\n      <ModalContent\n        ref={modalRef}\n        position=\"fixed\"\n        left={`${position.x}px`}\n        top={`${position.y}px`}\n        margin={0}\n        maxW=\"900px\"\n        maxH=\"90vh\"\n        containerProps={{\n          justifyContent: 'flex-start',\n          alignItems: 'flex-start'\n        }}\n        onMouseDown={handleMouseDown}\n        cursor={isDragging ? 'grabbing' : 'default'}\n      >\n        <ModalCloseButton zIndex={2} />\n        <ModalHeader\n          borderBottomWidth=\"1px\"\n          className=\"modal-drag-handle\"\n          cursor=\"grab\"\n          _active={{ cursor: 'grabbing' }}\n          userSelect=\"none\"\n        >\n          <VStack align=\"stretch\" spacing={2}>\n            <HStack justify=\"space-between\" pr={8}>\n              <HStack>\n                <CalendarIcon />\n                <Text>{isEdit ? 'Edit Event' : 'Create New Event'}</Text>\n                {/* Development: Show Event ID */}\n                {isEdit && event?.id && (\n                  <Text fontSize=\"xs\" color=\"gray.500\" fontFamily=\"mono\">\n                    ID: {event.id}\n                  </Text>\n                )}\n              </HStack>\n            </HStack>\n            <HStack spacing={2}>\n              <Tooltip label=\"This calendar follows the iCalendar (RFC 5545) standard for maximum compatibility\">\n                <HStack spacing={1}>\n                  <InfoIcon boxSize={3} color=\"gray.500\" />\n                  <Text fontSize=\"xs\" color=\"gray.500\">iCalendar Standard</Text>\n                </HStack>\n              </Tooltip>\n              <Link\n                href=\"https://datatracker.ietf.org/doc/html/rfc5545\"\n                isExternal\n                fontSize=\"xs\"\n                color=\"blue.500\"\n                textDecoration=\"underline\"\n              >\n                RFC 5545\n              </Link>\n            </HStack>\n          </VStack>\n        </ModalHeader>\n        <ModalBody overflowY=\"auto\">\n          {/* Event Title & Info Summary */}\n          <Box mb={4}>\n            <Text fontSize=\"xl\" fontWeight=\"bold\" mb={2}>\n              {formData.title || 'New Event'}\n            </Text>\n            {isEdit && (\n              <HStack spacing={3} wrap=\"wrap\">\n                <Badge colorScheme=\"blue\" fontSize=\"sm\">\n                  {formData.eventType.replace('_', ' ')}\n                </Badge>\n                <Badge colorScheme=\"green\" fontSize=\"sm\">\n                  {formData.status}\n                </Badge>\n                {event?.totalTasks > 0 && (\n                  <HStack spacing={1}>\n                    <FiCheckSquare />\n                    <Text fontSize=\"sm\">\n                      {event.completedTasks}/{event.totalTasks} tasks completed\n                    </Text>\n                    {event.taskProgressPercentage > 0 && (\n                      <Text fontSize=\"xs\" color=\"gray.600\">\n                        ({event.taskProgressPercentage}%)\n                      </Text>\n                    )}\n                  </HStack>\n                )}\n              </HStack>\n            )}\n          </Box>\n\n          <Tabs>\n            <TabList>\n              {isPublicBooking && (\n                <Tab>\n                  <HStack spacing={2}>\n                    <Icon as={FiUsers} />\n                    <Text>Booking Details</Text>\n                  </HStack>\n                </Tab>\n              )}\n              <Tab>\n                <HStack spacing={2}>\n                  <FiCalendar />\n                  <Text>Details</Text>\n                </HStack>\n              </Tab>\n              <Tab>\n                <HStack spacing={2}>\n                  <FiCheckSquare />\n                  <Text>Tasks</Text>\n                </HStack>\n              </Tab>\n              <Tab>\n                <HStack spacing={2}>\n                  <FiFileText />\n                  <Text>Notes</Text>\n                </HStack>\n              </Tab>\n            </TabList>\n\n            <TabPanels>\n              {/* Booking Details Tab - Only shown for PUBLIC_BOOKING events */}\n              {isPublicBooking && (\n                <TabPanel>\n                  <BookingDetailsView\n                    event={event}\n                    calendarId={calendarId}\n                    onCancel={() => {\n                      // TODO: Implement cancel booking functionality\n                      toast({\n                        title: 'Cancel Booking',\n                        description: 'Cancel booking functionality coming soon',\n                        status: 'info',\n                        duration: 3000\n                      });\n                    }}\n                    onReschedule={() => {\n                      // TODO: Implement reschedule functionality\n                      toast({\n                        title: 'Reschedule Booking',\n                        description: 'Reschedule functionality coming soon',\n                        status: 'info',\n                        duration: 3000\n                      });\n                    }}\n                    onSendReminder={() => {\n                      // TODO: Implement send reminder functionality\n                      toast({\n                        title: 'Send Reminder',\n                        description: 'Send reminder functionality coming soon',\n                        status: 'info',\n                        duration: 3000\n                      });\n                    }}\n                  />\n                </TabPanel>\n              )}\n              <TabPanel>\n                <Stack spacing={4}>\n                  {/* Public Booking Notice */}\n                  {isPublicBooking && (\n                    <Box p={3} bg=\"blue.50\" borderRadius=\"md\" borderWidth=\"1px\" borderColor=\"blue.200\">\n                      <HStack spacing={2}>\n                        <Icon as={FiUsers} color=\"blue.500\" />\n                        <Text fontSize=\"sm\" color=\"blue.700\" fontWeight=\"medium\">\n                          This is a public booking event. Visit the \"Booking Details\" tab to see full booking information.\n                        </Text>\n                      </HStack>\n                    </Box>\n                  )}\n\n                  {/* Basic Information */}\n            <FormControl isRequired>\n              <FormLabel>Event Title</FormLabel>\n              <Input\n                ref={titleInputRef}\n                name=\"title\"\n                value={formData.title}\n                onChange={handleChange}\n                placeholder=\"e.g., Team Meeting, Client Call\"\n                isReadOnly={isPublicBooking}\n                bg={isPublicBooking ? formBg : undefined}\n              />\n              {isPublicBooking && (\n                <FormHelperText fontSize=\"xs\" color={textSecondary}>\n                  Title is set by the booking system and cannot be edited\n                </FormHelperText>\n              )}\n            </FormControl>\n\n            <FormControl>\n              <FormLabel>Description</FormLabel>\n              <Textarea\n                name=\"description\"\n                value={formData.description}\n                onChange={handleChange}\n                placeholder=\"Event details and agenda\"\n                rows={3}\n                isReadOnly={isPublicBooking}\n                bg={isPublicBooking ? formBg : undefined}\n              />\n              {isPublicBooking && (\n                <FormHelperText fontSize=\"xs\" color={textSecondary}>\n                  Description is set by the booking system and cannot be edited\n                </FormHelperText>\n              )}\n            </FormControl>\n\n            {/* Event Type and Color - Hidden for PUBLIC_BOOKING events */}\n            {!isPublicBooking && (\n              <HStack spacing={4}>\n                <FormControl>\n                  <FormLabel>\n                    <HStack>\n                      <FiCalendar />\n                      <Text>Event Type</Text>\n                    </HStack>\n                  </FormLabel>\n                  <RadioGroup\n                    value={formData.eventType}\n                    onChange={(value) => {\n                      setFormData(prev => ({\n                        ...prev,\n                        eventType: value\n                      }))\n                    }}\n                  >\n                    <Stack direction=\"column\" spacing={2}>\n                      <Radio value=\"STANDARD\">\n                        <HStack>\n                          <Text fontSize=\"sm\">📅</Text>\n                          <Text fontSize=\"sm\">Standard Event</Text>\n                        </HStack>\n                      </Radio>\n                      <Radio value=\"ICAL_INVITE\">\n                        <HStack>\n                          <Text fontSize=\"sm\">📤</Text>\n                          <Text fontSize=\"sm\">iCal Email Invite</Text>\n                        </HStack>\n                      </Radio>\n                      <Radio value=\"SMS_BROADCAST\">\n                        <HStack>\n                          <Text fontSize=\"sm\">💬</Text>\n                          <Text fontSize=\"sm\">SMS Broadcast</Text>\n                        </HStack>\n                      </Radio>\n                      <Radio value=\"EMAIL_BROADCAST\">\n                        <HStack>\n                          <Text fontSize=\"sm\">✉️</Text>\n                          <Text fontSize=\"sm\">Email Broadcast</Text>\n                        </HStack>\n                      </Radio>\n                      <Radio value=\"BOTH_BROADCAST\">\n                        <HStack>\n                          <Text fontSize=\"sm\">📢</Text>\n                          <Text fontSize=\"sm\">SMS + Email Broadcast</Text>\n                        </HStack>\n                      </Radio>\n                    </Stack>\n                  </RadioGroup>\n                  <FormHelperText fontSize=\"xs\">\n                    {formData.eventType === 'ICAL_INVITE' ?\n                      'iCal invites will be sent to all attendees when event is created' :\n                      'Broadcast events will trigger automated messages at the scheduled time'}\n                  </FormHelperText>\n                </FormControl>\n\n              </HStack>\n            )}\n\n            {/* Broadcast Data Fields (shown only for broadcast events, not for PUBLIC_BOOKING) */}\n            {!isPublicBooking && formData.eventType !== 'STANDARD' && formData.eventType !== 'ICAL_INVITE' && (\n              <Box p={4} bg={formBg} borderRadius=\"md\" border=\"1px solid\" borderColor={cardBorder}>\n                <VStack align=\"stretch\" spacing={3}>\n                  <Text fontWeight=\"bold\" fontSize=\"sm\">\n                    Broadcast Configuration\n                    {formData.eventType === 'BOTH_BROADCAST' && (\n                      <Badge ml={2} colorScheme=\"purple\">SMS + Email</Badge>\n                    )}\n                  </Text>\n\n                  {/* SMS Broadcast Section */}\n                  {(formData.eventType === 'SMS_BROADCAST' || formData.eventType === 'BOTH_BROADCAST') && (\n                    <Box>\n                      {formData.eventType === 'BOTH_BROADCAST' && (\n                        <Text fontSize=\"sm\" fontWeight=\"medium\" mb={2} color=\"blue.600\">\n                          📱 SMS Configuration\n                        </Text>\n                      )}\n                      <FormControl>\n                        <FormLabel fontSize=\"sm\">SMS Message</FormLabel>\n                        <Textarea\n                          value={formData.broadcastData.smsContent}\n                          onChange={(e) => setFormData(prev => ({\n                            ...prev,\n                            broadcastData: { ...prev.broadcastData, smsContent: e.target.value }\n                          }))}\n                          placeholder=\"Enter SMS message content (160 characters recommended)\"\n                          rows={3}\n                        />\n                        <FormHelperText fontSize=\"xs\">\n                          {formData.broadcastData.smsContent.length}/160 characters\n                        </FormHelperText>\n                      </FormControl>\n                      \n                      <FormControl>\n                        <HStack justify=\"space-between\">\n                          <FormLabel htmlFor=\"use-alpha-id\" mb=\"0\" fontSize=\"sm\">\n                            Use AlphaId for SMS\n                          </FormLabel>\n                          <Switch\n                            id=\"use-alpha-id\"\n                            isChecked={formData.broadcastData.useAlphaId}\n                            onChange={(e) => setFormData(prev => ({\n                              ...prev,\n                              broadcastData: { ...prev.broadcastData, useAlphaId: e.target.checked }\n                            }))}\n                          />\n                        </HStack>\n                        <FormHelperText fontSize=\"xs\">\n                          {formData.broadcastData.useAlphaId \n                            ? \"SMS will be sent from your business name (AlphaId)\" \n                            : \"SMS will be sent from a dedicated phone number\"}\n                        </FormHelperText>\n                      </FormControl>\n                    </Box>\n                  )}\n\n                  {/* Email Broadcast Section */}\n                  {(formData.eventType === 'EMAIL_BROADCAST' || formData.eventType === 'BOTH_BROADCAST') && (\n                    <Box>\n                      {formData.eventType === 'BOTH_BROADCAST' && (\n                        <>\n                          <Divider my={3} />\n                          <Text fontSize=\"sm\" fontWeight=\"medium\" mb={2} color=\"green.600\">\n                            ✉️ Email Configuration\n                          </Text>\n                        </>\n                      )}\n                      <FormControl>\n                        <FormLabel fontSize=\"sm\">Email Subject</FormLabel>\n                        <Input\n                          value={formData.broadcastData.emailSubject}\n                          onChange={(e) => setFormData(prev => ({\n                            ...prev,\n                            broadcastData: { ...prev.broadcastData, emailSubject: e.target.value }\n                          }))}\n                          placeholder=\"Enter email subject line\"\n                        />\n                      </FormControl>\n                      <FormControl>\n                        <FormLabel fontSize=\"sm\">Email Content</FormLabel>\n                        <Textarea\n                          value={formData.broadcastData.emailContent}\n                          onChange={(e) => setFormData(prev => ({\n                            ...prev,\n                            broadcastData: { ...prev.broadcastData, emailContent: e.target.value }\n                          }))}\n                          placeholder=\"Enter email message content\"\n                          rows={5}\n                        />\n                      </FormControl>\n                    </Box>\n                  )}\n\n                  {/* Recipients Section - Shown once for all broadcast types */}\n                  {formData.eventType === 'BOTH_BROADCAST' && (\n                    <Divider my={3} />\n                  )}\n\n                  <FormControl>\n                    <FormLabel fontSize=\"sm\">\n                      Recipients\n                      {formData.eventType === 'BOTH_BROADCAST' && (\n                        <Text as=\"span\" fontSize=\"xs\" color=\"gray.600\" ml={2}>\n                          (will receive both SMS and Email)\n                        </Text>\n                      )}\n                      {formData.eventType === 'SMS_BROADCAST' && (\n                        <Text as=\"span\" fontSize=\"xs\" color=\"gray.600\" ml={2}>\n                          (will receive SMS only)\n                        </Text>\n                      )}\n                      {formData.eventType === 'EMAIL_BROADCAST' && (\n                        <Text as=\"span\" fontSize=\"xs\" color=\"gray.600\" ml={2}>\n                          (will receive Email only)\n                        </Text>\n                      )}\n                    </FormLabel>\n                    <ClientSearchSelector\n                      selectedClients={formData.broadcastData.selectedClientIds}\n                      onSelectionChange={(clientIds) => setFormData(prev => ({\n                        ...prev,\n                        broadcastData: { \n                          ...prev.broadcastData, \n                          selectedClientIds: clientIds,\n                          recipientCount: clientIds.length\n                        }\n                      }))}\n                      allowMultiple={true}\n                      placeholder=\"Search for recipients by name, email, phone, or tags...\"\n                    />\n                    <FormHelperText fontSize=\"xs\">\n                      Selected recipients: {formData.broadcastData.selectedClientIds.length}\n                    </FormHelperText>\n                  </FormControl>\n                </VStack>\n              </Box>\n            )}\n\n            {/* Date and Time */}\n            {!isPublicBooking && (\n              <FormControl>\n                <HStack justify=\"space-between\">\n                  <FormLabel mb={0}>All Day Event</FormLabel>\n                  <Switch\n                    isChecked={formData.allDay}\n                    onChange={(e) => handleSwitchChange('allDay')(e.target.checked)}\n                  />\n                </HStack>\n              </FormControl>\n            )}\n\n            <VStack align=\"stretch\" spacing={2}>\n              <HStack>\n                <FormControl isRequired>\n                  <FormLabel>Start {formData.allDay ? 'Date' : 'Date & Time'}</FormLabel>\n                  <Input\n                    type={formData.allDay ? 'date' : 'datetime-local'}\n                    isReadOnly={isPublicBooking}\n                    bg={isPublicBooking ? formBg : undefined}\n                    name=\"startTime\"\n                    value={formData.allDay\n                      ? formData.startTime.split('T')[0]\n                      : formData.startTime}\n                    onChange={(e) => {\n                      handleChange(e);\n                      // If all-day is checked and end date is not set or is before new start,\n                      // update end time to match start\n                      if (formData.allDay) {\n                        const newStartDate = e.target.value.split('T')[0];\n                        const currentEndDate = formData.endTime ? formData.endTime.split('T')[0] : '';\n\n                        if (!currentEndDate || currentEndDate < newStartDate) {\n                          setFormData(prev => ({ ...prev, endTime: e.target.value }));\n                        }\n                      }\n                    }}\n                  />\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel>{formData.allDay ? 'End Date' : 'End Date & Time'}</FormLabel>\n                  <Input\n                    type={formData.allDay ? \"date\" : \"datetime-local\"}\n                    name=\"endTime\"\n                    value={formData.allDay\n                      ? (formData.endTime ? formData.endTime.split('T')[0] : '')\n                      : formData.endTime}\n                    onChange={handleChange}\n                    isReadOnly={isPublicBooking}\n                    bg={isPublicBooking ? formBg : undefined}\n                  />\n                </FormControl>\n              </HStack>\n\n              {isPublicBooking && (\n                <Text fontSize=\"xs\" color={textSecondary}>\n                  Date and time are set by the booking and cannot be edited. Use the \"Reschedule\" action in Booking Details to change.\n                </Text>\n              )}\n            </VStack>\n\n            {/* Location */}\n            <FormControl>\n              <FormLabel>\n                <HStack>\n                  <FiMapPin />\n                  <Text>Location</Text>\n                </HStack>\n              </FormLabel>\n              <Input\n                name=\"location\"\n                value={formData.location}\n                onChange={handleChange}\n                placeholder=\"e.g., Conference Room, Zoom Link\"\n              />\n            </FormControl>\n            \n            {/* Tags */}\n            <FormControl>\n              <FormLabel>Tags</FormLabel>\n              <TagSelector\n                calendarId={calendarId}\n                selectedTags={formData.categories}\n                onTagsChange={(tags) => setFormData({ ...formData, categories: tags })}\n                placeholder=\"Add tags to categorize this event\"\n              />\n            </FormControl>\n\n            {/* Status and Visibility */}\n            <HStack>\n              <FormControl>\n                <FormLabel>Status</FormLabel>\n                <Select name=\"status\" value={formData.status} onChange={handleChange}>\n                  <option value=\"CONFIRMED\">Confirmed</option>\n                  <option value=\"TENTATIVE\">Tentative</option>\n                  <option value=\"CANCELLED\">Cancelled</option>\n                </Select>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel>Visibility</FormLabel>\n                <Select name=\"visibility\" value={formData.visibility} onChange={handleChange}>\n                  <option value=\"PUBLIC\">Public</option>\n                  <option value=\"PRIVATE\">Private</option>\n                  <option value=\"CONFIDENTIAL\">Confidential</option>\n                </Select>\n              </FormControl>\n            </HStack>\n\n            <Divider />\n\n            {/* Attendees */}\n            <Box>\n              <FormLabel>\n                <HStack>\n                  <FiUsers />\n                  <Text>Attendees</Text>\n                </HStack>\n              </FormLabel>\n              <Stack spacing={2}>\n                {formData.attendees.map((attendee, index) => (\n                  <HStack key={index}>\n                    <Badge colorScheme=\"blue\" px={2} py={1}>\n                      {attendee.name || attendee.email}\n                    </Badge>\n                    <IconButton\n                      aria-label=\"Remove attendee\"\n                      icon={<DeleteIcon />}\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      colorScheme=\"red\"\n                      onClick={() => removeAttendee(index)}\n                    />\n                  </HStack>\n                ))}\n                <HStack>\n                  <Input\n                    placeholder=\"Email\"\n                    value={newAttendeeEmail}\n                    onChange={(e) => setNewAttendeeEmail(e.target.value)}\n                    size=\"sm\"\n                  />\n                  <Input\n                    placeholder=\"Name (optional)\"\n                    value={newAttendeeName}\n                    onChange={(e) => setNewAttendeeName(e.target.value)}\n                    size=\"sm\"\n                  />\n                  <IconButton\n                    aria-label=\"Add attendee\"\n                    icon={<AddIcon />}\n                    size=\"sm\"\n                    onClick={addAttendee}\n                    isDisabled={!newAttendeeEmail}\n                  />\n                </HStack>\n              </Stack>\n            </Box>\n\n            <Divider />\n\n            {/* Recurrence */}\n            <Box>\n              <FormControl>\n                <HStack justify=\"space-between\">\n                  <FormLabel mb={0}>\n                    <HStack>\n                      <FiRepeat />\n                      <Text>Recurring Event</Text>\n                    </HStack>\n                  </FormLabel>\n                  <Switch\n                    isChecked={formData.recurrence.enabled}\n                    onChange={(e) => handleRecurrenceChange('enabled', e.target.checked)}\n                  />\n                </HStack>\n              </FormControl>\n\n              {formData.recurrence.enabled && (\n                <Stack spacing={2} mt={2}>\n                  <HStack>\n                    <FormControl>\n                      <FormLabel>Frequency</FormLabel>\n                      <Select\n                        value={formData.recurrence.frequency}\n                        onChange={(e) => handleRecurrenceChange('frequency', e.target.value)}\n                      >\n                        <option value=\"DAILY\">Daily</option>\n                        <option value=\"WEEKLY\">Weekly</option>\n                        <option value=\"MONTHLY\">Monthly</option>\n                        <option value=\"YEARLY\">Yearly</option>\n                      </Select>\n                    </FormControl>\n                    <FormControl>\n                      <FormLabel>Interval</FormLabel>\n                      <InputGroup>\n                        <Input\n                          type=\"number\"\n                          value={formData.recurrence.interval}\n                          onChange={(e) => handleRecurrenceChange('interval', parseInt(e.target.value))}\n                          min={1}\n                        />\n                        <InputLeftAddon>\n                          {formData.recurrence.frequency.toLowerCase().replace('ly', '(s)')}\n                        </InputLeftAddon>\n                      </InputGroup>\n                    </FormControl>\n                  </HStack>\n                  <FormControl>\n                    <FormLabel>End Date (optional)</FormLabel>\n                    <Input\n                      type=\"date\"\n                      value={formData.recurrence.endDate}\n                      onChange={(e) => handleRecurrenceChange('endDate', e.target.value)}\n                    />\n                  </FormControl>\n                </Stack>\n              )}\n            </Box>\n\n            <Divider />\n\n            {/* Reminders */}\n            <Box>\n              <FormLabel>\n                <HStack>\n                  <BellIcon />\n                  <Text>Reminders</Text>\n                </HStack>\n              </FormLabel>\n              <Stack spacing={2}>\n                {formData.reminders.map((reminder, index) => (\n                  <HStack key={index}>\n                    <Input\n                      type=\"number\"\n                      value={reminder.minutes}\n                      onChange={(e) => updateReminder(index, 'minutes', parseInt(e.target.value))}\n                      min={0}\n                      width=\"100px\"\n                    />\n                    <Select\n                      value={reminder.type}\n                      onChange={(e) => updateReminder(index, 'type', e.target.value)}\n                    >\n                      <option value=\"NOTIFICATION\">Notification</option>\n                      <option value=\"EMAIL\">Email</option>\n                      <option value=\"SMS\">SMS</option>\n                    </Select>\n                    <Text>minutes before</Text>\n                    <IconButton\n                      aria-label=\"Remove reminder\"\n                      icon={<DeleteIcon />}\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      colorScheme=\"red\"\n                      onClick={() => removeReminder(index)}\n                    />\n                  </HStack>\n                ))}\n                <Button\n                  leftIcon={<AddIcon />}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={addReminder}\n                >\n                  Add Reminder\n                </Button>\n              </Stack>\n            </Box>\n                </Stack>\n              </TabPanel>\n\n              {/* Tasks Tab */}\n              <TabPanel>\n                {isEdit && event?.id ? (\n                  <EventTasksTab eventId={event.id} />\n                ) : (\n                  <Box textAlign=\"center\" py={8} color=\"gray.500\">\n                    <Text>Save the event first to add tasks</Text>\n                  </Box>\n                )}\n              </TabPanel>\n\n              {/* Notes Tab */}\n              <TabPanel>\n                <EventNotesTab\n                  eventNotes={formData.eventNotes}\n                  onSave={(notes) => {\n                    setFormData(prev => ({ ...prev, eventNotes: notes }));\n                  }}\n                />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </ModalBody>\n\n        <ModalFooter borderTopWidth=\"1px\" justifyContent={isEdit ? \"space-between\" : \"flex-end\"}>\n          {isEdit && (\n            <Button\n              leftIcon={<DeleteIcon />}\n              colorScheme=\"red\"\n              variant=\"outline\"\n              onClick={handleDelete}\n              isLoading={deleting}\n              size=\"sm\"\n            >\n              Cancel Event\n            </Button>\n          )}\n          <HStack spacing={3}>\n            <Button variant=\"outline\" onClick={onClose} size=\"sm\">\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSubmit}\n              isLoading={creating || updating}\n              isDisabled={!formData.title || !formData.startTime || !formData.endTime}\n              size=\"sm\"\n            >\n              {isEdit ? 'Update Event' : 'Create Event'}\n            </Button>\n          </HStack>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EventModal;"],"names":["SEARCH_CLIENTS","gql","_templateObject","_taggedTemplateLiteral","GET_ALL_TAGS","_templateObject2","ClientSearchSelector","_ref","_data$searchClients","selectedClients","onSelectionChange","allowMultiple","placeholder","searchTerm","setSearchTerm","useState","selectedTags","setSelectedTags","expandedSections","setExpandedSections","data","tagsData","useToast","useQuery","loading","error","variables","search","undefined","tags","length","skip","textSecondary","getColor","textMuted","borderColor","handleClientToggle","clientId","includes","filter","id","handleClearSelection","selectedCount","totalCount","searchClients","_jsxs","VStack","spacing","align","children","Accordion","index","onChange","expandedIndex","AccordionItem","border","AccordionButton","px","_jsx","Box","flex","textAlign","Text","fontWeight","AccordionIcon","AccordionPanel","InputGroup","InputLeftElement","pointerEvents","SearchIcon","color","Input","value","e","target","bg","getComponent","_focus","boxShadow","HStack","justify","py","Spinner","size","fontSize","Alert","status","borderRadius","AlertIcon","message","mb","Button","variant","onClick","handleSelectAll","allIds","map","client","maxH","overflowY","p","_hover","cursor","stopPropagation","Checkbox","isChecked","fName","lName","email","phoneNumber","Wrap","slice","tag","WrapItem","Tag","colorScheme","TagLabel","Badge","allClientTags","prev","t","handleTagToggle","transform","Divider","my","GET_CALENDAR_TAGS","UPSERT_CALENDAR_TAG","SUGGEST_TAG_COLORS","_templateObject3","TagSelector","calendarId","onTagsChange","colorMode","useColorMode","toast","newTagName","setNewTagName","selectedColor","setSelectedColor","isAddingTag","setIsAddingTag","tagColors","setTagColors","refetch","refetchTags","context","headers","localStorage","getItem","colorsData","upsertTag","useMutation","useEffect","calendarTags","colorMap","forEach","name","handleAddTag","async","trim","input","title","duration","console","description","suggestedColors","suggestTagColors","availableTags","backgroundColor","TagCloseButton","handleRemoveTag","tagName","Popover","isOpen","onClose","closeOnBlur","placement","returnFocusOnClose","PopoverTrigger","FaTag","onKeyDown","key","PopoverContent","width","PopoverArrow","PopoverCloseButton","PopoverHeader","PopoverBody","opacity","usageCount","ml","Grid","templateColumns","gap","Tooltip","label","w","h","display","alignItems","justifyContent","FaCheck","mt","leftIcon","FaPlus","GET_EVENT_TASKS","CREATE_EVENT_TASK","UPDATE_EVENT_TASK","TOGGLE_TASK_COMPLETION","_templateObject4","DELETE_EVENT_TASK","_templateObject5","ADD_CHECKLIST_ITEM","_templateObject6","UPDATE_CHECKLIST_ITEM","_templateObject7","REMOVE_CHECKLIST_ITEM","_templateObject8","_templateObject9","EventTasksTab","eventId","newTaskTitle","setNewTaskTitle","expandedTasks","setExpandedTasks","Set","newChecklistItems","setNewChecklistItems","calendarEventId","createTask","onCompleted","onError","updateTask","deleteTask","toggleCompletion","addChecklistItem","updateChecklistItem","removeChecklistItem","handleCreateTask","checklistItems","handleAddChecklistItem","taskId","item","uuidv4","completed","order","_objectSpread","tasks","calendarEventTasks","onKeyPress","IconButton","icon","AddIcon","isDisabled","task","_newChecklistItems$ta","borderWidth","handleToggleTask","textDecoration","completedChecklistItems","totalChecklistItems","Progress","progressPercentage","has","ChevronUpIcon","ChevronDownIcon","newExpanded","delete","add","toggleTaskExpansion","DeleteIcon","handleDeleteTask","Collapse","in","animateOpacity","pl","handleToggleChecklistItem","itemId","currentStatus","checklistItemId","handleRemoveChecklistItem","EventNotesTab","eventNotes","onSave","notes","setNotes","hasChanges","setHasChanges","height","Textarea","handleNotesChange","minHeight","resize","handleSave","alignSelf","UPDATE_EVENT","GET_CLIENT_BY_EMAIL","CREATE_PROJECT","GET_PROJECT_BY_ID","BookingDetailsView","_event$extendedProps","_event$title","_event$extendedProps2","_event$extendedProps$","_event$extendedProps$2","event","onCancel","onReschedule","onSendReminder","onPaymentStatusUpdate","metadata","extendedProps","isProjectModalOpen","onOpen","onProjectModalOpen","onProjectModalClose","useDisclosure","bookerName","bookerEmail","bookerPhone","bookerTimezone","bookingStatus","paymentStatus","paymentAmount","paymentCurrency","meetingLink","bookingToken","existingProjectId","localPaymentStatus","setLocalPaymentStatus","eventTypeName","split","projectFormData","setProjectFormData","projectName","projectGoal","concat","projectDescription","format","Date","clientData","loadingClient","clientExists","clientByEmail","existingClient","projectData","loadingProject","refetchProject","projectExists","project","existingProject","createProject","creatingProject","createdProjectId","createdProjectName","isClosable","updateEvent","startTime","start","endTime","end","updating","textPrimary","bgCard","startDate","endDate","log","startRaw","endRaw","customAnswers","Object","keys","startsWith","replace","answerKey","push","question","answer","getPaymentStatusColor","Icon","as","FiCalendar","boxSize","Heading","getBookingStatusColor","Card","CardBody","FiUser","FiMail","FiPhone","FiClock","FiCheck","FiExternalLink","window","open","handleCreateClient","nameParts","firstName","lastName","join","clientParams","URLSearchParams","source","toString","location","FiMapPin","details","href","rightIcon","FiDollarSign","toFixed","Select","newStatus","Error","handlePaymentStatusChange","FiFolder","FiFileText","handleIssueBill","_event$title2","amountInDollars","billParams","itemName","itemPrice","itemQuantity","clientEmail","clientName","clientPhone","currency","projectId","qa","SimpleGrid","columns","base","md","pt","Modal","ModalOverlay","backdropFilter","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","FormControl","isRequired","FormLabel","rows","ModalFooter","mr","billingClient","isLoading","CREATE_EVENT","CANCEL_EVENT","_event$metadata","initialDate","initialTimeRange","onSuccess","isEdit","isPublicBooking","formBg","cardBorder","formData","setFormData","allDay","visibility","eventType","broadcastData","smsContent","emailSubject","emailContent","recipientListId","selectedClientIds","recipientCount","scheduledSendTime","useAlphaId","attendees","recurrence","enabled","frequency","interval","reminders","minutes","type","attachments","categories","newAttendeeEmail","setNewAttendeeEmail","newAttendeeName","setNewAttendeeName","_event$metadata2","_event$metadata3","_event$metadata4","_event$location","_event$metadata5","_event$metadata6","_event$metadata7","_event$metadata8","_event$metadata8$broa","_event$metadata9","_event$metadata0","_event$metadata0$broa","_event$metadata1","_event$metadata10","_event$metadata10$bro","_event$metadata11","_event$metadata12","_event$metadata13","_event$metadata13$bro","_event$metadata14","_event$metadata15","_event$metadata15$bro","_event$metadata16","_event$metadata16$bro","_event$metadata17","_event$metadata18","_event$metadata18$bro","_event$metadata19","_event$metadata20","_event$metadata20$bro","_event$attendees","_event$recurrence","_event$recurrence2","_event$recurrence3","_event$reminders","_event$attachments","formatDateTimeLocal","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","getMinutes","parsedMetadata","JSON","parse","isAllDay","address","a","role","isOrganizer","rsvpRequired","r","minutesBefore","method","url","Number","startTimeFormatted","endTimeFormatted","now","setHours","setMinutes","toISOString","createEvent","creating","isICalInvite","hasAttendees","hasSelectedClients","graphQLErrors","networkError","cancelEvent","deleting","handleChange","handleRecurrenceChange","field","updateReminder","i","position","setPosition","x","y","isDragging","setIsDragging","dragStart","setDragStart","modalRef","useRef","titleInputRef","handleMouseMove","clientX","clientY","handleMouseUp","document","addEventListener","removeEventListener","closeOnOverlayClick","initialFocusRef","ref","left","top","margin","maxW","containerProps","onMouseDown","closest","zIndex","borderBottomWidth","className","_active","userSelect","pr","CalendarIcon","fontFamily","InfoIcon","Link","isExternal","wrap","totalTasks","FiCheckSquare","completedTasks","taskProgressPercentage","Tabs","TabList","Tab","FiUsers","TabPanels","TabPanel","Stack","isReadOnly","FormHelperText","RadioGroup","direction","Radio","htmlFor","Switch","checked","_Fragment","clientIds","handleSwitchChange","newEndTime","newStartDate","currentEndDate","attendee","_","removeAttendee","addAttendee","FiRepeat","parseInt","min","InputLeftAddon","toLowerCase","BellIcon","reminder","removeReminder","addReminder","borderTopWidth","handleDelete","confirm","reason","handleSubmit","mimeType","isRecurring","until","stringify"],"sourceRoot":""}