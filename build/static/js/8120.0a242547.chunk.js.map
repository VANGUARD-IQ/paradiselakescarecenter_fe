{"version":3,"file":"static/js/8120.0a242547.chunk.js","mappings":"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","sources":["pages/opportunities/NewOpportunity.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  Button,\n  VStack,\n  HStack,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  useToast,\n  Card,\n  CardBody,\n  CardHeader,\n  Text,\n  Badge,\n  InputGroup,\n  InputLeftAddon,\n  FormHelperText,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  IconButton,\n  Divider,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n  Collapse,\n  useDisclosure,\n  useColorMode\n} from '@chakra-ui/react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiArrowLeft, FiSave, FiUser, FiMail, FiPhone, FiDollarSign, FiPlus, FiTrash2, FiCalendar, FiRefreshCcw } from 'react-icons/fi';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport opportunitiesModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL Queries and Mutations\nconst GET_CLIENT = gql`\n  query GetClient($phoneNumber: String!) {\n    clientByPhoneNumber(phoneNumber: $phoneNumber) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      businessName\n    }\n  }\n`;\n\nconst GET_CLIENT_BY_ID = gql`\n  query GetClientById($id: ID!) {\n    client(id: $id) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      businessName\n    }\n  }\n`;\n\nconst SEARCH_CLIENTS = gql`\n  query SearchClients($search: String, $tags: [String!]) {\n    searchClients(search: $search, tags: $tags) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      businessName\n    }\n  }\n`;\n\nconst GET_OPPORTUNITY_STAGES = gql`\n  query GetOpportunityStages {\n    opportunityStages {\n      id\n      name\n      code\n      order\n      color\n      defaultProbability\n    }\n  }\n`;\n\nconst CREATE_OPPORTUNITY = gql`\n  mutation CreateOpportunity($input: OpportunityInput!) {\n    createOpportunity(input: $input) {\n      id\n      title\n      clientId\n      value\n      stage\n      status\n      paymentSchedule {\n        description\n        amount\n        dueDate\n        status\n      }\n      recurringPayment {\n        monthlyAmount\n        probability\n        description\n        startDate\n        endDate\n      }\n      projectedTotalValue\n    }\n  }\n`;\n\nconst NewOpportunity: React.FC = () => {\n  usePageTitle(\"New Opportunity\");\n\n  const navigate = useNavigate();\n  const toast = useToast();\n  const [searchParams] = useSearchParams();\n  const clientId = searchParams.get('clientId');\n  const { colorMode } = useColorMode();\n\n  // Form state\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    clientId: clientId || '',\n    value: 0,\n    stage: 'LEAD',\n    priority: 'MEDIUM',\n    probability: 10,\n    expectedCloseDate: '',\n    source: '',\n    campaign: '',\n    internalNotes: '',\n    products: [] as string[],\n    services: [] as string[],\n    tags: [] as string[],\n    paymentSchedule: [] as Array<{\n      description: string;\n      amount: number;\n      dueDate: string;\n      notes?: string;\n    }>,\n    recurringPayment: {\n      monthlyAmount: 0,\n      probability: 100,\n      description: '',\n      startDate: '',\n      endDate: ''\n    }\n  });\n\n  const [clientSearch, setClientSearch] = useState('');\n\n  // Queries\n  const { data: stagesData } = useQuery(GET_OPPORTUNITY_STAGES);\n  const { data: clientData, loading: loadingClient } = useQuery(\n    GET_CLIENT_BY_ID,\n    {\n      variables: { id: clientId },\n      skip: !clientId // Skip only when there's NO clientId\n    }\n  );\n\n  // Search clients query - get all clients when no clientId is provided\n  const { data: clientsData, loading: loadingClients } = useQuery(SEARCH_CLIENTS, {\n    variables: { search: clientSearch || \"\" }, // Pass empty string to get all clients\n    skip: !!clientId, // Skip if we already have a clientId from URL\n    fetchPolicy: 'cache-and-network' // Ensure we always have fresh data\n  });\n\n  // Mutation\n  const [createOpportunity, { loading: creating }] = useMutation(CREATE_OPPORTUNITY);\n\n  const stages = stagesData?.opportunityStages || [];\n  const client = clientData?.client;\n  const availableClients = clientsData?.searchClients || [];\n\n  // Update clientId when client is loaded from URL\n  useEffect(() => {\n    if (client && clientId) {\n      setFormData(prev => ({\n        ...prev,\n        clientId: client.id\n      }));\n    }\n  }, [client, clientId]);\n\n  // Update probability when stage changes\n  useEffect(() => {\n    const selectedStage = stages.find((s: any) => s.code === formData.stage);\n    if (selectedStage) {\n      setFormData(prev => ({\n        ...prev,\n        probability: selectedStage.defaultProbability\n      }));\n    }\n  }, [formData.stage, stages]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.title || !formData.clientId) {\n      toast({\n        title: 'Missing required fields',\n        description: 'Please provide a title and select a client',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    try {\n      // Helper function to convert date string to ISO format\n      const formatDateToISO = (dateStr: string) => {\n        if (!dateStr) return undefined;\n        // Convert YYYY-MM-DD to ISO 8601 format with time\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return undefined;\n        return date.toISOString();\n      };\n\n      const result = await createOpportunity({\n        variables: {\n          input: {\n            ...formData,\n            value: parseFloat(formData.value.toString()),\n            expectedCloseDate: formatDateToISO(formData.expectedCloseDate),\n            paymentSchedule: formData.paymentSchedule\n              .filter(p => p.description && p.amount > 0)\n              .map(p => ({\n                ...p,\n                dueDate: formatDateToISO(p.dueDate) || new Date().toISOString()\n              })),\n            recurringPayment: formData.recurringPayment.monthlyAmount > 0 ? {\n              ...formData.recurringPayment,\n              startDate: formatDateToISO(formData.recurringPayment.startDate) || new Date().toISOString(),\n              endDate: formatDateToISO(formData.recurringPayment.endDate)\n            } : undefined\n          }\n        }\n      });\n\n      toast({\n        title: 'Opportunity created',\n        description: 'The opportunity has been created successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      navigate(`/opportunities/${result.data.createOpportunity.id}`);\n    } catch (error: any) {\n      toast({\n        title: 'Failed to create opportunity',\n        description: error.message || 'An error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  // Brand styling variables\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n  const expectedRevenue = formData.value * (formData.probability / 100);\n\n  // Calculate total scheduled payments\n  const totalScheduled = formData.paymentSchedule.reduce((sum, payment) => sum + (payment.amount || 0), 0);\n\n  // Calculate projected total with recurring\n  const recurringMonths = formData.recurringPayment.startDate && formData.recurringPayment.endDate\n    ? Math.max(0, Math.ceil((new Date(formData.recurringPayment.endDate).getTime() - new Date(formData.recurringPayment.startDate).getTime()) / (30 * 24 * 60 * 60 * 1000)))\n    : 12;\n  const recurringTotal = formData.recurringPayment.monthlyAmount * recurringMonths * (formData.recurringPayment.probability / 100);\n  const projectedTotal = expectedRevenue + totalScheduled + recurringTotal;\n\n  // Payment schedule functions\n  const addPaymentScheduleItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      paymentSchedule: [\n        ...prev.paymentSchedule,\n        {\n          description: '',\n          amount: 0,\n          dueDate: '',\n          notes: ''\n        }\n      ]\n    }));\n  };\n\n  const updatePaymentScheduleItem = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      paymentSchedule: prev.paymentSchedule.map((item, i) =>\n        i === index ? { ...item, [field]: value } : item\n      )\n    }));\n  };\n\n  const removePaymentScheduleItem = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      paymentSchedule: prev.paymentSchedule.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateRecurringPayment = (field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      recurringPayment: {\n        ...prev.recurringPayment,\n        [field]: value\n      }\n    }));\n  };\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n\n      <Container maxW=\"4xl\" py={8} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <HStack justify=\"space-between\">\n            <HStack>\n              <Button\n                bg=\"rgba(255, 255, 255, 0.1)\"\n                color={textPrimary}\n                leftIcon={<FiArrowLeft />}\n                onClick={() => navigate(-1)}\n                _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n                transition=\"all 0.2s\"\n              >\n                Back\n              </Button>\n              <Heading size=\"lg\" color={textPrimary}>New Opportunity</Heading>\n            </HStack>\n          </HStack>\n\n          <form onSubmit={handleSubmit}>\n            <VStack spacing={6} align=\"stretch\">\n              {/* Client Selection/Information Card */}\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n                _hover={{\n                  transform: \"translateY(-2px)\",\n                  boxShadow: \"0 12px 40px 0 rgba(0, 0, 0, 0.5)\",\n                  transition: \"all 0.2s\"\n                }}\n              >\n                <CardHeader>\n                  <Text fontWeight=\"bold\" color={textPrimary}>Client Information</Text>\n                </CardHeader>\n                <CardBody>\n                  {clientId && loadingClient ? (\n                    // Show loading state while fetching client\n                    <Text color={textSecondary}>Loading client information...</Text>\n                  ) : clientId && client ? (\n                    // Show client info when clientId is in URL\n                    <HStack spacing={6}>\n                      <HStack>\n                        <FiUser color={textSecondary} />\n                        <Text color={textPrimary}>{client.fName} {client.lName}</Text>\n                        {client.businessName && (\n                          <Badge colorScheme=\"blue\">{client.businessName}</Badge>\n                        )}\n                      </HStack>\n                      {client.email && (\n                        <HStack>\n                          <FiMail color={textSecondary} />\n                          <Text color={textSecondary}>{client.email}</Text>\n                        </HStack>\n                      )}\n                      {client.phoneNumber && (\n                        <HStack>\n                          <FiPhone color={textSecondary} />\n                          <Text color={textSecondary}>{client.phoneNumber}</Text>\n                        </HStack>\n                      )}\n                    </HStack>\n                  ) : (\n                    // Show client selector dropdown when no clientId in URL\n                    <VStack spacing={4} align=\"stretch\">\n                      <VStack spacing={2} align=\"stretch\">\n                        <FormLabel color={textPrimary} mb={0}>Search Clients</FormLabel>\n                        <Input\n                          placeholder=\"Search clients by name, email, or phone...\"\n                          value={clientSearch}\n                          onChange={(e) => setClientSearch(e.target.value)}\n                          bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.1)'}\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          _placeholder={{ color: textMuted }}\n                          _hover={{\n                            borderColor: textSecondary,\n                            bg: colorMode === 'light' ? 'gray.50' : 'rgba(255, 255, 255, 0.15)'\n                          }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                            bg: colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.15)'\n                          }}\n                        />\n                      </VStack>\n                      <FormControl isRequired>\n                        <FormLabel color={textPrimary}>Select Client</FormLabel>\n                        <Select\n                          placeholder=\"Choose a client\"\n                          value={formData.clientId}\n                          onChange={(e) => {\n                            const newClientId = e.target.value;\n                            handleInputChange('clientId', newClientId);\n                            // Update URL with selected client ID\n                            if (newClientId) {\n                              const newUrl = `/opportunities/new?clientId=${newClientId}`;\n                              window.history.replaceState(null, '', newUrl);\n                            }\n                          }}\n                          isRequired\n                          bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.1)'}\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          sx={{\n                            option: {\n                              bg: colorMode === 'light' ? 'white' : '#1a1a1a',\n                              color: colorMode === 'light' ? 'black' : 'white',\n                              _hover: {\n                                bg: colorMode === 'light' ? 'gray.100' : 'rgba(255, 255, 255, 0.2)'\n                              }\n                            }\n                          }}\n                          _hover={{\n                            borderColor: textSecondary,\n                            bg: colorMode === 'light' ? 'gray.50' : 'rgba(255, 255, 255, 0.15)'\n                          }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                            bg: colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.15)'\n                          }}\n                        >\n                          {availableClients.map((c: any) => (\n                            <option key={c.id} value={c.id} style={{ background: colorMode === 'light' ? 'white' : '#1a1a1a', color: colorMode === 'light' ? 'black' : 'white' }}>\n                              {c.fName} {c.lName}\n                              {c.businessName && ` - ${c.businessName}`}\n                              {c.email && ` (${c.email})`}\n                              {!c.email && c.phoneNumber && ` (${c.phoneNumber})`}\n                            </option>\n                          ))}\n                        </Select>\n                        {loadingClients && (\n                          <Text fontSize=\"sm\" color={textMuted} mt={1}>\n                            Loading clients...\n                          </Text>\n                        )}\n                        {!loadingClients && availableClients.length === 0 && (\n                          <Text fontSize=\"sm\" color={textMuted} mt={1}>\n                            {clientSearch\n                              ? `No clients found matching \"${clientSearch}\"`\n                              : \"No clients available. Please create a client first.\"\n                            }\n                          </Text>\n                        )}\n                      </FormControl>\n\n                      {/* Show selected client info if one is selected */}\n                      {formData.clientId && !clientId && (() => {\n                        const selectedClient = availableClients.find((c: any) => c.id === formData.clientId);\n                        return selectedClient ? (\n                          <Box pt={2} borderTop=\"1px\" borderColor={cardBorder}>\n                            <HStack spacing={4}>\n                              <HStack>\n                                <FiUser color={textSecondary} />\n                                <Text fontSize=\"sm\" color={textPrimary}>{selectedClient.fName} {selectedClient.lName}</Text>\n                              </HStack>\n                              {selectedClient.email && (\n                                <HStack>\n                                  <FiMail color={textSecondary} />\n                                  <Text fontSize=\"sm\" color={textSecondary}>{selectedClient.email}</Text>\n                                </HStack>\n                              )}\n                              {selectedClient.phoneNumber && (\n                                <HStack>\n                                  <FiPhone color={textSecondary} />\n                                  <Text fontSize=\"sm\" color={textSecondary}>{selectedClient.phoneNumber}</Text>\n                                </HStack>\n                              )}\n                            </HStack>\n                          </Box>\n                        ) : null;\n                      })()}\n                    </VStack>\n                  )}\n                </CardBody>\n              </Card>\n\n              {/* Opportunity Details */}\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n                _hover={{\n                  transform: \"translateY(-2px)\",\n                  boxShadow: \"0 12px 40px 0 rgba(0, 0, 0, 0.5)\",\n                  transition: \"all 0.2s\"\n                }}\n              >\n                <CardHeader>\n                  <Text fontWeight=\"bold\" color={textPrimary}>Opportunity Details</Text>\n                </CardHeader>\n                <CardBody>\n                  <VStack spacing={4} align=\"stretch\">\n                    <FormControl isRequired>\n                      <FormLabel color={textPrimary}>Title</FormLabel>\n                      <Input\n                        value={formData.title}\n                        onChange={(e) => handleInputChange('title', e.target.value)}\n                        placeholder=\"e.g., Website Development for ABC Company\"\n                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: textSecondary }}\n                        _focus={{\n                          borderColor: primaryColor,\n                          boxShadow: `0 0 0 1px ${primaryColor}`,\n                        }}\n                      />\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textPrimary}>Description</FormLabel>\n                      <Textarea\n                        value={formData.description}\n                        onChange={(e) => handleInputChange('description', e.target.value)}\n                        placeholder=\"Describe the opportunity...\"\n                        rows={4}\n                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: textSecondary }}\n                        _focus={{\n                          borderColor: primaryColor,\n                          boxShadow: `0 0 0 1px ${primaryColor}`,\n                        }}\n                      />\n                    </FormControl>\n\n                    <HStack spacing={4}>\n                      <FormControl isRequired flex=\"1\">\n                        <FormLabel color={textPrimary}>One-off Payment Value (AUD)</FormLabel>\n                        <InputGroup>\n                          <InputLeftAddon bg=\"rgba(255, 255, 255, 0.1)\" borderColor={cardBorder} color={textPrimary}>$</InputLeftAddon>\n                          <NumberInput\n                            value={formData.value}\n                            onChange={(_, value) => handleInputChange('value', value || 0)}\n                            min={0}\n                            flex=\"1\"\n                          >\n                            <NumberInputField\n                              bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                              borderColor={cardBorder}\n                              color={textPrimary}\n                              _placeholder={{ color: textMuted }}\n                              _hover={{ borderColor: textSecondary }}\n                              _focus={{\n                                borderColor: primaryColor,\n                                boxShadow: `0 0 0 1px ${primaryColor}`,\n                              }}\n                            />\n                            <NumberInputStepper borderColor={cardBorder}>\n                              <NumberIncrementStepper borderColor={cardBorder} color={textPrimary} />\n                              <NumberDecrementStepper borderColor={cardBorder} color={textPrimary} />\n                            </NumberInputStepper>\n                          </NumberInput>\n                        </InputGroup>\n                      </FormControl>\n\n                      <FormControl flex=\"1\">\n                        <FormLabel color={textPrimary}>Expected Close Date</FormLabel>\n                        <Input\n                          type=\"date\"\n                          value={formData.expectedCloseDate}\n                          onChange={(e) => handleInputChange('expectedCloseDate', e.target.value)}\n                          bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          _hover={{ borderColor: textSecondary }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                          }}\n                        />\n                      </FormControl>\n                    </HStack>\n\n                    <HStack spacing={4}>\n                      <FormControl flex=\"1\">\n                        <FormLabel color={textPrimary}>Stage</FormLabel>\n                        <Select\n                          value={formData.stage}\n                          onChange={(e) => handleInputChange('stage', e.target.value)}\n                          bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          _hover={{ borderColor: textSecondary }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                          }}\n                        >\n                          {stages.map((stage: any) => (\n                            <option key={stage.code} value={stage.code}>\n                              {stage.name}\n                            </option>\n                          ))}\n                        </Select>\n                      </FormControl>\n\n                      <FormControl flex=\"1\">\n                        <FormLabel color={textPrimary}>Priority</FormLabel>\n                        <Select\n                          value={formData.priority}\n                          onChange={(e) => handleInputChange('priority', e.target.value)}\n                          bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          _hover={{ borderColor: textSecondary }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                          }}\n                        >\n                          <option value=\"LOW\">Low</option>\n                          <option value=\"MEDIUM\">Medium</option>\n                          <option value=\"HIGH\">High</option>\n                          <option value=\"CRITICAL\">Critical</option>\n                        </Select>\n                      </FormControl>\n                    </HStack>\n\n                    <FormControl>\n                      <FormLabel color={textPrimary}>\n                        Win Probability: {formData.probability}%\n                      </FormLabel>\n                      <Slider\n                        value={formData.probability}\n                        onChange={(value) => handleInputChange('probability', value)}\n                        min={0}\n                        max={100}\n                        step={5}\n                      >\n                        <SliderTrack>\n                          <SliderFilledTrack bg={primaryColor} />\n                        </SliderTrack>\n                        <SliderThumb boxSize={6}>\n                          <Box color={primaryColor} as={FiDollarSign} />\n                        </SliderThumb>\n                      </Slider>\n                      <FormHelperText color={textSecondary}>\n                        Expected Revenue: ${expectedRevenue.toLocaleString()}\n                      </FormHelperText>\n                    </FormControl>\n                  </VStack>\n                </CardBody>\n              </Card>\n\n              {/* Payment Tracking */}\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n                _hover={{\n                  transform: \"translateY(-2px)\",\n                  boxShadow: \"0 12px 40px 0 rgba(0, 0, 0, 0.5)\",\n                  transition: \"all 0.2s\"\n                }}\n              >\n                <CardHeader>\n                  <Text fontWeight=\"bold\" color={textPrimary}>Payment Tracking</Text>\n                </CardHeader>\n                <CardBody>\n                  <Tabs variant=\"soft-rounded\" colorScheme=\"brand\">\n                    <TabList mb={4}>\n                      <Tab color={textSecondary} _selected={{ color: textPrimary, bg: \"rgba(255, 255, 255, 0.1)\" }}>\n                        Payment Schedule\n                      </Tab>\n                      <Tab color={textSecondary} _selected={{ color: textPrimary, bg: \"rgba(255, 255, 255, 0.1)\" }}>\n                        Recurring Subscription\n                      </Tab>\n                    </TabList>\n\n                    <TabPanels>\n                      <TabPanel>\n                        <VStack spacing={4} align=\"stretch\">\n                          {/* Payment Schedule Items */}\n                          {formData.paymentSchedule.map((payment, index) => (\n                            <Box key={index} p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" border=\"1px\" borderColor={cardBorder}>\n                              <VStack spacing={3}>\n                                <HStack width=\"full\" justify=\"space-between\">\n                                  <Text color={textPrimary} fontWeight=\"semibold\">Payment #{index + 1}</Text>\n                                  <IconButton\n                                    aria-label=\"Remove payment\"\n                                    icon={<FiTrash2 />}\n                                    size=\"sm\"\n                                    colorScheme=\"red\"\n                                    variant=\"ghost\"\n                                    onClick={() => removePaymentScheduleItem(index)}\n                                  />\n                                </HStack>\n\n                                <FormControl>\n                                  <FormLabel color={textPrimary}>Description</FormLabel>\n                                  <Input\n                                    value={payment.description}\n                                    onChange={(e) => updatePaymentScheduleItem(index, 'description', e.target.value)}\n                                    placeholder=\"e.g., Initial deposit, Final payment\"\n                                    bg=\"rgba(255, 255, 255, 0.05)\"\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _placeholder={{ color: textMuted }}\n                                  />\n                                </FormControl>\n\n                                <HStack spacing={4} width=\"full\">\n                                  <FormControl flex=\"1\">\n                                    <FormLabel color={textPrimary}>Amount (AUD)</FormLabel>\n                                    <InputGroup>\n                                      <InputLeftAddon bg=\"rgba(255, 255, 255, 0.1)\" borderColor={cardBorder} color={textPrimary}>$</InputLeftAddon>\n                                      <NumberInput\n                                        value={payment.amount}\n                                        onChange={(_, value) => updatePaymentScheduleItem(index, 'amount', value || 0)}\n                                        min={0}\n                                        width=\"full\"\n                                      >\n                                        <NumberInputField\n                                          bg=\"rgba(255, 255, 255, 0.05)\"\n                                          borderColor={cardBorder}\n                                          color={textPrimary}\n                                        />\n                                      </NumberInput>\n                                    </InputGroup>\n                                  </FormControl>\n\n                                  <FormControl flex=\"1\">\n                                    <FormLabel color={textPrimary}>Due Date</FormLabel>\n                                    <Input\n                                      type=\"date\"\n                                      value={payment.dueDate}\n                                      onChange={(e) => updatePaymentScheduleItem(index, 'dueDate', e.target.value)}\n                                      bg=\"rgba(255, 255, 255, 0.05)\"\n                                      borderColor={cardBorder}\n                                      color={textPrimary}\n                                    />\n                                  </FormControl>\n                                </HStack>\n\n                                <FormControl>\n                                  <FormLabel color={textPrimary}>Notes (Optional)</FormLabel>\n                                  <Textarea\n                                    value={payment.notes}\n                                    onChange={(e) => updatePaymentScheduleItem(index, 'notes', e.target.value)}\n                                    placeholder=\"Additional notes...\"\n                                    rows={2}\n                                    bg=\"rgba(255, 255, 255, 0.05)\"\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _placeholder={{ color: textMuted }}\n                                  />\n                                </FormControl>\n                              </VStack>\n                            </Box>\n                          ))}\n\n                          <Button\n                            onClick={addPaymentScheduleItem}\n                            leftIcon={<FiPlus />}\n                            variant=\"outline\"\n                            borderColor={primaryColor}\n                            color={primaryColor}\n                            _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                          >\n                            Add Payment\n                          </Button>\n\n                          {formData.paymentSchedule.length > 0 && (\n                            <Box p={3} bg=\"rgba(255, 255, 255, 0.1)\" borderRadius=\"md\">\n                              <Text color={textPrimary} fontWeight=\"bold\">\n                                Total Scheduled: ${totalScheduled.toLocaleString()}\n                              </Text>\n                            </Box>\n                          )}\n                        </VStack>\n                      </TabPanel>\n\n                      <TabPanel>\n                        <VStack spacing={4} align=\"stretch\">\n                          <FormControl>\n                            <FormLabel color={textPrimary}>Monthly Amount (AUD)</FormLabel>\n                            <InputGroup>\n                              <InputLeftAddon bg=\"rgba(255, 255, 255, 0.1)\" borderColor={cardBorder} color={textPrimary}>$</InputLeftAddon>\n                              <NumberInput\n                                value={formData.recurringPayment.monthlyAmount}\n                                onChange={(_, value) => updateRecurringPayment('monthlyAmount', value || 0)}\n                                min={0}\n                                width=\"full\"\n                              >\n                                <NumberInputField\n                                  bg=\"rgba(255, 255, 255, 0.05)\"\n                                  borderColor={cardBorder}\n                                  color={textPrimary}\n                                />\n                              </NumberInput>\n                            </InputGroup>\n                          </FormControl>\n\n                          <FormControl>\n                            <FormLabel color={textPrimary}>\n                              Subscription Probability: {formData.recurringPayment.probability}%\n                            </FormLabel>\n                            <Slider\n                              value={formData.recurringPayment.probability}\n                              onChange={(value) => updateRecurringPayment('probability', value)}\n                              min={0}\n                              max={100}\n                              step={5}\n                            >\n                              <SliderTrack>\n                                <SliderFilledTrack bg={primaryColor} />\n                              </SliderTrack>\n                              <SliderThumb boxSize={6}>\n                                <Box color={primaryColor} as={FiRefreshCcw} />\n                              </SliderThumb>\n                            </Slider>\n                          </FormControl>\n\n                          <FormControl>\n                            <FormLabel color={textPrimary}>Description</FormLabel>\n                            <Input\n                              value={formData.recurringPayment.description}\n                              onChange={(e) => updateRecurringPayment('description', e.target.value)}\n                              placeholder=\"e.g., Monthly maintenance, SaaS subscription\"\n                              bg=\"rgba(255, 255, 255, 0.05)\"\n                              borderColor={cardBorder}\n                              color={textPrimary}\n                              _placeholder={{ color: textMuted }}\n                            />\n                          </FormControl>\n\n                          <HStack spacing={4}>\n                            <FormControl flex=\"1\">\n                              <FormLabel color={textPrimary}>Start Date</FormLabel>\n                              <Input\n                                type=\"date\"\n                                value={formData.recurringPayment.startDate}\n                                onChange={(e) => updateRecurringPayment('startDate', e.target.value)}\n                                bg=\"rgba(255, 255, 255, 0.05)\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                              />\n                            </FormControl>\n\n                            <FormControl flex=\"1\">\n                              <FormLabel color={textPrimary}>End Date (Optional)</FormLabel>\n                              <Input\n                                type=\"date\"\n                                value={formData.recurringPayment.endDate}\n                                onChange={(e) => updateRecurringPayment('endDate', e.target.value)}\n                                bg=\"rgba(255, 255, 255, 0.05)\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                              />\n                            </FormControl>\n                          </HStack>\n\n                          {formData.recurringPayment.monthlyAmount > 0 && (\n                            <Box p={3} bg=\"rgba(255, 255, 255, 0.1)\" borderRadius=\"md\">\n                              <VStack align=\"start\">\n                                <Text color={textPrimary} fontWeight=\"bold\">\n                                  Recurring Value ({recurringMonths} months): ${recurringTotal.toLocaleString()}\n                                </Text>\n                                <Text color={textSecondary} fontSize=\"sm\">\n                                  Monthly: ${formData.recurringPayment.monthlyAmount.toLocaleString()} × {recurringMonths} months × {formData.recurringPayment.probability}% probability\n                                </Text>\n                              </VStack>\n                            </Box>\n                          )}\n                        </VStack>\n                      </TabPanel>\n                    </TabPanels>\n                  </Tabs>\n\n                  {/* Total Projected Value Summary */}\n                  {(expectedRevenue > 0 || totalScheduled > 0 || recurringTotal > 0) && (\n                    <Box mt={6} p={4} bg={primaryColor} bgGradient=\"linear(to-r, brand.500, brand.600)\" borderRadius=\"md\">\n                      <VStack align=\"start\" spacing={2}>\n                        <Text color=\"white\" fontWeight=\"bold\" fontSize=\"lg\">\n                          Total Projected Value: ${projectedTotal.toLocaleString()}\n                        </Text>\n                        <VStack align=\"start\" spacing={1}>\n                          {expectedRevenue > 0 && (\n                            <Text color=\"whiteAlpha.900\" fontSize=\"sm\">\n                              • One-off payment: ${expectedRevenue.toLocaleString()} ({formData.probability}% probability)\n                            </Text>\n                          )}\n                          {totalScheduled > 0 && (\n                            <Text color=\"whiteAlpha.900\" fontSize=\"sm\">\n                              • Scheduled payments: ${totalScheduled.toLocaleString()}\n                            </Text>\n                          )}\n                          {recurringTotal > 0 && (\n                            <Text color=\"whiteAlpha.900\" fontSize=\"sm\">\n                              • Recurring subscription: ${recurringTotal.toLocaleString()} ({formData.recurringPayment.probability}% probability)\n                            </Text>\n                          )}\n                        </VStack>\n                      </VStack>\n                    </Box>\n                  )}\n                </CardBody>\n              </Card>\n\n              {/* Source & Tracking */}\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n                _hover={{\n                  transform: \"translateY(-2px)\",\n                  boxShadow: \"0 12px 40px 0 rgba(0, 0, 0, 0.5)\",\n                  transition: \"all 0.2s\"\n                }}\n              >\n                <CardHeader>\n                  <Text fontWeight=\"bold\" color={textPrimary}>Source & Tracking</Text>\n                </CardHeader>\n                <CardBody>\n                  <VStack spacing={4} align=\"stretch\">\n                    <HStack spacing={4}>\n                      <FormControl flex=\"1\">\n                        <FormLabel color={textPrimary}>Lead Source</FormLabel>\n                        <Select\n                          value={formData.source}\n                          onChange={(e) => handleInputChange('source', e.target.value)}\n                          placeholder=\"Select source\"\n                          bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          _hover={{ borderColor: textSecondary }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                          }}\n                        >\n                          <option value=\"Website\">Website</option>\n                          <option value=\"Referral\">Referral</option>\n                          <option value=\"Cold Call\">Cold Call</option>\n                          <option value=\"Email\">Email Campaign</option>\n                          <option value=\"Social Media\">Social Media</option>\n                          <option value=\"Event\">Event</option>\n                          <option value=\"Partner\">Partner</option>\n                          <option value=\"Other\">Other</option>\n                        </Select>\n                      </FormControl>\n\n                      <FormControl flex=\"1\">\n                        <FormLabel color={textPrimary}>Campaign</FormLabel>\n                        <Input\n                          value={formData.campaign}\n                          onChange={(e) => handleInputChange('campaign', e.target.value)}\n                          placeholder=\"Marketing campaign name\"\n                          bg=\"rgba(255, 255, 255, 0.05)\"\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          _placeholder={{ color: textMuted }}\n                          _hover={{ borderColor: textSecondary }}\n                          _focus={{\n                            borderColor: primaryColor,\n                            boxShadow: `0 0 0 1px ${primaryColor}`,\n                          }}\n                        />\n                      </FormControl>\n                    </HStack>\n\n                    <FormControl>\n                      <FormLabel color={textPrimary}>Internal Notes</FormLabel>\n                      <Textarea\n                        value={formData.internalNotes}\n                        onChange={(e) => handleInputChange('internalNotes', e.target.value)}\n                        placeholder=\"Notes for internal use only...\"\n                        rows={3}\n                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: textSecondary }}\n                        _focus={{\n                          borderColor: primaryColor,\n                          boxShadow: `0 0 0 1px ${primaryColor}`,\n                        }}\n                      />\n                    </FormControl>\n                  </VStack>\n                </CardBody>\n              </Card>\n\n              {/* Action Buttons */}\n              <HStack justify=\"flex-end\" spacing={4}>\n                <Button\n                  variant=\"outline\"\n                  borderColor={primaryColor}\n                  color={primaryColor}\n                  onClick={() => navigate(-1)}\n                  _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n                  transition=\"all 0.2s\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  bg={primaryColor}\n                  color=\"white\"\n                  _hover={{ bg: primaryHover, transform: \"translateY(-2px)\" }}\n                  _active={{ transform: \"translateY(0)\" }}\n                  transition=\"all 0.2s\"\n                  fontWeight=\"semibold\"\n                  leftIcon={<FiSave />}\n                  isLoading={creating}\n                  loadingText=\"Creating...\"\n                >\n                  Create Opportunity\n                </Button>\n              </HStack>\n            </VStack>\n          </form>\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default NewOpportunity;"],"names":["gql","_templateObject","_taggedTemplateLiteral","GET_CLIENT_BY_ID","_templateObject2","SEARCH_CLIENTS","_templateObject3","GET_OPPORTUNITY_STAGES","_templateObject4","CREATE_OPPORTUNITY","_templateObject5","NewOpportunity","usePageTitle","navigate","useNavigate","toast","useToast","searchParams","useSearchParams","clientId","get","colorMode","useColorMode","formData","setFormData","useState","title","description","value","stage","priority","probability","expectedCloseDate","source","campaign","internalNotes","products","services","tags","paymentSchedule","recurringPayment","monthlyAmount","startDate","endDate","clientSearch","setClientSearch","data","stagesData","useQuery","clientData","loading","loadingClient","variables","id","skip","clientsData","loadingClients","search","fetchPolicy","createOpportunity","creating","useMutation","stages","opportunityStages","client","availableClients","searchClients","useEffect","prev","_objectSpread","selectedStage","find","s","code","defaultProbability","handleInputChange","field","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","expectedRevenue","totalScheduled","reduce","sum","payment","amount","recurringMonths","Math","max","ceil","Date","getTime","recurringTotal","projectedTotal","updatePaymentScheduleItem","index","map","item","i","updateRecurringPayment","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","opportunitiesModuleConfig","Container","maxW","py","flex","VStack","spacing","align","HStack","justify","Button","color","leftIcon","FiArrowLeft","onClick","_hover","transition","Heading","size","onSubmit","async","e","preventDefault","formatDateToISO","dateStr","date","isNaN","toISOString","result","input","parseFloat","toString","filter","p","dueDate","undefined","status","duration","isClosable","concat","error","message","Card","backdropFilter","boxShadow","border","borderColor","borderRadius","transform","CardHeader","Text","fontWeight","CardBody","FiUser","fName","lName","businessName","Badge","colorScheme","email","FiMail","phoneNumber","FiPhone","FormLabel","mb","Input","placeholder","onChange","target","_placeholder","_focus","FormControl","isRequired","Select","newClientId","newUrl","window","history","replaceState","sx","option","c","style","background","fontSize","mt","length","selectedClient","pt","borderTop","Textarea","rows","InputGroup","InputLeftAddon","NumberInput","_","min","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","type","name","Slider","step","SliderTrack","SliderFilledTrack","SliderThumb","boxSize","as","FiDollarSign","FormHelperText","toLocaleString","Tabs","variant","TabList","Tab","_selected","TabPanels","TabPanel","width","IconButton","icon","FiTrash2","removePaymentScheduleItem","notes","addPaymentScheduleItem","FiPlus","FiRefreshCcw","bgGradient","_active","FiSave","isLoading","loadingText","FooterWithFourColumns"],"sourceRoot":""}