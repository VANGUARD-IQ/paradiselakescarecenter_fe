{"version":3,"file":"static/js/8692.ce1f8af2.chunk.js","mappings":"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","sources":["pages/emails/EmailAccountsAdmin.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Card,\n  CardBody,\n  Badge,\n  Button,\n  Input,\n  Select,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Spinner,\n  IconButton,\n  Tooltip,\n  Switch,\n  useColorMode,\n  Alert,\n  AlertIcon,\n  Code,\n  OrderedList,\n  ListItem,\n  Divider,\n  Link,\n  ModalFooter\n} from '@chakra-ui/react';\nimport { FiPlus, FiTrash2, FiMail, FiUser, FiCopy, FiExternalLink, FiSettings } from 'react-icons/fi';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport emailsModuleConfig from './moduleConfig';\nimport { Client, EmailAddress } from \"../../generated/graphql\";\n\n// GraphQL queries and mutations\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      permissions\n    }\n  }\n`;\n\nconst GET_EMAIL_ADDRESSES = gql`\n  query GetEmailAddresses {\n    emailAddresses {\n      id\n      email\n      name\n      type\n      associatedClients\n      emailsSent\n      emailsReceived\n      lastSeenAt\n      isRegisteredWithImprovMX\n      isVerified\n      primaryCalendarId\n      linkedCalendarIds\n      acceptedSenderEmailsForCalendarInvites\n      acceptCalendarInvitesFromAnyone\n      blockedDomainsForCalendarInvites\n      postmarkEndpoint\n      forwardingProvider\n    }\n  }\n`;\n\nconst GET_CALENDARS = gql`\n  query GetCalendars {\n    calendars {\n      id\n      name\n      type\n      responsibleOwnerId\n    }\n  }\n`;\n\nconst UPDATE_EMAIL_CALENDAR = gql`\n  mutation UpdateEmailCalendar($emailId: String!, $primaryCalendarId: String, $linkedCalendarIds: [String!]) {\n    updateEmailAddress(id: $emailId, input: {\n      primaryCalendarId: $primaryCalendarId,\n      linkedCalendarIds: $linkedCalendarIds\n    }) {\n      id\n      primaryCalendarId\n      linkedCalendarIds\n    }\n  }\n`;\n\nconst ASSIGN_EMAIL_TO_CLIENT = gql`\n  mutation AssignEmailToClient($emailId: String!, $clientId: String!) {\n    assignEmailToClient(emailId: $emailId, clientId: $clientId) {\n      id\n      associatedClients\n    }\n  }\n`;\n\nconst UNASSIGN_EMAIL_FROM_CLIENT = gql`\n  mutation UnassignEmailFromClient($emailId: String!, $clientId: String!) {\n    unassignEmailFromClient(emailId: $emailId, clientId: $clientId) {\n      id\n      associatedClients\n    }\n  }\n`;\n\nconst CREATE_EMAIL_WITH_ALIAS = gql`\n  mutation CreateEmailAddressWithAlias($input: CreateEmailAddressWithAliasInput!) {\n    createEmailAddressWithAlias(input: $input) {\n      id\n      email\n      name\n      type\n      associatedClients\n    }\n  }\n`;\n\nconst TOGGLE_IMPROVMX_STATUS = gql`\n  mutation ToggleImprovMXStatus($emailId: String!, $isRegistered: Boolean!) {\n    updateEmailAddress(id: $emailId, input: { isRegisteredWithImprovMX: $isRegistered }) {\n      id\n      isRegisteredWithImprovMX\n    }\n  }\n`;\n\n// Microsoft 365 Email Forwarding Mutation\nconst CREATE_M365_EMAIL_FORWARDING = gql`\n  mutation CreateEmailAddress($input: EmailAddressInput!) {\n    createEmailAddress(input: $input) {\n      id\n      email\n      name\n      type\n      postmarkEndpoint\n      isRegisteredWithImprovMX\n    }\n  }\n`;\n\nconst UPDATE_EMAIL_TYPE = gql`\n  mutation UpdateEmailType($emailId: String!, $type: String!) {\n    updateEmailAddress(id: $emailId, input: { type: $type }) {\n      id\n      type\n    }\n  }\n`;\n\nconst UPDATE_FORWARDING_PROVIDER = gql`\n  mutation UpdateForwardingProvider($emailId: String!, $provider: ForwardingProvider!) {\n    updateEmailAddress(id: $emailId, input: { forwardingProvider: $provider }) {\n      id\n      forwardingProvider\n    }\n  }\n`;\n\nexport const EmailAccountsAdmin: React.FC = () => {\n    usePageTitle(\"Email Accounts Admin\");\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { isOpen: isCreateOpen, onOpen: onCreateOpen, onClose: onCreateClose } = useDisclosure();\n  const { isOpen: isForwardingOpen, onOpen: onForwardingOpen, onClose: onForwardingClose } = useDisclosure();\n  const [showInstructions, setShowInstructions] = useState(false);\n  const [selectedEmailForInstructions, setSelectedEmailForInstructions] = useState<any>(null);\n\n  const [selectedEmail, setSelectedEmail] = useState<EmailAddress | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('all');\n  const [directionFilter, setDirectionFilter] = useState<'all' | 'incoming' | 'outgoing'>('all');\n  const [registrationFilter, setRegistrationFilter] = useState<'registered' | 'unregistered' | 'all'>('registered');\n  const [providerFilter, setProviderFilter] = useState<'all' | 'IMPROVMX' | 'MICROSOFT' | 'GOOGLE' | 'OTHER' | 'NONE'>('all');\n  const [clientSearchTerm, setClientSearchTerm] = useState('');\n\n  // State for creating new email\n  const [newEmailAlias, setNewEmailAlias] = useState('');\n  const [newEmailName, setNewEmailName] = useState('');\n  const [newEmailType, setNewEmailType] = useState('BUSINESS');\n\n  // State for Microsoft 365 forwarding\n  const [forwardingType, setForwardingType] = useState<'SHARED' | 'DISTRIBUTION' | 'PERSONAL'>('SHARED');\n  const [forwardingAlias, setForwardingAlias] = useState('');\n  const [forwardingDisplayName, setForwardingDisplayName] = useState('');\n\n  // State for editing email type\n  const [editingEmailId, setEditingEmailId] = useState<string | null>(null);\n  const [editingProviderId, setEditingProviderId] = useState<string | null>(null);\n\n  // State for editing calendar assignments\n  const [editingPrimaryCalendarId, setEditingPrimaryCalendarId] = useState<string | null>(null);\n  const [editingLinkedCalendarsId, setEditingLinkedCalendarsId] = useState<string | null>(null);\n\n  // GraphQL queries\n  const { data: clientsData, loading: clientsLoading } = useQuery(GET_CLIENTS);\n  const { data: emailsData, loading: emailsLoading, refetch: refetchEmails } = useQuery(GET_EMAIL_ADDRESSES);\n  const { data: calendarsData } = useQuery(GET_CALENDARS);\n  \n  // GraphQL mutations\n  const [assignEmail] = useMutation(ASSIGN_EMAIL_TO_CLIENT, {\n    onCompleted: () => {\n      toast({\n        title: 'Email assigned successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetchEmails();\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error assigning email',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [unassignEmail] = useMutation(UNASSIGN_EMAIL_FROM_CLIENT, {\n    onCompleted: () => {\n      toast({\n        title: 'Email unassigned successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetchEmails();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error unassigning email',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [createEmailWithAlias] = useMutation(CREATE_EMAIL_WITH_ALIAS, {\n    onCompleted: (data) => {\n      toast({\n        title: 'Email created successfully',\n        description: `Created ${data.createEmailAddressWithAlias.email}`,\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      refetchEmails();\n      onCreateClose();\n      // Reset form\n      setNewEmailAlias('');\n      setNewEmailName('');\n      setNewEmailType('BUSINESS');\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating email',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [toggleImprovMXStatus] = useMutation(TOGGLE_IMPROVMX_STATUS, {\n    onCompleted: () => {\n      toast({\n        title: 'ImprovMX status updated',\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating ImprovMX status',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      // Refetch to revert the optimistic update\n      refetchEmails();\n    },\n  });\n\n  const [updateEmailType] = useMutation(UPDATE_EMAIL_TYPE, {\n    onCompleted: () => {\n      toast({\n        title: 'Email type updated',\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n      refetchEmails();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating email type',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [updateForwardingProvider] = useMutation(UPDATE_FORWARDING_PROVIDER, {\n    onCompleted: () => {\n      toast({\n        title: 'Forwarding provider updated',\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n      refetchEmails();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating forwarding provider',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [createM365Forwarding] = useMutation(CREATE_M365_EMAIL_FORWARDING, {\n    onCompleted: (data) => {\n      const emailData = data.createEmailAddress;\n\n      toast({\n        title: 'Email Created Successfully',\n        description: `${emailData.email} has been created. Click on it in the list to view setup instructions.`,\n        status: 'success',\n        duration: 7000,\n        isClosable: true,\n      });\n\n      // Reset form and close modal\n      setForwardingAlias('');\n      setForwardingDisplayName('');\n      setForwardingType('SHARED');\n      onForwardingClose();\n      refetchEmails(); // Refresh the email list\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating forwarding setup',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [updateEmailCalendar] = useMutation(UPDATE_EMAIL_CALENDAR, {\n    onCompleted: () => {\n      toast({\n        title: 'Calendar assignment updated',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetchEmails();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating calendar assignment',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  });\n\n  const { colorMode } = useColorMode();\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  // Use brighter colors for dark theme\n  const textColor = \"white\";\n  const mutedTextColor = \"gray.300\";\n  const labelColor = \"gray.400\";\n\n  const clients: Client[] = clientsData?.clients || [];\n  const emailAddresses: EmailAddress[] = emailsData?.emailAddresses || [];\n\n  // Filter email addresses based on search, type, direction, and registration status\n  const filteredEmails = emailAddresses.filter(email => {\n    const matchesSearch = email.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         email.name?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = filterType === 'all' || email.type === filterType;\n\n    // Filter by direction (incoming/outgoing)\n    let matchesDirection = true;\n    if (directionFilter === 'incoming') {\n      matchesDirection = email.emailsReceived > 0;\n    } else if (directionFilter === 'outgoing') {\n      matchesDirection = email.emailsSent > 0;\n    }\n\n    // Filter by registration status\n    let matchesRegistration = true;\n    if (registrationFilter === 'registered') {\n      matchesRegistration = email.isRegisteredWithImprovMX === true;\n    } else if (registrationFilter === 'unregistered') {\n      matchesRegistration = email.isRegisteredWithImprovMX !== true;\n    }\n\n    // Filter by forwarding provider\n    let matchesProvider = true;\n    if (providerFilter !== 'all') {\n      matchesProvider = email.forwardingProvider === providerFilter || (!email.forwardingProvider && providerFilter === 'NONE');\n    }\n\n    return matchesSearch && matchesType && matchesDirection && matchesRegistration && matchesProvider;\n  });\n\n  const handleAssignEmail = async (clientId: string) => {\n    if (!selectedEmail) return;\n    \n    await assignEmail({\n      variables: {\n        emailId: selectedEmail.id,\n        clientId: clientId,\n      },\n    });\n  };\n\n  const handleUnassignEmail = async (emailId: string, clientId: string) => {\n    await unassignEmail({\n      variables: {\n        emailId,\n        clientId,\n      },\n    });\n  };\n\n  const openAssignModal = (email: EmailAddress) => {\n    setSelectedEmail(email);\n    setClientSearchTerm(''); // Reset search when opening modal\n    onOpen();\n  };\n\n  const handleCreateEmail = async () => {\n    if (!newEmailAlias.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter an email alias',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    await createEmailWithAlias({\n      variables: {\n        input: {\n          alias: newEmailAlias,\n          name: newEmailName || undefined,\n          type: newEmailType,\n        },\n      },\n    });\n  };\n\n  const handleToggleImprovMX = async (emailId: string, currentStatus: boolean) => {\n    await toggleImprovMXStatus({\n      variables: {\n        emailId,\n        isRegistered: !currentStatus,\n      },\n      optimisticResponse: {\n        updateEmailAddress: {\n          __typename: 'EmailAddress',\n          id: emailId,\n          isRegisteredWithImprovMX: !currentStatus,\n        },\n      },\n    });\n  };\n\n  const handleUpdateEmailType = async (emailId: string, newType: string) => {\n    await updateEmailType({\n      variables: {\n        emailId,\n        type: newType,\n      },\n    });\n    setEditingEmailId(null);\n  };\n\n  const handleUpdateForwardingProvider = async (emailId: string, newProvider: string) => {\n    await updateForwardingProvider({\n      variables: {\n        emailId,\n        provider: newProvider,\n      },\n    });\n    setEditingProviderId(null);\n  };\n\n  const handleUpdatePrimaryCalendar = async (emailId: string, calendarId: string | null) => {\n    await updateEmailCalendar({\n      variables: {\n        emailId,\n        primaryCalendarId: calendarId === 'none' ? null : calendarId,\n      },\n    });\n    setEditingPrimaryCalendarId(null);\n  };\n\n  const handleUpdateLinkedCalendars = async (emailId: string, calendarIds: string[]) => {\n    await updateEmailCalendar({\n      variables: {\n        emailId,\n        linkedCalendarIds: calendarIds,\n      },\n    });\n    setEditingLinkedCalendarsId(null);\n  };\n\n  const handleCopyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: 'Copied',\n      description: 'Address copied to clipboard',\n      status: 'info',\n      duration: 2000,\n    });\n  };\n\n  const handleViewSetupInstructions = (email: EmailAddress) => {\n    if (email.postmarkEndpoint && !email.isRegisteredWithImprovMX) {\n      setSelectedEmailForInstructions({\n        alias: email.email,\n        displayName: email.name,\n        postmarkEndpoint: email.postmarkEndpoint,\n        type: email.type\n      });\n      setShowInstructions(true);\n    }\n  };\n\n  const handleCreateForwarding = async () => {\n    if (!forwardingAlias.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter an email alias',\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // Use the actual Postmark inbound address from your server\n    const postmarkEndpoint = `c167efbd0aabb934087409a8be5588be@inbound.postmarkapp.com`;\n    const fullEmail = `${forwardingAlias}@vanguardiq.com.au`;\n\n    // Check if email already exists\n    const existingEmail = emailAddresses.find(e => e.email === fullEmail);\n    if (existingEmail) {\n      toast({\n        title: 'Email Already Exists',\n        description: `The email ${fullEmail} already exists in the system. You can click on it to view setup instructions.`,\n        status: 'warning',\n        duration: 5000,\n        isClosable: true,\n      });\n      onForwardingClose();\n      return;\n    }\n\n    console.log('Creating M365 forwarding with:', {\n      email: fullEmail,\n      name: forwardingDisplayName || forwardingAlias,\n      type: forwardingType === 'SHARED' ? 'SUPPORT' :\n            forwardingType === 'DISTRIBUTION' ? 'BUSINESS' : 'PERSONAL',\n      postmarkEndpoint,\n      isRegisteredWithImprovMX: false,\n      isVerified: true\n    });\n\n    try {\n      const result = await createM365Forwarding({\n        variables: {\n          input: {\n            email: fullEmail,\n            name: forwardingDisplayName || forwardingAlias,\n            type: forwardingType === 'SHARED' ? 'SUPPORT' :\n                  forwardingType === 'DISTRIBUTION' ? 'BUSINESS' : 'PERSONAL',\n            postmarkEndpoint: postmarkEndpoint,\n            isRegisteredWithImprovMX: false, // This is a Microsoft 365 email\n            isVerified: true, // Mark as verified since it's manually configured\n            forwardingProvider: 'MICROSOFT' // Set provider to Microsoft 365\n          },\n        },\n      });\n\n      console.log('Created email successfully:', result.data);\n\n      // Show setup instructions immediately after creation\n      if (result.data?.createEmailAddress) {\n        setSelectedEmailForInstructions({\n          alias: fullEmail,\n          displayName: forwardingDisplayName || forwardingAlias,\n          postmarkEndpoint: postmarkEndpoint,\n          type: forwardingType === 'SHARED' ? 'SUPPORT' :\n                forwardingType === 'DISTRIBUTION' ? 'BUSINESS' : 'PERSONAL'\n        });\n        setShowInstructions(true);\n      }\n    } catch (error) {\n      console.error('Error creating M365 forwarding:', error);\n      // Error is handled by the mutation's onError callback\n    }\n  };\n\n  if (clientsLoading || emailsLoading) {\n    return (\n      <Box minH=\"100vh\" bg={bg} p={6} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        <VStack spacing={4}>\n          <Spinner size=\"xl\" color=\"blue.400\" />\n          <Text color={textColor}>Loading email accounts...</Text>\n        </VStack>\n      </Box>\n    );\n  }\n\n  return (\n    <Box minH=\"100vh\" bg={bg}>\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n      <Box p={{ base: 4, md: 6 }}>\n      <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\" maxW={{ base: \"100%\", lg: \"none\" }}>\n        {/* Header */}\n        <Box>\n          <Text fontSize={{ base: \"2xl\", md: \"3xl\" }} fontWeight=\"bold\" color={textColor} mb={2}>\n            📧 Email Account Management\n          </Text>\n          <Text color={mutedTextColor} fontSize={{ base: \"md\", md: \"lg\" }} lineHeight=\"1.6\">\n            Control which emails your clients can access. Assign specific email addresses to individual clients - they'll only see emails sent to their assigned addresses when they visit their inbox.\n          </Text>\n        </Box>\n\n        {/* Email Processing Flow Info */}\n        <Card\n          bg=\"blue.900\"\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px solid\"\n          borderColor=\"blue.700\"\n        >\n          <CardBody p={{ base: 4, md: 6 }}>\n            <VStack align=\"start\" spacing={3}>\n              <HStack>\n                <Text fontSize=\"lg\" fontWeight=\"bold\" color=\"blue.200\">\n                  📋 Email Routing & Processing Flow\n                </Text>\n                <Badge colorScheme=\"blue\" fontSize=\"xs\">SINGLE SOURCE OF TRUTH</Badge>\n              </HStack>\n              <Box pl={4}>\n                <VStack align=\"start\" spacing={2}>\n                  <Text fontSize=\"sm\" color=\"gray.300\">\n                    <strong>1. 🎯 Primary Calendar ID:</strong> Direct routing to ONE specific calendar (highest priority)\n                  </Text>\n                  <Text fontSize=\"sm\" color=\"gray.300\">\n                    <strong>2. 📅 Linked Calendar IDs:</strong> Secondary calendars that may receive events\n                  </Text>\n                  <Text fontSize=\"sm\" color=\"gray.300\">\n                    <strong>3. 👥 Associated Clients:</strong> Who can VIEW and MANAGE this email (not for routing)\n                  </Text>\n                  <Text fontSize=\"xs\" color=\"gray.400\" mt={2}>\n                    <strong>Processing Order:</strong> Incoming email → Check EmailAddress.primaryCalendarId → If not set, check linkedCalendarIds → If none, use associatedClients[0]'s personal calendar\n                  </Text>\n                  <Text fontSize=\"xs\" color=\"orange.300\" mt={2}>\n                    ⚠️ <strong>Important:</strong> EmailAddress model is the SINGLE SOURCE OF TRUTH. Client.email is for login only, not email routing.\n                  </Text>\n                </VStack>\n              </Box>\n            </VStack>\n          </CardBody>\n        </Card>\n\n        {/* Stats Cards */}\n        <HStack spacing={{ base: 2, md: 4 }} direction={{ base: \"column\", md: \"row\" }} align=\"stretch\">\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            flex={1}\n          >\n            <CardBody p={{ base: 4, md: 6 }}>\n              <HStack justify=\"space-between\">\n                <VStack align=\"start\" spacing={1} flex=\"1\">\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Tracked Email Addresses</Text>\n                  <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                    {emailAddresses.length}\n                  </Text>\n                  <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                    Auto-detected from incoming emails\n                  </Text>\n                </VStack>\n                <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"blue.500\" color=\"white\">\n                  <FiMail size={24} />\n                </Box>\n              </HStack>\n            </CardBody>\n          </Card>\n\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            flex={1}\n          >\n            <CardBody p={{ base: 4, md: 6 }}>\n              <HStack justify=\"space-between\">\n                <VStack align=\"start\" spacing={1} flex=\"1\">\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Assigned to Clients</Text>\n                  <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                    {emailAddresses.filter(e => e.associatedClients && e.associatedClients.length > 0).length}\n                  </Text>\n                  <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                    Addresses with client access\n                  </Text>\n                </VStack>\n                <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"green.500\" color=\"white\">\n                  <FiUser size={24} />\n                </Box>\n              </HStack>\n            </CardBody>\n          </Card>\n\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            flex={1}\n          >\n            <CardBody p={{ base: 4, md: 6 }}>\n              <HStack justify=\"space-between\">\n                <VStack align=\"start\" spacing={1} flex=\"1\">\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Unassigned Addresses</Text>\n                  <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                    {emailAddresses.filter(e => !e.associatedClients || e.associatedClients.length === 0).length}\n                  </Text>\n                  <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                    Need client assignment\n                  </Text>\n                </VStack>\n                <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"orange.500\" color=\"white\">\n                  <FiMail size={24} />\n                </Box>\n              </HStack>\n            </CardBody>\n          </Card>\n        </HStack>\n\n        {/* Filters */}\n        <Card\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px solid\"\n          borderColor={cardBorder}\n        >\n          <CardBody p={{ base: 4, md: 6 }}>\n            <VStack spacing={4} align=\"stretch\">\n              <Input\n                placeholder=\"Search email addresses...\"\n                value={searchTerm}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n                bg=\"whiteAlpha.100\"\n                border=\"1px solid\"\n                borderColor={cardBorder}\n                color={textColor}\n                _placeholder={{ color: \"gray.500\" }}\n              />\n              <HStack spacing={3} justifyContent=\"space-between\">\n                <HStack spacing={3} flex=\"1\">\n                <Select\n                  value={registrationFilter}\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setRegistrationFilter(e.target.value as 'registered' | 'unregistered' | 'all')}\n                  bg=\"whiteAlpha.100\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                  flex={1}\n                >\n                  <option value=\"registered\">Registered Only</option>\n                  <option value=\"unregistered\">Unregistered Only</option>\n                  <option value=\"all\">All Emails</option>\n                </Select>\n                <Select\n                  value={providerFilter}\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setProviderFilter(e.target.value as 'all' | 'IMPROVMX' | 'MICROSOFT' | 'GOOGLE' | 'OTHER' | 'NONE')}\n                  bg=\"whiteAlpha.100\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                  flex={1}\n                >\n                  <option value=\"all\">All Providers</option>\n                  <option value=\"IMPROVMX\">ImprovMX</option>\n                  <option value=\"MICROSOFT\">Microsoft 365</option>\n                  <option value=\"GOOGLE\">Google Workspace</option>\n                  <option value=\"OTHER\">Other Provider</option>\n                  <option value=\"NONE\">No Provider</option>\n                </Select>\n                <Select\n                  value={directionFilter}\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setDirectionFilter(e.target.value as 'all' | 'incoming' | 'outgoing')}\n                  bg=\"whiteAlpha.100\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                  flex={1}\n                >\n                  <option value=\"all\">All Directions</option>\n                  <option value=\"incoming\">Incoming (Sent to us)</option>\n                  <option value=\"outgoing\">Outgoing (We sent to)</option>\n                </Select>\n                <Select\n                  value={filterType}\n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setFilterType(e.target.value)}\n                  bg=\"whiteAlpha.100\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                  flex={1}\n                >\n                  <option value=\"all\">All Types</option>\n                  <option value=\"PERSONAL\">Personal</option>\n                  <option value=\"BUSINESS\">Business</option>\n                  <option value=\"SUPPORT\">Support</option>\n                  <option value=\"MARKETING\">Marketing</option>\n                  <option value=\"NOREPLY\">No Reply</option>\n                </Select>\n                </HStack>\n                <HStack spacing={2}>\n                  <Button\n                    leftIcon={<FiSettings />}\n                    colorScheme=\"purple\"\n                    onClick={onForwardingOpen}\n                    size=\"md\"\n                    variant=\"outline\"\n                  >\n                    Setup M365 Forwarding\n                  </Button>\n                  <Button\n                    leftIcon={<FiPlus />}\n                    colorScheme=\"blue\"\n                    onClick={onCreateOpen}\n                    size=\"md\"\n                  >\n                    Create Email\n                  </Button>\n                </HStack>\n              </HStack>\n            </VStack>\n          </CardBody>\n        </Card>\n\n        {/* Email Addresses Table */}\n        <Card\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px solid\"\n          borderColor={cardBorder}\n        >\n          <CardBody p={{ base: 4, md: 6 }}>\n            <Box overflowX=\"auto\" width=\"100%\">\n              <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\" }} minWidth=\"700px\">\n                <Thead position=\"sticky\" top={0} bg={cardGradientBg}>\n                  <Tr>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"180px\">\n                      <Tooltip label=\"📧 email: The email address being tracked. This is the unique identifier for routing emails and calendar invites (Required)\" placement=\"top\" hasArrow>\n                        <Text>Email Address</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"80px\">\n                      <Tooltip label=\"📝 type: Categorizes the email (PERSONAL, WORK, SUPPORT, etc). Helps organize and filter email addresses by purpose\" placement=\"top\" hasArrow>\n                        <Text>Type</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"120px\">\n                      <Tooltip label=\"🌐 Provider: Which service manages this email's forwarding (ImprovMX, Microsoft 365, Google Workspace, etc)\" placement=\"top\" hasArrow>\n                        <Text>Provider</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"120px\">\n                      <Tooltip label=\"🔗 isRegisteredWithImprovMX: Whether this email is set up with ImprovMX for forwarding. Enables email routing through ImprovMX service\" placement=\"top\" hasArrow>\n                        <Text>ImprovMX</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"150px\">\n                      <Tooltip label=\"📅 primaryCalendarId: The main calendar where invites to this email are added. Single source of truth for calendar routing\" placement=\"top\" hasArrow>\n                        <Text>Primary Calendar</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"100px\">\n                      <Tooltip label=\"🔄 linkedCalendarIds: Additional calendars that receive copies of invites. Allows one email to update multiple calendars\" placement=\"top\" hasArrow>\n                        <Text>Linked Cals</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"150px\">\n                      <Tooltip label=\"🛡️ Calendar Invite Rules: Controls who can send calendar invites (acceptCalendarInvitesFromAnyone, acceptedSenderEmailsForCalendarInvites, blockedDomainsForCalendarInvites). Prevents spam and unauthorized calendar events\" placement=\"top\" hasArrow>\n                        <Text>Invite Rules</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", md: \"table-cell\" }} minW=\"250px\">\n                      <Tooltip label=\"👥 associatedClients: Links this email to specific clients/users. Determines who can access calendars and emails sent to this address\" placement=\"top\" hasArrow>\n                        <Text>Assigned Clients</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", lg: \"table-cell\" }} minW=\"100px\">\n                      <Tooltip label=\"📊 emailsSent/emailsReceived: Tracks email activity statistics. Helps identify active vs inactive email addresses\" placement=\"top\" hasArrow>\n                        <Text>Activity</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", lg: \"table-cell\" }} minW=\"100px\">\n                      <Tooltip label=\"🕐 lastSeenAt: When this email was last active. Helps identify stale or abandoned email addresses\" placement=\"top\" hasArrow>\n                        <Text>Last Seen</Text>\n                      </Tooltip>\n                    </Th>\n                    <Th color={labelColor} px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} minW=\"80px\">\n                      <Text>Actions</Text>\n                    </Th>\n                  </Tr>\n                </Thead>\n              <Tbody>\n                {filteredEmails.map((email) => (\n                  <Tr key={email.id}>\n                    <Td px={{ base: 2, md: 4 }}>\n                      <VStack align=\"start\" spacing={1}>\n                        <Text color={textColor} fontWeight=\"medium\" fontSize={{ base: \"xs\", md: \"sm\" }} noOfLines={2}>\n                          {email.email}\n                        </Text>\n                        {email.name && (\n                          <Text fontSize={{ base: \"2xs\", md: \"xs\" }} color=\"gray.300\" noOfLines={1}>\n                            {email.name}\n                          </Text>\n                        )}\n                        <Text display={{ base: \"block\", md: \"none\" }} fontSize=\"2xs\" color=\"gray.400\">\n                          {email.associatedClients && email.associatedClients.length > 0 ? `${email.associatedClients.length} client(s)` : \"Unassigned\"}\n                        </Text>\n                      </VStack>\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      {editingEmailId === email.id ? (\n                        <Select\n                          size=\"sm\"\n                          value={email.type}\n                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleUpdateEmailType(email.id, e.target.value)}\n                          onBlur={() => setEditingEmailId(null)}\n                          autoFocus\n                          width=\"100px\"\n                        >\n                          <option value=\"BUSINESS\">Business</option>\n                          <option value=\"PERSONAL\">Personal</option>\n                          <option value=\"SUPPORT\">Support</option>\n                          <option value=\"MARKETING\">Marketing</option>\n                          <option value=\"NOREPLY\">No Reply</option>\n                          <option value=\"UNKNOWN\">Unknown</option>\n                        </Select>\n                      ) : (\n                        <Badge\n                          colorScheme={\n                            email.type === 'PERSONAL' ? 'blue' :\n                            email.type === 'BUSINESS' ? 'green' :\n                            email.type === 'SUPPORT' ? 'yellow' :\n                            email.type === 'MARKETING' ? 'purple' :\n                            'gray'\n                          }\n                          variant=\"subtle\"\n                          fontSize={{ base: \"2xs\", md: \"xs\" }}\n                          cursor=\"pointer\"\n                          onClick={() => setEditingEmailId(email.id)}\n                          _hover={{ opacity: 0.8 }}\n                        >\n                          {email.type === 'PERSONAL' ? 'PERS' : email.type === 'BUSINESS' ? 'BIZ' : email.type === 'MARKETING' ? 'MKTG' : email.type}\n                        </Badge>\n                      )}\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      {editingProviderId === email.id ? (\n                        <Select\n                          size=\"sm\"\n                          value={email.forwardingProvider || 'NONE'}\n                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleUpdateForwardingProvider(email.id, e.target.value)}\n                          onBlur={() => setEditingProviderId(null)}\n                          autoFocus\n                          width=\"120px\"\n                        >\n                          <option value=\"IMPROVMX\">ImprovMX</option>\n                          <option value=\"MICROSOFT\">Microsoft 365</option>\n                          <option value=\"GOOGLE\">Google</option>\n                          <option value=\"OTHER\">Other</option>\n                          <option value=\"NONE\">None</option>\n                        </Select>\n                      ) : (\n                        <Badge\n                          colorScheme={\n                            email.forwardingProvider === 'IMPROVMX' ? 'cyan' :\n                            email.forwardingProvider === 'MICROSOFT' ? 'blue' :\n                            email.forwardingProvider === 'GOOGLE' ? 'green' :\n                            email.forwardingProvider === 'OTHER' ? 'orange' :\n                            'gray'\n                          }\n                          variant=\"subtle\"\n                          fontSize={{ base: \"2xs\", md: \"xs\" }}\n                          cursor=\"pointer\"\n                          onClick={() => setEditingProviderId(email.id)}\n                          _hover={{ opacity: 0.8 }}\n                        >\n                          {email.forwardingProvider === 'IMPROVMX' ? 'ImprovMX' :\n                           email.forwardingProvider === 'MICROSOFT' ? 'MS 365' :\n                           email.forwardingProvider === 'GOOGLE' ? 'Google' :\n                           email.forwardingProvider === 'OTHER' ? 'Other' :\n                           'None'}\n                        </Badge>\n                      )}\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      <VStack align=\"start\" spacing={1}>\n                        <HStack>\n                          <Switch\n                            size=\"sm\"\n                            colorScheme=\"green\"\n                            isChecked={email.isRegisteredWithImprovMX}\n                            onChange={() => handleToggleImprovMX(email.id, email.isRegisteredWithImprovMX)}\n                          />\n                          <Text fontSize=\"xs\" color={email.isRegisteredWithImprovMX ? \"green.400\" : \"gray.400\"}>\n                            {email.isRegisteredWithImprovMX ? \"Registered\" : \"Not Registered\"}\n                          </Text>\n                        </HStack>\n                        {email.isVerified !== undefined && (\n                          <Badge\n                            colorScheme={email.isVerified ? \"blue\" : \"orange\"}\n                            fontSize=\"2xs\"\n                            variant=\"subtle\"\n                          >\n                            {email.isVerified ? \"Verified\" : \"Unverified\"}\n                          </Badge>\n                        )}\n                      </VStack>\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      {editingPrimaryCalendarId === email.id ? (\n                        <Select\n                          size=\"sm\"\n                          value={email.primaryCalendarId || 'none'}\n                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleUpdatePrimaryCalendar(email.id, e.target.value)}\n                          onBlur={() => setEditingPrimaryCalendarId(null)}\n                          autoFocus\n                          width=\"150px\"\n                          fontSize=\"xs\"\n                        >\n                          <option value=\"none\">Not set</option>\n                          {calendarsData?.calendars?.map((calendar: any) => (\n                            <option key={calendar.id} value={calendar.id}>\n                              {calendar.name}\n                            </option>\n                          ))}\n                        </Select>\n                      ) : (\n                        <Box\n                          cursor=\"pointer\"\n                          onClick={() => setEditingPrimaryCalendarId(email.id)}\n                          _hover={{ opacity: 0.8 }}\n                        >\n                          {email.primaryCalendarId ? (\n                            <VStack align=\"start\" spacing={0}>\n                              <Badge colorScheme=\"green\" fontSize=\"xs\" variant=\"subtle\">\n                                🎯 Primary\n                              </Badge>\n                              <Text fontSize=\"2xs\" color=\"gray.400\">\n                                {calendarsData?.calendars?.find((c: any) => c.id === email.primaryCalendarId)?.name || email.primaryCalendarId.slice(-6)}\n                              </Text>\n                            </VStack>\n                          ) : (\n                            <Badge colorScheme=\"gray\" fontSize=\"xs\" variant=\"subtle\">\n                              Click to set\n                            </Badge>\n                          )}\n                        </Box>\n                      )}\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      {editingLinkedCalendarsId === email.id ? (\n                        <VStack align=\"start\" spacing={2}>\n                          <Select\n                            size=\"sm\"\n                            placeholder=\"Add calendar...\"\n                            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                              if (e.target.value && !email.linkedCalendarIds?.includes(e.target.value)) {\n                                handleUpdateLinkedCalendars(\n                                  email.id,\n                                  [...(email.linkedCalendarIds || []), e.target.value]\n                                );\n                              }\n                            }}\n                            width=\"150px\"\n                            fontSize=\"xs\"\n                          >\n                            {calendarsData?.calendars\n                              ?.filter((cal: any) => !email.linkedCalendarIds?.includes(cal.id))\n                              ?.map((calendar: any) => (\n                                <option key={calendar.id} value={calendar.id}>\n                                  {calendar.name}\n                                </option>\n                              ))}\n                          </Select>\n                          <VStack align=\"start\" spacing={1}>\n                            {email.linkedCalendarIds?.map((calId: string) => {\n                              const calendar = calendarsData?.calendars?.find((c: any) => c.id === calId);\n                              return (\n                                <HStack key={calId} spacing={1}>\n                                  <Badge colorScheme=\"blue\" fontSize=\"2xs\">\n                                    {calendar?.name || calId.slice(-6)}\n                                  </Badge>\n                                  <IconButton\n                                    aria-label=\"Remove\"\n                                    icon={<FiTrash2 />}\n                                    size=\"xs\"\n                                    variant=\"ghost\"\n                                    onClick={() =>\n                                      handleUpdateLinkedCalendars(\n                                        email.id,\n                                        (email.linkedCalendarIds || []).filter((id: string) => id !== calId)\n                                      )\n                                    }\n                                  />\n                                </HStack>\n                              );\n                            })}\n                          </VStack>\n                          <Button\n                            size=\"xs\"\n                            onClick={() => setEditingLinkedCalendarsId(null)}\n                          >\n                            Done\n                          </Button>\n                        </VStack>\n                      ) : (\n                        <Box\n                          cursor=\"pointer\"\n                          onClick={() => setEditingLinkedCalendarsId(email.id)}\n                          _hover={{ opacity: 0.8 }}\n                        >\n                          {email.linkedCalendarIds && email.linkedCalendarIds.length > 0 ? (\n                            <VStack align=\"start\" spacing={0}>\n                              <Badge colorScheme=\"blue\" fontSize=\"xs\" variant=\"subtle\">\n                                📅 {email.linkedCalendarIds.length} linked\n                              </Badge>\n                              <Text fontSize=\"2xs\" color=\"gray.400\">\n                                Click to edit\n                              </Text>\n                            </VStack>\n                          ) : (\n                            <Badge colorScheme=\"gray\" fontSize=\"xs\" variant=\"subtle\">\n                              Click to add\n                            </Badge>\n                          )}\n                        </Box>\n                      )}\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      <VStack align=\"start\" spacing={1}>\n                        {email.acceptCalendarInvitesFromAnyone && (\n                          <Badge colorScheme=\"green\" fontSize=\"xs\">\n                            Accepts All\n                          </Badge>\n                        )}\n                        {email.acceptedSenderEmailsForCalendarInvites && email.acceptedSenderEmailsForCalendarInvites.length > 0 && (\n                          <Tooltip label={`Accepts from: ${email.acceptedSenderEmailsForCalendarInvites.join(', ')}`}>\n                            <Badge colorScheme=\"blue\" fontSize=\"xs\">\n                              {email.acceptedSenderEmailsForCalendarInvites.length} Allowed\n                            </Badge>\n                          </Tooltip>\n                        )}\n                        {email.blockedDomainsForCalendarInvites && email.blockedDomainsForCalendarInvites.length > 0 && (\n                          <Tooltip label={`Blocks: ${email.blockedDomainsForCalendarInvites.join(', ')}`}>\n                            <Badge colorScheme=\"red\" fontSize=\"xs\">\n                              {email.blockedDomainsForCalendarInvites.length} Blocked\n                            </Badge>\n                          </Tooltip>\n                        )}\n                        {!email.acceptCalendarInvitesFromAnyone &&\n                         (!email.acceptedSenderEmailsForCalendarInvites || email.acceptedSenderEmailsForCalendarInvites.length === 0) &&\n                         (!email.blockedDomainsForCalendarInvites || email.blockedDomainsForCalendarInvites.length === 0) && (\n                          <Text fontSize=\"xs\" color=\"gray.500\">No rules</Text>\n                        )}\n                      </VStack>\n                    </Td>\n                    <Td display={{ base: \"none\", md: \"table-cell\" }} px={{ base: 2, md: 4 }}>\n                      <VStack align=\"start\" spacing={2} maxW=\"250px\">\n                        {!email.associatedClients || email.associatedClients.length === 0 ? (\n                          <Text fontSize=\"sm\" color=\"gray.400\">\n                            Unassigned\n                          </Text>\n                        ) : (\n                          email.associatedClients.map((clientId) => {\n                            const client = clients.find(c => c.id === clientId);\n                            return (\n                              <Box key={clientId} p={2} borderRadius=\"md\" bg=\"whiteAlpha.50\" border=\"1px solid\" borderColor={cardBorder} width=\"100%\">\n                                <HStack justify=\"space-between\" align=\"start\">\n                                  <VStack align=\"start\" spacing={0.5} flex={1}>\n                                    <Text fontSize=\"xs\" fontWeight=\"medium\" color={textColor}>\n                                      {client ? `${client.fName} ${client.lName}` : 'Unknown Client'}\n                                    </Text>\n                                    {client?.email && (\n                                      <Text fontSize=\"2xs\" color=\"gray.400\" noOfLines={1}>\n                                        {client.email}\n                                      </Text>\n                                    )}\n                                    {client?.phoneNumber && (\n                                      <Text fontSize=\"2xs\" color=\"gray.400\">\n                                        📱 {client.phoneNumber}\n                                      </Text>\n                                    )}\n                                    <Text fontSize=\"2xs\" color=\"gray.500\">\n                                      ID: {clientId}\n                                    </Text>\n                                  </VStack>\n                                  <IconButton\n                                    aria-label=\"Unassign client\"\n                                    icon={<FiTrash2 />}\n                                    size=\"xs\"\n                                    variant=\"ghost\"\n                                    colorScheme=\"red\"\n                                    onClick={() => handleUnassignEmail(email.id, clientId)}\n                                  />\n                                </HStack>\n                              </Box>\n                            );\n                          })\n                        )}\n                      </VStack>\n                    </Td>\n                    <Td display={{ base: \"none\", lg: \"table-cell\" }} px={{ base: 2, md: 4 }}>\n                      <VStack align=\"start\" spacing={1}>\n                        <Text fontSize=\"xs\" color={textColor}>\n                          📤 {email.emailsSent} sent\n                        </Text>\n                        <Text fontSize=\"xs\" color={textColor}>\n                          📥 {email.emailsReceived} received\n                        </Text>\n                      </VStack>\n                    </Td>\n                    <Td display={{ base: \"none\", lg: \"table-cell\" }} px={{ base: 2, md: 4 }}>\n                      <Text fontSize=\"xs\" color=\"gray.300\">\n                        {email.lastSeenAt ? new Date(email.lastSeenAt).toLocaleDateString() : \"-\"}\n                      </Text>\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }}>\n                      <HStack spacing={1}>\n                        {!email.isRegisteredWithImprovMX && (\n                          <Button\n                            leftIcon={<FiSettings />}\n                            size={{ base: \"xs\", md: \"sm\" }}\n                            variant=\"outline\"\n                            colorScheme=\"purple\"\n                            onClick={() => {\n                              // If no postmarkEndpoint exists, use the default one\n                              const endpoint = email.postmarkEndpoint || 'c167efbd0aabb934087409a8be5588be@inbound.postmarkapp.com';\n                              setSelectedEmailForInstructions({\n                                alias: email.email,\n                                displayName: email.name || email.email,\n                                postmarkEndpoint: endpoint,\n                                type: email.type || 'BUSINESS'\n                              });\n                              setShowInstructions(true);\n                            }}\n                            fontSize={{ base: \"xs\", md: \"sm\" }}\n                          >\n                            View Microsoft Forwarding Instructions\n                          </Button>\n                        )}\n                        <Tooltip label=\"Assign to client\">\n                          <IconButton\n                            aria-label=\"Assign email\"\n                            icon={<FiPlus />}\n                            size={{ base: \"xs\", md: \"sm\" }}\n                            variant=\"ghost\"\n                            colorScheme=\"blue\"\n                            minW={{ base: \"28px\", md: \"32px\" }}\n                            onClick={() => openAssignModal(email)}\n                          />\n                        </Tooltip>\n                      </HStack>\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n              </Table>\n            </Box>\n          </CardBody>\n        </Card>\n\n        {/* How It Works Info Box */}\n        <Card\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px solid\"\n          borderColor={cardBorder}\n        >\n          <CardBody p={{ base: 4, md: 6 }}>\n            <VStack align=\"start\" spacing={{ base: 2, md: 3 }}>\n              <HStack>\n                <Text fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"semibold\" color={textColor}>\n                  📚 How Email Assignment Works\n                </Text>\n              </HStack>\n              <VStack align=\"start\" spacing={{ base: 1, md: 2 }} pl={{ base: 2, md: 4 }}>\n                <HStack align=\"start\" spacing={{ base: 2, md: 3 }}>\n                  <Text color=\"blue.400\" fontWeight=\"bold\">1.</Text>\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">\n                    Email addresses are automatically tracked when emails arrive at your Postmark inbound webhook\n                  </Text>\n                </HStack>\n                <HStack align=\"start\" spacing={{ base: 2, md: 3 }}>\n                  <Text color=\"blue.400\" fontWeight=\"bold\">2.</Text>\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">\n                    Click the plus button next to any email address to assign it to specific clients\n                  </Text>\n                </HStack>\n                <HStack align=\"start\" spacing={{ base: 2, md: 3 }}>\n                  <Text color=\"blue.400\" fontWeight=\"bold\">3.</Text>\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">\n                    Clients will only see emails from their assigned addresses in their inbox\n                  </Text>\n                </HStack>\n                <HStack align=\"start\" spacing={{ base: 2, md: 3 }}>\n                  <Text color=\"blue.400\" fontWeight=\"bold\">4.</Text>\n                  <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">\n                    System admins always see all emails regardless of assignments\n                  </Text>\n                </HStack>\n              </VStack>\n            </VStack>\n          </CardBody>\n        </Card>\n\n        {/* Assignment Modal */}\n        <Modal isOpen={isOpen} onClose={onClose} size={{ base: \"full\", md: \"md\" }}>\n          <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n          <ModalContent \n            bg={cardGradientBg} \n            border=\"1px solid\" \n            borderColor={cardBorder}\n            margin={{ base: 0, md: \"auto\" }}\n            borderRadius={{ base: 0, md: \"md\" }}\n            maxH={{ base: \"100vh\", md: \"90vh\" }}\n          >\n            <ModalHeader color={textColor} fontSize={{ base: \"lg\", md: \"xl\" }}>\n              Assign Email: {selectedEmail?.email}\n            </ModalHeader>\n            <ModalCloseButton color={textColor} />\n            <ModalBody pb={6}>\n              <VStack spacing={{ base: 3, md: 4 }} align=\"stretch\">\n                <Text color=\"gray.300\" fontSize={{ base: \"sm\", md: \"md\" }}>\n                  Select a client to assign this email address to:\n                </Text>\n\n                <Input\n                  placeholder=\"Search by name, email, or client ID...\"\n                  value={clientSearchTerm}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setClientSearchTerm(e.target.value)}\n                  bg=\"whiteAlpha.100\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                  _placeholder={{ color: \"gray.500\" }}\n                  mb={2}\n                />\n\n                <VStack spacing={2} align=\"stretch\" maxH={{ base: \"300px\", md: \"400px\" }} overflowY=\"auto\">\n                  {clients\n                    .filter(client => {\n                      const searchLower = clientSearchTerm.toLowerCase();\n                      return (\n                        client.id.toLowerCase().includes(searchLower) ||\n                        (client.fName?.toLowerCase().includes(searchLower) ?? false) ||\n                        (client.lName?.toLowerCase().includes(searchLower) ?? false) ||\n                        (client.email?.toLowerCase().includes(searchLower) ?? false)\n                      );\n                    })\n                    .map((client) => (\n                    <HStack\n                      key={client.id}\n                      p={{ base: 3, md: 4 }}\n                      borderRadius=\"md\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      justify=\"space-between\"\n                      bg=\"whiteAlpha.50\"\n                      direction={{ base: \"column\", md: \"row\" }}\n                      align={{ base: \"stretch\", md: \"center\" }}\n                      spacing={{ base: 2, md: 3 }}\n                    >\n                      <VStack align={{ base: \"stretch\", md: \"start\" }} spacing={1} flex=\"1\">\n                        <Text color={textColor} fontWeight=\"medium\" fontSize={{ base: \"sm\", md: \"md\" }} textAlign={{ base: \"center\", md: \"left\" }}>\n                          {client.fName} {client.lName}\n                        </Text>\n                        <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.400\" textAlign={{ base: \"center\", md: \"left\" }}>\n                          {client.email}\n                        </Text>\n                        {client.phoneNumber && (\n                          <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.400\" textAlign={{ base: \"center\", md: \"left\" }}>\n                            📱 {client.phoneNumber}\n                          </Text>\n                        )}\n                        <Text fontSize={{ base: \"xs\", md: \"xs\" }} color=\"gray.500\" textAlign={{ base: \"center\", md: \"left\" }}>\n                          ID: {client.id}\n                        </Text>\n                      </VStack>\n                      <Button\n                        size={{ base: \"sm\", md: \"sm\" }}\n                        colorScheme=\"blue\"\n                        width={{ base: \"100%\", md: \"auto\" }}\n                        minW={{ md: \"120px\" }}\n                        onClick={() => handleAssignEmail(client.id)}\n                        isDisabled={selectedEmail?.associatedClients?.includes(client.id)}\n                      >\n                        {selectedEmail?.associatedClients?.includes(client.id) ? 'Already Assigned' : 'Assign'}\n                      </Button>\n                    </HStack>\n                  ))}\n                </VStack>\n              </VStack>\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n\n        {/* Create Email Modal */}\n        <Modal isOpen={isCreateOpen} onClose={onCreateClose} size={{ base: \"full\", md: \"md\" }}>\n          <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n          <ModalContent\n            bg={cardGradientBg}\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            margin={{ base: 0, md: \"auto\" }}\n            borderRadius={{ base: 0, md: \"md\" }}\n          >\n            <ModalHeader color={textColor} fontSize={{ base: \"lg\", md: \"xl\" }}>\n              Create New Email Address (ImprovMX)\n            </ModalHeader>\n            <ModalCloseButton color={textColor} />\n            <ModalBody pb={6}>\n              <VStack spacing={4} align=\"stretch\">\n                <Box>\n                  <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                    Email Alias *\n                  </Text>\n                  <Input\n                    placeholder=\"e.g., support, info, sales\"\n                    value={newEmailAlias}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewEmailAlias(e.target.value.toLowerCase().replace(/[^a-z0-9.-]/g, ''))}\n                    bg=\"whiteAlpha.100\"\n                    border=\"1px solid\"\n                    borderColor={cardBorder}\n                    color={textColor}\n                    _placeholder={{ color: \"gray.500\" }}\n                  />\n                  <Text color=\"gray.500\" fontSize=\"xs\" mt={1}>\n                    Only lowercase letters, numbers, dots and dashes allowed\n                  </Text>\n                </Box>\n\n                <Box>\n                  <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                    Display Name (Optional)\n                  </Text>\n                  <Input\n                    placeholder=\"e.g., Customer Support\"\n                    value={newEmailName}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewEmailName(e.target.value)}\n                    bg=\"whiteAlpha.100\"\n                    border=\"1px solid\"\n                    borderColor={cardBorder}\n                    color={textColor}\n                    _placeholder={{ color: \"gray.500\" }}\n                  />\n                </Box>\n\n                <Box>\n                  <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                    Email Type\n                  </Text>\n                  <Select\n                    value={newEmailType}\n                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewEmailType(e.target.value)}\n                    bg=\"whiteAlpha.100\"\n                    border=\"1px solid\"\n                    borderColor={cardBorder}\n                    color={textColor}\n                  >\n                    <option value=\"BUSINESS\">Business</option>\n                    <option value=\"PERSONAL\">Personal</option>\n                    <option value=\"SUPPORT\">Support</option>\n                    <option value=\"MARKETING\">Marketing</option>\n                    <option value=\"NOREPLY\">No Reply</option>\n                    <option value=\"UNKNOWN\">Unknown</option>\n                  </Select>\n                </Box>\n\n                <Alert status=\"info\" bg=\"blue.900\" border=\"1px solid\" borderColor=\"blue.700\">\n                  <AlertIcon />\n                  <Box>\n                    <Text fontWeight=\"bold\" color=\"blue.200\" mb={2}>\n                      🚀 Automatic ImprovMX Forwarding\n                    </Text>\n                    <VStack align=\"start\" spacing={2}>\n                      <Text fontSize=\"sm\" color=\"blue.100\">\n                        This option uses <strong>ImprovMX</strong> for automatic email forwarding:\n                      </Text>\n                      <VStack align=\"start\" pl={4} spacing={1}>\n                        <Text fontSize=\"xs\" color=\"gray.300\">\n                          ✅ <strong>Instant setup</strong> - forwarding rules created automatically\n                        </Text>\n                        <Text fontSize=\"xs\" color=\"gray.300\">\n                          ✅ <strong>No manual configuration</strong> - works immediately\n                        </Text>\n                        <Text fontSize=\"xs\" color=\"gray.300\">\n                          ✅ <strong>Auto-forwards to Postmark</strong> for programmatic processing\n                        </Text>\n                        <Text fontSize=\"xs\" color=\"gray.300\">\n                          ✅ <strong>Perfect for new emails</strong> not in Microsoft 365\n                        </Text>\n                      </VStack>\n                      <Divider borderColor=\"blue.600\" my={2} />\n                      <Text fontSize=\"xs\" color=\"orange.300\">\n                        💡 <strong>Already using Microsoft 365?</strong> Use the purple \"Setup M365 Forwarding\" button instead to keep emails in your existing Microsoft system.\n                      </Text>\n                    </VStack>\n                  </Box>\n                </Alert>\n\n                <HStack spacing={3} justify=\"flex-end\" pt={2}>\n                  <Button variant=\"ghost\" onClick={onCreateClose} color={textColor}>\n                    Cancel\n                  </Button>\n                  <Button\n                    colorScheme=\"blue\"\n                    onClick={handleCreateEmail}\n                    isDisabled={!newEmailAlias.trim()}\n                  >\n                    Create Email\n                  </Button>\n                </HStack>\n              </VStack>\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n\n        {/* Microsoft 365 Forwarding Setup Modal */}\n        <Modal isOpen={isForwardingOpen} onClose={onForwardingClose} size=\"xl\">\n          <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n          <ModalContent\n            bg={cardGradientBg}\n            border=\"1px solid\"\n            borderColor={cardBorder}\n          >\n            <ModalHeader color={textColor}>Setup Microsoft 365 Email Forwarding</ModalHeader>\n            <ModalCloseButton color={textColor} />\n            <ModalBody pb={6}>\n              <VStack spacing={4} align=\"stretch\">\n                <Alert status=\"info\" bg=\"blue.900\" border=\"1px solid\" borderColor=\"blue.700\">\n                  <AlertIcon />\n                  <Box>\n                    <Text fontWeight=\"bold\">Manual Setup Required</Text>\n                    <Text fontSize=\"sm\">\n                      This will generate instructions for configuring email forwarding in Microsoft 365 to Postmark.\n                    </Text>\n                  </Box>\n                </Alert>\n\n                <Box>\n                  <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                    Forwarding Type\n                  </Text>\n                  <Select\n                    value={forwardingType}\n                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setForwardingType(e.target.value as any)}\n                    bg=\"whiteAlpha.100\"\n                    border=\"1px solid\"\n                    borderColor={cardBorder}\n                    color={textColor}\n                  >\n                    <option value=\"SHARED\">Shared Mailbox (Team Access)</option>\n                    <option value=\"DISTRIBUTION\">Distribution List (Multiple Recipients)</option>\n                    <option value=\"PERSONAL\">Personal Alias (Single User)</option>\n                  </Select>\n                </Box>\n\n                <Box>\n                  <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                    Email Alias\n                  </Text>\n                  <HStack>\n                    <Input\n                      placeholder=\"support\"\n                      value={forwardingAlias}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setForwardingAlias(e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, ''))}\n                      bg=\"whiteAlpha.100\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      color={textColor}\n                      _placeholder={{ color: \"gray.500\" }}\n                    />\n                    <Text color=\"gray.400\">@vanguardiq.com.au</Text>\n                  </HStack>\n                </Box>\n\n                <Box>\n                  <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                    Display Name\n                  </Text>\n                  <Input\n                    placeholder=\"Support Team\"\n                    value={forwardingDisplayName}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setForwardingDisplayName(e.target.value)}\n                    bg=\"whiteAlpha.100\"\n                    border=\"1px solid\"\n                    borderColor={cardBorder}\n                    color={textColor}\n                    _placeholder={{ color: \"gray.500\" }}\n                  />\n                </Box>\n\n                <Alert status=\"info\" bg=\"purple.900\" border=\"1px solid\" borderColor=\"purple.700\" fontSize=\"sm\">\n                  <AlertIcon />\n                  <Box>\n                    {(selectedEmailForInstructions?.type === 'SUPPORT' || selectedEmailForInstructions?.type === 'SHARED') && (\n                      <>\n                        <Text fontWeight=\"bold\">Shared Mailbox</Text>\n                        <Text>Perfect for support@, info@, sales@. Multiple people can access without extra licenses.</Text>\n                      </>\n                    )}\n                    {(selectedEmailForInstructions?.type === 'BUSINESS' || selectedEmailForInstructions?.type === 'DISTRIBUTION') && (\n                      <>\n                        <Text fontWeight=\"bold\">Distribution List</Text>\n                        <Text>Emails forward to all list members. Great for team@, alerts@.</Text>\n                      </>\n                    )}\n                    {selectedEmailForInstructions?.type === 'PERSONAL' && (\n                      <>\n                        <Text fontWeight=\"bold\">Personal Alias</Text>\n                        <Text>Additional email address for an existing user mailbox.</Text>\n                      </>\n                    )}\n                  </Box>\n                </Alert>\n              </VStack>\n            </ModalBody>\n            <ModalFooter>\n              <Button variant=\"ghost\" mr={3} onClick={onForwardingClose} color={textColor}>\n                Cancel\n              </Button>\n              <Button\n                colorScheme=\"purple\"\n                onClick={handleCreateForwarding}\n                isDisabled={!forwardingAlias}\n              >\n                Create Email & Save\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n\n        {/* Setup Instructions Modal */}\n        <Modal isOpen={showInstructions} onClose={() => setShowInstructions(false)} size=\"2xl\">\n          <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n          <ModalContent\n            bg={cardGradientBg}\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            maxH=\"90vh\"\n            overflowY=\"auto\"\n          >\n            <ModalHeader color={textColor}>\n              Setup Instructions for {selectedEmailForInstructions?.alias}\n            </ModalHeader>\n            <ModalCloseButton color={textColor} />\n            <ModalBody pb={6}>\n              <VStack spacing={6} align=\"stretch\">\n                <Alert status=\"success\" bg=\"green.900\" border=\"1px solid\" borderColor=\"green.700\">\n                  <AlertIcon />\n                  <Box>\n                    <Text fontWeight=\"bold\">Postmark Endpoint Created</Text>\n                    <Code colorScheme=\"green\" bg=\"green.800\">{selectedEmailForInstructions?.postmarkEndpoint}</Code>\n                  </Box>\n                </Alert>\n\n                <Box>\n                  <Text fontWeight=\"bold\" mb={3} color={textColor}>Setup Steps in Microsoft 365 Admin Center:</Text>\n                  <OrderedList spacing={3} color=\"gray.300\">\n                    <ListItem>\n                      <Text fontWeight=\"semibold\">Open Microsoft 365 Admin Center</Text>\n                      <Link\n                        href=\"https://admin.microsoft.com/Adminportal/Home#/users\"\n                        isExternal\n                        color=\"blue.400\"\n                      >\n                        Go to Admin Center <FiExternalLink style={{ display: 'inline' }} />\n                      </Link>\n                    </ListItem>\n\n                    {(selectedEmailForInstructions?.type === 'SUPPORT' || selectedEmailForInstructions?.type === 'SHARED') && (\n                      <>\n                        <ListItem>\n                          <Text fontWeight=\"semibold\">Create a Shared Mailbox</Text>\n                          <Text fontSize=\"sm\" color=\"gray.400\">\n                            Navigate to Teams & Groups → Shared mailboxes → Add a shared mailbox\n                          </Text>\n                          <Text fontSize=\"sm\" mt={1}>\n                            • Name: <Code>{selectedEmailForInstructions?.displayName}</Code>\n                          </Text>\n                          <Text fontSize=\"sm\">\n                            • Email: <Code>{selectedEmailForInstructions?.alias?.replace('@vanguardiq.com.au', '')}</Code>\n                          </Text>\n                        </ListItem>\n                        <ListItem>\n                          <Text fontWeight=\"semibold\">Add Members to the Shared Mailbox</Text>\n                          <Text fontSize=\"sm\" color=\"gray.400\">\n                            Add users who need to access this mailbox\n                          </Text>\n                        </ListItem>\n                      </>\n                    )}\n\n                    {(selectedEmailForInstructions?.type === 'BUSINESS' || selectedEmailForInstructions?.type === 'DISTRIBUTION') && (\n                      <>\n                        <ListItem>\n                          <Text fontWeight=\"semibold\">Create a Distribution List</Text>\n                          <Text fontSize=\"sm\" color=\"gray.400\">\n                            Navigate to Teams & Groups → Distribution lists → Add a group\n                          </Text>\n                          <Text fontSize=\"sm\" mt={1}>\n                            • Name: <Code>{selectedEmailForInstructions?.displayName}</Code>\n                          </Text>\n                          <Text fontSize=\"sm\">\n                            • Email: <Code>{selectedEmailForInstructions?.alias?.replace('@vanguardiq.com.au', '')}</Code>\n                          </Text>\n                        </ListItem>\n                        <ListItem>\n                          <Text fontWeight=\"semibold\">Add Members to the List</Text>\n                          <Text fontSize=\"sm\" color=\"gray.400\">\n                            Add all recipients who should receive emails sent to this list\n                          </Text>\n                        </ListItem>\n                      </>\n                    )}\n\n                    {selectedEmailForInstructions?.type === 'PERSONAL' && (\n                      <ListItem>\n                        <Text fontWeight=\"semibold\">Add Alias to User Mailbox</Text>\n                        <Text fontSize=\"sm\" color=\"gray.400\">\n                          Navigate to Users → Active users → Select user → Manage email addresses\n                        </Text>\n                        <Text fontSize=\"sm\" mt={1}>\n                          Add alias: <Code>{selectedEmailForInstructions?.alias}</Code>\n                        </Text>\n                      </ListItem>\n                    )}\n\n                    <ListItem>\n                      <Text fontWeight=\"semibold\">Setup Mail Flow Rule for Postmark</Text>\n                      <VStack align=\"start\" spacing={2} mt={2}>\n                        <Alert status=\"warning\" bg=\"orange.900\" border=\"1px solid\" borderColor=\"orange.700\" fontSize=\"sm\">\n                          <AlertIcon />\n                          <Box>\n                            <Text fontWeight=\"bold\">Important: Switch to Exchange Admin Center</Text>\n                            <Text fontSize=\"xs\">You're currently in Microsoft 365 Admin. Click below to go to Exchange Admin:</Text>\n                          </Box>\n                        </Alert>\n                        <Link\n                          href=\"https://admin.exchange.microsoft.com/#/mailflow/rules\"\n                          isExternal\n                          color=\"blue.400\"\n                          fontSize=\"sm\"\n                          fontWeight=\"bold\"\n                        >\n                          → Open Exchange Admin Center - Mail Flow Rules <FiExternalLink style={{ display: 'inline' }} />\n                        </Link>\n                        <Text fontSize=\"xs\" color=\"gray.400\">\n                          Or from Microsoft 365 Admin: Click \"Show all\" in left menu → \"Exchange\" → \"Mail flow\" → \"Rules\"\n                        </Text>\n                      </VStack>\n\n                      <Box bg=\"gray.800\" p={3} borderRadius=\"md\" mt={3}>\n                        <Text fontSize=\"sm\" color=\"gray.200\" fontWeight=\"bold\" mb={2}>\n                          Detailed Steps in Exchange Admin Center:\n                        </Text>\n\n                        <VStack align=\"stretch\" spacing={3} pl={2}>\n                          <Box>\n                            <Text fontSize=\"sm\" color=\"blue.300\" fontWeight=\"semibold\">Step 1: Create New Rule</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Click \"+ Add a rule\" button</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Select \"Create a new rule\"</Text>\n                          </Box>\n\n                          <Box>\n                            <Text fontSize=\"sm\" color=\"blue.300\" fontWeight=\"semibold\">Step 2: Set Rule Conditions</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• <strong>Name:</strong> <Code fontSize=\"xs\">Forward {selectedEmailForInstructions?.alias?.replace('@vanguardiq.com.au', '')} to Postmark</Code></Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• <strong>Apply this rule if:</strong> Select \"The recipient...\" → \"address contains any of these words\"</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\" pl={4}>→ Enter: <Code fontSize=\"xs\">{selectedEmailForInstructions?.alias}</Code></Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• <strong>Do the following:</strong> Select \"Redirect the message to...\" → \"Select one\"</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\" pl={4}>→ Click in the field and type/paste: <Code fontSize=\"xs\">{selectedEmailForInstructions?.postmarkEndpoint}</Code></Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\" pl={4}>→ Press Enter or semicolon (;) to add it</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\" pl={4}>→ Click \"Save\" to confirm the recipient</Text>\n                          </Box>\n\n                          <Box>\n                            <Text fontSize=\"sm\" color=\"blue.300\" fontWeight=\"semibold\">Step 3: Configure Rule Settings</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Click \"Next\" to go to settings page</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• <strong>Rule mode:</strong> Select <Badge colorScheme=\"green\" fontSize=\"xs\">Enforce</Badge></Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• <strong>Severity:</strong> Leave as \"Not specified\"</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• <strong>Stop processing more rules:</strong> <Badge colorScheme=\"orange\" fontSize=\"xs\">CHECK THIS BOX</Badge> (Important!)</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Leave other settings as default</Text>\n                          </Box>\n\n                          <Box>\n                            <Text fontSize=\"sm\" color=\"blue.300\" fontWeight=\"semibold\">Step 4: Optional - Keep a Copy</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Back in rule conditions, click \"+ Add action\"</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Select \"Bcc the message to...\" or \"Send a copy to...\"</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Add: <Code fontSize=\"xs\">{selectedEmailForInstructions?.alias}</Code> (your shared mailbox)</Text>\n                          </Box>\n\n                          <Box>\n                            <Text fontSize=\"sm\" color=\"blue.300\" fontWeight=\"semibold\">Step 5: Finish</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Click \"Next\" to review</Text>\n                            <Text fontSize=\"xs\" color=\"gray.400\">• Click \"Finish\" or \"Save\" to create the rule</Text>\n                          </Box>\n                        </VStack>\n                      </Box>\n                    </ListItem>\n\n                    <ListItem>\n                      <Text fontWeight=\"semibold\">Test the Configuration</Text>\n                      <Text fontSize=\"sm\" color=\"gray.400\">\n                        Send a test email to <Code>{selectedEmailForInstructions?.alias}</Code> and verify:\n                      </Text>\n                      <VStack align=\"stretch\" spacing={1} pl={4} mt={1}>\n                        <Text fontSize=\"sm\">✓ Email arrives in the mailbox</Text>\n                        <Text fontSize=\"sm\">✓ Copy is forwarded to Postmark endpoint</Text>\n                        <Text fontSize=\"sm\">✓ Check Postmark activity logs</Text>\n                      </VStack>\n                    </ListItem>\n                  </OrderedList>\n                </Box>\n\n                <Divider borderColor={cardBorder} />\n\n                <Alert status=\"warning\" bg=\"orange.900\" border=\"1px solid\" borderColor=\"orange.700\">\n                  <AlertIcon />\n                  <Box>\n                    <Text fontWeight=\"bold\">Important Notes:</Text>\n                    <Text fontSize=\"sm\">• Changes may take 15-30 minutes to propagate in Microsoft 365</Text>\n                    <Text fontSize=\"sm\">• The Postmark endpoint will process incoming emails programmatically</Text>\n                    <Text fontSize=\"sm\">• Keep a copy in the mailbox for backup and manual review</Text>\n                  </Box>\n                </Alert>\n\n                <HStack justify=\"space-between\">\n                  <Button\n                    onClick={() => handleCopyToClipboard(selectedEmailForInstructions?.postmarkEndpoint)}\n                    leftIcon={<FiCopy />}\n                    variant=\"outline\"\n                    colorScheme=\"purple\"\n                  >\n                    Copy Postmark Endpoint\n                  </Button>\n                  <Button\n                    colorScheme=\"blue\"\n                    onClick={() => {\n                      setShowInstructions(false);\n                      setSelectedEmailForInstructions(null);\n                    }}\n                  >\n                    Done\n                  </Button>\n                </HStack>\n              </VStack>\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n      </VStack>\n      </Box>\n      <FooterWithFourColumns />\n    </Box>\n  );\n};"],"names":["GET_CLIENTS","gql","_templateObject","_taggedTemplateLiteral","GET_EMAIL_ADDRESSES","_templateObject2","GET_CALENDARS","_templateObject3","UPDATE_EMAIL_CALENDAR","_templateObject4","ASSIGN_EMAIL_TO_CLIENT","_templateObject5","UNASSIGN_EMAIL_FROM_CLIENT","_templateObject6","CREATE_EMAIL_WITH_ALIAS","_templateObject7","TOGGLE_IMPROVMX_STATUS","_templateObject8","CREATE_M365_EMAIL_FORWARDING","_templateObject9","UPDATE_EMAIL_TYPE","_templateObject0","UPDATE_FORWARDING_PROVIDER","_templateObject1","EmailAccountsAdmin","_selectedEmailForInst","_selectedEmailForInst2","_selectedEmailForInst3","usePageTitle","toast","useToast","isOpen","onOpen","onClose","useDisclosure","isCreateOpen","onCreateOpen","onCreateClose","isForwardingOpen","onForwardingOpen","onForwardingClose","showInstructions","setShowInstructions","useState","selectedEmailForInstructions","setSelectedEmailForInstructions","selectedEmail","setSelectedEmail","searchTerm","setSearchTerm","filterType","setFilterType","directionFilter","setDirectionFilter","registrationFilter","setRegistrationFilter","providerFilter","setProviderFilter","clientSearchTerm","setClientSearchTerm","newEmailAlias","setNewEmailAlias","newEmailName","setNewEmailName","newEmailType","setNewEmailType","forwardingType","setForwardingType","forwardingAlias","setForwardingAlias","forwardingDisplayName","setForwardingDisplayName","editingEmailId","setEditingEmailId","editingProviderId","setEditingProviderId","editingPrimaryCalendarId","setEditingPrimaryCalendarId","editingLinkedCalendarsId","setEditingLinkedCalendarsId","data","clientsData","loading","clientsLoading","useQuery","emailsData","emailsLoading","refetch","refetchEmails","calendarsData","assignEmail","useMutation","onCompleted","title","status","duration","isClosable","onError","error","description","message","unassignEmail","createEmailWithAlias","concat","createEmailAddressWithAlias","email","toggleImprovMXStatus","updateEmailType","updateForwardingProvider","createM365Forwarding","emailData","createEmailAddress","updateEmailCalendar","colorMode","useColorMode","bg","getColor","cardGradientBg","cardBorder","textColor","labelColor","clients","emailAddresses","filteredEmails","filter","_email$name","matchesSearch","toLowerCase","includes","name","matchesType","type","matchesDirection","emailsReceived","emailsSent","matchesRegistration","isRegisteredWithImprovMX","matchesProvider","forwardingProvider","handleUpdateLinkedCalendars","async","emailId","calendarIds","variables","linkedCalendarIds","_jsx","Box","minH","p","display","alignItems","justifyContent","children","_jsxs","VStack","spacing","Spinner","size","color","Text","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","emailsModuleConfig","base","md","align","maxW","lg","fontSize","fontWeight","mb","lineHeight","Card","backdropFilter","boxShadow","border","borderColor","CardBody","HStack","Badge","colorScheme","pl","mt","direction","flex","justify","length","borderRadius","FiMail","e","associatedClients","FiUser","Input","placeholder","value","onChange","target","_placeholder","Select","Button","leftIcon","FiSettings","onClick","variant","FiPlus","overflowX","width","Table","minWidth","Thead","position","top","Tr","Th","px","minW","Tooltip","label","placement","hasArrow","Tbody","map","_calendarsData$calend","_calendarsData$calend2","_calendarsData$calend3","_calendarsData$calend4","_calendarsData$calend5","_email$linkedCalendar3","Td","noOfLines","id","newType","handleUpdateEmailType","onBlur","autoFocus","cursor","_hover","opacity","newProvider","provider","handleUpdateForwardingProvider","Switch","isChecked","currentStatus","isRegistered","optimisticResponse","updateEmailAddress","__typename","handleToggleImprovMX","undefined","isVerified","primaryCalendarId","calendarId","handleUpdatePrimaryCalendar","calendars","calendar","find","c","slice","_email$linkedCalendar","cal","_email$linkedCalendar2","calId","_calendarsData$calend6","IconButton","icon","FiTrash2","acceptCalendarInvitesFromAnyone","acceptedSenderEmailsForCalendarInvites","join","blockedDomainsForCalendarInvites","clientId","client","fName","lName","phoneNumber","handleUnassignEmail","lastSeenAt","Date","toLocaleDateString","endpoint","postmarkEndpoint","alias","displayName","openAssignModal","Modal","ModalOverlay","ModalContent","margin","maxH","ModalHeader","ModalCloseButton","ModalBody","pb","overflowY","_client$fName$toLower","_client$fName","_client$lName$toLower","_client$lName","_client$email$toLower","_client$email","searchLower","_selectedEmail$associ","_selectedEmail$associ2","textAlign","handleAssignEmail","isDisabled","replace","Alert","AlertIcon","Divider","my","pt","trim","input","_Fragment","ModalFooter","mr","fullEmail","console","log","_result$data","result","Code","OrderedList","ListItem","Link","href","isExternal","FiExternalLink","style","handleCopyToClipboard","text","navigator","clipboard","writeText","FiCopy","FooterWithFourColumns"],"sourceRoot":""}