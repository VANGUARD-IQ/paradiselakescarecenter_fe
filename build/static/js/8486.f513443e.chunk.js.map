{"version":3,"file":"static/js/8486.f513443e.chunk.js","mappings":"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","sources":["pages/bills/PaymentReceivingDetails.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n    Box,\n    Container,\n    Heading,\n    VStack,\n    HStack,\n    Text,\n    Card,\n    CardHeader,\n    CardBody,\n    Button,\n    Badge,\n    SimpleGrid,\n    useToast,\n    Spinner,\n    Alert,\n    AlertIcon,\n    Center,\n    Flex,\n} from \"@chakra-ui/react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { EditIcon } from \"@chakra-ui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport billsModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\n\n/**\n * 📊 DATABASE STORAGE STRUCTURE\n *\n * This payment receiving information is stored in the MongoDB database as part of the Tenant model:\n *\n * Collection: tenants\n * Field: paymentReceivingDetails (embedded object)\n *\n * Structure:\n * Tenant {\n *   id: String\n *   ...other tenant fields...\n *   paymentReceivingDetails: {\n *     acceptedMethods: String[] // [\"BANK_TRANSFER\", \"CRYPTO\", \"STRIPE\", \"PAYPAL\"]\n *     isVerified: Boolean\n *\n *     bankAccount: {\n *       accountName: String    // e.g., \"Thomas Miller\"\n *       bsb: String           // e.g., \"772772\"\n *       accountNumber: String // e.g., \"123456789\"\n *       bankName: String      // Optional: e.g., \"Commonwealth Bank\"\n *       swiftCode: String     // Optional: for international transfers\n *     }\n *\n *     cryptoWallets: [{\n *       network: String       // e.g., \"BTC\", \"ETH\", \"USDT\"\n *       walletAddress: String // The crypto wallet address\n *       memo: String         // Optional: memo/tag for certain networks\n *     }]\n *\n *     cryptoDiscountPercentage: Number // e.g., 20 for 20% discount\n *\n *     stripeConnect: {\n *       stripeAccountId: String // Connected Stripe account ID\n *       accountVerified: Boolean\n *       verifiedAt: Date\n *     }\n *\n *     paypalEmail: String // PayPal email address\n *   }\n * }\n *\n * This data is stored on the Tenant record (company-wide), not per-client.\n * All bills from this business will use the same payment receiving details.\n */\n\nconst GET_CURRENT_TENANT = gql`\n    query GetCurrentTenant {\n        currentTenant {\n            id\n            name\n            paymentReceivingDetails {\n                acceptedMethods\n                bankAccount {\n                    accountName\n                    bsb\n                    accountNumber\n                    bankName\n                    swiftCode\n                }\n                cryptoWallets {\n                    walletAddress\n                    network\n                    memo\n                }\n                stripeConnect {\n                    stripeAccountId\n                    accountVerified\n                    verifiedAt\n                }\n                paypalEmail\n                isVerified\n                cryptoDiscountPercentage\n            }\n        }\n    }\n`;\n\nconst PaymentReceivingDetails = () => {\n    usePageTitle(\"Payment Receiving Details\");\n    const navigate = useNavigate();\n    const toast = useToast();\n    const bg = getColor(\"background.main\");\n\n    // Consistent styling from brandConfig\n    const cardGradientBg = getColor(\"background.cardGradient\");\n    const cardBorder = getColor(\"border.darkCard\");\n    const textPrimary = getColor(\"text.primaryDark\");\n    const textSecondary = getColor(\"text.secondaryDark\");\n    const textMuted = getColor(\"text.mutedDark\");\n\n    const { data, loading, error } = useQuery(GET_CURRENT_TENANT);\n\n    if (loading) {\n        return (\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n                <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                    <Center h=\"50vh\">\n                        <Spinner size=\"xl\" color={getColor(\"primary\")} />\n                    </Center>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error) {\n        return (\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n                <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                    <Alert status=\"error\">\n                        <AlertIcon />\n                        Error loading payment details. Please try again.\n                    </Alert>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const tenant = data?.currentTenant;\n    const paymentDetails = tenant?.paymentReceivingDetails;\n\n    return (\n        <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n\n            <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                <VStack spacing={8} align=\"stretch\">\n                    {/* Page Header */}\n                    <HStack justify=\"space-between\" align=\"center\" flexWrap=\"wrap\" spacing={4}>\n                        <VStack align=\"start\" spacing={2}>\n                            <Heading size=\"lg\" color={textPrimary}>💳 Payment Receiving Details</Heading>\n                            <Text fontSize=\"sm\" color={textMuted}>\n                                Manage how you receive payments from your clients\n                            </Text>\n                        </VStack>\n                        \n                        <Button\n                            onClick={() => navigate(\"/bills/payment-details/edit\")}\n                            bg=\"white\"\n                            color=\"black\"\n                            _hover={{\n                                bg: \"gray.100\",\n                                transform: \"translateY(-2px)\"\n                            }}\n                            leftIcon={<EditIcon />}\n                        >\n                            Edit Payment Details\n                        </Button>\n                    </HStack>\n\n                    {/* Main Payment Details Card */}\n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        borderWidth=\"1px\"\n                        borderColor={cardBorder}\n                        overflow=\"hidden\">\n                        <CardBody>\n                            {paymentDetails ? (\n                                <VStack align=\"stretch\" spacing={6}>\n                                    {/* Payment Status */}\n                                    {paymentDetails.acceptedMethods?.length > 0 && (\n                                        <Box p={4} bg=\"rgba(34, 197, 94, 0.1)\" borderRadius=\"md\" borderWidth=\"1px\" borderColor=\"rgba(34, 197, 94, 0.3)\">\n                                            <HStack spacing={2}>\n                                                <Badge \n                                                    bg=\"rgba(34, 197, 94, 0.2)\"\n                                                    color=\"#22C55E\"\n                                                    border=\"1px solid\"\n                                                    borderColor=\"rgba(34, 197, 94, 0.3)\"\n                                                    fontSize=\"sm\"\n                                                    px={3}\n                                                    py={1}\n                                                >\n                                                    ✅ Payment Methods Active\n                                                </Badge>\n                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                    Ready to receive payments via {paymentDetails.acceptedMethods.length} method{paymentDetails.acceptedMethods.length > 1 ? 's' : ''}\n                                                </Text>\n                                            </HStack>\n                                        </Box>\n                                    )}\n\n                                    {/* Accepted Methods */}\n                                    <Box>\n                                        <Heading size=\"sm\" mb={3} color={textPrimary}>Accepted Payment Methods</Heading>\n                                        {paymentDetails.acceptedMethods?.length > 0 ? (\n                                            <Flex wrap=\"wrap\" gap={2}>\n                                                {paymentDetails.acceptedMethods.map((method: string) => (\n                                                    <Badge \n                                                        key={method} \n                                                        bg=\"rgba(59, 130, 246, 0.2)\" \n                                                        color=\"#3B82F6\" \n                                                        border=\"1px solid\" \n                                                        borderColor=\"rgba(59, 130, 246, 0.3)\"\n                                                        fontSize=\"sm\"\n                                                        px={3}\n                                                        py={1}\n                                                    >\n                                                        {method === \"BANK_TRANSFER\" ? \"🏦 Bank Transfer\" :\n                                                         method === \"CRYPTO\" ? \"₿ Cryptocurrency\" :\n                                                         method === \"STRIPE\" ? \"💳 Credit Cards\" :\n                                                         method === \"PAYPAL\" ? \"💰 PayPal\" : method}\n                                                    </Badge>\n                                                ))}\n                                            </Flex>\n                                        ) : (\n                                            <Text color={textMuted}>No payment methods configured</Text>\n                                        )}\n                                    </Box>\n\n                                    {/* Bank Account Details */}\n                                    {paymentDetails.bankAccount && (\n                                        <Box p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" borderWidth=\"1px\" borderColor={cardBorder}>\n                                            <Heading size=\"sm\" mb={3} color={textPrimary}>🏦 Bank Account Details</Heading>\n                                            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>\n                                                <Box>\n                                                    <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>Account Name</Text>\n                                                    <Text color={textPrimary}>{paymentDetails.bankAccount.accountName}</Text>\n                                                </Box>\n                                                <Box>\n                                                    <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>BSB</Text>\n                                                    <Text color={textPrimary}>{paymentDetails.bankAccount.bsb}</Text>\n                                                </Box>\n                                                <Box>\n                                                    <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>Account Number</Text>\n                                                    <Text color={textPrimary}>****{paymentDetails.bankAccount.accountNumber.slice(-4)}</Text>\n                                                </Box>\n                                                {paymentDetails.bankAccount.bankName && (\n                                                    <Box>\n                                                        <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>Bank Name</Text>\n                                                        <Text color={textPrimary}>{paymentDetails.bankAccount.bankName}</Text>\n                                                    </Box>\n                                                )}\n                                            </SimpleGrid>\n                                        </Box>\n                                    )}\n\n                                    {/* Crypto Wallets */}\n                                    {paymentDetails.cryptoWallets?.length > 0 && (\n                                        <Box p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" borderWidth=\"1px\" borderColor={cardBorder}>\n                                            <Heading size=\"sm\" mb={3} color={textPrimary}>₿ Cryptocurrency Wallets</Heading>\n                                            <VStack align=\"stretch\" spacing={3}>\n                                                {paymentDetails.cryptoWallets.map((wallet: any, index: number) => (\n                                                    <Box key={index} p={3} bg=\"rgba(0, 0, 0, 0.3)\" borderRadius=\"md\">\n                                                        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={3}>\n                                                            <Box>\n                                                                <Text fontSize=\"xs\" fontWeight=\"semibold\" color={textSecondary}>Network</Text>\n                                                                <Badge bg=\"rgba(168, 85, 247, 0.2)\" color=\"#A855F7\" border=\"1px solid\" borderColor=\"rgba(168, 85, 247, 0.3)\">\n                                                                    {wallet.network}\n                                                                </Badge>\n                                                            </Box>\n                                                            <Box>\n                                                                <Text fontSize=\"xs\" fontWeight=\"semibold\" color={textSecondary}>Address</Text>\n                                                                <Text fontFamily=\"mono\" fontSize=\"sm\" color={textPrimary} isTruncated>\n                                                                    {wallet.walletAddress.slice(0, 8)}...{wallet.walletAddress.slice(-8)}\n                                                                </Text>\n                                                            </Box>\n                                                            {wallet.memo && (\n                                                                <Box>\n                                                                    <Text fontSize=\"xs\" fontWeight=\"semibold\" color={textSecondary}>Memo</Text>\n                                                                    <Text fontSize=\"sm\" color={textPrimary}>{wallet.memo}</Text>\n                                                                </Box>\n                                                            )}\n                                                        </SimpleGrid>\n                                                    </Box>\n                                                ))}\n                                            </VStack>\n                                        </Box>\n                                    )}\n\n                                    {/* Crypto Discount */}\n                                    {paymentDetails.cryptoDiscountPercentage && (\n                                        <Box \n                                            p={4} \n                                            bgGradient=\"linear(to-r, rgba(168, 85, 247, 0.1), rgba(59, 130, 246, 0.1))\"\n                                            borderRadius=\"md\" \n                                            borderWidth=\"1px\" \n                                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                        >\n                                            <HStack justify=\"space-between\">\n                                                <VStack align=\"start\" spacing={1}>\n                                                    <Text fontWeight=\"bold\" color={textPrimary}>💸 Crypto Payment Discount</Text>\n                                                    <Text fontSize=\"sm\" color={textSecondary}>\n                                                        Customers save {paymentDetails.cryptoDiscountPercentage}% when paying with cryptocurrency\n                                                    </Text>\n                                                </VStack>\n                                                <Badge \n                                                    fontSize=\"xl\" \n                                                    px={4} \n                                                    py={2}\n                                                    bg=\"rgba(168, 85, 247, 0.2)\" \n                                                    color=\"#A855F7\" \n                                                    border=\"2px solid\" \n                                                    borderColor=\"rgba(168, 85, 247, 0.5)\"\n                                                >\n                                                    {paymentDetails.cryptoDiscountPercentage}% OFF\n                                                </Badge>\n                                            </HStack>\n                                        </Box>\n                                    )}\n\n                                    {/* Stripe Connect Status */}\n                                    {paymentDetails.stripeConnect?.stripeAccountId && (\n                                        <Box p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" borderWidth=\"1px\" borderColor={cardBorder}>\n                                            <HStack spacing={2} mb={2}>\n                                                <Text fontWeight=\"bold\" color={textPrimary}>💳 Stripe Connect</Text>\n                                                <Badge \n                                                    bg={paymentDetails.stripeConnect.accountVerified ? \"rgba(34, 197, 94, 0.2)\" : \"rgba(251, 191, 36, 0.2)\"}\n                                                    color={paymentDetails.stripeConnect.accountVerified ? \"#22C55E\" : \"#FBBF24\"}\n                                                    border=\"1px solid\"\n                                                    borderColor={paymentDetails.stripeConnect.accountVerified ? \"rgba(34, 197, 94, 0.3)\" : \"rgba(251, 191, 36, 0.3)\"}\n                                                >\n                                                    {paymentDetails.stripeConnect.accountVerified ? \"Verified\" : \"Pending\"}\n                                                </Badge>\n                                            </HStack>\n                                            <Text fontSize=\"sm\" color={textSecondary}>\n                                                Account ID: <Text as=\"span\" fontFamily=\"mono\">{paymentDetails.stripeConnect.stripeAccountId}</Text>\n                                            </Text>\n                                            {paymentDetails.stripeConnect.verifiedAt && (\n                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                    Verified on: {new Date(paymentDetails.stripeConnect.verifiedAt).toLocaleDateString()}\n                                                </Text>\n                                            )}\n                                        </Box>\n                                    )}\n\n                                    {/* PayPal */}\n                                    {paymentDetails.paypalEmail && (\n                                        <Box p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" borderWidth=\"1px\" borderColor={cardBorder}>\n                                            <Text fontWeight=\"bold\" mb={2} color={textPrimary}>💰 PayPal</Text>\n                                            <Text color={textSecondary}>\n                                                Email: <Text as=\"span\" color={textPrimary}>{paymentDetails.paypalEmail}</Text>\n                                            </Text>\n                                        </Box>\n                                    )}\n                                </VStack>\n                            ) : (\n                                <VStack spacing={4} py={8} textAlign=\"center\">\n                                    <Text color={textMuted}>No payment details configured</Text>\n                                    <Text fontSize=\"sm\" color={textMuted}>\n                                        Set up your payment receiving details to start accepting payments from clients.\n                                    </Text>\n                                    <Button\n                                        onClick={() => navigate(\"/bills/payment-details/edit\")}\n                                        colorScheme=\"blue\"\n                                    >\n                                        Configure Payment Details\n                                    </Button>\n                                </VStack>\n                            )}\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default PaymentReceivingDetails;"],"names":["GET_CURRENT_TENANT","gql","_templateObject","_taggedTemplateLiteral","PaymentReceivingDetails","_paymentDetails$accep","_paymentDetails$accep2","_paymentDetails$crypt","_paymentDetails$strip","usePageTitle","navigate","useNavigate","bg","useToast","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","data","loading","error","useQuery","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","billsModuleConfig","Container","maxW","py","flex","Center","h","Spinner","size","color","FooterWithFourColumns","Alert","status","AlertIcon","tenant","currentTenant","paymentDetails","paymentReceivingDetails","VStack","spacing","align","HStack","justify","flexWrap","Heading","Text","fontSize","Button","onClick","_hover","transform","leftIcon","EditIcon","Card","backdropFilter","boxShadow","borderWidth","borderColor","overflow","CardBody","acceptedMethods","length","p","borderRadius","Badge","border","px","mb","Flex","wrap","gap","map","method","bankAccount","SimpleGrid","columns","base","md","fontWeight","accountName","bsb","accountNumber","slice","bankName","cryptoWallets","wallet","index","network","fontFamily","isTruncated","walletAddress","memo","cryptoDiscountPercentage","bgGradient","stripeConnect","stripeAccountId","accountVerified","as","verifiedAt","Date","toLocaleDateString","paypalEmail","textAlign","colorScheme"],"sourceRoot":""}