{"version":3,"file":"static/js/1934.35be6914.chunk.js","mappings":"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","sources":["pages/calendars/GoalsModal.tsx","pages/calendars/ICalInviteModal.tsx","pages/calendars/FloatingEventFilter.tsx","pages/calendars/hooks/useCalendarScroll.ts","pages/calendars/components/CalendarEventContent.tsx","pages/calendars/components/CalendarHeader.tsx","pages/calendars/utils/timezoneHelpers.tsx","pages/calendars/components/MonthlyGoalsCard.tsx","pages/calendars/components/CalendarToolbar.tsx","pages/calendars/CalendarView.tsx","pages/calendars/hooks/useCalendarModals.ts","pages/calendars/hooks/useCalendarFilters.ts","pages/calendars/hooks/useCalendarEventHandlers.ts","pages/calendars/hooks/useCalendarNavigation.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  VStack,\n  HStack,\n  Input,\n  Select,\n  Textarea,\n  FormControl,\n  FormLabel,\n  IconButton,\n  useToast,\n  Box,\n  Text,\n  Badge,\n  Progress,\n  Checkbox,\n  SimpleGrid,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Icon,\n  useColorMode\n} from '@chakra-ui/react';\nimport { \n  AddIcon, \n  DeleteIcon, \n  EditIcon,\n  CalendarIcon,\n  ChevronRightIcon\n} from '@chakra-ui/icons';\nimport { \n  FiTarget, \n  FiTrendingUp, \n  FiUsers, \n  FiDollarSign,\n  FiPackage,\n  FiUser,\n  FiSettings,\n  FiHash\n} from 'react-icons/fi';\nimport { getColor } from '../../brandConfig';\n\n// GraphQL Queries and Mutations\nconst GET_CALENDAR_GOALS = gql`\n  query GetCalendarGoals($calendarId: String!, $period: String) {\n    calendarGoals(calendarId: $calendarId, period: $period) {\n      id\n      title\n      description\n      category\n      period\n      status\n      startDate\n      endDate\n      progressPercentage\n      currentValue\n      targetValue\n      currentNumericValue\n      targetNumericValue\n      checkpoints {\n        id\n        title\n        description\n        completed\n        completedAt\n        dueDate\n        order\n        weight\n        notes\n      }\n      color\n      icon\n      displayOrder\n      kpiMetric\n      kpiUnit\n      notes\n      tags\n      parentGoalId\n      assignedTo\n    }\n  }\n`;\n\nconst CREATE_GOAL = gql`\n  mutation CreateCalendarGoal($input: CalendarGoalInput!) {\n    createCalendarGoal(input: $input) {\n      id\n      title\n      progressPercentage\n    }\n  }\n`;\n\nconst UPDATE_GOAL = gql`\n  mutation UpdateCalendarGoal($id: String!, $input: CalendarGoalInput!) {\n    updateCalendarGoal(id: $id, input: $input) {\n      id\n      title\n      progressPercentage\n    }\n  }\n`;\n\nconst DELETE_GOAL = gql`\n  mutation DeleteCalendarGoal($id: String!) {\n    deleteCalendarGoal(id: $id)\n  }\n`;\n\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      businessName\n    }\n  }\n`;\n\nconst UPDATE_CHECKPOINT = gql`\n  mutation UpdateGoalCheckpoint($input: UpdateGoalCheckpointInput!) {\n    updateGoalCheckpoint(input: $input) {\n      id\n      progressPercentage\n      checkpoints {\n        id\n        completed\n      }\n    }\n  }\n`;\n\ninterface GoalsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  calendarId: string;\n  currentMonth: Date;\n  initialGoalId?: string | null;\n}\n\ninterface Goal {\n  id?: string;\n  title: string;\n  description: string;\n  category: string;\n  status: string;\n  currentValue: string;\n  targetValue: string;\n  progressPercentage: number;\n  checkpoints: Checkpoint[];\n  color: string;\n  icon: string;\n  displayOrder: number;\n  parentGoalId?: string | null;\n  assignedTo?: string | null;\n}\n\ninterface Checkpoint {\n  id?: string;\n  title: string;\n  description?: string;\n  completed: boolean;\n  completedAt?: string | null;\n  dueDate?: string | null;\n  order: number;\n  weight?: number;\n  notes?: string | null;\n}\n\nconst categoryIcons: Record<string, any> = {\n  MARKETING: FiTrendingUp,\n  GROWTH: FiTarget,\n  OPERATIONS: FiSettings,\n  TEAM: FiUsers,\n  FINANCE: FiDollarSign,\n  PRODUCT: FiPackage,\n  CUSTOMER: FiUser,\n  OTHER: FiHash\n};\n\nconst categoryColors: Record<string, string> = {\n  MARKETING: '#9333EA', // Purple\n  GROWTH: '#10B981',   // Green\n  OPERATIONS: '#F59E0B', // Yellow\n  TEAM: '#3B82F6',     // Blue\n  FINANCE: '#EF4444',  // Red\n  PRODUCT: '#8B5CF6',  // Violet\n  CUSTOMER: '#EC4899', // Pink\n  OTHER: '#6B7280'     // Gray\n};\n\nconst GoalsModal: React.FC<GoalsModalProps> = ({ isOpen, onClose, calendarId, currentMonth, initialGoalId }) => {\n  const { colorMode } = useColorMode();\n  const toast = useToast();\n  const [goals, setGoals] = useState<Goal[]>([]);\n  const [editingGoal, setEditingGoal] = useState<Goal | null>(null);\n  const [isAddingGoal, setIsAddingGoal] = useState(false);\n  const [activeTab, setActiveTab] = useState(0); // 0 for View, 1 for Manage\n\n  // Theme-aware colors\n  const bg = getColor(\"background.main\", colorMode);\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.darkSurface\", colorMode);\n  const formBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.taskCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  // Get month and year for display\n  const getMonthYearDisplay = () => {\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    return `${months[currentMonth.getMonth()]} ${currentMonth.getFullYear()}`;\n  };\n\n  // Fetch goals\n  const { loading, data, refetch } = useQuery(GET_CALENDAR_GOALS, {\n    variables: {\n      calendarId,\n      period: 'MONTHLY'\n    },\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Fetch clients for assignment\n  const { data: clientsData } = useQuery(GET_CLIENTS, {\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  useEffect(() => {\n    if (data?.calendarGoals) {\n      // Create a deep copy to avoid read-only object issues\n      const goalsCopy = data.calendarGoals.map((goal: any) => ({\n        ...goal,\n        checkpoints: goal.checkpoints ? goal.checkpoints.map((cp: any) => ({...cp})) : []\n      }));\n      setGoals(goalsCopy);\n    }\n  }, [data]);\n\n  // Handle initial goal selection\n  useEffect(() => {\n    if (initialGoalId && goals.length > 0) {\n      const goalToEdit = goals.find(g => g.id === initialGoalId);\n      if (goalToEdit) {\n        setEditingGoal(goalToEdit);\n        setActiveTab(1); // Switch to Manage tab\n      }\n    }\n  }, [initialGoalId, goals]);\n\n  // Mutations\n  const [createGoal] = useMutation(CREATE_GOAL, {\n    onCompleted: () => {\n      toast({\n        title: 'Goal created',\n        status: 'success',\n        duration: 3000\n      });\n      refetch();\n      setIsAddingGoal(false);\n      setEditingGoal(null);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating goal',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const [updateGoal] = useMutation(UPDATE_GOAL, {\n    onCompleted: () => {\n      toast({\n        title: 'Goal updated',\n        status: 'success',\n        duration: 3000\n      });\n      refetch();\n      setEditingGoal(null);\n    }\n  });\n\n  const [deleteGoal] = useMutation(DELETE_GOAL, {\n    onCompleted: () => {\n      toast({\n        title: 'Goal deleted',\n        status: 'success',\n        duration: 3000\n      });\n      refetch();\n    }\n  });\n\n  const [updateCheckpoint] = useMutation(UPDATE_CHECKPOINT, {\n    onCompleted: () => {\n      refetch();\n    }\n  });\n\n  // Handle saving a goal\n  const handleSaveGoal = () => {\n    if (!editingGoal) return;\n\n    const startOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const endOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n\n    // Clean checkpoints to remove __typename and other Apollo-added fields\n    const cleanCheckpoints = editingGoal.checkpoints.map(cp => ({\n      id: cp.id,\n      title: cp.title,\n      description: cp.description || '',\n      completed: cp.completed || false,\n      completedAt: cp.completedAt || null,\n      dueDate: cp.dueDate || null,\n      order: cp.order || 0,\n      weight: cp.weight || 1,\n      notes: cp.notes || null\n    }));\n\n    const input = {\n      calendarId,\n      title: editingGoal.title,\n      description: editingGoal.description,\n      category: editingGoal.category,\n      period: 'MONTHLY',\n      status: editingGoal.status || 'NOT_STARTED',\n      startDate: startOfMonth.toISOString(),\n      endDate: endOfMonth.toISOString(),\n      currentValue: editingGoal.currentValue,\n      targetValue: editingGoal.targetValue,\n      progressPercentage: editingGoal.progressPercentage,\n      checkpoints: cleanCheckpoints,\n      parentGoalId: editingGoal.parentGoalId || null,\n      assignedTo: editingGoal.assignedTo || null,\n      color: editingGoal.color || categoryColors[editingGoal.category],\n      icon: editingGoal.icon,\n      displayOrder: editingGoal.displayOrder\n    };\n\n    if (editingGoal.id) {\n      updateGoal({\n        variables: { id: editingGoal.id, input },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n    } else {\n      createGoal({\n        variables: { input },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n    }\n  };\n\n  // Handle deleting a goal\n  const handleDeleteGoal = (goalId: string) => {\n    if (window.confirm('Are you sure you want to delete this goal?')) {\n      deleteGoal({\n        variables: { id: goalId },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n    }\n  };\n\n  // Handle toggling checkpoint\n  const handleToggleCheckpoint = (goalId: string, checkpointId: string, completed: boolean) => {\n    updateCheckpoint({\n      variables: {\n        input: {\n          goalId,\n          checkpointId,\n          completed\n        }\n      },\n      context: {\n        headers: {\n          'x-tenant-id': localStorage.getItem('tenantId') || ''\n        }\n      }\n    });\n  };\n\n  // Add new goal\n  const handleAddGoal = () => {\n    setEditingGoal({\n      title: '',\n      description: '',\n      category: 'OTHER',\n      status: 'NOT_STARTED',\n      currentValue: '',\n      targetValue: '',\n      progressPercentage: 0,\n      checkpoints: [],\n      color: categoryColors.OTHER,\n      icon: '',\n      displayOrder: goals.length\n    });\n    setIsAddingGoal(true);\n  };\n\n  // Generate a simple ID for checkpoints\n  const generateId = () => {\n    return `checkpoint-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  };\n\n  // Add checkpoint to editing goal\n  const handleAddCheckpoint = () => {\n    if (!editingGoal) return;\n    \n    const newCheckpoint: Checkpoint = {\n      id: generateId(),\n      title: '',\n      description: '',\n      completed: false,\n      order: editingGoal.checkpoints.length,\n      weight: 1\n    };\n    \n    setEditingGoal({\n      ...editingGoal,\n      checkpoints: [...editingGoal.checkpoints, newCheckpoint]\n    });\n  };\n\n  // Group goals by category\n  const goalsByCategory = goals.reduce((acc, goal) => {\n    if (!acc[goal.category]) {\n      acc[goal.category] = [];\n    }\n    acc[goal.category].push(goal);\n    return acc;\n  }, {} as Record<string, typeof goals>);\n\n  // Calculate overall statistics\n  const calculateStats = () => {\n    let totalCheckpoints = 0;\n    let completedCheckpoints = 0;\n    \n    goals.forEach(goal => {\n      totalCheckpoints += goal.checkpoints.length;\n      completedCheckpoints += goal.checkpoints.filter(cp => cp.completed).length;\n    });\n\n    const overallProgress = totalCheckpoints > 0 \n      ? Math.round((completedCheckpoints / totalCheckpoints) * 100)\n      : 0;\n\n    return {\n      totalGoals: goals.length,\n      totalCheckpoints,\n      completedCheckpoints,\n      overallProgress\n    };\n  };\n\n  const stats = calculateStats();\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size={{ base: \"full\", md: \"4xl\", lg: \"6xl\" }}>\n      <ModalOverlay />\n      <ModalContent\n        maxH={{ base: \"100vh\", md: \"90vh\" }}\n        m={{ base: 0, md: 4 }}\n        bg={cardBg}\n        color={textPrimary}\n      >\n        <ModalHeader>\n          <VStack align=\"stretch\" spacing={2}>\n            <HStack>\n              <Icon as={CalendarIcon} />\n              <Text fontSize={{ base: \"lg\", md: \"xl\" }}>{getMonthYearDisplay()} Goals</Text>\n            </HStack>\n            <HStack flexWrap=\"wrap\" spacing={2}>\n              <Badge colorScheme=\"blue\" fontSize={{ base: \"xs\", md: \"md\" }} p={{ base: 1, md: 2 }}>\n                {stats.completedCheckpoints} / {stats.totalCheckpoints} tasks\n              </Badge>\n              <Badge colorScheme=\"green\" fontSize={{ base: \"xs\", md: \"md\" }} p={{ base: 1, md: 2 }}>\n                Overall: {stats.overallProgress}%\n              </Badge>\n            </HStack>\n          </VStack>\n        </ModalHeader>\n        <ModalCloseButton />\n        \n        <ModalBody overflowY=\"auto\">\n          {loading ? (\n            <Text color={textPrimary}>Loading goals...</Text>\n          ) : (\n            <VStack spacing={4} align=\"stretch\">\n              {/* Add/Edit Goal Form */}\n              {(isAddingGoal || editingGoal) && (\n                <Box p={4} borderWidth={1} borderRadius=\"md\" bg={formBg} borderColor={cardBorder}>\n                  <VStack spacing={3}>\n                    <FormControl>\n                      <FormLabel color={textPrimary}>Goal Title</FormLabel>\n                      <Input\n                        value={editingGoal?.title || ''}\n                        onChange={(e) => setEditingGoal(prev => prev ? {...prev, title: e.target.value} : null)}\n                        placeholder=\"Enter goal title\"\n                        bg={cardBg}\n                        color={textPrimary}\n                        borderColor={cardBorder}\n                        _placeholder={{ color: textMuted }}\n                      />\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textPrimary}>Assigned To (Optional)</FormLabel>\n                      <Select\n                        value={editingGoal?.assignedTo || ''}\n                        onChange={(e) => setEditingGoal(prev => prev ? {...prev, assignedTo: e.target.value || null} : null)}\n                        placeholder=\"Select a client to assign this goal to\"\n                        bg={cardBg}\n                        color={textPrimary}\n                        borderColor={cardBorder}\n                      >\n                        <option value=\"\">Not assigned</option>\n                        {clientsData?.clients?.map((client: any) => (\n                          <option key={client.id} value={client.id}>\n                            {client.fName} {client.lName}\n                            {client.businessName && ` (${client.businessName})`}\n                          </option>\n                        ))}\n                      </Select>\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textPrimary}>Depends On (Optional)</FormLabel>\n                      <Select\n                        value={editingGoal?.parentGoalId || ''}\n                        onChange={(e) => setEditingGoal(prev => prev ? {...prev, parentGoalId: e.target.value || null} : null)}\n                        placeholder=\"Select a goal this depends on\"\n                        bg={cardBg}\n                        color={textPrimary}\n                        borderColor={cardBorder}\n                      >\n                        <option value=\"\">No dependency</option>\n                        {goals?.filter((g: any) => g.id !== editingGoal?.id).map((goal: any) => (\n                          <option key={goal.id} value={goal.id}>\n                            {goal.title} ({goal.progressPercentage}% complete)\n                          </option>\n                        ))}\n                      </Select>\n                      <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                        This goal will be marked as blocked until the selected goal is 100% complete\n                      </Text>\n                    </FormControl>\n\n                    <FormControl>\n                      <FormLabel color={textPrimary}>Description</FormLabel>\n                      <Textarea\n                        value={editingGoal?.description || ''}\n                        onChange={(e) => setEditingGoal(prev => prev ? {...prev, description: e.target.value} : null)}\n                        placeholder=\"Enter goal description\"\n                        bg={cardBg}\n                        color={textPrimary}\n                        borderColor={cardBorder}\n                        _placeholder={{ color: textMuted }}\n                      />\n                    </FormControl>\n                    \n                    <SimpleGrid columns={{ base: 1, md: 2 }} spacing={3} w=\"full\">\n                      <FormControl>\n                        <FormLabel color={textPrimary}>Category</FormLabel>\n                        <Select\n                          value={editingGoal?.category || 'OTHER'}\n                          onChange={(e) => setEditingGoal(prev => prev ? {\n                            ...prev,\n                            category: e.target.value,\n                            color: categoryColors[e.target.value]\n                          } : null)}\n                          bg={cardBg}\n                          color={textPrimary}\n                          borderColor={cardBorder}\n                        >\n                          <option value=\"MARKETING\">Marketing</option>\n                          <option value=\"GROWTH\">Growth</option>\n                          <option value=\"OPERATIONS\">Operations</option>\n                          <option value=\"TEAM\">Team</option>\n                          <option value=\"FINANCE\">Finance</option>\n                          <option value=\"PRODUCT\">Product</option>\n                          <option value=\"CUSTOMER\">Customer</option>\n                          <option value=\"OTHER\">Other</option>\n                        </Select>\n                      </FormControl>\n                      \n                      <FormControl>\n                        <FormLabel color={textPrimary}>Status</FormLabel>\n                        <Select\n                          value={editingGoal?.status || 'NOT_STARTED'}\n                          onChange={(e) => setEditingGoal(prev => prev ? {...prev, status: e.target.value} : null)}\n                          bg={cardBg}\n                          color={textPrimary}\n                          borderColor={cardBorder}\n                        >\n                          <option value=\"NOT_STARTED\">Not Started</option>\n                          <option value=\"IN_PROGRESS\">In Progress</option>\n                          <option value=\"AT_RISK\">At Risk</option>\n                          <option value=\"COMPLETED\">Completed</option>\n                          <option value=\"ON_HOLD\">On Hold</option>\n                        </Select>\n                      </FormControl>\n                    </SimpleGrid>\n                    \n                    <SimpleGrid columns={{ base: 1, md: 2 }} spacing={3} w=\"full\">\n                      <FormControl>\n                        <FormLabel color={textPrimary}>Current Value</FormLabel>\n                        <Input\n                          value={editingGoal?.currentValue || ''}\n                          onChange={(e) => setEditingGoal(prev => prev ? {...prev, currentValue: e.target.value} : null)}\n                          placeholder=\"e.g., 18 Clients\"\n                          bg={cardBg}\n                          color={textPrimary}\n                          borderColor={cardBorder}\n                          _placeholder={{ color: textMuted }}\n                        />\n                      </FormControl>\n                      \n                      <FormControl>\n                        <FormLabel color={textPrimary}>Target Value</FormLabel>\n                        <Input\n                          value={editingGoal?.targetValue || ''}\n                          onChange={(e) => setEditingGoal(prev => prev ? {...prev, targetValue: e.target.value} : null)}\n                          placeholder=\"e.g., 25 New Clients\"\n                          bg={cardBg}\n                          color={textPrimary}\n                          borderColor={cardBorder}\n                          _placeholder={{ color: textMuted }}\n                        />\n                      </FormControl>\n                    </SimpleGrid>\n                    \n                    {/* Checkpoints */}\n                    <Box w=\"full\">\n                      <HStack justify=\"space-between\" mb={2}>\n                        <Text fontWeight=\"bold\" color={textPrimary}>Checkpoints / Tasks</Text>\n                        <Button size=\"sm\" leftIcon={<AddIcon />} onClick={handleAddCheckpoint}>\n                          Add Task\n                        </Button>\n                      </HStack>\n                      \n                      <VStack spacing={2} align=\"stretch\">\n                        {editingGoal?.checkpoints.map((checkpoint, index) => (\n                          <HStack key={index} spacing={2}>\n                            <Input\n                              value={checkpoint.title}\n                              onChange={(e) => {\n                                if (!editingGoal) return;\n                                const newCheckpoints = editingGoal.checkpoints.map((cp, i) =>\n                                  i === index ? { ...cp, title: e.target.value } : { ...cp }\n                                );\n                                setEditingGoal({...editingGoal, checkpoints: newCheckpoints});\n                              }}\n                              placeholder=\"Task title\"\n                              bg={cardBg}\n                              color={textPrimary}\n                              borderColor={cardBorder}\n                              _placeholder={{ color: textMuted }}\n                            />\n                            <IconButton\n                              aria-label=\"Remove task\"\n                              icon={<DeleteIcon />}\n                              size=\"sm\"\n                              colorScheme=\"red\"\n                              onClick={() => {\n                                if (!editingGoal) return;\n                                const newCheckpoints = editingGoal.checkpoints.filter((_, i) => i !== index);\n                                setEditingGoal({...editingGoal, checkpoints: newCheckpoints});\n                              }}\n                            />\n                          </HStack>\n                        ))}\n                      </VStack>\n                    </Box>\n                    \n                    <HStack w=\"full\" justify=\"flex-end\">\n                      <Button variant=\"ghost\" onClick={() => {\n                        setEditingGoal(null);\n                        setIsAddingGoal(false);\n                      }}>\n                        Cancel\n                      </Button>\n                      <Button colorScheme=\"blue\" onClick={handleSaveGoal}>\n                        {editingGoal?.id ? 'Update' : 'Create'} Goal\n                      </Button>\n                    </HStack>\n                  </VStack>\n                </Box>\n              )}\n              \n              {/* Goals by Category */}\n              <Tabs>\n                <TabList>\n                  <Tab>All Goals</Tab>\n                  {Object.keys(goalsByCategory).map(category => (\n                    <Tab key={category}>\n                      <HStack>\n                        <Icon as={categoryIcons[category]} />\n                        <Text>{category.charAt(0) + category.slice(1).toLowerCase()}</Text>\n                      </HStack>\n                    </Tab>\n                  ))}\n                </TabList>\n                \n                <TabPanels>\n                  <TabPanel>\n                    {/* All Goals */}\n                    <VStack spacing={4} align=\"stretch\">\n                      {goals.map(goal => (\n                        <Box\n                          key={goal.id}\n                          p={4}\n                          borderWidth={1}\n                          borderRadius=\"md\"\n                          borderLeftWidth={4}\n                          borderLeftColor={goal.color || categoryColors[goal.category]}\n                        >\n                          <HStack justify=\"space-between\" mb={2}>\n                            <HStack>\n                              <Icon as={categoryIcons[goal.category]} color={goal.color} />\n                              <Text fontWeight=\"bold\" fontSize=\"lg\" color={textPrimary}>{goal.title}</Text>\n                            </HStack>\n                            <HStack>\n                              <IconButton\n                                aria-label=\"Edit goal\"\n                                icon={<EditIcon />}\n                                size=\"sm\"\n                                onClick={() => setEditingGoal({\n                                  ...goal,\n                                  checkpoints: goal.checkpoints.map(cp => ({...cp}))\n                                })}\n                              />\n                              <IconButton\n                                aria-label=\"Delete goal\"\n                                icon={<DeleteIcon />}\n                                size=\"sm\"\n                                colorScheme=\"red\"\n                                onClick={() => goal.id && handleDeleteGoal(goal.id)}\n                              />\n                            </HStack>\n                          </HStack>\n                          \n                          {goal.description && (\n                            <Text color={textSecondary} mb={2}>{goal.description}</Text>\n                          )}\n                          \n                          <HStack spacing={4} mb={2}>\n                            <Text fontSize=\"sm\" color={textPrimary}>\n                              <strong>Current:</strong> {goal.currentValue}\n                            </Text>\n                            <Icon as={ChevronRightIcon} color={textMuted} />\n                            <Text fontSize=\"sm\" color={textPrimary}>\n                              <strong>Target:</strong> {goal.targetValue}\n                            </Text>\n                          </HStack>\n                          \n                          <Progress\n                            value={goal.progressPercentage}\n                            size=\"sm\"\n                            colorScheme={goal.progressPercentage >= 75 ? 'green' : goal.progressPercentage >= 50 ? 'yellow' : 'red'}\n                            mb={2}\n                          />\n                          \n                          <Text fontSize=\"sm\" color={textSecondary} mb={2}>\n                            Progress: {goal.progressPercentage}%\n                          </Text>\n                          \n                          {goal.checkpoints.length > 0 && (\n                            <Accordion allowToggle>\n                              <AccordionItem border=\"none\">\n                                <AccordionButton px={0}>\n                                  <Box flex=\"1\" textAlign=\"left\">\n                                    <Text fontSize=\"sm\" color={textPrimary}>\n                                      {goal.checkpoints.filter(cp => cp.completed).length} of {goal.checkpoints.length} tasks completed\n                                    </Text>\n                                  </Box>\n                                  <AccordionIcon />\n                                </AccordionButton>\n                                <AccordionPanel px={0}>\n                                  <VStack align=\"stretch\" spacing={1}>\n                                    {goal.checkpoints.map(checkpoint => (\n                                      <HStack key={checkpoint.id} spacing={2}>\n                                        <Checkbox\n                                          isChecked={checkpoint.completed}\n                                          onChange={(e) => goal.id && checkpoint.id && \n                                            handleToggleCheckpoint(goal.id, checkpoint.id, e.target.checked)\n                                          }\n                                        />\n                                        <Text\n                                          fontSize=\"sm\"\n                                          textDecoration={checkpoint.completed ? 'line-through' : 'none'}\n                                          color={checkpoint.completed ? textMuted : textPrimary}\n                                        >\n                                          {checkpoint.title}\n                                        </Text>\n                                      </HStack>\n                                    ))}\n                                  </VStack>\n                                </AccordionPanel>\n                              </AccordionItem>\n                            </Accordion>\n                          )}\n                        </Box>\n                      ))}\n                    </VStack>\n                  </TabPanel>\n                  \n                  {/* Category-specific tabs */}\n                  {Object.entries(goalsByCategory).map(([category, categoryGoals]) => (\n                    <TabPanel key={category}>\n                      <VStack spacing={4} align=\"stretch\">\n                        {categoryGoals.map(goal => (\n                          <Box\n                            key={goal.id}\n                            p={4}\n                            borderWidth={1}\n                            borderRadius=\"md\"\n                            borderLeftWidth={4}\n                            borderLeftColor={goal.color || categoryColors[category]}\n                          >\n                            {/* Same goal display as above */}\n                            <Text fontWeight=\"bold\" color={textPrimary}>{goal.title}</Text>\n                            <Progress value={goal.progressPercentage} size=\"sm\" mt={2} />\n                          </Box>\n                        ))}\n                      </VStack>\n                    </TabPanel>\n                  ))}\n                </TabPanels>\n              </Tabs>\n            </VStack>\n          )}\n        </ModalBody>\n        \n        <ModalFooter>\n          <Button mr={3} onClick={onClose}>\n            Close\n          </Button>\n          <Button colorScheme=\"blue\" leftIcon={<AddIcon />} onClick={handleAddGoal}>\n            Add New Goal\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default GoalsModal;","import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Box,\n  Divider,\n  useToast,\n  Icon,\n  Flex,\n  Tag,\n  TagLabel,\n  TagLeftIcon,\n  Select,\n  FormControl,\n  FormLabel,\n  Code,\n  IconButton,\n  Tooltip,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Link,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { \n  FaCalendarAlt, \n  FaClock, \n  FaMapMarkerAlt, \n  FaUser,\n  FaEnvelope,\n  FaCheckCircle,\n  FaTimesCircle,\n  FaQuestionCircle,\n  FaReply,\n  FaTrash,\n  FaCopy,\n  FaTag,\n} from 'react-icons/fa';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\nimport { format } from 'date-fns';\nimport { TagSelector } from './components/TagSelector';\nimport { getColor } from '../../brandConfig';\n\nconst SEND_RSVP_RESPONSE = gql`\n  mutation SendRSVPResponse($eventId: String!, $response: String!, $fromEmail: String) {\n    sendRSVPResponse(eventId: $eventId, response: $response, fromEmail: $fromEmail) {\n      success\n      message\n      event {\n        id\n        iCalResponseStatus\n      }\n    }\n  }\n`;\n\nconst EMAIL_SENDERS_QUERY = gql`\n  query GetEmailSenders {\n    emailSenders\n  }\n`;\n\nconst USER_EMAIL_ACCOUNTS_QUERY = gql`\n  query GetUserEmailAccounts {\n    userEmailAccounts {\n      id\n      email\n      provider\n      isDefault\n      isActive\n    }\n  }\n`;\n\nconst CANCEL_EVENT = gql`\n  mutation CancelEvent($id: String!, $reason: String) {\n    cancelEvent(id: $id, reason: $reason)\n  }\n`;\n\nconst UPDATE_EVENT = gql`\n  mutation UpdateEvent($id: String!, $input: CalendarEventInput!) {\n    updateEvent(id: $id, input: $input) {\n      id\n      categories\n    }\n  }\n`;\n\ninterface ICalInviteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  event: {\n    id: string;\n    title: string;\n    description?: string;\n    startDateTime: string;\n    endDateTime: string;\n    location?: string;\n    iCalMethod?: string;\n    iCalOrganizerEmail?: string;\n    iCalOrganizerName?: string;\n    iCalResponseStatus?: string;\n    iCalReceivedAt?: string;\n    iCalSequence?: number;\n    isInboundICalInvite?: boolean;\n    categories?: string[];\n    calendarId?: string;\n    iCalHtmlBody?: string;\n    iCalMeetingLink?: string;\n    iCalRawEmail?: string;\n    iCalData?: string;\n  };\n  onRefresh?: () => void;\n}\n\nexport const ICalInviteModal: React.FC<ICalInviteModalProps> = ({\n  isOpen,\n  onClose,\n  event,\n  onRefresh,\n}) => {\n  const { colorMode } = useColorMode();\n  // Theme-aware colors\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.darkSurface\", colorMode);\n  const formBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.taskCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const toast = useToast();\n  const [isResponding, setIsResponding] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [selectedFromEmail, setSelectedFromEmail] = useState<string>('');\n  const [selectedTags, setSelectedTags] = useState<string[]>(event.categories || []);\n  const [isSavingTags, setIsSavingTags] = useState(false);\n  const [sendRSVP] = useMutation(SEND_RSVP_RESPONSE);\n  const [cancelEvent] = useMutation(CANCEL_EVENT);\n  const [updateEvent] = useMutation(UPDATE_EVENT);\n  \n  // Debug logging\n  useEffect(() => {\n    console.log('📅 ICalInviteModal event data:', {\n      id: event.id,\n      title: event.title,\n      categories: event.categories,\n      calendarId: event.calendarId,\n      location: event.location\n    });\n  }, [event]);\n  \n  // Update selectedTags when event changes\n  useEffect(() => {\n    setSelectedTags(event.categories || []);\n  }, [event.categories]);\n  \n  // Query for available email senders\n  const { data: sendersData } = useQuery(EMAIL_SENDERS_QUERY, {\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n  \n  // Set default email when senders are loaded\n  useEffect(() => {\n    if (sendersData?.emailSenders && sendersData.emailSenders.length > 0 && !selectedFromEmail) {\n      setSelectedFromEmail(sendersData.emailSenders[0]);\n    }\n  }, [sendersData, selectedFromEmail]);\n\n  const handleRSVP = async (response: 'ACCEPTED' | 'DECLINED' | 'TENTATIVE') => {\n    setIsResponding(true);\n    \n    console.log('📤 Sending RSVP:', {\n      eventId: event.id,\n      response,\n      fromEmail: selectedFromEmail || 'default'\n    });\n    \n    try {\n      const result = await sendRSVP({\n        variables: {\n          eventId: event.id,\n          response,\n          fromEmail: selectedFromEmail || undefined,\n        },\n      });\n\n      if (result.data?.sendRSVPResponse?.success) {\n        toast({\n          title: 'RSVP Sent',\n          description: result.data.sendRSVPResponse.message || `Your response has been sent to the organizer`,\n          status: 'success',\n          duration: 5000,\n          isClosable: true,\n        });\n        \n        if (onRefresh) {\n          onRefresh();\n        }\n        onClose();\n      } else {\n        throw new Error(result.data?.sendRSVPResponse?.message || 'Failed to send RSVP');\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to send RSVP response',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setIsResponding(false);\n    }\n  };\n\n  const getResponseStatusColor = (status?: string) => {\n    switch (status) {\n      case 'ACCEPTED': return 'green';\n      case 'DECLINED': return 'red';\n      case 'TENTATIVE': return 'yellow';\n      default: return 'gray';\n    }\n  };\n\n  const getResponseStatusIcon = (status?: string) => {\n    switch (status) {\n      case 'ACCEPTED': return FaCheckCircle;\n      case 'DECLINED': return FaTimesCircle;\n      case 'TENTATIVE': return FaQuestionCircle;\n      default: return FaReply;\n    }\n  };\n\n  const formatDateTime = (dateString: string) => {\n    try {\n      return format(new Date(dateString), 'PPpp');\n    } catch {\n      return dateString;\n    }\n  };\n\n  const isCancelled = event.iCalMethod === 'CANCEL';\n  \n  const handleSaveTags = async () => {\n    setIsSavingTags(true);\n    console.log('🏷️ Saving tags:', {\n      eventId: event.id,\n      selectedTags,\n      calendarId: event.calendarId || localStorage.getItem('selectedCalendarId') || ''\n    });\n    \n    try {\n      const result = await updateEvent({\n        variables: {\n          id: event.id,\n          input: {\n            categories: selectedTags,\n            // Include minimal required fields\n            title: event.title,\n            startTime: event.startDateTime,\n            endTime: event.endDateTime,\n            calendarId: event.calendarId || localStorage.getItem('selectedCalendarId') || '',\n          }\n        },\n        context: {\n          headers: {\n            'x-tenant-id': localStorage.getItem('tenantId') || ''\n          }\n        }\n      });\n      \n      console.log('✅ Tags save result:', result);\n      \n      toast({\n        title: 'Tags updated',\n        status: 'success',\n        duration: 2000,\n      });\n      \n      if (onRefresh) {\n        onRefresh();\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Error updating tags',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    } finally {\n      setIsSavingTags(false);\n    }\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          <VStack align=\"stretch\" spacing={2}>\n            {/* Event ID with copy button */}\n            <HStack justify=\"space-between\">\n              <HStack spacing={2}>\n                <Text fontSize=\"xs\" color={textMuted}>Event ID:</Text>\n                <Code fontSize=\"xs\">{event.id}</Code>\n                <Tooltip label=\"Copy Event ID\">\n                  <IconButton\n                    aria-label=\"Copy Event ID\"\n                    icon={<FaCopy />}\n                    size=\"xs\"\n                    variant=\"ghost\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(event.id);\n                      toast({\n                        title: \"Event ID copied\",\n                        status: \"success\",\n                        duration: 2000,\n                      });\n                    }}\n                  />\n                </Tooltip>\n              </HStack>\n              <Tooltip label=\"Cancel this event (marks as cancelled, doesn't delete)\">\n                <IconButton\n                  aria-label=\"Cancel Event\"\n                  icon={<FaTrash />}\n                  size=\"sm\"\n                  colorScheme=\"red\"\n                  variant=\"ghost\"\n                  isLoading={isDeleting}\n                  onClick={async () => {\n                    if (window.confirm('Are you sure you want to cancel this event? This will mark it as cancelled in your calendar.')) {\n                      setIsDeleting(true);\n                      try {\n                        const result = await cancelEvent({\n                          variables: { \n                            id: event.id,\n                            reason: 'User cancelled via iCal invite modal'\n                          },\n                          context: {\n                            headers: {\n                              'x-tenant-id': localStorage.getItem('tenantId') || ''\n                            }\n                          }\n                        });\n                        \n                        if (result.data?.cancelEvent) {\n                          toast({\n                            title: \"Event cancelled\",\n                            description: \"The event has been marked as cancelled\",\n                            status: \"success\",\n                            duration: 3000,\n                          });\n                          if (onRefresh) onRefresh();\n                          onClose();\n                        } else {\n                          throw new Error('Failed to cancel event');\n                        }\n                      } catch (error: any) {\n                        toast({\n                          title: \"Error cancelling event\",\n                          description: error.message || \"Failed to cancel the event\",\n                          status: \"error\",\n                          duration: 5000,\n                        });\n                      } finally {\n                        setIsDeleting(false);\n                      }\n                    }\n                  }}\n                />\n              </Tooltip>\n            </HStack>\n            \n            {/* Title and Method Badge */}\n            <HStack spacing={3}>\n              <Icon as={FaEnvelope} color=\"blue.500\" />\n              <Text>Calendar Invitation</Text>\n              {event.iCalMethod && (\n                <Badge \n                  colorScheme={isCancelled ? 'red' : 'blue'}\n                  fontSize=\"sm\"\n                >\n                  {event.iCalMethod}\n                </Badge>\n              )}\n            </HStack>\n          </VStack>\n        </ModalHeader>\n\n        <ModalBody>\n          <Tabs colorScheme=\"blue\" size=\"sm\">\n            <TabList>\n              <Tab>Event Details</Tab>\n              {event.iCalMeetingLink && <Tab>Meeting Link</Tab>}\n              {event.iCalHtmlBody && <Tab>Email Preview</Tab>}\n              {(event.iCalRawEmail || event.iCalData) && <Tab>Debug Data</Tab>}\n            </TabList>\n            \n            <TabPanels>\n              {/* Main Event Details Tab */}\n              <TabPanel>\n                <VStack align=\"stretch\" spacing={4}>\n            {/* Email Sender Selection - only show if multiple accounts */}\n            {sendersData?.emailSenders && sendersData.emailSenders.length > 1 && !isCancelled && (\n              <FormControl>\n                <FormLabel fontSize=\"sm\" fontWeight=\"medium\">\n                  <HStack spacing={1}>\n                    <Icon as={FaEnvelope} />\n                    <Text>Send RSVP from</Text>\n                  </HStack>\n                </FormLabel>\n                <Select\n                  value={selectedFromEmail}\n                  onChange={(e) => setSelectedFromEmail(e.target.value)}\n                  size=\"sm\"\n                  borderRadius=\"md\"\n                >\n                  {sendersData.emailSenders.map((email: string) => (\n                    <option key={email} value={email}>\n                      {email}\n                    </option>\n                  ))}\n                </Select>\n              </FormControl>\n            )}\n            \n            {/* Current Response Status */}\n            {event.iCalResponseStatus && (\n              <Box \n                p={3} \n                borderRadius=\"md\" \n                bg={`${getResponseStatusColor(event.iCalResponseStatus)}.50`}\n                borderWidth={1}\n                borderColor={`${getResponseStatusColor(event.iCalResponseStatus)}.200`}\n              >\n                <HStack>\n                  <Icon \n                    as={getResponseStatusIcon(event.iCalResponseStatus)} \n                    color={`${getResponseStatusColor(event.iCalResponseStatus)}.500`}\n                  />\n                  <Text fontWeight=\"medium\">\n                    You have {event.iCalResponseStatus.toLowerCase()} this invitation\n                    {selectedFromEmail && ` from ${selectedFromEmail}`}\n                  </Text>\n                </HStack>\n              </Box>\n            )}\n\n            {/* Event Title */}\n            <Box>\n              <Text fontSize=\"xl\" fontWeight=\"bold\" color={isCancelled ? 'red.500' : 'inherit'}>\n                {isCancelled && '❌ CANCELLED: '}{event.title}\n              </Text>\n            </Box>\n\n            {/* Organizer Info */}\n            {(event.iCalOrganizerName || event.iCalOrganizerEmail) && (\n              <Box p={3} bg={formBg} borderRadius=\"md\">\n                <HStack spacing={2} mb={1}>\n                  <Icon as={FaUser} color={textSecondary} />\n                  <Text fontWeight=\"semibold\">Organizer</Text>\n                </HStack>\n                <Text ml={6}>\n                  {event.iCalOrganizerName || 'Unknown'}{' '}\n                  {event.iCalOrganizerEmail && (\n                    <Text as=\"span\" color={textSecondary}>\n                      ({event.iCalOrganizerEmail})\n                    </Text>\n                  )}\n                </Text>\n              </Box>\n            )}\n\n            <Divider />\n\n            {/* Event Details */}\n            <VStack align=\"stretch\" spacing={3}>\n              {/* Date & Time */}\n              <HStack align=\"flex-start\">\n                <Icon as={FaCalendarAlt} color={textSecondary} mt={1} />\n                <Box flex={1}>\n                  <Text fontWeight=\"medium\">When</Text>\n                  <Text fontSize=\"sm\" color={textSecondary}>\n                    {formatDateTime(event.startDateTime)}\n                  </Text>\n                  <Text fontSize=\"sm\" color={textSecondary}>\n                    to {formatDateTime(event.endDateTime)}\n                  </Text>\n                </Box>\n              </HStack>\n\n              {/* Location */}\n              {event.location && (\n                <HStack align=\"flex-start\">\n                  <Icon as={FaMapMarkerAlt} color={textSecondary} mt={1} />\n                  <Box flex={1}>\n                    <Text fontWeight=\"medium\">Where</Text>\n                    <Text fontSize=\"sm\" color={textSecondary}>{event.location}</Text>\n                  </Box>\n                </HStack>\n              )}\n\n              {/* Description */}\n              {event.description && (\n                <Box>\n                  <Text fontWeight=\"medium\" mb={2}>Description</Text>\n                  <Box \n                    p={3} \n                    bg={formBg} \n                    borderRadius=\"md\"\n                    maxH=\"200px\"\n                    overflowY=\"auto\"\n                  >\n                    <Text fontSize=\"sm\" whiteSpace=\"pre-wrap\">\n                      {event.description}\n                    </Text>\n                  </Box>\n                </Box>\n              )}\n              \n              {/* Tags Section */}\n              <Box>\n                <HStack mb={2}>\n                  <Icon as={FaTag} color={textSecondary} />\n                  <Text fontWeight=\"medium\">Event Tags</Text>\n                </HStack>\n                <Box p={3} bg={formBg} borderRadius=\"md\">\n                  <TagSelector\n                    calendarId={event.calendarId || localStorage.getItem('selectedCalendarId') || ''}\n                    selectedTags={selectedTags}\n                    onTagsChange={setSelectedTags}\n                    placeholder=\"Add tags to categorize this event...\"\n                  />\n                  {selectedTags.length > 0 && selectedTags.join(',') !== (event.categories || []).join(',') && (\n                    <Button\n                      size=\"sm\"\n                      colorScheme=\"blue\"\n                      mt={3}\n                      onClick={handleSaveTags}\n                      isLoading={isSavingTags}\n                    >\n                      Save Tags\n                    </Button>\n                  )}\n                </Box>\n              </Box>\n            </VStack>\n\n                  {/* Metadata */}\n                  {event.iCalReceivedAt && (\n                    <HStack spacing={2} fontSize=\"xs\" color={textMuted}>\n                      <Text>Received:</Text>\n                      <Text>{formatDateTime(event.iCalReceivedAt)}</Text>\n                      {event.iCalSequence !== undefined && (\n                        <>\n                          <Text>•</Text>\n                          <Text>Update #{event.iCalSequence}</Text>\n                        </>\n                      )}\n                    </HStack>\n                  )}\n                </VStack>\n              </TabPanel>\n              \n              {/* Meeting Link Tab */}\n              {event.iCalMeetingLink && (\n                <TabPanel>\n                  <VStack align=\"stretch\" spacing={4}>\n                    <Box p={4} bg=\"blue.50\" borderRadius=\"md\" borderWidth={1} borderColor=\"blue.200\">\n                      <HStack spacing={3}>\n                        <Icon as={FaCalendarAlt} color=\"blue.500\" />\n                        <Text fontWeight=\"bold\">Join Meeting</Text>\n                      </HStack>\n                      <Link \n                        href={event.iCalMeetingLink} \n                        color=\"blue.600\" \n                        isExternal \n                        fontSize=\"lg\"\n                        fontWeight=\"medium\"\n                        mt={3}\n                        display=\"block\"\n                      >\n                        {event.iCalMeetingLink}\n                      </Link>\n                      <Button\n                        as=\"a\"\n                        href={event.iCalMeetingLink}\n                        target=\"_blank\"\n                        colorScheme=\"blue\"\n                        size=\"lg\"\n                        mt={4}\n                        width=\"full\"\n                      >\n                        Join Meeting Now\n                      </Button>\n                    </Box>\n                  </VStack>\n                </TabPanel>\n              )}\n              \n              {/* Email Preview Tab */}\n              {event.iCalHtmlBody && (\n                <TabPanel>\n                  <Box \n                    borderWidth={1} \n                    borderColor=\"gray.200\" \n                    borderRadius=\"md\" \n                    overflow=\"hidden\"\n                    bg={cardBg}\n                  >\n                    <Box \n                      p={4} \n                      maxH=\"500px\" \n                      overflowY=\"auto\"\n                      dangerouslySetInnerHTML={{ __html: event.iCalHtmlBody }}\n                      sx={{\n                        '& a': { color: 'blue.500', textDecoration: 'underline' },\n                        '& img': { maxWidth: '100%', height: 'auto' },\n                        '& table': { width: '100%' }\n                      }}\n                    />\n                  </Box>\n                </TabPanel>\n              )}\n              \n              {/* Debug Data Tab */}\n              {(event.iCalRawEmail || event.iCalData) && (\n                <TabPanel>\n                  <VStack align=\"stretch\" spacing={4}>\n                    {event.iCalRawEmail && (\n                      <Box>\n                        <HStack mb={2}>\n                          <Text fontWeight=\"bold\" fontSize=\"sm\">Raw Email Metadata:</Text>\n                          <IconButton\n                            icon={<FaCopy />}\n                            size=\"xs\"\n                            onClick={() => {\n                              navigator.clipboard.writeText(event.iCalRawEmail || '');\n                              toast({\n                                title: 'Copied to clipboard',\n                                status: 'success',\n                                duration: 2000,\n                              });\n                            }}\n                            aria-label=\"Copy raw email data\"\n                          />\n                        </HStack>\n                        <Code \n                          p={3} \n                          borderRadius=\"md\" \n                          fontSize=\"xs\" \n                          maxH=\"200px\" \n                          overflowY=\"auto\"\n                          display=\"block\"\n                          whiteSpace=\"pre-wrap\"\n                        >\n                          {JSON.stringify(JSON.parse(event.iCalRawEmail || '{}'), null, 2)}\n                        </Code>\n                      </Box>\n                    )}\n                    \n                    {event.iCalData && (\n                      <Box>\n                        <HStack mb={2}>\n                          <Text fontWeight=\"bold\" fontSize=\"sm\">iCal Data:</Text>\n                          <IconButton\n                            icon={<FaCopy />}\n                            size=\"xs\"\n                            onClick={() => {\n                              navigator.clipboard.writeText(event.iCalData || '');\n                              toast({\n                                title: 'Copied to clipboard',\n                                status: 'success',\n                                duration: 2000,\n                              });\n                            }}\n                            aria-label=\"Copy iCal data\"\n                          />\n                        </HStack>\n                        <Code \n                          p={3} \n                          borderRadius=\"md\" \n                          fontSize=\"xs\" \n                          maxH=\"300px\" \n                          overflowY=\"auto\"\n                          display=\"block\"\n                          whiteSpace=\"pre\"\n                        >\n                          {event.iCalData}\n                        </Code>\n                      </Box>\n                    )}\n                  </VStack>\n                </TabPanel>\n              )}\n            </TabPanels>\n          </Tabs>\n        </ModalBody>\n\n        <ModalFooter>\n          {!isCancelled ? (\n            <HStack spacing={3} width=\"full\">\n              <Button\n                leftIcon={<FaCheckCircle />}\n                colorScheme=\"green\"\n                onClick={() => handleRSVP('ACCEPTED')}\n                isLoading={isResponding}\n                isDisabled={event.iCalResponseStatus === 'ACCEPTED'}\n                flex={1}\n              >\n                Accept\n              </Button>\n              <Button\n                leftIcon={<FaQuestionCircle />}\n                colorScheme=\"yellow\"\n                onClick={() => handleRSVP('TENTATIVE')}\n                isLoading={isResponding}\n                isDisabled={event.iCalResponseStatus === 'TENTATIVE'}\n                flex={1}\n              >\n                Maybe\n              </Button>\n              <Button\n                leftIcon={<FaTimesCircle />}\n                colorScheme=\"red\"\n                onClick={() => handleRSVP('DECLINED')}\n                isLoading={isResponding}\n                isDisabled={event.iCalResponseStatus === 'DECLINED'}\n                flex={1}\n              >\n                Decline\n              </Button>\n              <Button variant=\"ghost\" onClick={onClose}>\n                Close\n              </Button>\n            </HStack>\n          ) : (\n            <HStack spacing={3} width=\"full\">\n              <Text flex={1} color=\"red.500\" fontSize=\"sm\">\n                This event has been cancelled by the organizer\n              </Text>\n              <Button onClick={onClose}>\n                Close\n              </Button>\n            </HStack>\n          )}\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  IconButton,\n  Text,\n  Collapse,\n  Portal,\n  Checkbox,\n  Badge,\n  Icon,\n  Tooltip,\n  Select,\n  Divider,\n  Wrap,\n  WrapItem,\n  Tag,\n  TagLabel,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { keyframes } from '@emotion/react';\nimport { \n  FiFilter, \n  FiX,\n  FiCalendar,\n  FiMail,\n  FiMessageSquare,\n  FiSend,\n  FiUsers,\n  FiClock,\n  FiBell,\n  FiGlobe,\n  FiTag,\n} from 'react-icons/fi';\nimport { useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\nimport { getColor } from '../../brandConfig';\n\n// GraphQL query for calendar tags\nconst GET_CALENDAR_TAGS = gql`\n  query GetCalendarTags($calendarId: String!) {\n    calendarTags(calendarId: $calendarId) {\n      id\n      name\n      color\n      description\n      usageCount\n    }\n  }\n`;\n\n// Animations\nconst slideIn = keyframes`\n  from { transform: translateX(100%); opacity: 0; }\n  to { transform: translateX(0); opacity: 1; }\n`;\n\nconst glow = keyframes`\n  0% { box-shadow: 0 0 5px rgba(54, 158, 255, 0.5); }\n  50% { box-shadow: 0 0 20px rgba(54, 158, 255, 0.8), 0 0 40px rgba(54, 158, 255, 0.4); }\n  100% { box-shadow: 0 0 5px rgba(54, 158, 255, 0.5); }\n`;\n\nconst float = keyframes`\n  0% { transform: translateY(0px); }\n  50% { transform: translateY(-5px); }\n  100% { transform: translateY(0px); }\n`;\n\ninterface EventType {\n  id: string;\n  label: string;\n  icon: any;\n  color: string;\n  count?: number;\n  description?: string;\n}\n\ninterface FloatingEventFilterProps {\n  events: any[];\n  calendarId: string;\n  onFilterChange: (filters: Set<string>) => void;\n  onTimezoneChange?: (timezone: string | null) => void;\n  onTagFilterChange?: (tags: Set<string>) => void;\n}\n\nexport const FloatingEventFilter: React.FC<FloatingEventFilterProps> = ({ events, calendarId, onFilterChange, onTimezoneChange, onTagFilterChange }) => {\n  const { colorMode } = useColorMode();\n\n  // Theme-aware colors\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.darkSurface\", colorMode);\n  const formBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.taskCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [activeFilters, setActiveFilters] = useState<Set<string>>(new Set());\n  const [selectedTimezone, setSelectedTimezone] = useState<string>('');\n  const [activeTags, setActiveTags] = useState<Set<string>>(new Set());\n  \n  // Fetch calendar tags\n  const { data: tagsData } = useQuery(GET_CALENDAR_TAGS, {\n    variables: { calendarId },\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n  \n  const calendarTags = tagsData?.calendarTags || [];\n  \n  // Popular timezones for quick selection\n  const timezones = [\n    { value: '', label: 'No secondary timezone', offset: '' },\n    { value: 'Europe/London', label: 'London', offset: 'GMT' },\n    { value: 'Europe/Paris', label: 'Paris', offset: 'CET' },\n    { value: 'America/New_York', label: 'New York', offset: 'EST' },\n    { value: 'America/Los_Angeles', label: 'Los Angeles', offset: 'PST' },\n    { value: 'Asia/Tokyo', label: 'Tokyo', offset: 'JST' },\n    { value: 'Asia/Singapore', label: 'Singapore', offset: 'SGT' },\n    { value: 'Asia/Dubai', label: 'Dubai', offset: 'GST' },\n    { value: 'Australia/Sydney', label: 'Sydney', offset: 'AEDT' },\n    { value: 'Pacific/Auckland', label: 'Auckland', offset: 'NZDT' },\n  ];\n\n  // Define event types with their icons and colors\n  const eventTypes: EventType[] = [\n    {\n      id: 'standard',\n      label: 'Standard Events',\n      icon: FiCalendar,\n      color: 'blue',\n      description: 'Regular calendar events'\n    },\n    {\n      id: 'ical_inbound',\n      label: 'Inbound iCal',\n      icon: FiMail,\n      color: 'green',\n      description: 'Invites received from others'\n    },\n    {\n      id: 'ical_outbound',\n      label: 'Outbound iCal',\n      icon: FiSend,\n      color: 'purple',\n      description: 'Invites you sent'\n    },\n    {\n      id: 'sms_broadcast',\n      label: 'SMS Events',\n      icon: FiMessageSquare,\n      color: 'orange',\n      description: 'Events with SMS reminders'\n    },\n    {\n      id: 'meeting',\n      label: 'Meetings',\n      icon: FiUsers,\n      color: 'teal',\n      description: 'Events with multiple attendees'\n    },\n    {\n      id: 'reminder',\n      label: 'With Reminders',\n      icon: FiBell,\n      color: 'yellow',\n      description: 'Events with notifications'\n    },\n    {\n      id: 'all_day',\n      label: 'All Day Events',\n      icon: FiClock,\n      color: 'pink',\n      description: 'Full day events'\n    },\n  ];\n\n  // Count events by type and tags\n  const getEventTypeCounts = () => {\n    const counts: Record<string, number> = {};\n    const tagCounts: Record<string, number> = {};\n    \n    events.forEach(event => {\n      // Standard events (default)\n      if (!event.extendedProps?.isInboundICalInvite && \n          !event.extendedProps?.metadata?.['X-EVENT-TYPE']) {\n        counts.standard = (counts.standard || 0) + 1;\n      }\n      \n      // Inbound iCal\n      if (event.extendedProps?.isInboundICalInvite) {\n        counts.ical_inbound = (counts.ical_inbound || 0) + 1;\n      }\n      \n      // Outbound iCal\n      if (event.extendedProps?.metadata?.['X-EVENT-TYPE'] === 'ICAL_INVITE') {\n        counts.ical_outbound = (counts.ical_outbound || 0) + 1;\n      }\n      \n      // SMS Broadcast\n      if (event.extendedProps?.metadata?.['X-EVENT-TYPE'] === 'SMS_BROADCAST') {\n        counts.sms_broadcast = (counts.sms_broadcast || 0) + 1;\n      }\n      \n      // Meetings (events with attendees)\n      if (event.extendedProps?.attendees?.length > 0) {\n        counts.meeting = (counts.meeting || 0) + 1;\n      }\n      \n      // Events with reminders\n      if (event.extendedProps?.reminders?.length > 0) {\n        counts.reminder = (counts.reminder || 0) + 1;\n      }\n      \n      // All day events\n      if (event.allDay) {\n        counts.all_day = (counts.all_day || 0) + 1;\n      }\n      \n      // Count tags\n      if (event.extendedProps?.categories?.length > 0) {\n        event.extendedProps.categories.forEach((tag: string) => {\n          tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n        });\n      }\n    });\n    \n    return { eventCounts: counts, tagCounts };\n  };\n\n  const { eventCounts, tagCounts } = getEventTypeCounts();\n\n\n  // Initialize with all event type filters active, but no tag filters\n  useEffect(() => {\n    const allTypeIds = eventTypes.map(type => type.id);\n    setActiveFilters(new Set(allTypeIds));\n    onFilterChange(new Set(allTypeIds));\n  }, []);\n  \n  // When tags are loaded, don't select any by default\n  useEffect(() => {\n    // Keep tags unselected by default - empty set means show all events\n    if (onTagFilterChange) {\n      onTagFilterChange(new Set());\n    }\n  }, [calendarTags]);\n\n  // Handle filter toggle\n  const handleFilterToggle = (typeId: string) => {\n    const newFilters = new Set(activeFilters);\n    if (newFilters.has(typeId)) {\n      newFilters.delete(typeId);\n    } else {\n      newFilters.add(typeId);\n    }\n    setActiveFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n\n  // Toggle all filters\n  const toggleAllFilters = () => {\n    if (activeFilters.size === eventTypes.length) {\n      // All are selected, deselect all\n      setActiveFilters(new Set());\n      onFilterChange(new Set());\n    } else {\n      // Some or none are selected, select all\n      const allTypeIds = eventTypes.map(type => type.id);\n      setActiveFilters(new Set(allTypeIds));\n      onFilterChange(new Set(allTypeIds));\n    }\n  };\n  \n  // Handle tag toggle\n  const handleTagToggle = (tagName: string) => {\n    const newTags = new Set(activeTags);\n    if (newTags.has(tagName)) {\n      newTags.delete(tagName);\n    } else {\n      newTags.add(tagName);\n    }\n    setActiveTags(newTags);\n    if (onTagFilterChange) {\n      onTagFilterChange(newTags);\n    }\n  };\n  \n  // Toggle all tags\n  const toggleAllTags = () => {\n    if (activeTags.size === calendarTags.length) {\n      // All are selected, deselect all\n      setActiveTags(new Set());\n      if (onTagFilterChange) {\n        onTagFilterChange(new Set());\n      }\n    } else {\n      // Some or none are selected, select all\n      const allTagNames = calendarTags.map((tag: any) => tag.name);\n      setActiveTags(new Set(allTagNames));\n      if (onTagFilterChange) {\n        onTagFilterChange(new Set(allTagNames));\n      }\n    }\n  };\n  \n  // Handle timezone change\n  const handleTimezoneChange = (timezone: string) => {\n    setSelectedTimezone(timezone);\n    if (onTimezoneChange) {\n      onTimezoneChange(timezone || null);\n    }\n  };\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      if (isExpanded && !target.closest('.floating-event-filter-container')) {\n        setIsExpanded(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [isExpanded]);\n\n  return (\n    <Portal>\n      <Box\n        className=\"floating-event-filter-container\"\n        position=\"fixed\"\n        right=\"20px\"\n        top=\"60%\"\n        transform=\"translateY(-50%)\"\n        zIndex={997}\n      >\n        {/* Expanded Filter Panel */}\n        <Collapse in={isExpanded} animateOpacity>\n          <Box\n            bg={cardBg}\n            backdropFilter=\"blur(20px)\"\n            borderRadius=\"2xl\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            p={4}\n            mb={4}\n            minW=\"280px\"\n            maxW=\"320px\"\n            maxH=\"60vh\"\n            overflowY=\"auto\"\n            boxShadow=\"0 20px 60px rgba(0, 0, 0, 0.8), 0 0 40px rgba(54, 158, 255, 0.1)\"\n            animation={`${slideIn} 0.3s ease-out`}\n            css={{\n              '&::-webkit-scrollbar': {\n                width: '4px',\n              },\n              '&::-webkit-scrollbar-track': {\n                background: 'transparent',\n              },\n              '&::-webkit-scrollbar-thumb': {\n                background: 'rgba(54, 158, 255, 0.3)',\n                borderRadius: '2px',\n              },\n            }}\n          >\n            {/* Header */}\n            <HStack justify=\"space-between\" mb={4}>\n              <HStack>\n                <Icon as={FiFilter} color=\"blue.400\" />\n                <Text fontSize=\"sm\" fontWeight=\"600\" color={textPrimary}>\n                  Calendar Settings\n                </Text>\n              </HStack>\n              <Badge \n                colorScheme=\"blue\" \n                fontSize=\"xs\"\n                borderRadius=\"full\"\n              >\n                {activeFilters.size}/{eventTypes.length}\n              </Badge>\n            </HStack>\n            \n            {/* Timezone Selector */}\n            <Box\n              mb={4}\n              p={3}\n              bg={formBg}\n              borderRadius=\"lg\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n            >\n              <HStack spacing={2} mb={2}>\n                <Icon as={FiGlobe} color=\"blue.400\" boxSize={4} />\n                <Text fontSize=\"xs\" fontWeight=\"600\" color={textSecondary}>\n                  Secondary Timezone\n                </Text>\n              </HStack>\n              <Select\n                size=\"sm\"\n                value={selectedTimezone}\n                onChange={(e) => handleTimezoneChange(e.target.value)}\n                bg={formBg}\n                borderColor={cardBorder}\n                color={textPrimary}\n                fontSize=\"xs\"\n                _hover={{\n                  borderColor: cardBorder,\n                }}\n                _focus={{\n                  borderColor: cardBorder,\n                  boxShadow: `0 0 0 1px ${cardBorder}`,\n                }}\n              >\n                {timezones.map((tz) => (\n                  <option key={tz.value} value={tz.value} style={{ background: '#1a1a2e' }}>\n                    {tz.label} {tz.offset && `(${tz.offset})`}\n                  </option>\n                ))}\n              </Select>\n              {selectedTimezone && (\n                <Text fontSize=\"xs\" color={textMuted} mt={2}>\n                  Times will show in both local and {timezones.find(tz => tz.value === selectedTimezone)?.label} time\n                </Text>\n              )}\n            </Box>\n            \n            <Divider borderColor={cardBorder} mb={4} />\n            \n            {/* Event Filters Header */}\n            <HStack spacing={2} mb={3}>\n              <Icon as={FiCalendar} color=\"blue.400\" boxSize={4} />\n              <Text fontSize=\"xs\" fontWeight=\"600\" color={textSecondary}>\n                Event Types\n              </Text>\n            </HStack>\n\n            {/* Select/Deselect All */}\n            <Box\n              mb={3}\n              p={2}\n              bg={formBg}\n              borderRadius=\"md\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n            >\n              <Checkbox\n                isChecked={activeFilters.size === eventTypes.length}\n                isIndeterminate={activeFilters.size > 0 && activeFilters.size < eventTypes.length}\n                onChange={toggleAllFilters}\n                colorScheme=\"blue\"\n                size=\"sm\"\n              >\n                <Text fontSize=\"xs\" fontWeight=\"500\" color={textSecondary}>\n                  Select All\n                </Text>\n              </Checkbox>\n            </Box>\n\n            {/* Event Type Filters */}\n            <VStack spacing={2} align=\"stretch\">\n              {eventTypes.map((type) => {\n                const count = eventCounts[type.id] || 0;\n                const isActive = activeFilters.has(type.id);\n                \n                return (\n                  <Box\n                    key={type.id}\n                    p={2}\n                    bg={isActive ? formBg : 'transparent'}\n                    borderRadius=\"lg\"\n                    border=\"1px solid\"\n                    borderColor={isActive ? cardBorder : 'transparent'}\n                    transition=\"all 0.2s\"\n                    _hover={{\n                      bg: formBg,\n                      borderColor: cardBorder,\n                    }}\n                  >\n                    <HStack justify=\"space-between\">\n                      <Checkbox\n                        isChecked={isActive}\n                        onChange={() => handleFilterToggle(type.id)}\n                        colorScheme={type.color}\n                        size=\"sm\"\n                      >\n                        <HStack spacing={2}>\n                          <Icon \n                            as={type.icon} \n                            color={`${type.color}.400`}\n                            boxSize={4}\n                          />\n                          <VStack align=\"start\" spacing={0}>\n                            <Text fontSize=\"sm\" color={textPrimary}>\n                              {type.label}\n                            </Text>\n                            <Text fontSize=\"xs\" color={textMuted}>\n                              {type.description}\n                            </Text>\n                          </VStack>\n                        </HStack>\n                      </Checkbox>\n                      <Badge\n                        colorScheme={type.color}\n                        fontSize=\"xs\"\n                        variant={isActive ? 'solid' : 'subtle'}\n                      >\n                        {count}\n                      </Badge>\n                    </HStack>\n                  </Box>\n                );\n              })}\n            </VStack>\n\n            {/* Custom Tags Section */}\n            {calendarTags.length > 0 && (\n              <>\n                <Divider borderColor={cardBorder} my={4} />\n                \n                {/* Tags Header */}\n                <HStack spacing={2} mb={3}>\n                  <Tooltip\n                    label=\"Filter events by tags. When no tags are selected, all events are shown. Select one or more tags to show only events with those tags.\"\n                    placement=\"left\"\n                    hasArrow\n                    bg=\"gray.700\"\n                    color=\"white\"\n                    fontSize=\"xs\"\n                    px={3}\n                    py={2}\n                    borderRadius=\"md\"\n                    maxW=\"250px\"\n                    openDelay={200}\n                  >\n                    <Box display=\"inline-flex\">\n                      <Icon as={FiTag} color=\"blue.400\" boxSize={4} cursor=\"help\" />\n                    </Box>\n                  </Tooltip>\n                  <Text fontSize=\"xs\" fontWeight=\"600\" color={textSecondary}>\n                    Custom Tags\n                  </Text>\n                </HStack>\n                \n                {/* Select/Deselect All Tags */}\n                <Box\n                  mb={3}\n                  p={2}\n                  bg={formBg}\n                  borderRadius=\"md\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                >\n                  <Checkbox\n                    isChecked={activeTags.size === calendarTags.length}\n                    isIndeterminate={activeTags.size > 0 && activeTags.size < calendarTags.length}\n                    onChange={toggleAllTags}\n                    colorScheme=\"blue\"\n                    size=\"sm\"\n                  >\n                    <Text fontSize=\"xs\" fontWeight=\"500\" color={textSecondary}>\n                      Select All Tags\n                    </Text>\n                  </Checkbox>\n                </Box>\n                \n                {/* Tag Filters */}\n                <Wrap spacing={2}>\n                  {calendarTags.map((tag: any) => {\n                    const count = tagCounts[tag.name] || 0;\n                    const isActive = activeTags.has(tag.name);\n                    \n                    return (\n                      <WrapItem key={tag.id}>\n                        <Tag\n                          size=\"md\"\n                          borderRadius=\"full\"\n                          variant={isActive ? \"solid\" : \"outline\"}\n                          backgroundColor={isActive ? tag.color : 'transparent'}\n                          borderColor={tag.color}\n                          color={isActive ? 'gray.800' : textPrimary}\n                          cursor=\"pointer\"\n                          onClick={() => handleTagToggle(tag.name)}\n                          _hover={{\n                            transform: 'scale(1.05)',\n                            boxShadow: `0 0 10px ${tag.color}40`,\n                          }}\n                          transition=\"all 0.2s\"\n                        >\n                          <TagLabel>\n                            {tag.name}\n                            {count > 0 && (\n                              <Badge\n                                ml={2}\n                                colorScheme={isActive ? \"blackAlpha\" : \"gray\"}\n                                fontSize=\"xs\"\n                                variant=\"solid\"\n                              >\n                                {count}\n                              </Badge>\n                            )}\n                          </TagLabel>\n                        </Tag>\n                      </WrapItem>\n                    );\n                  })}\n                </Wrap>\n              </>\n            )}\n\n            {/* Summary */}\n            <Box\n              mt={4}\n              p={3}\n              bg={formBg}\n              borderRadius=\"lg\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n            >\n              <Text fontSize=\"xs\" color={textMuted} textAlign=\"center\">\n                Showing {activeFilters.size > 0 ?\n                  `${Object.values(eventCounts).reduce((a, b) => a + b, 0)} events` :\n                  'No events'}\n              </Text>\n            </Box>\n          </Box>\n        </Collapse>\n\n        {/* Floating Filter Button */}\n        <Tooltip \n          label={isExpanded ? \"Close filters\" : \"Filter events\"} \n          placement=\"left\"\n          hasArrow\n        >\n          <IconButton\n            aria-label=\"Toggle event filters\"\n            icon={isExpanded ? <FiX /> : <FiFilter />}\n            size=\"lg\"\n            borderRadius=\"full\"\n            bg={cardBg}\n            color={textPrimary}\n            border=\"2px solid\"\n            borderColor={cardBorder}\n            boxShadow=\"0 10px 40px rgba(0, 0, 0, 0.8), 0 0 60px rgba(54, 158, 255, 0.2)\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            position=\"relative\"\n            _hover={{\n              transform: 'scale(1.1)',\n              borderColor: cardBorder,\n              animation: `${glow} 2s ease infinite`,\n            }}\n            _active={{\n              transform: 'scale(0.95)',\n            }}\n            transition=\"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\"\n            animation={!isExpanded ? `${float} 3s ease-in-out infinite` : undefined}\n            _before={!isExpanded ? {\n              content: '\"\"',\n              position: 'absolute',\n              top: '-2px',\n              right: '-2px',\n              bottom: '-2px',\n              left: '-2px',\n              background: 'linear-gradient(45deg, #369eff, #147fd6, #369eff)',\n              borderRadius: 'full',\n              opacity: 0.3,\n              filter: 'blur(10px)',\n              animation: `${glow} 3s ease infinite`,\n              zIndex: -1,\n            } : undefined}\n          >\n            {/* Show badge with active filter count */}\n            {activeFilters.size < eventTypes.length && (\n              <Badge\n                position=\"absolute\"\n                top=\"-2px\"\n                right=\"-2px\"\n                colorScheme=\"red\"\n                borderRadius=\"full\"\n                fontSize=\"xs\"\n                minW=\"20px\"\n                h=\"20px\"\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n              >\n                {activeFilters.size}\n              </Badge>\n            )}\n          </IconButton>\n        </Tooltip>\n      </Box>\n    </Portal>\n  );\n};","import { useRef, useEffect } from 'react';\nimport { useToast } from '@chakra-ui/react';\n\n// ============================================================================\n// LOCALSTORAGE SCROLL POSITION UTILITIES\n// ============================================================================\nconst SCROLL_STORAGE_KEY = 'calendar-scroll-position';\n\ninterface ScrollPosition {\n  calendarId: string;\n  view: string;\n  scrollTime: string; // HH:MM:SS format\n  timestamp: number;\n}\n\n/**\n * Save scroll position to localStorage\n */\nconst saveScrollPosition = (calendarId: string, view: string, scrollTime: string) => {\n  try {\n    const data: ScrollPosition = {\n      calendarId,\n      view,\n      scrollTime,\n      timestamp: Date.now(),\n    };\n    localStorage.setItem(SCROLL_STORAGE_KEY, JSON.stringify(data));\n    console.log('💾 Saved scroll position:', data);\n  } catch (error) {\n    console.error('Failed to save scroll position:', error);\n  }\n};\n\n/**\n * Load scroll position from localStorage\n * Only returns position if it's for the same calendar, view, and less than 5 minutes old\n */\nconst loadScrollPosition = (calendarId: string, view: string): string | null => {\n  try {\n    const stored = localStorage.getItem(SCROLL_STORAGE_KEY);\n    if (!stored) return null;\n\n    const data: ScrollPosition = JSON.parse(stored);\n\n    // Only use if:\n    // 1. Same calendar\n    // 2. Same view (week/day)\n    // 3. Less than 5 minutes old\n    const fiveMinutes = 5 * 60 * 1000;\n    if (\n      data.calendarId === calendarId &&\n      data.view === view &&\n      Date.now() - data.timestamp < fiveMinutes\n    ) {\n      console.log('📂 Loaded scroll position:', data);\n      return data.scrollTime;\n    }\n\n    return null;\n  } catch (error) {\n    console.error('Failed to load scroll position:', error);\n    return null;\n  }\n};\n\n/**\n * Get current scroll time from window or FullCalendar container\n */\nconst getCurrentScrollTime = (): string | null => {\n  try {\n    // Find the red \"now\" indicator line\n    const nowIndicator = document.querySelector('.fc-timegrid-now-indicator-line') as HTMLElement;\n    if (!nowIndicator) {\n      console.log('⚠️ No \"now\" indicator found for scroll time calculation');\n      return null;\n    }\n\n    // Get scroll container\n    const scrollContainer = document.querySelector('.fc-scroller') as HTMLElement;\n    if (!scrollContainer) {\n      console.log('⚠️ No scroll container found');\n      return null;\n    }\n\n    const scrollTop = scrollContainer.scrollTop || window.scrollY;\n    const slotHeight = 48; // Approximate pixels per hour in FullCalendar\n    const minutes = Math.floor((scrollTop / slotHeight) * 60);\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n\n    const scrollTime = `${String(hours).padStart(2, '0')}:${String(mins).padStart(2, '0')}:00`;\n    console.log(`📏 Current scroll time calculated: ${scrollTime}`);\n    return scrollTime;\n  } catch (error) {\n    console.error('Failed to get current scroll time:', error);\n    return null;\n  }\n};\n\n// ============================================================================\n// HOOK: useCalendarScroll\n// ============================================================================\n\ninterface UseCalendarScrollParams {\n  calendarId: string | undefined;\n  currentView: string;\n  isPreservingView: boolean;\n  calendarRef: React.RefObject<any>;\n}\n\ninterface UseCalendarScrollReturn {\n  isManualScrollRef: React.MutableRefObject<boolean>;\n  handleScrollToNow: () => void;\n}\n\n/**\n * Custom hook to manage calendar scroll behavior\n *\n * Features:\n * - Auto-scroll to current time on view load (with localStorage restoration)\n * - Manual \"Scroll to Now\" function\n * - Preserves scroll position after event save/edit\n * - Saves/loads scroll position from localStorage\n */\nexport const useCalendarScroll = ({\n  calendarId,\n  currentView,\n  isPreservingView,\n  calendarRef,\n}: UseCalendarScrollParams): UseCalendarScrollReturn => {\n  const toast = useToast();\n  const isManualScrollRef = useRef(false);\n\n  // ============================================================================\n  // AUTO-SCROLL EFFECT\n  // ============================================================================\n  // This effect runs when:\n  // - When switching to Week or Day view (via buttons)\n  // - When pressing Today button\n  // - When the component first loads in week/day view\n  //\n  // WHEN IT DOESN'T RUN (IMPORTANT):\n  // - After creating a new event (isPreservingView = true)\n  // - After editing an existing event (isPreservingView = true)\n  // - During month view (only runs for timeGrid views)\n  // ============================================================================\n  useEffect(() => {\n    // Skip auto-scroll if we're preserving the view (after save/edit) or if user manually scrolled\n    if (isPreservingView || isManualScrollRef.current) {\n      console.log('🚫 Skipping auto-scroll - isPreservingView:', isPreservingView, 'isManualScroll:', isManualScrollRef.current);\n      return;\n    }\n\n    if (currentView === 'timeGridWeek' || currentView === 'timeGridDay') {\n      const calendarApi = calendarRef.current?.getApi();\n      if (calendarApi && calendarId) {\n        // Use requestAnimationFrame to ensure the view has rendered\n        requestAnimationFrame(() => {\n          setTimeout(() => {\n            // Try to load saved scroll position from localStorage first\n            const savedScrollTime = loadScrollPosition(calendarId, currentView);\n\n            let scrollTime: string;\n            if (savedScrollTime) {\n              console.log('📂 Restoring saved scroll position:', savedScrollTime);\n              scrollTime = savedScrollTime;\n            } else {\n              // Default: scroll to 2 hours before current time\n              const now = new Date();\n              const defaultTime = new Date(now.getTime() - (2 * 60 * 60 * 1000));\n              scrollTime = defaultTime.toTimeString().slice(0, 8);\n              console.log('📜 Auto-scrolling to default time (2hrs before now):', scrollTime);\n            }\n\n            calendarApi.scrollToTime(scrollTime);\n          }, 500); // Increased delay to ensure view is fully rendered\n        });\n      }\n    }\n  }, [currentView, isPreservingView, calendarId, calendarRef]);\n\n  // ============================================================================\n  // MANUAL SCROLL TO NOW FUNCTION\n  // ============================================================================\n  const handleScrollToNow = () => {\n    console.log('🕐 Scroll to Now button clicked');\n    const calendarApi = calendarRef.current?.getApi();\n    if (!calendarApi) {\n      console.log('❌ No calendar API available');\n      return;\n    }\n\n    const now = new Date();\n\n    // Only works in week/day views\n    if (currentView === 'timeGridWeek' || currentView === 'timeGridDay') {\n      // Set ref flag to prevent auto-scroll from interfering (refs update synchronously)\n      isManualScrollRef.current = true;\n\n      // Scroll to CURRENT time (not 2 hours before - that's for auto-scroll)\n      const scrollTimeStr = now.toTimeString().slice(0, 8);\n\n      console.log('📍 Manual scroll to CURRENT time:', scrollTimeStr);\n\n      // Wait for calendar to be fully rendered, then scroll\n      setTimeout(() => {\n        // Find the ACTUAL scrollable container with visible height (clientHeight > 0)\n        const allScrollers = document.querySelectorAll('[class*=\"fc-scroller\"]');\n        console.log('🔍 Found FullCalendar scroller elements:', allScrollers.length);\n\n        let scrollContainer: HTMLElement | null = null;\n\n        // Find the one that's actually visible and scrollable\n        allScrollers.forEach((el) => {\n          const htmlEl = el as HTMLElement;\n          console.log(`🔎 Checking: ${htmlEl.className}, scrollHeight: ${htmlEl.scrollHeight}px, clientHeight: ${htmlEl.clientHeight}px, scrollTop: ${htmlEl.scrollTop}px`);\n\n          // Must have visible height AND scrollable content\n          if (htmlEl.clientHeight > 0 && htmlEl.scrollHeight > htmlEl.clientHeight) {\n            console.log(`✅ Found VISIBLE scrollable container: ${htmlEl.className}`);\n            if (!scrollContainer) {\n              scrollContainer = htmlEl;\n            }\n          }\n        });\n\n        if (!scrollContainer) {\n          console.error('❌ No visible scrollable container found! Trying window scroll as fallback...');\n\n          // Fallback: Try scrolling the window to show the current time indicator (red line)\n          // Find the red \"now\" indicator line\n          const nowIndicator = document.querySelector('.fc-timegrid-now-indicator-line') as HTMLElement;\n          if (nowIndicator) {\n            const indicatorTop = nowIndicator.getBoundingClientRect().top + window.scrollY;\n            const viewportHeight = window.innerHeight;\n            // Scroll so the red line is 50% down the page (middle of viewport)\n            const targetScroll = indicatorTop - (viewportHeight * 0.5);\n\n            console.log(`🔴 Found now indicator at ${indicatorTop}px, scrolling to ${targetScroll}px (50% down)`);\n\n            window.scrollTo({\n              top: targetScroll,\n              behavior: 'smooth'\n            });\n          } else {\n            // Fallback calculation if red line not found\n            const hours = now.getHours();\n            const minutes = now.getMinutes();\n            const totalMinutes = hours * 60 + minutes;\n            const scrollTop = (totalMinutes / 60) * 48;\n\n            console.log('⚠️ Red line not found, using calculated scroll');\n            window.scrollTo({\n              top: scrollTop,\n              behavior: 'smooth'\n            });\n          }\n\n          // Save scroll position to localStorage\n          if (calendarId) {\n            saveScrollPosition(calendarId, currentView, scrollTimeStr);\n          }\n\n          toast({\n            title: '🕐 Scrolled to current time',\n            description: `Positioned at ${scrollTimeStr}`,\n            status: 'success',\n            duration: 2000,\n            isClosable: true,\n          });\n          return;\n        }\n\n        // TypeScript type assertion after null check\n        const container = scrollContainer as HTMLElement;\n\n        console.log(`📏 BEFORE scroll - scrollTop: ${container.scrollTop}px, scrollHeight: ${container.scrollHeight}px, clientHeight: ${container.clientHeight}px`);\n\n        // Find the red \"now\" indicator line to position it correctly\n        const nowIndicator = document.querySelector('.fc-timegrid-now-indicator-line') as HTMLElement;\n        if (nowIndicator) {\n          // Get the position of the red line relative to the scroll container\n          const indicatorTop = nowIndicator.offsetTop;\n          const containerHeight = container.clientHeight;\n          // Scroll so the red line is 50% down the page (middle of viewport)\n          const targetScroll = indicatorTop - (containerHeight * 0.5);\n\n          console.log(`🔴 Found now indicator at ${indicatorTop}px, scrolling container to ${targetScroll}px (50% down)`);\n\n          container.scrollTo({\n            top: targetScroll,\n            behavior: 'smooth'\n          });\n        } else {\n          // Fallback: Use FullCalendar's API\n          console.log('⚠️ Red line not found, using scrollToTime API');\n          calendarApi.scrollToTime(scrollTimeStr);\n        }\n\n        // Check AFTER setting\n        setTimeout(() => {\n          console.log(`📏 AFTER scroll - scrollTop: ${container.scrollTop}px`);\n\n          // Save scroll position to localStorage\n          if (calendarId) {\n            saveScrollPosition(calendarId, currentView, scrollTimeStr);\n          }\n        }, 100);\n\n        // Reset the ref flag after 3 seconds\n        setTimeout(() => {\n          isManualScrollRef.current = false;\n          console.log('🔓 Manual scroll lock released');\n        }, 3000);\n\n        toast({\n          title: '🕐 Scrolled to current time',\n          description: `Positioned at ${scrollTimeStr}`,\n          status: 'success',\n          duration: 2000,\n          isClosable: true,\n        });\n      }, 600);\n    } else {\n      toast({\n        title: 'Scroll to now only works in Week or Day view',\n        status: 'info',\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return {\n    isManualScrollRef,\n    handleScrollToNow,\n  };\n};\n","import React from 'react';\nimport { Box, Text, HStack, Badge } from '@chakra-ui/react';\nimport { EventContentArg } from '@fullcalendar/core';\n\ninterface CalendarEventContentProps {\n  eventContent: EventContentArg;\n  isMultiCalendar: boolean;\n  calendarsData?: any;\n}\n\n/**\n * Component to render custom event content in FullCalendar\n *\n * Features:\n * - iCal invite badges (inbound/outbound)\n * - Event type icons (SMS, email, standard)\n * - Response status indicators\n * - Multi-calendar name display\n * - Time display in week/day views\n */\nexport const CalendarEventContent: React.FC<CalendarEventContentProps> = ({\n  eventContent,\n  isMultiCalendar,\n  calendarsData,\n}) => {\n  const isInboundICalInvite = eventContent.event.extendedProps?.isInboundICalInvite;\n  const iCalMethod = eventContent.event.extendedProps?.iCalMethod;\n  const responseStatus = eventContent.event.extendedProps?.iCalResponseStatus;\n\n  // Get calendar name if multi-calendar mode\n  const getCalendarName = () => {\n    if (!isMultiCalendar) return null;\n    const calendarId = eventContent.event.extendedProps?.calendarId ||\n                      eventContent.event._def?.extendedProps?.calendarId;\n    if (!calendarId) return null;\n\n    const calendars = calendarsData?.getCalendarsByIds || [];\n    const calendar = calendars.find((cal: any) => cal.id === calendarId);\n    return calendar?.name || null;\n  };\n\n  // Check if this is an outbound iCal invite (created with ICAL_INVITE type)\n  const metadata = eventContent.event.extendedProps?.metadata;\n  const isOutboundICalInvite = metadata?.['X-EVENT-TYPE'] === 'ICAL_INVITE';\n  const eventType = metadata?.['X-EVENT-TYPE'] || 'STANDARD';\n\n  // Determine the event type icon\n  const getEventTypeIcon = () => {\n    if (isInboundICalInvite) return '📨';\n    if (isOutboundICalInvite) return '📤';\n\n    switch(eventType) {\n      case 'SMS_BROADCAST':\n        return '💬';\n      case 'EMAIL_BROADCAST':\n        return '✉️';\n      case 'BOTH_BROADCAST':\n        return '📢';\n      case 'ICAL_INVITE':\n        return '📤';\n      default:\n        return '📅'; // Standard calendar event\n    }\n  };\n\n  // Determine if we should show an iCal badge\n  const showICalBadge = isInboundICalInvite || isOutboundICalInvite;\n\n  return (\n    <Box p={1} cursor=\"pointer\" position=\"relative\">\n      {/* iCal Badge for both inbound and outbound */}\n      {showICalBadge && (\n        <Badge\n          position=\"absolute\"\n          top=\"-2px\"\n          right=\"-2px\"\n          colorScheme={\n            isOutboundICalInvite ? 'purple' :  // Outbound invites are purple\n            iCalMethod === 'CANCEL' ? 'red' :\n            responseStatus === 'ACCEPTED' ? 'green' :\n            responseStatus === 'DECLINED' ? 'red' :\n            responseStatus === 'TENTATIVE' ? 'yellow' :\n            'blue'\n          }\n          fontSize=\"9px\"\n          px={1}\n          borderRadius=\"full\"\n          zIndex={2}\n        >\n          {isOutboundICalInvite ? '📤' :  // Outbound icon\n           iCalMethod === 'CANCEL' ? '❌' :\n           iCalMethod === 'REPLY' ? '💬' :\n           iCalMethod === 'COUNTER' ? '🔀' :\n           '📨'} iCal\n        </Badge>\n      )}\n\n      <HStack spacing={1} align=\"flex-start\">\n        <Text fontSize=\"xs\" flexShrink={0}>\n          {getEventTypeIcon()}\n        </Text>\n        <Text fontSize=\"xs\" fontWeight=\"bold\" noOfLines={1} color=\"white\" flex={1}>\n          {eventContent.event.title}\n        </Text>\n      </HStack>\n\n      {/* Show organizer for inbound iCal invites */}\n      {isInboundICalInvite && eventContent.event.extendedProps?.iCalOrganizerName && (\n        <Text fontSize=\"9px\" opacity={0.8} color=\"white\" noOfLines={1}>\n          from {eventContent.event.extendedProps.iCalOrganizerName}\n        </Text>\n      )}\n\n      {/* Show \"sent by you\" for outbound iCal invites */}\n      {isOutboundICalInvite && (\n        <Text fontSize=\"9px\" opacity={0.8} color=\"white\" noOfLines={1}>\n          sent by you\n        </Text>\n      )}\n\n      {/* Show time in week/day view */}\n      {eventContent.view.type === 'timeGridWeek' && !eventContent.event.allDay && (\n        <Text fontSize=\"xs\" opacity={0.9} color=\"white\">\n          {eventContent.timeText}\n        </Text>\n      )}\n\n      {/* Show calendar name in multi-calendar mode */}\n      {isMultiCalendar && getCalendarName() && (\n        <Text fontSize=\"9px\" opacity={0.7} color=\"white\" noOfLines={1} fontStyle=\"italic\">\n          {getCalendarName()}\n        </Text>\n      )}\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Card, CardBody, HStack, Text, Icon, Button } from '@chakra-ui/react';\nimport { FiClock, FiEye, FiEyeOff } from 'react-icons/fi';\nimport { ArrowBackIcon, AddIcon } from '@chakra-ui/icons';\nimport { useNavigate } from 'react-router-dom';\n\ninterface CalendarHeaderProps {\n  currentDate: Date;\n  secondaryTimezone: string | null;\n  getTimeInSecondaryTimezone: (date: Date, timezone: string) => string;\n  showGoals: boolean;\n  setShowGoals: (show: boolean) => void;\n  setSelectedEvent: (event: any) => void;\n  setIsEventModalOpen: (open: boolean) => void;\n  cardGradientBg: string;\n  cardBorder: string;\n  textSecondary: string;\n  primaryColor: string;\n}\n\n/**\n * Component to render the compact calendar header controls\n *\n * Features:\n * - Current date/time display\n * - Secondary timezone display\n * - Show/Hide Goals toggle\n * - Back navigation button\n * - New Event button\n */\nexport const CalendarHeader: React.FC<CalendarHeaderProps> = ({\n  currentDate,\n  secondaryTimezone,\n  getTimeInSecondaryTimezone,\n  showGoals,\n  setShowGoals,\n  setSelectedEvent,\n  setIsEventModalOpen,\n  cardGradientBg,\n  cardBorder,\n  textSecondary,\n  primaryColor,\n}) => {\n  const navigate = useNavigate();\n\n  return (\n    <Card\n      bg={cardGradientBg}\n      backdropFilter=\"blur(10px)\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      border=\"1px solid\"\n      borderColor={cardBorder}\n    >\n      <CardBody py={2} px={3}>\n        <HStack\n          justify=\"space-between\"\n          align=\"center\"\n        >\n          <HStack spacing={3}>\n            <Text fontSize=\"xs\" color={textSecondary}>\n              {currentDate.toLocaleDateString()}\n            </Text>\n            <HStack spacing={1}>\n              <Icon as={FiClock} color={primaryColor} boxSize={3} />\n              <Text fontSize=\"xs\" color={textSecondary}>\n                {new Date().toLocaleTimeString()}\n              </Text>\n            </HStack>\n            {secondaryTimezone && (\n              <>\n                <Text fontSize=\"xs\" color={textSecondary}>|</Text>\n                <HStack spacing={1}>\n                  <Text fontSize=\"xs\" color=\"cyan.400\">\n                    {secondaryTimezone.split('/').pop()?.replace('_', ' ')}:\n                  </Text>\n                  <Text fontSize=\"xs\" color=\"cyan.300\">\n                    {getTimeInSecondaryTimezone(new Date(), secondaryTimezone)}\n                  </Text>\n                </HStack>\n              </>\n            )}\n          </HStack>\n\n          <HStack spacing={2}>\n            <Button\n              leftIcon={<Icon as={showGoals ? FiEyeOff : FiEye} boxSize={3} />}\n              variant=\"ghost\"\n              onClick={() => setShowGoals(!showGoals)}\n              color={primaryColor}\n              size=\"xs\"\n              fontSize=\"xs\"\n              height=\"24px\"\n              px={2}\n              _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n            >\n              {showGoals ? \"Hide\" : \"Show\"} Goals\n            </Button>\n            <Button\n              leftIcon={<ArrowBackIcon boxSize={3} />}\n              variant=\"ghost\"\n              onClick={() => navigate('/calendars')}\n              color={primaryColor}\n              size=\"xs\"\n              fontSize=\"xs\"\n              height=\"24px\"\n              px={2}\n              _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n            >\n              Back\n            </Button>\n            <Button\n              leftIcon={<AddIcon boxSize={3} />}\n              colorScheme=\"blue\"\n              onClick={() => {\n                setSelectedEvent(null);\n                setIsEventModalOpen(true);\n              }}\n              size=\"xs\"\n              fontSize=\"xs\"\n              height=\"24px\"\n              px={2}\n            >\n              New Event\n            </Button>\n          </HStack>\n        </HStack>\n      </CardBody>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\n\n/**\n * Format the current month and year for display\n */\nexport const getMonthYearDisplay = (currentDate: Date): string => {\n  const months = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  return `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;\n};\n\n/**\n * Helper function to convert time to secondary timezone\n */\nexport const getTimeInSecondaryTimezone = (date: Date, timezone: string): string => {\n  try {\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  } catch {\n    return '';\n  }\n};\n\n/**\n * Helper to get the timezone city name\n */\nexport const getTimezoneName = (timezone: string): string => {\n  return timezone.split('/').pop()?.replace('_', ' ') || timezone;\n};\n\n/**\n * Generate secondary timezone labels for the time grid\n */\nexport const generateSecondaryTimezoneLabels = (\n  secondaryTimezone: string | null,\n  calendar: any,\n  is24HourView: boolean\n): JSX.Element[] | null => {\n  if (!secondaryTimezone || !calendar) return null;\n\n  const labels: JSX.Element[] = [];\n\n  // Get the actual start and end times from calendar settings or defaults\n  const startTime = is24HourView ? \"00:00\" : (calendar.settings?.workingHoursStart || \"08:00\");\n  const endTime = is24HourView ? \"24:00\" : (calendar.settings?.workingHoursEnd || \"18:00\");\n\n  const [startHour] = startTime.split(':').map(Number);\n  const [endHour] = endTime.split(':').map(Number);\n\n  for (let hour = startHour; hour < endHour; hour++) {\n    const localTime = new Date();\n    localTime.setHours(hour, 0, 0, 0);\n\n    const secondaryTime = getTimeInSecondaryTimezone(localTime, secondaryTimezone);\n\n    labels.push(\n      <Box\n        key={hour}\n        height=\"60px\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"flex-end\"\n        pr={2}\n        fontSize=\"11px\"\n        fontWeight=\"500\"\n        color=\"cyan.400\"\n        borderTop={hour === startHour ? \"none\" : \"1px solid\"}\n        borderColor=\"rgba(54, 158, 255, 0.1)\"\n      >\n        {secondaryTime}\n      </Box>\n    );\n  }\n\n  return labels;\n};\n","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardHeader,\n  CardBody,\n  VStack,\n  HStack,\n  Flex,\n  Heading,\n  Text,\n  Button,\n  Badge,\n  Progress,\n  SimpleGrid,\n  Divider,\n  Checkbox,\n  Icon,\n} from '@chakra-ui/react';\nimport { StarIcon } from '@chakra-ui/icons';\nimport { FiTarget, FiUser } from 'react-icons/fi';\nimport { getMonthYearDisplay } from '../utils/timezoneHelpers';\n\ninterface MonthlyGoalsCardProps {\n  currentDate: Date;\n  localGoals: any[] | null;\n  clientsData: any;\n  selectedGoalId: string | null;\n  setSelectedGoalId: (id: string | null) => void;\n  setIsGoalsModalOpen: (open: boolean) => void;\n  handleToggleCheckpoint: (goalId: string, checkpointId: string, completed: boolean) => void;\n  cardGradientBg: string;\n  cardBorder: string;\n  textPrimary: string;\n  textSecondary: string;\n  primaryColor: string;\n}\n\n/**\n * Component to display monthly goals with progress tracking\n *\n * Features:\n * - Month progress calendar view\n * - Goal cards with checkpoints/tasks\n * - Dependency tracking between goals\n * - Client assignment display\n * - Progress percentage indicators\n * - Interactive checkbox task completion\n */\nexport const MonthlyGoalsCard: React.FC<MonthlyGoalsCardProps> = ({\n  currentDate,\n  localGoals,\n  clientsData,\n  selectedGoalId,\n  setSelectedGoalId,\n  setIsGoalsModalOpen,\n  handleToggleCheckpoint,\n  cardGradientBg,\n  cardBorder,\n  textPrimary,\n  textSecondary,\n  primaryColor,\n}) => {\n  return (\n    <Box\n      position=\"sticky\"\n      top=\"0\"\n      zIndex={10}\n      mb={4}\n    >\n      <Card\n        bg={cardGradientBg}\n        backdropFilter=\"blur(10px)\"\n        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n        border=\"1px solid\"\n        borderColor={cardBorder}\n      >\n        <CardHeader pb={2}>\n          <VStack align=\"stretch\" spacing={3}>\n            <Flex justify=\"space-between\" align=\"center\" flexWrap=\"wrap\" gap={2}>\n              <HStack flex=\"1\" minW=\"200px\">\n                <Icon as={StarIcon} color={primaryColor} boxSize={{ base: 4, md: 5 }} />\n                <Heading size={{ base: \"sm\", md: \"md\" }} color={textPrimary}>\n                  {getMonthYearDisplay(currentDate)} Goals\n                </Heading>\n              </HStack>\n              <Button\n                size={{ base: \"xs\", md: \"sm\" }}\n                colorScheme=\"blue\"\n                onClick={() => setIsGoalsModalOpen(true)}\n              >\n                Edit Goals\n              </Button>\n            </Flex>\n\n            {/* Month Progress Indicator */}\n            <Box\n              p={3}\n              bg=\"rgba(255, 255, 255, 0.02)\"\n              borderRadius=\"md\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n            >\n              <HStack justify=\"space-between\" mb={2}>\n                <Text fontSize=\"xs\" color={textSecondary} fontWeight=\"semibold\">\n                  MONTH PROGRESS\n                </Text>\n                <Text fontSize=\"xs\" color={primaryColor} fontWeight=\"bold\">\n                  Day {new Date().getDate()} of {new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()}\n                </Text>\n              </HStack>\n              <SimpleGrid columns={{ base: 10, sm: 15, md: 31 }} spacing={1} width=\"100%\">\n                {Array.from({ length: new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate() }, (_, i) => {\n                  const dayNum = i + 1;\n                  const today = new Date().getDate();\n                  const isPast = dayNum < today;\n                  const isToday = dayNum === today;\n\n                  return (\n                    <Flex\n                      key={dayNum}\n                      position=\"relative\"\n                      minW=\"25px\"\n                      h=\"25px\"\n                      alignItems=\"center\"\n                      justifyContent=\"center\"\n                      fontSize={{ base: \"10px\", md: \"11px\" }}\n                      fontWeight={isToday ? \"bold\" : \"normal\"}\n                      color={isPast ? textSecondary : (isToday ? primaryColor : textPrimary)}\n                      bg={isToday ? \"rgba(59, 130, 246, 0.2)\" : (isPast ? \"rgba(0, 0, 0, 0.2)\" : \"transparent\")}\n                      borderRadius=\"sm\"\n                      border={isToday ? \"1px solid\" : \"none\"}\n                      borderColor={primaryColor}\n                      opacity={isPast && !isToday ? 0.5 : 1}\n                      transition=\"all 0.2s\"\n                      overflow=\"hidden\"\n                      _hover={!isPast ? {\n                        bg: \"rgba(59, 130, 246, 0.1)\",\n                        transform: \"scale(1.1)\"\n                      } : {}}\n                    >\n                      {isPast && !isToday && (\n                        <Box\n                          position=\"absolute\"\n                          top=\"50%\"\n                          left=\"-50%\"\n                          right=\"-50%\"\n                          height=\"1px\"\n                          bg={textSecondary}\n                          transform=\"rotate(-45deg)\"\n                        />\n                      )}\n                      {dayNum}\n                    </Flex>\n                  );\n                })}\n              </SimpleGrid>\n              <Progress\n                value={(new Date().getDate() / new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()) * 100}\n                size=\"xs\"\n                colorScheme=\"blue\"\n                mt={2}\n                borderRadius=\"full\"\n              />\n            </Box>\n\n            <Flex justify=\"space-between\" align=\"center\" flexWrap=\"wrap\" gap={2}>\n              {localGoals && localGoals.length > 0 && (\n                <Badge colorScheme=\"green\" fontSize={{ base: \"xs\", md: \"sm\" }}>\n                  {localGoals.reduce((acc: number, goal: any) =>\n                    acc + goal.checkpoints.filter((t: any) => t.completed).length, 0\n                  )} / {localGoals.reduce((acc: number, goal: any) =>\n                    acc + goal.checkpoints.length, 0\n                  )} tasks\n                </Badge>\n              )}\n              <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textSecondary}>\n                Progress: {(localGoals && localGoals.length > 0)\n                  ? Math.round(localGoals.reduce((acc: number, g: any) => acc + g.progressPercentage, 0) / localGoals.length)\n                  : 0}%\n              </Text>\n            </Flex>\n          </VStack>\n        </CardHeader>\n        <CardBody pt={2}>\n          {!localGoals || localGoals.length === 0 ? (\n            <Box textAlign=\"center\" py={8}>\n              <Text color={textSecondary} mb={4}>No goals set for this month</Text>\n              <Button\n                colorScheme=\"blue\"\n                onClick={() => setIsGoalsModalOpen(true)}\n              >\n                Add Your First Goal\n              </Button>\n            </Box>\n          ) : (\n            <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={4}>\n              {localGoals.map((goal: any) => {\n                // Find if this goal depends on another\n                const dependsOn = goal.parentGoalId ? localGoals.find((g: any) => g.id === goal.parentGoalId) : null;\n                const isBlocked = dependsOn && dependsOn.progressPercentage < 100;\n\n                // Find assigned client\n                const assignedClient = goal.assignedTo && clientsData?.clients ?\n                  clientsData.clients.find((c: any) => c.id === goal.assignedTo) : null;\n\n                return (\n                  <Box\n                    key={goal.id}\n                    p={4}\n                    bg=\"rgba(255, 255, 255, 0.03)\"\n                    borderRadius=\"lg\"\n                    border=\"1px solid\"\n                    borderColor={isBlocked ? 'orange.500' : cardBorder}\n                    position=\"relative\"\n                    opacity={isBlocked ? 0.7 : 1}\n                    transition=\"all 0.2s\"\n                    cursor=\"pointer\"\n                    onClick={() => {\n                      setSelectedGoalId(goal.id);\n                      setIsGoalsModalOpen(true);\n                    }}\n                    _hover={{\n                      bg: \"rgba(255, 255, 255, 0.05)\",\n                      transform: !isBlocked ? \"translateY(-2px)\" : \"none\",\n                      boxShadow: !isBlocked ? \"0 4px 12px rgba(0,0,0,0.15)\" : \"none\"\n                    }}\n                  >\n                    {/* Dependency indicator */}\n                    {dependsOn && (\n                      <Box\n                        position=\"absolute\"\n                        top=\"-10px\"\n                        left=\"10px\"\n                        bg={isBlocked ? \"orange.500\" : \"green.500\"}\n                        color=\"white\"\n                        fontSize=\"10px\"\n                        px={2}\n                        py={0.5}\n                        borderRadius=\"full\"\n                        fontWeight=\"bold\"\n                        zIndex={1}\n                      >\n                        {isBlocked ? `Blocked by: ${dependsOn.title.slice(0, 20)}...` : `✓ Dependency met`}\n                      </Box>\n                    )}\n\n                    <VStack align=\"stretch\" spacing={3}>\n                      <HStack justify=\"space-between\">\n                        <HStack>\n                          <Icon\n                            as={goal.icon || FiTarget}\n                            color={isBlocked ? 'orange.400' : (goal.color || 'blue.400')}\n                            boxSize={5}\n                          />\n                          <Text\n                            fontSize=\"xs\"\n                            fontWeight=\"bold\"\n                            color={isBlocked ? 'orange.400' : (goal.color || 'blue.400')}\n                            textTransform=\"uppercase\"\n                          >\n                            {goal.category}\n                          </Text>\n                        </HStack>\n                        <Badge\n                          colorScheme={isBlocked ? 'orange' : (goal.progressPercentage >= 70 ? 'green' : goal.progressPercentage >= 40 ? 'yellow' : 'red')}\n                          fontSize=\"xs\"\n                        >\n                          {isBlocked ? '🔒' : ''} {goal.progressPercentage}%\n                        </Badge>\n                      </HStack>\n\n                      <VStack align=\"stretch\" spacing={1}>\n                        <Text color={textPrimary} fontWeight=\"semibold\" fontSize=\"sm\">\n                          {goal.title}\n                        </Text>\n                        {assignedClient && (\n                          <HStack spacing={1}>\n                            <Icon as={FiUser} color={textSecondary} boxSize={3} />\n                            <Text fontSize=\"xs\" color={textSecondary}>\n                              {assignedClient.fName} {assignedClient.lName}\n                            </Text>\n                          </HStack>\n                        )}\n                        <HStack justify=\"space-between\">\n                          <Text fontSize=\"xs\" color={textSecondary}>\n                            Current: {goal.currentValue || '0'}\n                          </Text>\n                          <Text fontSize=\"xs\" color={primaryColor} fontWeight=\"bold\">\n                            Target: {goal.targetValue || '1'}\n                          </Text>\n                        </HStack>\n                      </VStack>\n\n                      <Progress\n                        value={goal.progressPercentage || 0}\n                        size=\"sm\"\n                        colorScheme={goal.color ? goal.color.replace('#', '').toLowerCase() : 'blue'}\n                        borderRadius=\"full\"\n                        bg=\"rgba(255, 255, 255, 0.1)\"\n                        hasStripe\n                        isAnimated\n                      />\n\n                      <Divider borderColor={cardBorder} />\n\n                      <VStack align=\"stretch\" spacing={1}>\n                        {(goal.checkpoints || goal.tasks || []).slice(0, 3).map((task: any) => (\n                          <HStack key={task.id} spacing={2} align=\"flex-start\">\n                            <Checkbox\n                              isChecked={task.completed}\n                              onChange={(e) => {\n                                if (goal.id && task.id) {\n                                  handleToggleCheckpoint(goal.id, task.id, e.target.checked);\n                                }\n                              }}\n                              size=\"sm\"\n                              colorScheme={goal.color ? goal.color.replace('#', '').toLowerCase() : 'blue'}\n                              mt={0.5}\n                            />\n                            <Text\n                              fontSize=\"xs\"\n                              color={task.completed ? textSecondary : textPrimary}\n                              textDecoration={task.completed ? 'line-through' : 'none'}\n                              flex=\"1\"\n                              wordBreak=\"break-word\"\n                            >\n                              {task.title || task.text || 'Untitled task'}\n                            </Text>\n                          </HStack>\n                        ))}\n                        {(goal.checkpoints?.length || goal.tasks?.length || 0) > 3 && (\n                          <Text fontSize=\"xs\" color={textSecondary} fontStyle=\"italic\">\n                            +{(goal.checkpoints?.length || goal.tasks?.length || 0) - 3} more tasks...\n                          </Text>\n                        )}\n                      </VStack>\n                    </VStack>\n                  </Box>\n                );\n              })}\n            </SimpleGrid>\n          )}\n        </CardBody>\n      </Card>\n    </Box>\n  );\n};\n","import React from 'react';\nimport {\n  Flex,\n  HStack,\n  VStack,\n  Button,\n  IconButton,\n  Heading,\n  Text,\n  Badge,\n  Divider,\n  Alert,\n  AlertIcon,\n  Icon,\n  Tooltip,\n  Link as ChakraLink,\n} from '@chakra-ui/react';\nimport { ChevronLeftIcon, ChevronRightIcon, CalendarIcon, TimeIcon, InfoIcon } from '@chakra-ui/icons';\nimport { useNavigate } from 'react-router-dom';\nimport { getMonthYearDisplay } from '../utils/timezoneHelpers';\n\ninterface CalendarToolbarProps {\n  currentView: string;\n  currentDate: Date;\n  isMultiCalendar: boolean;\n  calendarIds: string[];\n  calendar: any;\n  calendarsData: any;\n  linkedEmailData: any;\n  filteredEvents: any[];\n  calendarColorMap: Map<string, string>;\n  is24HourView: boolean;\n  handleToday: () => void;\n  handleScrollToNow: () => void;\n  handlePrevious: () => void;\n  handleNext: () => void;\n  handleViewChange: (view: string) => void;\n  setIs24HourView: (value: boolean) => void;\n  updateUrlParams: (params: any) => void;\n  textPrimary: string;\n  textSecondary: string;\n  primaryColor: string;\n  primaryHover: string;\n  cardBorder: string;\n}\n\n/**\n * Component to render the calendar toolbar controls (single Flex row)\n *\n * Features:\n * - Navigation controls (Today, Previous, Next)\n * - Scroll to Now button (week/day views)\n * - Month/Year display\n * - Calendar information display\n * - Multi-calendar badges\n * - Email listening status alert\n * - View switcher (Month/Week/Day)\n * - Business/24h hours toggle\n */\nexport const CalendarToolbar: React.FC<CalendarToolbarProps> = ({\n  currentView,\n  currentDate,\n  isMultiCalendar,\n  calendarIds,\n  calendar,\n  calendarsData,\n  linkedEmailData,\n  filteredEvents,\n  calendarColorMap,\n  is24HourView,\n  handleToday,\n  handleScrollToNow,\n  handlePrevious,\n  handleNext,\n  handleViewChange,\n  setIs24HourView,\n  updateUrlParams,\n  textPrimary,\n  textSecondary,\n  primaryColor,\n  primaryHover,\n  cardBorder,\n}) => {\n  const navigate = useNavigate();\n\n  return (\n    <Flex\n        width=\"100%\"\n        align=\"center\"\n        justify=\"space-between\"\n        flexWrap={{ base: \"wrap\", md: \"nowrap\" }}\n        gap={4}\n      >\n        {/* Left side: Navigation, Month/Year, and Calendar Info */}\n        <HStack spacing={{ base: 2, md: 4 }} flex=\"1\" align=\"center\">\n          <Button\n            onClick={handleToday}\n            variant=\"outline\"\n            borderColor={primaryColor}\n            color={primaryColor}\n            _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n            size={{ base: \"sm\", md: \"md\" }}\n            fontWeight=\"medium\"\n          >\n            Today\n          </Button>\n\n          {/* Scroll to Now button - only show in week/day views */}\n          {(currentView === 'timeGridWeek' || currentView === 'timeGridDay') && (\n            <Button\n              onClick={handleScrollToNow}\n              variant=\"ghost\"\n              colorScheme=\"blue\"\n              leftIcon={<TimeIcon />}\n              size={{ base: \"sm\", md: \"md\" }}\n              fontWeight=\"medium\"\n              title=\"Scroll to current time\"\n            >\n              <Text display={{ base: \"none\", md: \"block\" }}>Now</Text>\n            </Button>\n          )}\n\n          <HStack spacing={1}>\n            <IconButton\n              aria-label=\"Previous month\"\n              icon={<ChevronLeftIcon />}\n              onClick={handlePrevious}\n              variant=\"ghost\"\n              color={textPrimary}\n              _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n              size={{ base: \"xs\", md: \"sm\" }}\n            />\n            <IconButton\n              aria-label=\"Next month\"\n              icon={<ChevronRightIcon />}\n              onClick={handleNext}\n              variant=\"ghost\"\n              color={textPrimary}\n              _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n              size={{ base: \"xs\", md: \"sm\" }}\n            />\n          </HStack>\n\n          <Heading size={{ base: \"sm\", md: \"md\" }} color={textPrimary} fontWeight=\"semibold\">\n            {getMonthYearDisplay(currentDate)}\n          </Heading>\n\n          <Divider orientation=\"vertical\" height=\"20px\" borderColor={cardBorder} />\n\n          {/* Calendar Info Inline */}\n          <VStack align=\"start\" spacing={0}>\n            {/* Email Listening Status - Show for single calendar only */}\n            {!isMultiCalendar && (\n              <>\n                {linkedEmailData?.getLinkedEmailForCalendar ? (\n                  <Alert status=\"info\" variant=\"subtle\" bg=\"rgba(59, 130, 246, 0.1)\" borderRadius=\"md\" py={1} px={3} mb={2}>\n                    <AlertIcon boxSize=\"14px\" color={primaryColor} />\n                    <Text fontSize=\"xs\" color={textPrimary}>\n                      📧 Listening for calendar invites on <strong>{linkedEmailData.getLinkedEmailForCalendar}</strong>\n                    </Text>\n                    <Tooltip\n                      label={\n                        <VStack align=\"start\" spacing={2} p={1}>\n                          <Text fontSize=\"xs\" fontWeight=\"semibold\">How Email-to-Calendar Linking Works:</Text>\n                          <Text fontSize=\"xs\">\n                            Email addresses can have a <strong>primary calendar</strong> and <strong>additional linked calendars</strong>.\n                          </Text>\n                          <Text fontSize=\"xs\">\n                            When calendar invites (.ics files) are sent to an email address, they automatically appear on all linked calendars.\n                          </Text>\n                          <ChakraLink\n                            href=\"/emails/admin/accounts\"\n                            color=\"blue.300\"\n                            textDecoration=\"underline\"\n                            fontSize=\"xs\"\n                            fontWeight=\"semibold\"\n                          >\n                            Manage Email Accounts →\n                          </ChakraLink>\n                        </VStack>\n                      }\n                      placement=\"bottom\"\n                      hasArrow\n                      bg=\"gray.800\"\n                      color=\"white\"\n                      borderRadius=\"md\"\n                      p={3}\n                      maxW=\"350px\"\n                    >\n                      <IconButton\n                        aria-label=\"Email linking info\"\n                        icon={<InfoIcon />}\n                        size=\"xs\"\n                        variant=\"ghost\"\n                        color={primaryColor}\n                        ml={2}\n                        _hover={{ bg: 'rgba(59, 130, 246, 0.2)' }}\n                      />\n                    </Tooltip>\n                  </Alert>\n                ) : (\n                  <Alert status=\"warning\" variant=\"subtle\" bg=\"rgba(251, 191, 36, 0.1)\" borderRadius=\"md\" py={1} px={3} mb={2}>\n                    <AlertIcon boxSize=\"14px\" color=\"orange.400\" />\n                    <Text fontSize=\"xs\" color={textPrimary}>\n                      This calendar is not listening on any emails.\n                    </Text>\n                    <Tooltip\n                      label={\n                        <VStack align=\"start\" spacing={2} p={1}>\n                          <Text fontSize=\"xs\" fontWeight=\"semibold\">Set Up Email Listening:</Text>\n                          <Text fontSize=\"xs\">\n                            To receive calendar invites via email, link this calendar to an email address.\n                          </Text>\n                          <Text fontSize=\"xs\">\n                            You can set it as the <strong>primary calendar</strong> for an email address, or add it as an <strong>additional linked calendar</strong>.\n                          </Text>\n                          <ChakraLink\n                            href=\"/emails/admin/accounts\"\n                            color=\"blue.300\"\n                            textDecoration=\"underline\"\n                            fontSize=\"xs\"\n                            fontWeight=\"semibold\"\n                          >\n                            Manage Email Accounts →\n                          </ChakraLink>\n                        </VStack>\n                      }\n                      placement=\"bottom\"\n                      hasArrow\n                      bg=\"gray.800\"\n                      color=\"white\"\n                      borderRadius=\"md\"\n                      p={3}\n                      maxW=\"350px\"\n                    >\n                      <IconButton\n                        aria-label=\"Email linking info\"\n                        icon={<InfoIcon />}\n                        size=\"xs\"\n                        variant=\"ghost\"\n                        color=\"orange.400\"\n                        ml={2}\n                        _hover={{ bg: 'rgba(251, 191, 36, 0.2)' }}\n                      />\n                    </Tooltip>\n                  </Alert>\n                )}\n              </>\n            )}\n            {isMultiCalendar ? (\n              <VStack align=\"start\" spacing={1}>\n                <HStack spacing={2}>\n                  <CalendarIcon color={primaryColor} boxSize={4} />\n                  <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textPrimary}>\n                    Multi-Calendar View ({calendarIds.length} calendars)\n                  </Text>\n                  <Badge colorScheme=\"green\" size=\"sm\">\n                    {filteredEvents.length} Events\n                  </Badge>\n                </HStack>\n                <HStack spacing={2} flexWrap=\"wrap\">\n                  {calendarsData?.getCalendarsByIds?.map((cal: any) => (\n                    <Badge\n                      key={cal.id}\n                      px={2}\n                      py={1}\n                      borderRadius=\"md\"\n                      bg={calendarColorMap.get(cal.id) || '#3B82F6'}\n                      color=\"white\"\n                      fontSize=\"xs\"\n                      cursor=\"pointer\"\n                      _hover={{\n                        opacity: 0.8,\n                        transform: 'scale(1.05)',\n                        transition: 'all 0.2s'\n                      }}\n                      onClick={() => window.open(`/calendars/${cal.id}/view`, '_blank')}\n                    >\n                      {cal.name}\n                    </Badge>\n                  ))}\n                </HStack>\n              </VStack>\n            ) : (\n              <HStack spacing={2}>\n                <CalendarIcon color={primaryColor} boxSize={4} />\n                <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textPrimary}>\n                  {calendar?.name}\n                </Text>\n                <Badge colorScheme=\"blue\" size=\"sm\">{calendar?.type}</Badge>\n                {calendar?.type === 'PERSONAL' && (\n                  <Badge colorScheme=\"purple\" size=\"sm\">Personal</Badge>\n                )}\n                <Badge colorScheme=\"green\" size=\"sm\">\n                  {filteredEvents.length} Events\n                </Badge>\n                <Button\n                  size=\"xs\"\n                  variant=\"ghost\"\n                  color={primaryColor}\n                  onClick={() => navigate(`/calendars/${calendar?.id}`)}\n                  _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n                >\n                  Settings\n                </Button>\n              </HStack>\n            )}\n            {!isMultiCalendar && calendar?.description && (\n              <Text fontSize=\"xs\" color={textSecondary} pl={6}>\n                {calendar.description}\n              </Text>\n            )}\n          </VStack>\n        </HStack>\n\n        {/* Right side: View switcher */}\n        <HStack spacing={{ base: 1, md: 2 }}>\n          <Button\n            size={{ base: \"xs\", md: \"sm\" }}\n            onClick={() => handleViewChange('dayGridMonth')}\n            bg={currentView === 'dayGridMonth' ? primaryColor : 'transparent'}\n            color={currentView === 'dayGridMonth' ? 'white' : textPrimary}\n            _hover={{ bg: currentView === 'dayGridMonth' ? primaryHover : \"rgba(59, 130, 246, 0.1)\" }}\n            borderRadius=\"md\"\n            px={{ base: 2, md: 4 }}\n          >\n            Month\n          </Button>\n          <Button\n            size={{ base: \"xs\", md: \"sm\" }}\n            onClick={() => handleViewChange('timeGridWeek')}\n            bg={currentView === 'timeGridWeek' ? primaryColor : 'transparent'}\n            color={currentView === 'timeGridWeek' ? 'white' : textPrimary}\n            _hover={{ bg: currentView === 'timeGridWeek' ? primaryHover : \"rgba(59, 130, 246, 0.1)\" }}\n            borderRadius=\"md\"\n            px={{ base: 2, md: 4 }}\n          >\n            Week\n          </Button>\n          <Button\n            size={{ base: \"xs\", md: \"sm\" }}\n            onClick={() => handleViewChange('timeGridDay')}\n            bg={currentView === 'timeGridDay' ? primaryColor : 'transparent'}\n            color={currentView === 'timeGridDay' ? 'white' : textPrimary}\n            _hover={{ bg: currentView === 'timeGridDay' ? primaryHover : \"rgba(59, 130, 246, 0.1)\" }}\n            borderRadius=\"md\"\n            px={{ base: 2, md: 4 }}\n          >\n            Day\n          </Button>\n          {(currentView === 'timeGridWeek' || currentView === 'timeGridDay') && (\n            <>\n              <Divider orientation=\"vertical\" height=\"20px\" borderColor={textSecondary} opacity={0.3} />\n              <Button\n                size={{ base: \"xs\", md: \"sm\" }}\n                onClick={() => {\n                  const new24HourView = !is24HourView;\n                  setIs24HourView(new24HourView);\n                  // Update URL with hours parameter\n                  updateUrlParams({ hours: new24HourView ? '24' : 'business' });\n                }}\n                bg={is24HourView ? primaryColor : 'transparent'}\n                color={is24HourView ? 'white' : textPrimary}\n                _hover={{ bg: is24HourView ? primaryHover : \"rgba(59, 130, 246, 0.1)\" }}\n                borderRadius=\"md\"\n                px={{ base: 2, md: 4 }}\n                leftIcon={<Icon as={TimeIcon} boxSize={{ base: 3, md: 4 }} />}\n              >\n                {is24HourView ? \"Business\" : \"24h\"}\n              </Button>\n            </>\n          )}\n        </HStack>\n      </Flex>\n  );\n};\n","// ============================================================================\n// IMPORTANT: CALENDAR SCROLL BEHAVIOR DOCUMENTATION\n// ============================================================================\n// This calendar has specific scroll behavior that must be preserved:\n//\n// 1. AUTO-SCROLL TO CURRENT TIME:\n//    - Happens when: Switching to Week/Day view, pressing Today button\n//    - Shows current time at ~40% from top of viewport\n//\n// 2. PRESERVE SCROLL POSITION:\n//    - Happens when: Creating or editing events\n//    - User stays at exact same position after modal closes\n//    - Controlled by: isPreservingView flag\n//\n// 3. KEY IMPLEMENTATION:\n//    - isPreservingView flag prevents auto-scroll after save\n//    - useEffect at line ~450 checks this flag\n//    - onSuccess handlers set this flag before refreshing\n//\n// DO NOT MODIFY SCROLL BEHAVIOR WITHOUT UNDERSTANDING THESE INTERACTIONS\n// ============================================================================\n\nimport React, { useState, createRef, useMemo, useRef } from \"react\";\nimport {\n  Box,\n  Container,\n  Heading,\n  VStack,\n  Text,\n  Button,\n  Badge,\n  HStack,\n  Card,\n  CardHeader,\n  CardBody,\n  Spinner,\n  Alert,\n  AlertIcon,\n  IconButton,\n  Flex,\n  Checkbox,\n  Progress,\n  Divider,\n  SimpleGrid,\n  Icon,\n  useColorMode,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { ChevronLeftIcon, ChevronRightIcon, CalendarIcon, ArrowBackIcon, StarIcon, TimeIcon, AddIcon } from \"@chakra-ui/icons\";\nimport { FiTarget, FiEye, FiEyeOff, FiClock, FiUser } from \"react-icons/fi\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport { useEffect } from 'react'\nimport { EventInput, EventContentArg } from \"@fullcalendar/core\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport { useParams, useNavigate, useSearchParams } from \"react-router-dom\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport { calendarsModuleConfig } from \"./moduleConfig\";\nimport { brandConfig, getColor } from \"../../brandConfig\";\nimport EventModal from \"./EventModal\";\nimport GoalsModal from \"./GoalsModal\";\nimport { ICalInviteModal } from \"./ICalInviteModal\";\nimport { FloatingEventFilter } from \"./FloatingEventFilter\";\nimport { useDocumentTitle } from \"../../hooks/useDocumentTitle\";\nimport { useCalendarScroll } from \"./hooks/useCalendarScroll\";\nimport { useCalendarFilters } from \"./hooks/useCalendarFilters\";\nimport { useCalendarModals } from \"./hooks/useCalendarModals\";\nimport { useCalendarEventHandlers } from \"./hooks/useCalendarEventHandlers\";\nimport { useCalendarNavigation } from \"./hooks/useCalendarNavigation\";\nimport { CalendarEventContent } from \"./components/CalendarEventContent\";\nimport { CalendarHeader } from \"./components/CalendarHeader\";\nimport { MonthlyGoalsCard } from \"./components/MonthlyGoalsCard\";\nimport { CalendarToolbar } from \"./components/CalendarToolbar\";\nimport {\n  getMonthYearDisplay,\n  getTimeInSecondaryTimezone,\n  getTimezoneName,\n  generateSecondaryTimezoneLabels,\n} from \"./utils/timezoneHelpers\";\n\n// GraphQL Queries\nconst GET_CALENDARS_BY_IDS = gql`\n  query GetCalendarsByIds($ids: [String!]!) {\n    getCalendarsByIds(ids: $ids) {\n      id\n      name\n      description\n      type\n      color\n      responsibleOwnerId\n      settings {\n        timezone\n        workingHoursStart\n        workingHoursEnd\n        workingDays\n      }\n      isActive\n    }\n  }\n`;\n\nconst GET_CALENDAR = gql`\n  query GetCalendar($id: String!) {\n    calendar(id: $id) {\n      id\n      name\n      description\n      type\n      color\n      responsibleOwnerId\n      settings {\n        timezone\n        workingHoursStart\n        workingHoursEnd\n        workingDays\n      }\n      isActive\n    }\n  }\n`;\n\nconst GET_LINKED_EMAIL = gql`\n  query GetLinkedEmailForCalendar($calendarId: String!, $tenantId: String) {\n    getLinkedEmailForCalendar(calendarId: $calendarId, tenantId: $tenantId)\n  }\n`;\n\nconst GET_MULTI_CALENDAR_EVENTS = gql`\n  query GetMultiCalendarEvents($calendarIds: [String!]!, $startDate: String, $endDate: String) {\n    multiCalendarEvents(calendarIds: $calendarIds, startDate: $startDate, endDate: $endDate) {\n      id\n      calendarId\n      title\n      description\n      startTime\n      endTime\n      isAllDay\n      status\n      color\n      categories\n      location {\n        name\n        address\n      }\n      attendees {\n        clientId\n        email\n        name\n        status\n      }\n      isCancelled\n      isInboundICalInvite\n      iCalMethod\n      iCalResponseStatus\n      iCalOrganizerName\n      iCalOrganizerEmail\n      metadata\n    }\n  }\n`;\n\nconst GET_CALENDAR_EVENTS = gql`\n  query GetCalendarEvents($calendarId: String!, $startDate: String, $endDate: String) {\n    calendarEvents(calendarId: $calendarId, startDate: $startDate, endDate: $endDate) {\n      id\n      calendarId\n      title\n      description\n      startTime\n      endTime\n      isAllDay\n      status\n      color\n      categories\n      location {\n        name\n        address\n      }\n      attendees {\n        clientId\n        email\n        name\n        status\n      }\n      isCancelled\n      isInboundICalInvite\n      iCalMethod\n      iCalResponseStatus\n      iCalOrganizerName\n      iCalOrganizerEmail\n      metadata\n    }\n  }\n`;\n\nconst GET_CURRENT_MONTH_GOALS = gql`\n  query GetCurrentMonthGoals($calendarId: String!) {\n    currentMonthGoals(calendarId: $calendarId) {\n      id\n      title\n      description\n      category\n      progressPercentage\n      currentValue\n      targetValue\n      checkpoints {\n        id\n        title\n        completed\n      }\n      color\n      parentGoalId\n      assignedTo\n    }\n  }\n`;\n\nconst GET_CLIENTS_FOR_GOALS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      businessName\n    }\n  }\n`;\n\nconst GET_EXTERNAL_CALENDARS = gql`\n  query GetExternalCalendars {\n    getExternalCalendars {\n      id\n      name\n      type\n      iCalUrl\n      color\n      sharedFromName\n      sharedFromEmail\n      isActive\n    }\n  }\n`;\n\nconst UPDATE_CHECKPOINT = gql`\n  mutation UpdateGoalCheckpoint($input: UpdateGoalCheckpointInput!) {\n    updateGoalCheckpoint(input: $input) {\n      id\n      progressPercentage\n      checkpoints {\n        id\n        completed\n      }\n    }\n  }\n`;\n\nconst GET_CALENDAR_TAGS = gql`\n  query GetCalendarTags($calendarId: String!) {\n    calendarTags(calendarId: $calendarId) {\n      id\n      name\n      color\n      description\n      usageCount\n    }\n  }\n`;\n\nconst UPDATE_EVENT = gql`\n  mutation UpdateEvent($id: String!, $input: CalendarEventInput!) {\n    updateEvent(id: $id, input: $input) {\n      id\n      title\n      startTime\n      endTime\n    }\n  }\n`;\n\nconst CalendarView: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { colorMode } = useColorMode();\n  const toast = useToast();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const calendarRef = createRef<FullCalendar>();\n\n  // Parse calendar IDs from URL (support both single and multiple)\n  const calendarIds = useMemo(() => {\n    const calendarParam = searchParams.get('calendars');\n    if (calendarParam) {\n      // Multiple calendars from URL parameter\n      return calendarParam.split(',').filter(Boolean);\n    } else if (id) {\n      // Single calendar from route parameter\n      return [id];\n    }\n    return [];\n  }, [id, searchParams]);\n\n  const isMultiCalendar = calendarIds.length > 1;\n\n  // Brand colors\n  const bgMain = getColor('background.main', colorMode);\n  const cardGradientBg = getColor('background.cardGradient', colorMode);\n  const cardBorder = getColor('border.darkCard', colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? 'text.primary' : 'text.primaryDark', colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? 'text.secondary' : 'text.secondaryDark', colorMode);\n  const primaryColor = getColor('primary', colorMode);\n  const primaryHover = getColor('primaryHover', colorMode);\n  \n  // Get initial values from URL parameters\n  const getInitialView = (): string => {\n    const viewParam = searchParams.get('view');\n    const validViews = ['dayGridMonth', 'timeGridWeek', 'timeGridDay'];\n    return validViews.includes(viewParam || '') ? viewParam! : 'dayGridMonth';\n  };\n  \n  const getInitialDate = () => {\n    const dateParam = searchParams.get('date');\n    if (dateParam) {\n      const parsedDate = new Date(dateParam);\n      return isNaN(parsedDate.getTime()) ? new Date() : parsedDate;\n    }\n    return new Date();\n  };\n  \n  const getInitial24HourView = () => {\n    const hoursParam = searchParams.get('hours');\n    // Default to 24-hour view if no parameter is set\n    if (!hoursParam) return true;\n    return hoursParam === '24';\n  };\n  \n  const [currentView, setCurrentView] = useState(getInitialView());\n  const [currentDate, setCurrentDate] = useState(getInitialDate());\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [is24HourView, setIs24HourView] = useState(getInitial24HourView());\n  const [localGoals, setLocalGoals] = useState<any[]>([]);\n  const [showGoals, setShowGoals] = useState(false); // Hide goals by default\n  const [selectedGoalId, setSelectedGoalId] = useState<string | null>(null);\n\n  // Modal state management hook\n  const {\n    selectedEvent,\n    setSelectedEvent,\n    isEventModalOpen,\n    setIsEventModalOpen,\n    isCreateModalOpen,\n    setIsCreateModalOpen,\n    newEventDate,\n    setNewEventDate,\n    selectedTimeRange,\n    setSelectedTimeRange,\n    isICalModalOpen,\n    setIsICalModalOpen,\n    selectedICalInvite,\n    setSelectedICalInvite,\n    isGoalsModalOpen,\n    setIsGoalsModalOpen,\n    openCreateModal,\n    openEditModal,\n    openICalModal,\n  } = useCalendarModals();\n\n  // CRITICAL: DO NOT REMOVE OR MODIFY THIS FLAG\n  // This preserves the user's exact scroll position and view after creating/editing events\n  // Without this, the calendar would jump to current time after every save, disorienting users\n  // Works in conjunction with the useEffect hook that checks this flag before auto-scrolling\n  const [isPreservingView, setIsPreservingView] = useState(false); // Flag to prevent view reset during save\n  const [secondaryTimezone, setSecondaryTimezone] = useState<string | null>(null);\n  const [visibleExternalCalendars, setVisibleExternalCalendars] = useState<Set<string>>(new Set());\n  const [calendarColorMap, setCalendarColorMap] = useState<Map<string, string>>(new Map());\n\n  // Scroll behavior hook\n  const { isManualScrollRef, handleScrollToNow } = useCalendarScroll({\n    calendarId: id,\n    currentView,\n    isPreservingView,\n    calendarRef,\n  });\n\n  // Calculate date range for query (6 months window for safety)\n  const startDate = useMemo(() => {\n    const date = new Date();\n    date.setMonth(date.getMonth() - 3);\n    return date.toISOString();\n  }, []);\n  \n  const endDate = useMemo(() => {\n    const date = new Date();\n    date.setMonth(date.getMonth() + 3);\n    return date.toISOString();\n  }, []);\n  \n  // Fetch calendar details (multiple or single)\n  const { loading: calendarsLoading, error: calendarsError, data: calendarsData } = useQuery(\n    isMultiCalendar ? GET_CALENDARS_BY_IDS : GET_CALENDAR,\n    {\n      variables: isMultiCalendar ? { ids: calendarIds } : { id: calendarIds[0] },\n      skip: calendarIds.length === 0,\n      context: {\n        headers: {\n          'x-tenant-id': localStorage.getItem('tenantId') || ''\n        }\n      },\n      onCompleted: (data) => {\n        // Build color map for calendars\n        const colorMap = new Map<string, string>();\n        const calendars = isMultiCalendar ? data.getCalendarsByIds : [data.calendar];\n        \n        // Define distinct colors for multiple calendars\n        const colors = [\n          '#3B82F6', // Blue\n          '#10B981', // Green\n          '#F59E0B', // Amber\n          '#EF4444', // Red\n          '#8B5CF6', // Purple\n          '#EC4899', // Pink\n          '#14B8A6', // Teal\n          '#F97316'  // Orange\n        ];\n        \n        calendars?.forEach((calendar: any, index: number) => {\n          if (calendar) {\n            colorMap.set(calendar.id, calendar.color || colors[index % colors.length]);\n          }\n        });\n        \n        setCalendarColorMap(colorMap);\n      }\n    }\n  );\n  \n  // For backwards compatibility with single calendar references\n  const calendarLoading = calendarsLoading;\n  const calendarError = calendarsError;\n  const calendarData = calendarsData;\n  const calendar = isMultiCalendar ? calendarsData?.getCalendarsByIds?.[0] : calendarsData?.calendar;\n\n  // Update document title based on calendar name\n  useDocumentTitle(\n    calendarsModuleConfig,\n    calendar?.name ? `${calendar.name} - Calendar` : isMultiCalendar ? 'Multi-Calendar View' : undefined\n  );\n\n  // Fetch calendar tags (for single calendar only, multi-calendar tags would be complex)\n  const { data: tagsData, refetch: refetchTags } = useQuery(GET_CALENDAR_TAGS, {\n    variables: { calendarId: calendarIds[0] },\n    skip: calendarIds.length === 0 || isMultiCalendar,\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    },\n    fetchPolicy: 'cache-and-network' // Ensure we get fresh data\n  });\n  \n  // Fetch calendar events (multiple or single)\n  const { loading: eventsLoading, error: eventsError, data: eventsData, refetch: refetchEvents } = useQuery(\n    isMultiCalendar ? GET_MULTI_CALENDAR_EVENTS : GET_CALENDAR_EVENTS,\n    {\n      variables: isMultiCalendar \n        ? {\n            calendarIds: calendarIds,\n            startDate: startDate,\n            endDate: endDate\n          }\n        : {\n            calendarId: calendarIds[0],\n            startDate: startDate,\n            endDate: endDate\n          },\n      skip: calendarIds.length === 0,\n      context: {\n        headers: {\n          'x-tenant-id': localStorage.getItem('tenantId') || ''\n        }\n      }\n    }\n  );\n  \n  // Fetch linked email address (for single calendar only)\n  const { data: linkedEmailData } = useQuery(GET_LINKED_EMAIL, {\n    variables: {\n      calendarId: calendarIds[0],\n      tenantId: localStorage.getItem('tenantId') || ''\n    },\n    skip: calendarIds.length === 0 || isMultiCalendar,\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Fetch current month goals (for single calendar only)\n  const { data: goalsData, refetch: refetchGoals } = useQuery(GET_CURRENT_MONTH_GOALS, {\n    variables: { calendarId: calendarIds[0] },\n    skip: calendarIds.length === 0 || isMultiCalendar,\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Fetch clients data for goal assignments\n  const { data: clientsData } = useQuery(GET_CLIENTS_FOR_GOALS, {\n    skip: calendarIds.length === 0 || isMultiCalendar,\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Fetch external calendars\n  const { data: externalCalendarsData, refetch: refetchExternalCalendars } = useQuery(GET_EXTERNAL_CALENDARS, {\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Update checkpoint mutation\n  const [updateCheckpoint] = useMutation(UPDATE_CHECKPOINT, {\n    onCompleted: () => {\n      refetchGoals();\n    },\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    }\n  });\n\n  // Update event mutation for drag and drop\n  const [updateEvent] = useMutation(UPDATE_EVENT, {\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || ''\n      }\n    },\n    onCompleted: () => {\n      // Don't refetch - let the optimistic UI handle it\n      console.log('✅ Event updated successfully');\n    },\n    onError: (error) => {\n      console.error('❌ Failed to update event:', error);\n      alert('Failed to move event. Please try again.');\n      // Only refetch on error to restore the original position\n      refetchEvents();\n    }\n  });\n\n  // Event filtering hook (after queries are defined)\n  const {\n    activeEventFilters,\n    setActiveEventFilters,\n    activeTagFilters,\n    setActiveTagFilters,\n    filteredEvents,\n  } = useCalendarFilters({\n    eventsData,\n    tagsData,\n    isMultiCalendar,\n    calendarColorMap,\n  });\n\n  // Event handlers hook (after queries and modals are defined)\n  const {\n    handleDatesSet: handleDatesSetFromHook,\n    handleDateClick: handleDateClickFromHook,\n    handleSelect: handleSelectFromHook,\n    handleEventDrop: handleEventDropFromHook,\n    handleEventResize: handleEventResizeFromHook,\n    handleEventClick: handleEventClickFromHook,\n  } = useCalendarEventHandlers({\n    currentView,\n    calendarRef,\n    eventsData,\n    isMultiCalendar,\n    calendarIds,\n    updateEvent,\n    setNewEventDate,\n    setSelectedTimeRange,\n    setIsCreateModalOpen,\n    setSelectedEvent,\n    setIsEventModalOpen,\n    setSelectedICalInvite,\n    setIsICalModalOpen,\n  });\n\n  // Calculate progress percentage based on completed checkpoints\n  const calculateProgress = (checkpoints: any[]) => {\n    if (!checkpoints || checkpoints.length === 0) return 0;\n    const completed = checkpoints.filter(cp => cp.completed).length;\n    return Math.round((completed / checkpoints.length) * 100);\n  };\n\n  // Handle toggling checkpoint\n  const handleToggleCheckpoint = (goalId: string, checkpointId: string, completed: boolean) => {\n    // Optimistically update the local state\n    setLocalGoals(prevGoals => \n      prevGoals.map(goal => {\n        if (goal.id === goalId) {\n          const updatedCheckpoints = goal.checkpoints.map((cp: any) => \n            cp.id === checkpointId ? { ...cp, completed } : cp\n          );\n          return {\n            ...goal,\n            checkpoints: updatedCheckpoints,\n            progressPercentage: calculateProgress(updatedCheckpoints)\n          };\n        }\n        return goal;\n      })\n    );\n\n    updateCheckpoint({\n      variables: {\n        input: {\n          goalId,\n          checkpointId,\n          completed\n        }\n      }\n    });\n  };\n  \n  // Sync local goals with fetched data and calculate progress\n  useEffect(() => {\n    if (goalsData?.currentMonthGoals) {\n      // Recalculate progress for each goal based on actual checkpoint completion\n      const goalsWithCalculatedProgress = goalsData.currentMonthGoals.map((goal: any) => ({\n        ...goal,\n        progressPercentage: calculateProgress(goal.checkpoints || [])\n      }));\n      setLocalGoals(goalsWithCalculatedProgress);\n    }\n  }, [goalsData]);\n\n  // Initialize calendar with URL parameters on mount\n  useEffect(() => {\n    // Skip initialization if we're preserving view after save\n    if (isPreservingView) return;\n    \n    const calendarApi = calendarRef.current?.getApi();\n    const calendar = calendarData?.calendar;\n    if (calendarApi && calendar) {\n      // Set the initial view from URL\n      const viewParam = searchParams.get('view');\n      if (viewParam && ['dayGridMonth', 'timeGridWeek', 'timeGridDay'].includes(viewParam)) {\n        calendarApi.changeView(viewParam);\n        \n        // Auto-scroll to current time for week/day views\n        if (viewParam === 'timeGridWeek' || viewParam === 'timeGridDay') {\n          const now = new Date();\n\n          setTimeout(() => {\n            // Calculate time offset to position current time at ~40% from top\n            const scrollTime = new Date(now.getTime() - (2 * 60 * 60 * 1000)); // 2 hours before current time\n            calendarApi.scrollToTime(scrollTime.toTimeString().slice(0, 8));\n          }, 200);\n        }\n      }\n      \n      // Set the initial date from URL\n      const dateParam = searchParams.get('date');\n      if (dateParam) {\n        const parsedDate = new Date(dateParam);\n        if (!isNaN(parsedDate.getTime())) {\n          calendarApi.gotoDate(parsedDate);\n        }\n      }\n    }\n  }, [calendarData, isPreservingView]); // Re-run when calendar data loads, skip when preserving view\n\n  // Handle window resize for responsive behavior\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  // Refetch tags periodically to catch any updates from tag manager\n  useEffect(() => {\n    // Set up a focus listener to refetch tags when window regains focus\n    const handleFocus = () => {\n      console.log('🔄 Window focused, refetching tags...');\n      if (refetchTags) {\n        refetchTags();\n      }\n    };\n    \n    window.addEventListener('focus', handleFocus);\n    \n    // Also refetch tags every 30 seconds to catch updates\n    const interval = setInterval(() => {\n      console.log('🔄 Periodic tag refresh...');\n      if (refetchTags) {\n        refetchTags();\n      }\n    }, 30000);\n    \n    return () => {\n      window.removeEventListener('focus', handleFocus);\n      clearInterval(interval);\n    };\n  }, [refetchTags]);\n\n  // ============================================================================\n  // NOTE: Auto-scroll behavior now handled by useCalendarScroll hook\n  // See hooks/useCalendarScroll.ts for implementation\n  // NOTE: Event filtering and transformation now handled by useCalendarFilters hook\n  // See hooks/useCalendarFilters.ts for implementation\n  // ============================================================================\n  \n  // Helper function to update URL parameters\n  const updateUrlParams = (updates: { view?: string; date?: string; hours?: string }) => {\n    const newParams = new URLSearchParams(searchParams);\n    \n    if (updates.view !== undefined) {\n      newParams.set('view', updates.view);\n    }\n    \n    if (updates.date !== undefined) {\n      newParams.set('date', updates.date);\n    }\n    \n    if (updates.hours !== undefined) {\n      if (updates.hours === 'business') {\n        newParams.delete('hours'); // Default is business hours\n      } else {\n        newParams.set('hours', updates.hours);\n      }\n    }\n    \n    setSearchParams(newParams);\n  };\n\n  // Navigation hook (for prev/next/today/view changes) - must be after updateUrlParams declaration\n  const {\n    handlePrevious,\n    handleNext,\n    handleToday,\n    handleViewChange,\n  } = useCalendarNavigation({\n    currentView,\n    calendarRef,\n    setCurrentDate,\n    setCurrentView,\n    updateUrlParams,\n    is24HourView,\n  });\n\n  // Render event content (now using separate component)\n  const renderEventContent = (eventContent: EventContentArg) => (\n    <CalendarEventContent\n      eventContent={eventContent}\n      isMultiCalendar={isMultiCalendar}\n      calendarsData={calendarsData}\n    />\n  );\n  \n  if (calendarLoading || eventsLoading) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        {!showGoals && <NavbarWithCallToAction />}\n        {!showGoals && <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />}\n        <Container maxW=\"container.xl\" py={8} flex=\"1\">\n          <VStack spacing={4} align=\"center\" justify=\"center\" minH=\"400px\">\n            <Spinner size=\"xl\" color={primaryColor} />\n            <Text color={textSecondary}>Loading calendar{isMultiCalendar ? 's' : ''}...</Text>\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n  \n  if (calendarError || eventsError || (!isMultiCalendar && !calendarData?.calendar) || (isMultiCalendar && (!calendarsData?.getCalendarsByIds || calendarsData.getCalendarsByIds.length === 0))) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        {!showGoals && <NavbarWithCallToAction />}\n        {!showGoals && <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />}\n        <Container maxW=\"container.xl\" py={8} flex=\"1\">\n          <Alert status=\"error\" borderRadius=\"md\">\n            <AlertIcon />\n            <Text>\n              {calendarError?.message || eventsError?.message || 'Calendar(s) not found'}\n            </Text>\n          </Alert>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n  \n  // Log events for debugging\n  console.log('📊 Calendar(s) loaded:', isMultiCalendar ? calendarsData?.getCalendarsByIds?.length : 1);\n  console.log('📅 Events loaded:', filteredEvents.length);\n  \n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      {!showGoals && <NavbarWithCallToAction />}\n      {!showGoals && <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />}\n      <Container maxW=\"100%\" py={{ base: 1, md: 2 }} px={{ base: 2, md: 4 }} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header Controls - Compact */}\n          <CalendarHeader\n            currentDate={currentDate}\n            secondaryTimezone={secondaryTimezone}\n            getTimeInSecondaryTimezone={getTimeInSecondaryTimezone}\n            showGoals={showGoals}\n            setShowGoals={setShowGoals}\n            setSelectedEvent={setSelectedEvent}\n            setIsEventModalOpen={setIsEventModalOpen}\n            cardGradientBg={cardGradientBg}\n            cardBorder={cardBorder}\n            textSecondary={textSecondary}\n            primaryColor={primaryColor}\n          />\n          \n          {/* Monthly Goals Section - Sticky when visible */}\n          {showGoals && (\n            <MonthlyGoalsCard\n              currentDate={currentDate}\n              localGoals={localGoals}\n              clientsData={clientsData}\n              selectedGoalId={selectedGoalId}\n              setSelectedGoalId={setSelectedGoalId}\n              setIsGoalsModalOpen={setIsGoalsModalOpen}\n              handleToggleCheckpoint={handleToggleCheckpoint}\n              cardGradientBg={cardGradientBg}\n              cardBorder={cardBorder}\n              textPrimary={textPrimary}\n              textSecondary={textSecondary}\n              primaryColor={primaryColor}\n            />\n          )}\n\n          {/* Calendar Controls */}\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n          >\n            <CardBody>\n              <VStack spacing={4}>\n                <CalendarToolbar\n                  currentView={currentView}\n                  currentDate={currentDate}\n                  isMultiCalendar={isMultiCalendar}\n                  calendarIds={calendarIds}\n                  calendar={calendar}\n                  calendarsData={calendarsData}\n                  linkedEmailData={linkedEmailData}\n                  filteredEvents={filteredEvents}\n                  calendarColorMap={calendarColorMap}\n                  is24HourView={is24HourView}\n                  handleToday={handleToday}\n                  handleScrollToNow={handleScrollToNow}\n                  handlePrevious={handlePrevious}\n                  handleNext={handleNext}\n                  handleViewChange={handleViewChange}\n                  setIs24HourView={setIs24HourView}\n                  updateUrlParams={updateUrlParams}\n                  textPrimary={textPrimary}\n                  textSecondary={textSecondary}\n                  primaryColor={primaryColor}\n                  primaryHover={primaryHover}\n                  cardBorder={cardBorder}\n                />\n\n                {/* Calendar Component with Secondary Timezone */}\n                <HStack align=\"stretch\" spacing={0} width=\"100%\">\n                  {/* Secondary Timezone Column */}\n                  {secondaryTimezone && (currentView === 'timeGridWeek' || currentView === 'timeGridDay') && (\n                    <Box\n                      bg=\"rgba(0, 0, 0, 0.3)\"\n                      borderRadius=\"lg 0 0 lg\"\n                      borderRight=\"2px solid\"\n                      borderColor=\"rgba(54, 158, 255, 0.2)\"\n                      minW=\"80px\"\n                      position=\"relative\"\n                    >\n                      {/* Timezone Header */}\n                      <Box\n                        height=\"40px\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        borderBottom=\"1px solid\"\n                        borderColor=\"rgba(54, 158, 255, 0.2)\"\n                        bg=\"rgba(54, 158, 255, 0.1)\"\n                      >\n                        <Text fontSize=\"xs\" fontWeight=\"600\" color=\"cyan.400\">\n                          {getTimezoneName(secondaryTimezone)}\n                        </Text>\n                      </Box>\n                      \n                      {/* Time Labels */}\n                      <Box mt=\"60px\">\n                        {generateSecondaryTimezoneLabels(secondaryTimezone, calendar, is24HourView)}\n                      </Box>\n                    </Box>\n                  )}\n                  \n                  {/* Main Calendar */}\n                  <Box\n                    flex=\"1\"\n                    bg=\"rgba(255, 255, 255, 0.03)\"\n                    borderRadius={secondaryTimezone && (currentView === 'timeGridWeek' || currentView === 'timeGridDay') ? \"0 lg lg 0\" : \"lg\"}\n                    p={{ base: 2, md: 4 }}\n                    overflow=\"visible\"\n                  sx={{\n                    '.fc': {\n                      fontFamily: brandConfig.fonts.body,\n                    },\n                    '.fc-toolbar-title': {\n                      color: textPrimary,\n                      fontSize: { base: 'md', md: 'xl' },\n                      fontWeight: 'bold',\n                    },\n                    // Mobile styles for all views\n                    '@media (max-width: 768px)': {\n                      // Month view mobile styles\n                      '.fc-daygrid-day-frame': {\n                        minHeight: '50px',\n                      },\n                      '.fc-daygrid-event': {\n                        fontSize: '0.65rem',\n                        padding: '0px 2px',\n                        whiteSpace: 'nowrap',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                      },\n                      '.fc-daygrid-day-number': {\n                        fontSize: '0.7rem',\n                        padding: '2px',\n                      },\n                      '.fc-daygrid-more-link': {\n                        fontSize: '0.65rem',\n                      },\n                      \n                      // Week view mobile styles\n                      '.fc-timegrid': {\n                        fontSize: '0.75rem',\n                      },\n                      '.fc-timegrid-slot-label': {\n                        fontSize: '0.75rem',\n                        padding: '2px 4px',\n                        fontWeight: '500',\n                      },\n                      '.fc-timegrid-slot-label-cushion': {\n                        fontSize: '0.75rem',\n                      },\n                      '.fc-timegrid-event': {\n                        fontSize: '0.7rem',\n                        padding: '2px 4px',\n                        borderRadius: '3px',\n                      },\n                      '.fc-timegrid-event .fc-event-title': {\n                        fontSize: '0.7rem',\n                        fontWeight: '600',\n                        overflow: 'visible',\n                        whiteSpace: 'normal',\n                        wordBreak: 'break-word',\n                      },\n                      '.fc-timegrid-event .fc-event-time': {\n                        fontSize: '0.65rem',\n                        display: 'block',\n                        marginBottom: '2px',\n                      },\n                      '.fc-timegrid-event-harness': {\n                        marginRight: '1px',\n                        marginLeft: '1px',\n                      },\n                      '.fc-timegrid-axis': {\n                        width: '45px',\n                      },\n                      '.fc-timegrid-axis-cushion': {\n                        fontSize: '0.7rem',\n                        padding: '0 2px',\n                      },\n                      '.fc-timeGridWeek-view .fc-col-header-cell-cushion': {\n                        fontSize: '0.7rem',\n                        padding: '4px 2px',\n                        fontWeight: '600',\n                      },\n                      '.fc-timeGridWeek-view .fc-daygrid-day-top': {\n                        fontSize: '0.75rem',\n                      },\n                      '.fc-timeGridWeek-view .fc-timegrid-col': {\n                        minWidth: '50px',\n                      },\n                      '.fc-timeGridWeek-view .fc-timegrid-now-indicator-arrow': {\n                        display: 'none',\n                      },\n                      '.fc-timeGridWeek-view .fc-timegrid-slots': {\n                        fontSize: '0.75rem',\n                      },\n                      '.fc-timeGridWeek-view .fc-timegrid-slot': {\n                        height: '40px',\n                      },\n                      \n                      // Day view mobile styles\n                      '.fc-timeGridDay-view .fc-timegrid-slot-label': {\n                        fontSize: '0.7rem',\n                      },\n                      '.fc-timeGridDay-view .fc-timegrid-event': {\n                        fontSize: '0.75rem',\n                        padding: '4px',\n                      },\n                      '.fc-timeGridDay-view .fc-timegrid-axis': {\n                        width: '40px',\n                      },\n                      '.fc-timeGridDay-view .fc-col-header': {\n                        fontSize: '0.8rem',\n                        fontWeight: 'bold',\n                      },\n                      '.fc-timeGridDay-view .fc-timegrid-col': {\n                        minWidth: 'auto',\n                      },\n                      '.fc-timeGridDay-view .fc-event-title': {\n                        fontSize: '0.75rem',\n                        fontWeight: '500',\n                      },\n                      '.fc-timeGridDay-view .fc-event-time': {\n                        fontSize: '0.65rem',\n                      },\n                      \n                      // Common mobile styles\n                      '.fc-event': {\n                        fontSize: '0.7rem',\n                        borderRadius: '2px',\n                      },\n                      '.fc-event-title': {\n                        fontWeight: 'normal',\n                      },\n                      '.fc-col-header-cell': {\n                        fontSize: '0.7rem',\n                        padding: '4px 2px',\n                        fontWeight: '600',\n                      },\n                      '.fc-scrollgrid': {\n                        fontSize: '0.85rem',\n                      },\n                      '.fc-more-popover': {\n                        fontSize: '0.75rem',\n                        maxWidth: '200px',\n                      },\n                      '.fc-now-indicator': {\n                        borderWidth: '1px',\n                      },\n                    },\n                    '.fc-col-header-cell': {\n                      backgroundColor: 'rgba(59, 130, 246, 0.1)',\n                      color: '#000000',\n                      fontWeight: '600',\n                      borderColor: cardBorder,\n                    },\n                    '.fc-col-header-cell-cushion': {\n                      color: '#000000',\n                      fontWeight: '600',\n                    },\n                    '.fc-daygrid-day': {\n                      backgroundColor: 'transparent',\n                      borderColor: cardBorder,\n                    },\n                    '.fc-daygrid-day-number': {\n                      color: textPrimary,\n                    },\n                    '.fc-daygrid-day.fc-day-today': {\n                      backgroundColor: 'rgba(59, 130, 246, 0.2)',\n                      border: '2px solid',\n                      borderColor: primaryColor,\n                    },\n                    '.fc-daygrid-day.fc-day-today .fc-daygrid-day-number': {\n                      backgroundColor: primaryColor,\n                      color: 'white',\n                      borderRadius: '50%',\n                      width: '28px',\n                      height: '28px',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      fontWeight: 'bold',\n                      margin: '2px',\n                    },\n                    '.fc-daygrid-event': {\n                      borderRadius: '4px',\n                      padding: '2px 4px',\n                    },\n                    '.fc-timegrid-slot': {\n                      borderColor: cardBorder,\n                    },\n                    '.fc-timegrid-slot-label': {\n                      color: textSecondary,\n                    },\n                    '.fc-event': {\n                      cursor: 'pointer',\n                      transition: 'all 0.2s',\n                    },\n                    '.fc-event:hover': {\n                      transform: 'scale(1.02)',\n                      boxShadow: '0 4px 12px rgba(0,0,0,0.2)',\n                    },\n                    '.fc-button': {\n                      display: 'none',\n                    },\n                    '.fc-toolbar': {\n                      display: 'none',\n                    },\n                    '.fc-scrollgrid': {\n                      borderColor: cardBorder,\n                    },\n                    '.fc-theme-standard td, .fc-theme-standard th': {\n                      borderColor: cardBorder,\n                    },\n                    // Selection highlight styles\n                    '.fc-highlight': {\n                      background: 'rgba(59, 130, 246, 0.2)',\n                      border: '2px solid rgba(59, 130, 246, 0.5)',\n                    },\n                    // 24-hour view specific styles\n                    ...(is24HourView && {\n                      '.fc-timegrid-slot': {\n                        height: '25px !important',\n                        minHeight: '25px !important',\n                      },\n                      '.fc-timegrid-slot-lane': {\n                        height: '25px !important',\n                      },\n                      '.fc-timegrid-col.fc-day': {\n                        minHeight: '600px !important',\n                      },\n                      // Night hours styling (highlight non-business hours)\n                      '.fc-timegrid-slot[data-time^=\"00:\"], .fc-timegrid-slot[data-time^=\"01:\"], .fc-timegrid-slot[data-time^=\"02:\"], .fc-timegrid-slot[data-time^=\"03:\"], .fc-timegrid-slot[data-time^=\"04:\"], .fc-timegrid-slot[data-time^=\"05:\"], .fc-timegrid-slot[data-time^=\"06:\"], .fc-timegrid-slot[data-time^=\"21:\"], .fc-timegrid-slot[data-time^=\"22:\"], .fc-timegrid-slot[data-time^=\"23:\"]': {\n                        backgroundColor: 'rgba(0, 0, 0, 0.03)',\n                      },\n                    }),\n                  }}\n                >\n                  <FullCalendar\n                    ref={calendarRef}\n                    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                    initialView={currentView}\n                    initialDate={currentDate.toISOString().split('T')[0]}\n                    headerToolbar={false}\n                    events={filteredEvents}\n                    eventClick={handleEventClickFromHook}\n                    dateClick={handleDateClickFromHook}\n                    datesSet={handleDatesSetFromHook}\n                    eventContent={renderEventContent}\n                    height=\"auto\"\n                    slotMinTime={is24HourView ? \"00:00\" : (isMobile ? \"07:00\" : (calendar?.settings?.workingHoursStart || \"08:00\"))}\n                    slotMaxTime={is24HourView ? \"24:00\" : (isMobile ? \"20:00\" : (calendar?.settings?.workingHoursEnd || \"18:00\"))}\n                    firstDay={1} // Monday as first day\n                    nowIndicator={true}\n                    eventDisplay=\"block\"\n                    dayMaxEvents={isMobile ? 2 : 3}\n                    moreLinkText={isMobile ? \"+\" : \"more\"}\n                    slotDuration={currentView === 'timeGridDay' || currentView === 'timeGridWeek' ? \"00:10:00\" : \"00:30:00\"}\n                    slotLabelInterval={isMobile ? \"02:00\" : \"01:00\"}\n                    snapDuration=\"00:10:00\"\n                    selectable={currentView === 'timeGridWeek' || currentView === 'timeGridDay'}\n                    selectMirror={true}\n                    select={handleSelectFromHook}\n                    unselectAuto={false}\n                    editable={true}  // Enable drag and drop\n                    droppable={true} // Allow external dragging\n                    eventDrop={handleEventDropFromHook} // Handle event drop\n                    eventResize={handleEventResizeFromHook} // Handle event resize\n                    eventResizableFromStart={true} // Allow resize from start\n                    slotLabelFormat={{\n                      hour: 'numeric',\n                      minute: '2-digit',\n                      hour12: isMobile ? false : true\n                    }}\n                    expandRows={true}\n                    stickyHeaderDates={!isMobile}\n                    allDaySlot={!isMobile || currentView !== 'timeGridWeek'}\n                    eventMinHeight={isMobile ? 25 : 20}\n                    slotEventOverlap={true} // Allow visual overlapping of events\n                    eventOverlap={true} // Allow events to be dragged to overlap\n                    eventMaxStack={isMultiCalendar ? 4 : 2} // Stack more events when multi-calendar\n                    businessHours={{\n                      daysOfWeek: [1, 2, 3, 4, 5], // Monday - Friday\n                      startTime: calendar?.settings?.workingHoursStart || '09:00',\n                      endTime: calendar?.settings?.workingHoursEnd || '17:00',\n                    }}\n                  />\n                  </Box>\n                </HStack>\n              </VStack>\n            </CardBody>\n          </Card>\n        </VStack>\n      </Container>\n      \n      {/* Floating Event Filter */}\n      <FloatingEventFilter \n        events={filteredEvents}\n        calendarId={calendarIds[0] || ''}\n        onFilterChange={setActiveEventFilters}\n        onTimezoneChange={setSecondaryTimezone}\n        onTagFilterChange={setActiveTagFilters}\n      />\n      \n      {/* Event Modal for Editing */}\n      {isEventModalOpen && (\n        <EventModal\n          isOpen={isEventModalOpen}\n          onClose={() => {\n            setIsEventModalOpen(false);\n            setSelectedEvent(null);\n          }}\n          onSuccess={async () => {\n            // CRITICAL: Set flag to prevent auto-scroll - keeps user at their current position\n            // DO NOT REMOVE - This prevents the calendar from jumping after save\n            setIsPreservingView(true);\n            \n            // Store current view state AND both scroll positions before any updates\n            const calendarApi = calendarRef.current?.getApi();\n            const preservedView = calendarApi?.view.type || currentView;\n            const preservedDate = calendarApi?.getDate() || currentDate;\n            const preserved24Hour = is24HourView;\n            \n            // Store the browser window scroll position\n            const preservedWindowScrollY = window.scrollY;\n            const preservedWindowScrollX = window.scrollX;\n            \n            // Store the calendar's internal scroll position for time grid views\n            let preservedScrollTime: string | null = null;\n            if (preservedView === 'timeGridWeek' || preservedView === 'timeGridDay') {\n              const scrollContainer = document.querySelector('.fc-scroller-liquid-absolute');\n              if (scrollContainer) {\n                const scrollTop = scrollContainer.scrollTop;\n                // Calculate approximate time based on scroll position\n                const hoursFromTop = Math.floor(scrollTop / 60);\n                const minutesFromTop = Math.floor((scrollTop % 60) * 60 / 60);\n                preservedScrollTime = `${String(hoursFromTop).padStart(2, '0')}:${String(minutesFromTop).padStart(2, '0')}:00`;\n              }\n            }\n            \n            setIsEventModalOpen(false);\n            setSelectedEvent(null);\n            \n            // Refresh events without reloading the page\n            await refetchEvents();\n            \n            // Force restore the view after refetch completes\n            setTimeout(() => {\n              const api = calendarRef.current?.getApi();\n              if (api) {\n                api.changeView(preservedView);\n                api.gotoDate(preservedDate);\n                setCurrentView(preservedView);\n                setCurrentDate(preservedDate);\n                setIs24HourView(preserved24Hour);\n                \n                // Restore calendar's internal scroll position if we captured it\n                if (preservedScrollTime && (preservedView === 'timeGridWeek' || preservedView === 'timeGridDay')) {\n                  api.scrollToTime(preservedScrollTime);\n                }\n                \n                // Restore browser window scroll position\n                window.scrollTo(preservedWindowScrollX, preservedWindowScrollY);\n              }\n              \n              // Clear the flag after restoration\n              setTimeout(() => setIsPreservingView(false), 500);\n            }, 200);\n          }}\n          calendarId={calendarIds[0] || ''}\n          event={selectedEvent}\n        />\n      )}\n      \n      {/* Event Modal for Creating */}\n      {isCreateModalOpen && (\n        <EventModal\n          isOpen={isCreateModalOpen}\n          onClose={() => {\n            setIsCreateModalOpen(false);\n            setNewEventDate('');\n            setSelectedTimeRange(null);\n          }}\n          onSuccess={async () => {\n            // CRITICAL: Set flag to prevent auto-scroll - keeps user at their current position\n            // DO NOT REMOVE - This prevents the calendar from jumping after save\n            setIsPreservingView(true);\n            \n            // Store current view state AND both scroll positions before any updates\n            const calendarApi = calendarRef.current?.getApi();\n            const preservedView = calendarApi?.view.type || currentView;\n            const preservedDate = calendarApi?.getDate() || currentDate;\n            const preserved24Hour = is24HourView;\n            \n            // Store the browser window scroll position\n            const preservedWindowScrollY = window.scrollY;\n            const preservedWindowScrollX = window.scrollX;\n            \n            // Store the calendar's internal scroll position for time grid views\n            let preservedScrollTime: string | null = null;\n            if (preservedView === 'timeGridWeek' || preservedView === 'timeGridDay') {\n              const scrollContainer = document.querySelector('.fc-scroller-liquid-absolute');\n              if (scrollContainer) {\n                const scrollTop = scrollContainer.scrollTop;\n                // Calculate approximate time based on scroll position\n                const hoursFromTop = Math.floor(scrollTop / 60);\n                const minutesFromTop = Math.floor((scrollTop % 60) * 60 / 60);\n                preservedScrollTime = `${String(hoursFromTop).padStart(2, '0')}:${String(minutesFromTop).padStart(2, '0')}:00`;\n              }\n            }\n            \n            setIsCreateModalOpen(false);\n            setNewEventDate('');\n            setSelectedTimeRange(null);\n            \n            // Refresh events without reloading the page\n            await refetchEvents();\n            \n            // Force restore the view after refetch completes\n            setTimeout(() => {\n              const api = calendarRef.current?.getApi();\n              if (api) {\n                api.changeView(preservedView);\n                api.gotoDate(preservedDate);\n                setCurrentView(preservedView);\n                setCurrentDate(preservedDate);\n                setIs24HourView(preserved24Hour);\n                \n                // Restore calendar's internal scroll position if we captured it\n                if (preservedScrollTime && (preservedView === 'timeGridWeek' || preservedView === 'timeGridDay')) {\n                  api.scrollToTime(preservedScrollTime);\n                }\n                \n                // Restore browser window scroll position\n                window.scrollTo(preservedWindowScrollX, preservedWindowScrollY);\n              }\n              \n              // Clear the flag after restoration\n              setTimeout(() => setIsPreservingView(false), 500);\n            }, 200);\n          }}\n          calendarId={calendarIds[0] || ''}\n          initialDate={newEventDate}\n          initialTimeRange={selectedTimeRange || undefined}\n        />\n      )}\n      \n      {/* Goals Modal */}\n      {isGoalsModalOpen && (\n        <GoalsModal\n          isOpen={isGoalsModalOpen}\n          onClose={() => {\n            setIsGoalsModalOpen(false);\n            setSelectedGoalId(null);\n            refetchGoals();\n          }}\n          calendarId={calendarIds[0] || ''}\n          currentMonth={currentDate}\n          initialGoalId={selectedGoalId}\n        />\n      )}\n      \n      {/* iCal Invite Modal */}\n      {isICalModalOpen && selectedICalInvite && (\n        <ICalInviteModal\n          isOpen={isICalModalOpen}\n          onClose={() => {\n            setIsICalModalOpen(false);\n            setSelectedICalInvite(null);\n          }}\n          event={selectedICalInvite}\n          onRefresh={() => {\n            refetchEvents();\n          }}\n        />\n      )}\n\n    </Box>\n  );\n};\n\nexport default CalendarView;","import { useState } from 'react';\n\n// ============================================================================\n// HOOK: useCalendarModals\n// ============================================================================\n\ninterface UseCalendarModalsReturn {\n  // Event modals\n  selectedEvent: any;\n  setSelectedEvent: React.Dispatch<React.SetStateAction<any>>;\n  isEventModalOpen: boolean;\n  setIsEventModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n\n  // Create event modal\n  isCreateModalOpen: boolean;\n  setIsCreateModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  newEventDate: string;\n  setNewEventDate: React.Dispatch<React.SetStateAction<string>>;\n  selectedTimeRange: { start: string; end: string; isAllDay?: boolean } | null;\n  setSelectedTimeRange: React.Dispatch<React.SetStateAction<{ start: string; end: string; isAllDay?: boolean } | null>>;\n\n  // iCal invite modal\n  isICalModalOpen: boolean;\n  setIsICalModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  selectedICalInvite: any;\n  setSelectedICalInvite: React.Dispatch<React.SetStateAction<any>>;\n\n  // Goals modal\n  isGoalsModalOpen: boolean;\n  setIsGoalsModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n\n  // External calendar modal\n  isExternalCalendarModalOpen: boolean;\n  setIsExternalCalendarModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n\n  // Helper functions\n  openCreateModal: (date?: string, timeRange?: { start: string; end: string; isAllDay?: boolean }) => void;\n  openEditModal: (event: any) => void;\n  openICalModal: (eventData: any) => void;\n  closeAllModals: () => void;\n}\n\n/**\n * Custom hook to manage calendar modal state\n *\n * Features:\n * - Event create/edit modal state\n * - iCal invite modal state\n * - Goals modal state\n * - External calendar modal state\n * - Helper functions to open/close modals\n */\nexport const useCalendarModals = (): UseCalendarModalsReturn => {\n  // Event modals\n  const [selectedEvent, setSelectedEvent] = useState<any>(null);\n  const [isEventModalOpen, setIsEventModalOpen] = useState(false);\n\n  // Create event modal\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [newEventDate, setNewEventDate] = useState<string>('');\n  const [selectedTimeRange, setSelectedTimeRange] = useState<{ start: string; end: string; isAllDay?: boolean } | null>(null);\n\n  // iCal invite modal\n  const [isICalModalOpen, setIsICalModalOpen] = useState(false);\n  const [selectedICalInvite, setSelectedICalInvite] = useState<any>(null);\n\n  // Goals modal\n  const [isGoalsModalOpen, setIsGoalsModalOpen] = useState(false);\n\n  // External calendar modal\n  const [isExternalCalendarModalOpen, setIsExternalCalendarModalOpen] = useState(false);\n\n  // Helper functions\n  const openCreateModal = (date?: string, timeRange?: { start: string; end: string; isAllDay?: boolean }) => {\n    if (date) {\n      setNewEventDate(date);\n      setSelectedTimeRange(null);\n    } else if (timeRange) {\n      setSelectedTimeRange(timeRange);\n      setNewEventDate('');\n    }\n    setIsCreateModalOpen(true);\n  };\n\n  const openEditModal = (event: any) => {\n    setSelectedEvent(event);\n    setIsEventModalOpen(true);\n  };\n\n  const openICalModal = (eventData: any) => {\n    setSelectedICalInvite(eventData);\n    setIsICalModalOpen(true);\n  };\n\n  const closeAllModals = () => {\n    setIsCreateModalOpen(false);\n    setIsEventModalOpen(false);\n    setIsICalModalOpen(false);\n    setIsGoalsModalOpen(false);\n    setIsExternalCalendarModalOpen(false);\n    setSelectedEvent(null);\n    setNewEventDate('');\n    setSelectedTimeRange(null);\n    setSelectedICalInvite(null);\n  };\n\n  return {\n    // Event modals\n    selectedEvent,\n    setSelectedEvent,\n    isEventModalOpen,\n    setIsEventModalOpen,\n\n    // Create event modal\n    isCreateModalOpen,\n    setIsCreateModalOpen,\n    newEventDate,\n    setNewEventDate,\n    selectedTimeRange,\n    setSelectedTimeRange,\n\n    // iCal invite modal\n    isICalModalOpen,\n    setIsICalModalOpen,\n    selectedICalInvite,\n    setSelectedICalInvite,\n\n    // Goals modal\n    isGoalsModalOpen,\n    setIsGoalsModalOpen,\n\n    // External calendar modal\n    isExternalCalendarModalOpen,\n    setIsExternalCalendarModalOpen,\n\n    // Helper functions\n    openCreateModal,\n    openEditModal,\n    openICalModal,\n    closeAllModals,\n  };\n};\n","import { useState, useMemo } from 'react';\nimport { EventInput } from '@fullcalendar/core';\n\n// ============================================================================\n// HOOK: useCalendarFilters\n// ============================================================================\n\ninterface UseCalendarFiltersParams {\n  eventsData: any;\n  tagsData: any;\n  isMultiCalendar: boolean;\n  calendarColorMap: Map<string, string>;\n}\n\ninterface UseCalendarFiltersReturn {\n  activeEventFilters: Set<string>;\n  setActiveEventFilters: React.Dispatch<React.SetStateAction<Set<string>>>;\n  activeTagFilters: Set<string>;\n  setActiveTagFilters: React.Dispatch<React.SetStateAction<Set<string>>>;\n  filteredEvents: EventInput[];\n}\n\n/**\n * Custom hook to manage calendar event filtering\n *\n * Features:\n * - Event type filtering (standard, iCal, SMS broadcast, meetings, reminders, all-day)\n * - Tag-based filtering\n * - Transforms events with colors and metadata\n * - Handles multi-calendar color mapping\n */\nexport const useCalendarFilters = ({\n  eventsData,\n  tagsData,\n  isMultiCalendar,\n  calendarColorMap,\n}: UseCalendarFiltersParams): UseCalendarFiltersReturn => {\n  const [activeEventFilters, setActiveEventFilters] = useState<Set<string>>(new Set());\n  const [activeTagFilters, setActiveTagFilters] = useState<Set<string>>(new Set());\n\n  // Transform and filter events for FullCalendar\n  const filteredEvents: EventInput[] = useMemo(() => {\n    const eventsList = isMultiCalendar ? eventsData?.multiCalendarEvents : eventsData?.calendarEvents;\n    if (!eventsList) return [];\n\n    console.log('📅 Transforming events:', eventsList.length);\n    console.log('📊 Active filters:', Array.from(activeEventFilters));\n    console.log('🏷️ Active tag filters:', Array.from(activeTagFilters));\n    console.log('🎨 Available tags:', tagsData?.calendarTags);\n\n    // Create a map of tag names to colors for quick lookup\n    const tagColorMap = new Map();\n    if (tagsData?.calendarTags) {\n      tagsData.calendarTags.forEach((tag: any) => {\n        tagColorMap.set(tag.name, tag.color);\n      });\n    }\n    console.log('🎨 Tag color map:', Object.fromEntries(tagColorMap));\n\n    const allEvents = eventsList\n      .filter((event: any) => !event.isCancelled)\n      .map((event: any) => {\n        // Determine event color: first by calendar (if multi), then by tags, then default\n        let eventColor = event.color || '#3B82F6'; // Default color\n\n        // In multi-calendar mode, use calendar's color\n        if (isMultiCalendar && event.calendarId) {\n          eventColor = calendarColorMap.get(event.calendarId) || eventColor;\n        }\n\n        // If event has categories (tags), use the first tag's color\n        if (event.categories && event.categories.length > 0) {\n          const firstTagName = event.categories[0];\n          const tagColor = tagColorMap.get(firstTagName);\n          if (tagColor) {\n            eventColor = tagColor;\n            console.log(`🎨 Event \"${event.title}\" with tag \"${firstTagName}\" gets color: ${tagColor}`);\n          } else {\n            console.log(`⚠️ Event \"${event.title}\" has tag \"${firstTagName}\" but no color found in map`);\n          }\n        }\n\n        return {\n          id: event.id,\n          title: event.title,\n          start: event.startTime,\n          end: event.endTime,\n          allDay: event.isAllDay,\n          backgroundColor: eventColor,\n          borderColor: eventColor,\n          extendedProps: {\n            description: event.description,\n            status: event.status,\n            location: event.location,\n            attendees: event.attendees,\n            isInboundICalInvite: event.isInboundICalInvite,\n            iCalMethod: event.iCalMethod,\n            iCalResponseStatus: event.iCalResponseStatus,\n            iCalOrganizerName: event.iCalOrganizerName,\n            iCalOrganizerEmail: event.iCalOrganizerEmail,\n            metadata: event.metadata,\n            reminders: event.reminders,\n            categories: event.categories || [],\n            calendarId: event.calendarId // Important: Include calendarId for multi-calendar display\n          }\n        };\n      });\n\n    // Filter events based on active filters\n    // If no event type filters are active, show all events (changed behavior)\n    const shouldFilterByType = activeEventFilters.size > 0;\n\n    return allEvents.filter((event: any) => {\n      // Check each filter type\n      const eventType = event.extendedProps?.metadata?.['X-EVENT-TYPE'];\n      const isStandard = !event.extendedProps?.isInboundICalInvite &&\n                         (!eventType || eventType === 'PUBLIC_BOOKING'); // Include PUBLIC_BOOKING as standard\n      const isInboundICal = event.extendedProps?.isInboundICalInvite;\n      const isOutboundICal = eventType === 'ICAL_INVITE';\n      const isSMSBroadcast = eventType === 'SMS_BROADCAST';\n      const isMeeting = event.extendedProps?.attendees?.length > 0;\n      const hasReminders = event.extendedProps?.reminders?.length > 0;\n      const isAllDay = event.allDay;\n\n      // Debug logging for each event\n      console.log(`🔍 Filtering event \"${event.title}\":`, {\n        isStandard,\n        isInboundICal,\n        isOutboundICal,\n        isSMSBroadcast,\n        isMeeting,\n        hasReminders,\n        isAllDay,\n        metadata: event.extendedProps?.metadata,\n        activeFilters: Array.from(activeEventFilters),\n        shouldFilterByType\n      });\n\n      // Check event type filters (optional - if no filters active, show all)\n      const passesTypeFilter = !shouldFilterByType || (\n        (isStandard && activeEventFilters.has('standard')) ||\n        (isInboundICal && activeEventFilters.has('ical_inbound')) ||\n        (isOutboundICal && activeEventFilters.has('ical_outbound')) ||\n        (isSMSBroadcast && activeEventFilters.has('sms_broadcast')) ||\n        (isMeeting && activeEventFilters.has('meeting')) ||\n        (hasReminders && activeEventFilters.has('reminder')) ||\n        (isAllDay && activeEventFilters.has('all_day'))\n      );\n\n      console.log(`  → passesTypeFilter: ${passesTypeFilter}`);\n\n      // Check tag filters (optional - if no tags selected, show all)\n      const eventTags = event.extendedProps?.categories || [];\n      const passesTagFilter = activeTagFilters.size === 0 ||\n        eventTags.some((tag: string) => activeTagFilters.has(tag));\n\n      // Debug log for tag filtering\n      if (activeTagFilters.size > 0 && event.title?.includes('poker')) {\n        console.log('🎯 Debug poker event:', {\n          title: event.title,\n          eventTags,\n          activeTagFilters: Array.from(activeTagFilters),\n          passesTagFilter,\n          passesTypeFilter\n        });\n      }\n\n      // Event must pass type filter (if any filters active) and tag filter (if tags selected)\n      return passesTypeFilter && passesTagFilter;\n    });\n  }, [eventsData, activeEventFilters, activeTagFilters, tagsData, isMultiCalendar, calendarColorMap]);\n\n  return {\n    activeEventFilters,\n    setActiveEventFilters,\n    activeTagFilters,\n    setActiveTagFilters,\n    filteredEvents,\n  };\n};\n","// ============================================================================\n// HOOK: useCalendarEventHandlers\n// ============================================================================\n\ninterface UseCalendarEventHandlersParams {\n  currentView: string;\n  calendarRef: React.RefObject<any>;\n  eventsData: any;\n  isMultiCalendar: boolean;\n  calendarIds: string[];\n  updateEvent: any;\n  setNewEventDate: (date: string) => void;\n  setSelectedTimeRange: (range: { start: string; end: string; isAllDay?: boolean } | null) => void;\n  setIsCreateModalOpen: (open: boolean) => void;\n  setSelectedEvent: (event: any) => void;\n  setIsEventModalOpen: (open: boolean) => void;\n  setSelectedICalInvite: (data: any) => void;\n  setIsICalModalOpen: (open: boolean) => void;\n}\n\ninterface UseCalendarEventHandlersReturn {\n  handleDatesSet: (dateInfo: any) => void;\n  handleDateClick: (info: any) => void;\n  handleSelect: (info: any) => void;\n  handleEventDrop: (info: any) => Promise<void>;\n  handleEventResize: (info: any) => Promise<void>;\n  handleEventClick: (info: any) => void;\n}\n\n/**\n * Custom hook to manage calendar event interaction handlers\n *\n * Features:\n * - Date and time selection handling\n * - Event drag & drop (move events)\n * - Event resize handling\n * - Event click to view/edit\n * - iCal invite detection and handling\n */\nexport const useCalendarEventHandlers = ({\n  currentView,\n  calendarRef,\n  eventsData,\n  isMultiCalendar,\n  calendarIds,\n  updateEvent,\n  setNewEventDate,\n  setSelectedTimeRange,\n  setIsCreateModalOpen,\n  setSelectedEvent,\n  setIsEventModalOpen,\n  setSelectedICalInvite,\n  setIsICalModalOpen,\n}: UseCalendarEventHandlersParams): UseCalendarEventHandlersReturn => {\n\n  // Handle view changes from FullCalendar directly (e.g., toolbar buttons)\n  const handleDatesSet = (dateInfo: any) => {\n    // This is a no-op handler - view changes are controlled by parent component\n    // Kept for FullCalendar compatibility\n  };\n\n  const handleDateClick = (info: any) => {\n    // Only handle date click in month view (for day selection)\n    if (currentView === 'dayGridMonth') {\n      const clickedDate = info.dateStr || info.date.toISOString();\n      setNewEventDate(clickedDate);\n      setSelectedTimeRange(null); // Clear any time range selection\n      setIsCreateModalOpen(true);\n      console.log('📅 Date clicked for new event:', clickedDate);\n    }\n    // In week/day view, clicking is handled by select\n  };\n\n  const handleSelect = (info: any) => {\n    // This is triggered when user drags to select a time range\n    console.log('⏰ Time range selected:', {\n      start: info.start,\n      end: info.end,\n      view: info.view.type,\n      allDay: info.allDay\n    });\n\n    // Check if this is an all-day selection\n    const isAllDaySelection = info.allDay === true;\n\n    // Format the dates for the modal\n    const formatDateTimeLocal = (date: Date) => {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hours = String(date.getHours()).padStart(2, '0');\n      const minutes = String(date.getMinutes()).padStart(2, '0');\n      return `${year}-${month}-${day}T${hours}:${minutes}`;\n    };\n\n    setSelectedTimeRange({\n      start: formatDateTimeLocal(info.start),\n      end: formatDateTimeLocal(info.end),\n      isAllDay: isAllDaySelection\n    });\n    setNewEventDate(''); // Clear date-only selection\n    setIsCreateModalOpen(true);\n\n    // Clear the selection visually\n    const calendarApi = calendarRef.current?.getApi();\n    if (calendarApi) {\n      calendarApi.unselect();\n    }\n  };\n\n  const handleEventDrop = async (info: any) => {\n    console.log('📅 Event dropped:', {\n      event: info.event.title,\n      newStart: info.event.start,\n      newEnd: info.event.end,\n      oldEvent: info.oldEvent,\n      allDay: info.event.allDay\n    });\n\n    // Get the full event data\n    const eventsList = isMultiCalendar ? eventsData?.multiCalendarEvents : eventsData?.calendarEvents;\n    const fullEvent = eventsList?.find((e: any) => e.id === info.event.id);\n\n    if (!fullEvent) {\n      console.error('Event not found in data');\n      info.revert();\n      return;\n    }\n\n    // Prepare the update input - include calendarId and proper attendee fields\n    const updateInput: any = {\n      calendarId: fullEvent.calendarId || calendarIds[0], // Include the calendar ID\n      title: fullEvent.title,\n      description: fullEvent.description,\n      startTime: info.event.start.toISOString(),\n      endTime: info.event.end ? info.event.end.toISOString() : info.event.start.toISOString(),\n      isAllDay: info.event.allDay,\n      location: fullEvent.location?.address || fullEvent.location?.name,\n      status: fullEvent.status,\n      visibility: fullEvent.visibility,\n      categories: fullEvent.categories || [],\n      attendees: fullEvent.attendees?.map((a: any) => ({\n        clientId: a.clientId,\n        email: a.email,\n        name: a.name,\n        role: a.role || 'REQ_PARTICIPANT', // Use correct enum value with underscore\n        status: a.status || 'NEEDS_ACTION', // Use correct enum value with underscore\n        isOrganizer: a.isOrganizer || false,\n        rsvpRequired: a.rsvpRequired || false\n      })) || [],\n      reminders: fullEvent.reminders || [],\n      metadata: fullEvent.metadata || {}\n    };\n\n    try {\n      await updateEvent({\n        variables: {\n          id: info.event.id,\n          input: updateInput\n        }\n      });\n      console.log('✅ Event moved successfully');\n    } catch (error) {\n      console.error('❌ Failed to update event:', error);\n      info.revert(); // Revert the change in the UI\n    }\n  };\n\n  const handleEventResize = async (info: any) => {\n    console.log('📅 Event resized:', {\n      event: info.event.title,\n      newStart: info.event.start,\n      newEnd: info.event.end,\n      oldEvent: info.oldEvent\n    });\n\n    // Get the full event data\n    const eventsList = isMultiCalendar ? eventsData?.multiCalendarEvents : eventsData?.calendarEvents;\n    const fullEvent = eventsList?.find((e: any) => e.id === info.event.id);\n\n    if (!fullEvent) {\n      console.error('Event not found in data');\n      info.revert();\n      return;\n    }\n\n    // Prepare the update input - include calendarId and proper attendee fields\n    const updateInput: any = {\n      calendarId: fullEvent.calendarId || calendarIds[0], // Include the calendar ID\n      title: fullEvent.title,\n      description: fullEvent.description,\n      startTime: info.event.start.toISOString(),\n      endTime: info.event.end ? info.event.end.toISOString() : info.event.start.toISOString(),\n      isAllDay: info.event.allDay,\n      location: fullEvent.location?.address || fullEvent.location?.name,\n      status: fullEvent.status,\n      visibility: fullEvent.visibility,\n      categories: fullEvent.categories || [],\n      attendees: fullEvent.attendees?.map((a: any) => ({\n        clientId: a.clientId,\n        email: a.email,\n        name: a.name,\n        role: a.role || 'REQ_PARTICIPANT', // Use correct enum value with underscore\n        status: a.status || 'NEEDS_ACTION', // Use correct enum value with underscore\n        isOrganizer: a.isOrganizer || false,\n        rsvpRequired: a.rsvpRequired || false\n      })) || [],\n      reminders: fullEvent.reminders || [],\n      metadata: fullEvent.metadata || {}\n    };\n\n    try {\n      await updateEvent({\n        variables: {\n          id: info.event.id,\n          input: updateInput\n        }\n      });\n      console.log('✅ Event resized successfully');\n    } catch (error) {\n      console.error('❌ Failed to resize event:', error);\n      info.revert(); // Revert the change in the UI\n    }\n  };\n\n  const handleEventClick = (info: any) => {\n    const event = info.event;\n\n    // Log for developers\n    console.log('📅 Calendar event clicked:', {\n      id: event.id,\n      title: event.title,\n      start: event.start,\n      end: event.end,\n      description: event.extendedProps.description,\n      isInboundICalInvite: event.extendedProps.isInboundICalInvite,\n      iCalMethod: event.extendedProps.iCalMethod\n    });\n\n    // Find the full event data from eventsData\n    const fullEvent = eventsData?.calendarEvents?.find((e: any) => e.id === event.id);\n\n    console.log('🔍 Full event data from query:', fullEvent);\n\n    if (fullEvent) {\n      // Check if this is an iCal invite event\n      if (fullEvent.isInboundICalInvite) {\n        // Use the iCal invite modal\n        const iCalEventData = {\n          id: fullEvent.id,\n          title: fullEvent.title,\n          description: fullEvent.description,\n          startDateTime: fullEvent.startTime,\n          endDateTime: fullEvent.endTime,\n          location: fullEvent.location?.address || fullEvent.location?.name,\n          iCalMethod: fullEvent.iCalMethod,\n          iCalOrganizerEmail: fullEvent.iCalOrganizerEmail,\n          iCalOrganizerName: fullEvent.iCalOrganizerName,\n          iCalResponseStatus: fullEvent.iCalResponseStatus,\n          iCalReceivedAt: fullEvent.iCalReceivedAt,\n          iCalSequence: fullEvent.iCalSequence,\n          isInboundICalInvite: fullEvent.isInboundICalInvite,\n          categories: fullEvent.categories || [],\n          calendarId: fullEvent.calendarId || calendarIds[0]\n        };\n\n        setSelectedICalInvite(iCalEventData);\n        setIsICalModalOpen(true);\n      } else {\n        // Use the regular event modal\n        const eventForModal = {\n          id: fullEvent.id,\n          title: fullEvent.title,\n          description: fullEvent.description,\n          startTime: fullEvent.startTime,\n          endTime: fullEvent.endTime,\n          allDay: fullEvent.isAllDay,\n          location: fullEvent.location?.name || '',\n          status: fullEvent.status,\n          color: fullEvent.color,\n          attendees: fullEvent.attendees || [],\n          metadata: fullEvent.metadata,  // Include metadata!\n          visibility: fullEvent.visibility,\n          reminders: fullEvent.reminders,\n          categories: fullEvent.categories || []  // Include categories!\n        };\n\n        setSelectedEvent(eventForModal);\n        setIsEventModalOpen(true);\n      }\n    }\n  };\n\n  return {\n    handleDatesSet,\n    handleDateClick,\n    handleSelect,\n    handleEventDrop,\n    handleEventResize,\n    handleEventClick,\n  };\n};\n","// ============================================================================\n// HOOK: useCalendarNavigation\n// ============================================================================\n\ninterface UseCalendarNavigationParams {\n  currentView: string;\n  calendarRef: React.RefObject<any>;\n  setCurrentDate: (date: Date) => void;\n  setCurrentView: (view: string) => void;\n  updateUrlParams: (params: any) => void;\n  is24HourView: boolean;\n}\n\ninterface UseCalendarNavigationReturn {\n  handlePrevious: () => void;\n  handleNext: () => void;\n  handleToday: () => void;\n  handleViewChange: (view: string) => void;\n}\n\n/**\n * Custom hook to manage calendar navigation and view controls\n *\n * Features:\n * - Previous/Next navigation with scroll position preservation\n * - Today button with auto-scroll to current time\n * - View switching (month/week/day)\n * - URL parameter updates for navigation state\n */\nexport const useCalendarNavigation = ({\n  currentView,\n  calendarRef,\n  setCurrentDate,\n  setCurrentView,\n  updateUrlParams,\n  is24HourView,\n}: UseCalendarNavigationParams): UseCalendarNavigationReturn => {\n\n  const handlePrevious = () => {\n    const calendarApi = calendarRef.current?.getApi();\n    if (calendarApi) {\n      // Capture current scroll position in week/day view\n      let scrollTime: string | null = null;\n      if (currentView === 'timeGridWeek' || currentView === 'timeGridDay') {\n        const scrollContainer = document.querySelector('.fc-scroller-liquid-absolute');\n        if (scrollContainer) {\n          const scrollTop = scrollContainer.scrollTop;\n          const hoursFromTop = Math.floor(scrollTop / 60);\n          const minutesFromTop = Math.floor((scrollTop % 60) * 60 / 60);\n          scrollTime = `${String(hoursFromTop).padStart(2, '0')}:${String(minutesFromTop).padStart(2, '0')}:00`;\n        }\n      }\n\n      calendarApi.prev();\n      // Update current date based on the view\n      const newDate = calendarApi.getDate();\n      setCurrentDate(newDate);\n      // Update URL with new date\n      updateUrlParams({ date: newDate.toISOString().split('T')[0] });\n\n      // Restore scroll position after navigation\n      if (scrollTime && (currentView === 'timeGridWeek' || currentView === 'timeGridDay')) {\n        setTimeout(() => {\n          calendarApi.scrollToTime(scrollTime!);\n        }, 100);\n      }\n    }\n  };\n\n  const handleNext = () => {\n    const calendarApi = calendarRef.current?.getApi();\n    if (calendarApi) {\n      // Capture current scroll position in week/day view\n      let scrollTime: string | null = null;\n      if (currentView === 'timeGridWeek' || currentView === 'timeGridDay') {\n        const scrollContainer = document.querySelector('.fc-scroller-liquid-absolute');\n        if (scrollContainer) {\n          const scrollTop = scrollContainer.scrollTop;\n          const hoursFromTop = Math.floor(scrollTop / 60);\n          const minutesFromTop = Math.floor((scrollTop % 60) * 60 / 60);\n          scrollTime = `${String(hoursFromTop).padStart(2, '0')}:${String(minutesFromTop).padStart(2, '0')}:00`;\n        }\n      }\n\n      calendarApi.next();\n      // Update current date based on the view\n      const newDate = calendarApi.getDate();\n      setCurrentDate(newDate);\n      // Update URL with new date\n      updateUrlParams({ date: newDate.toISOString().split('T')[0] });\n\n      // Restore scroll position after navigation\n      if (scrollTime && (currentView === 'timeGridWeek' || currentView === 'timeGridDay')) {\n        setTimeout(() => {\n          calendarApi.scrollToTime(scrollTime!);\n        }, 100);\n      }\n    }\n  };\n\n  const handleToday = () => {\n    const calendarApi = calendarRef.current?.getApi();\n    if (calendarApi) {\n      calendarApi.today();\n      const today = new Date();\n      setCurrentDate(today);\n      // Update URL with today's date\n      updateUrlParams({ date: today.toISOString().split('T')[0] });\n\n      // If in week or day view, scroll to current time\n      if (currentView === 'timeGridWeek' || currentView === 'timeGridDay') {\n        setTimeout(() => {\n          // Calculate time offset to position current time at ~40% from top\n          const scrollTime = new Date(today.getTime() - (2 * 60 * 60 * 1000)); // 2 hours before current time\n          calendarApi.scrollToTime(scrollTime.toTimeString().slice(0, 8));\n        }, 200);\n      }\n    }\n  };\n\n  const handleViewChange = (view: string) => {\n    const calendarApi = calendarRef.current?.getApi();\n    if (calendarApi) {\n      // Always go to today's date when switching views\n      const today = new Date();\n      calendarApi.gotoDate(today);\n      calendarApi.changeView(view);\n      setCurrentView(view);\n      setCurrentDate(today);\n\n      // Update URL with today's date and new view\n      updateUrlParams({\n        view,\n        date: today.toISOString().split('T')[0],\n        hours: is24HourView ? '24' : 'business'\n      });\n    }\n  };\n\n  return {\n    handlePrevious,\n    handleNext,\n    handleToday,\n    handleViewChange,\n  };\n};\n"],"names":["GET_CALENDAR_GOALS","gql","_templateObject","_taggedTemplateLiteral","CREATE_GOAL","_templateObject2","UPDATE_GOAL","_templateObject3","DELETE_GOAL","_templateObject4","GET_CLIENTS","_templateObject5","UPDATE_CHECKPOINT","_templateObject6","categoryIcons","MARKETING","FiTrendingUp","GROWTH","FiTarget","OPERATIONS","FiSettings","TEAM","FiUsers","FINANCE","FiDollarSign","PRODUCT","FiPackage","CUSTOMER","FiUser","OTHER","FiHash","categoryColors","_ref","_clientsData$clients","isOpen","onClose","calendarId","currentMonth","initialGoalId","colorMode","useColorMode","toast","useToast","goals","setGoals","useState","editingGoal","setEditingGoal","isAddingGoal","setIsAddingGoal","activeTab","setActiveTab","cardBg","getColor","formBg","textPrimary","textSecondary","textMuted","cardBorder","loading","data","refetch","useQuery","variables","period","context","headers","localStorage","getItem","clientsData","useEffect","calendarGoals","goalsCopy","map","goal","_objectSpread","checkpoints","cp","length","goalToEdit","find","g","id","createGoal","useMutation","onCompleted","title","status","duration","onError","error","description","message","updateGoal","deleteGoal","updateCheckpoint","goalsByCategory","reduce","acc","category","push","stats","calculateStats","totalCheckpoints","completedCheckpoints","forEach","filter","completed","overallProgress","Math","round","totalGoals","_jsxs","Modal","size","base","md","lg","children","_jsx","ModalOverlay","ModalContent","maxH","m","bg","color","ModalHeader","VStack","align","spacing","HStack","Icon","as","CalendarIcon","Text","fontSize","concat","getMonth","getFullYear","flexWrap","Badge","colorScheme","p","ModalCloseButton","ModalBody","overflowY","Box","borderWidth","borderRadius","borderColor","FormControl","FormLabel","Input","value","onChange","e","prev","target","placeholder","_placeholder","Select","assignedTo","clients","client","fName","lName","businessName","parentGoalId","progressPercentage","mt","Textarea","SimpleGrid","columns","w","currentValue","targetValue","justify","mb","fontWeight","Button","leftIcon","AddIcon","onClick","handleAddCheckpoint","newCheckpoint","Date","now","random","toString","substr","order","weight","checkpoint","index","newCheckpoints","i","IconButton","icon","DeleteIcon","_","variant","handleSaveGoal","startOfMonth","endOfMonth","cleanCheckpoints","completedAt","dueDate","notes","input","startDate","toISOString","endDate","displayOrder","Tabs","TabList","Tab","Object","keys","charAt","slice","toLowerCase","TabPanels","TabPanel","borderLeftWidth","borderLeftColor","EditIcon","goalId","window","confirm","ChevronRightIcon","Progress","Accordion","allowToggle","AccordionItem","border","AccordionButton","px","flex","textAlign","AccordionIcon","AccordionPanel","Checkbox","isChecked","checkpointId","checked","handleToggleCheckpoint","textDecoration","entries","_ref2","categoryGoals","ModalFooter","mr","handleAddGoal","SEND_RSVP_RESPONSE","EMAIL_SENDERS_QUERY","CANCEL_EVENT","UPDATE_EVENT","ICalInviteModal","event","onRefresh","isResponding","setIsResponding","isDeleting","setIsDeleting","selectedFromEmail","setSelectedFromEmail","selectedTags","setSelectedTags","categories","isSavingTags","setIsSavingTags","sendRSVP","cancelEvent","updateEvent","console","log","location","sendersData","emailSenders","handleRSVP","async","eventId","response","fromEmail","_result$data","_result$data$sendRSVP","result","undefined","_result$data2","_result$data2$sendRSV","sendRSVPResponse","success","Error","isClosable","getResponseStatusColor","formatDateTime","dateString","format","_unused","isCancelled","iCalMethod","Code","Tooltip","label","FaCopy","navigator","clipboard","writeText","FaTrash","isLoading","_result$data3","reason","FaEnvelope","iCalMeetingLink","iCalHtmlBody","iCalRawEmail","iCalData","email","iCalResponseStatus","FaCheckCircle","FaTimesCircle","FaQuestionCircle","FaReply","getResponseStatusIcon","iCalOrganizerName","iCalOrganizerEmail","FaUser","ml","Divider","FaCalendarAlt","startDateTime","endDateTime","FaMapMarkerAlt","whiteSpace","FaTag","TagSelector","onTagsChange","join","startTime","endTime","iCalReceivedAt","iCalSequence","_Fragment","Link","href","isExternal","display","width","overflow","dangerouslySetInnerHTML","__html","sx","maxWidth","height","JSON","stringify","parse","isDisabled","GET_CALENDAR_TAGS","slideIn","keyframes","glow","float","FloatingEventFilter","_timezones$find","events","onFilterChange","onTimezoneChange","onTagFilterChange","isExpanded","setIsExpanded","activeFilters","setActiveFilters","Set","selectedTimezone","setSelectedTimezone","activeTags","setActiveTags","tagsData","calendarTags","timezones","offset","eventTypes","FiCalendar","FiMail","FiSend","FiMessageSquare","FiBell","FiClock","eventCounts","tagCounts","getEventTypeCounts","counts","_event$extendedProps","_event$extendedProps2","_event$extendedProps3","_event$extendedProps4","_event$extendedProps5","_event$extendedProps6","_event$extendedProps7","_event$extendedProps8","_event$extendedProps9","_event$extendedProps0","_event$extendedProps1","_event$extendedProps10","_event$extendedProps11","_event$extendedProps12","extendedProps","isInboundICalInvite","metadata","standard","ical_inbound","ical_outbound","sms_broadcast","attendees","meeting","reminders","reminder","allDay","all_day","tag","allTypeIds","type","handleClickOutside","closest","document","addEventListener","removeEventListener","Portal","className","position","right","top","transform","zIndex","Collapse","in","animateOpacity","backdropFilter","minW","maxW","boxShadow","animation","css","background","FiFilter","FiGlobe","boxSize","handleTimezoneChange","timezone","_hover","_focus","tz","style","isIndeterminate","toggleAllFilters","count","isActive","has","transition","typeId","newFilters","delete","add","handleFilterToggle","my","placement","hasArrow","py","openDelay","FiTag","cursor","toggleAllTags","allTagNames","name","Wrap","WrapItem","Tag","backgroundColor","tagName","newTags","handleTagToggle","TagLabel","values","a","b","FiX","_active","_before","content","bottom","left","opacity","h","alignItems","justifyContent","SCROLL_STORAGE_KEY","saveScrollPosition","view","scrollTime","timestamp","setItem","useCalendarScroll","currentView","isPreservingView","calendarRef","isManualScrollRef","useRef","current","_calendarRef$current","calendarApi","getApi","requestAnimationFrame","setTimeout","savedScrollTime","loadScrollPosition","stored","fiveMinutes","getTime","toTimeString","scrollToTime","handleScrollToNow","_calendarRef$current2","scrollTimeStr","allScrollers","querySelectorAll","scrollContainer","el","htmlEl","scrollHeight","clientHeight","scrollTop","nowIndicator","querySelector","indicatorTop","getBoundingClientRect","scrollY","targetScroll","innerHeight","scrollTo","behavior","getHours","getMinutes","container","offsetTop","CalendarEventContent","_eventContent$event$e","_eventContent$event$e2","_eventContent$event$e3","_eventContent$event$e5","_eventContent$event$e6","eventContent","isMultiCalendar","calendarsData","responseStatus","getCalendarName","_eventContent$event$e4","_eventContent$event$_","_eventContent$event$_2","_def","calendar","getCalendarsByIds","cal","isOutboundICalInvite","eventType","showICalBadge","flexShrink","getEventTypeIcon","noOfLines","timeText","fontStyle","CalendarHeader","_secondaryTimezone$sp","currentDate","secondaryTimezone","getTimeInSecondaryTimezone","showGoals","setShowGoals","setSelectedEvent","setIsEventModalOpen","cardGradientBg","primaryColor","navigate","useNavigate","Card","CardBody","toLocaleDateString","toLocaleTimeString","split","pop","replace","FiEyeOff","FiEye","ArrowBackIcon","getMonthYearDisplay","date","timeZone","hour","minute","hour12","getTimezoneName","_timezone$split$pop","generateSecondaryTimezoneLabels","is24HourView","_calendar$settings","_calendar$settings2","labels","settings","workingHoursStart","workingHoursEnd","startHour","Number","endHour","localTime","setHours","secondaryTime","pr","borderTop","MonthlyGoalsCard","localGoals","selectedGoalId","setSelectedGoalId","setIsGoalsModalOpen","CardHeader","pb","Flex","gap","StarIcon","Heading","getDate","sm","Array","from","dayNum","today","isPast","isToday","t","pt","_goal$checkpoints","_goal$tasks","_goal$checkpoints2","_goal$tasks2","dependsOn","isBlocked","assignedClient","c","textTransform","hasStripe","isAnimated","tasks","task","wordBreak","text","CalendarToolbar","_calendarsData$getCal","calendarIds","linkedEmailData","filteredEvents","calendarColorMap","handleToday","handlePrevious","handleNext","handleViewChange","setIs24HourView","updateUrlParams","primaryHover","TimeIcon","ChevronLeftIcon","orientation","getLinkedEmailForCalendar","Alert","AlertIcon","ChakraLink","InfoIcon","get","open","pl","new24HourView","hours","GET_CALENDARS_BY_IDS","GET_CALENDAR","GET_LINKED_EMAIL","GET_MULTI_CALENDAR_EVENTS","GET_CALENDAR_EVENTS","GET_CURRENT_MONTH_GOALS","GET_CLIENTS_FOR_GOALS","_templateObject7","GET_EXTERNAL_CALENDARS","_templateObject8","_templateObject9","_templateObject0","_templateObject1","CalendarView","_calendarsData$getCal2","_calendar$settings3","_calendar$settings4","useParams","searchParams","setSearchParams","useSearchParams","createRef","useMemo","calendarParam","Boolean","bgMain","setCurrentView","getInitialView","viewParam","includes","setCurrentDate","getInitialDate","dateParam","parsedDate","isNaN","isMobile","setIsMobile","innerWidth","getInitial24HourView","hoursParam","setLocalGoals","selectedEvent","isEventModalOpen","isCreateModalOpen","setIsCreateModalOpen","newEventDate","setNewEventDate","selectedTimeRange","setSelectedTimeRange","isICalModalOpen","setIsICalModalOpen","selectedICalInvite","setSelectedICalInvite","isGoalsModalOpen","openCreateModal","openEditModal","openICalModal","useCalendarModals","isExternalCalendarModalOpen","setIsExternalCalendarModalOpen","timeRange","eventData","closeAllModals","setIsPreservingView","setSecondaryTimezone","visibleExternalCalendars","setVisibleExternalCalendars","setCalendarColorMap","Map","setMonth","calendarsLoading","calendarsError","ids","skip","colorMap","calendars","colors","set","calendarLoading","calendarError","calendarData","useDocumentTitle","calendarsModuleConfig","refetchTags","fetchPolicy","eventsLoading","eventsError","eventsData","refetchEvents","tenantId","goalsData","refetchGoals","externalCalendarsData","refetchExternalCalendars","alert","activeEventFilters","setActiveEventFilters","activeTagFilters","setActiveTagFilters","eventsList","multiCalendarEvents","calendarEvents","tagColorMap","fromEntries","allEvents","eventColor","firstTagName","tagColor","start","end","isAllDay","shouldFilterByType","_event$extendedProps$","_event$title","isStandard","isInboundICal","isOutboundICal","isSMSBroadcast","isMeeting","hasReminders","passesTypeFilter","eventTags","passesTagFilter","some","useCalendarFilters","handleDatesSet","handleDatesSetFromHook","handleDateClick","handleDateClickFromHook","handleSelect","handleSelectFromHook","handleEventDrop","handleEventDropFromHook","handleEventResize","handleEventResizeFromHook","handleEventClick","handleEventClickFromHook","dateInfo","info","clickedDate","dateStr","isAllDaySelection","formatDateTimeLocal","year","month","String","padStart","day","minutes","unselect","_fullEvent$location","_fullEvent$location2","_fullEvent$attendees","newStart","newEnd","oldEvent","fullEvent","revert","updateInput","address","visibility","clientId","role","isOrganizer","rsvpRequired","_fullEvent$location3","_fullEvent$location4","_fullEvent$attendees2","_eventsData$calendarE","_fullEvent$location5","_fullEvent$location6","iCalEventData","_fullEvent$location7","eventForModal","useCalendarEventHandlers","calculateProgress","currentMonthGoals","goalsWithCalculatedProgress","changeView","gotoDate","handleResize","handleFocus","interval","setInterval","clearInterval","updates","newParams","URLSearchParams","hoursFromTop","floor","minutesFromTop","newDate","next","_calendarRef$current3","_calendarRef$current4","useCalendarNavigation","minH","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","Container","Spinner","FooterWithFourColumns","prevGoals","updatedCheckpoints","borderRight","borderBottom","fontFamily","brandConfig","fonts","body","minHeight","padding","textOverflow","marginBottom","marginRight","marginLeft","minWidth","margin","FullCalendar","ref","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","initialView","initialDate","headerToolbar","eventClick","dateClick","datesSet","slotMinTime","slotMaxTime","firstDay","eventDisplay","dayMaxEvents","moreLinkText","slotDuration","slotLabelInterval","snapDuration","selectable","selectMirror","select","unselectAuto","editable","droppable","eventDrop","eventResize","eventResizableFromStart","slotLabelFormat","expandRows","stickyHeaderDates","allDaySlot","eventMinHeight","slotEventOverlap","eventOverlap","eventMaxStack","businessHours","daysOfWeek","EventModal","onSuccess","preservedView","preservedDate","preserved24Hour","preservedWindowScrollY","preservedWindowScrollX","scrollX","preservedScrollTime","api","_calendarRef$current5","initialTimeRange","GoalsModal"],"sourceRoot":""}