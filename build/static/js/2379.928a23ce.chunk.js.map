{"version":3,"file":"static/js/2379.928a23ce.chunk.js","mappings":"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","sources":["pages/calendars/NewCalendar.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport {\n  Container,\n  Heading,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  Button,\n  Stack,\n  Alert,\n  AlertIcon,\n  Box,\n  HStack,\n  Switch,\n  Text,\n  VStack,\n  Divider,\n  useToast,\n  useBreakpointValue,\n  FormHelperText,\n  InputGroup,\n  InputLeftAddon,\n  Badge,\n  useColorMode\n} from '@chakra-ui/react';\nimport { ArrowBackIcon, CalendarIcon, CheckIcon } from '@chakra-ui/icons';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { getColor, brandConfig } from '../../brandConfig';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport { calendarsModuleConfig } from './moduleConfig';\nimport { usePageTitle } from '../../hooks/useDocumentTitle';\nimport { CalendarType, CalendarVisibility } from '../../generated/graphql';\n\nconst CREATE_CALENDAR = gql`\n  mutation CreateCalendar($input: BusinessCalendarInput!) {\n    createCalendar(input: $input) {\n      id\n      name\n      type\n    }\n  }\n`;\n\nconst GET_COMPANIES = gql`\n  query GetCompanies {\n    companies {\n      id\n      name\n    }\n  }\n`;\n\nconst GET_EMPLOYEES = gql`\n  query GetEmployees {\n    employees {\n      id\n      fName\n      lName\n      email\n    }\n  }\n`;\n\nconst NewCalendar: React.FC = () => {\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { user } = useAuth();\n  const { colorMode } = useColorMode();\n  const isMobile = useBreakpointValue({ base: true, md: false });\n\n  // Brand styling variables\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n  const successGreen = getColor(\"successGreen\", colorMode);\n  const errorRed = getColor(\"status.error\", colorMode);\n  const infoBlue = getColor(\"status.info\", colorMode);\n\n  // Update page title\n  usePageTitle('New Calendar');\n\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    type: 'BUSINESS',\n    color: '#4A90E2',\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    isShared: false,\n    publicRead: false,\n    publicWrite: false,\n    requireAuth: true,\n    allowedUsers: [],\n    linkedCompanyId: '',\n    linkedEmployeeId: '',\n    defaultReminders: true,\n    reminderMinutes: 15,\n    workingHoursStart: '09:00',\n    workingHoursEnd: '17:00',\n    workingDays: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY']\n  });\n\n  const { data: companiesData } = useQuery(GET_COMPANIES);\n  const { data: employeesData } = useQuery(GET_EMPLOYEES);\n\n  // Get enum values from generated types\n  const calendarTypes = Object.entries(CalendarType).map(([key, value]) => ({\n    name: value,\n    label: key.replace(/([A-Z])/g, ' $1').trim(), // Convert \"SharedExternal\" to \"Shared External\"\n  }));\n\n  const calendarVisibilities = Object.entries(CalendarVisibility).map(([key, value]) => ({\n    name: value,\n    label: key,\n  }));\n\n  const [createCalendar, { loading }] = useMutation(CREATE_CALENDAR, {\n    onCompleted: (data) => {\n      toast({\n        title: 'Calendar created',\n        description: `${data.createCalendar.name} has been created successfully`,\n        status: 'success',\n        duration: 3000\n      });\n      navigate(`/calendars/${data.createCalendar.id}/view`);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating calendar',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const input: any = {\n      name: formData.name,\n      description: formData.description,\n      type: formData.type,\n      color: formData.color\n    };\n\n    // Set settings object\n    input.settings = {\n      timezone: formData.timezone,\n      defaultReminderMinutes: formData.defaultReminders ? formData.reminderMinutes : 0,\n      workingHoursStart: formData.workingHoursStart,\n      workingHoursEnd: formData.workingHoursEnd,\n      workingDays: formData.workingDays\n    };\n\n    // Handle sharing settings\n    if (formData.isShared) {\n      input.isPublic = formData.publicRead;\n      // Shares array would be populated if we have specific users to share with\n      if (formData.allowedUsers && formData.allowedUsers.length > 0) {\n        input.shares = formData.allowedUsers.map((userId: string) => ({\n          sharedWithId: userId,\n          sharedWithType: 'Client',\n          permissions: formData.publicWrite ? ['READ', 'WRITE'] : ['READ']\n        }));\n      }\n    }\n\n    // Handle linked entities\n    if (formData.type === 'COMPANY' && formData.linkedCompanyId) {\n      input.companyId = formData.linkedCompanyId;\n    } else if (formData.type === 'EMPLOYEE' && formData.linkedEmployeeId) {\n      // Since we don't have an employeeId field, we might need to store this in moduleData\n      // Or handle it differently based on backend requirements\n    }\n\n    createCalendar({ variables: { input } });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSwitchChange = (field: string) => (checked: boolean) => {\n    setFormData(prev => ({ ...prev, [field]: checked }));\n  };\n\n  const handleDayToggle = (day: string) => {\n    setFormData(prev => ({\n      ...prev,\n      workingDays: prev.workingDays.includes(day)\n        ? prev.workingDays.filter(d => d !== day)\n        : [...prev.workingDays, day]\n    }));\n  };\n\n  const weekDays = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />\n      <Container maxW={{ base: \"container.sm\", md: \"container.md\", lg: \"container.lg\" }} py={{ base: 6, md: 8 }} flex=\"1\">\n      <Stack spacing={{ base: 4, md: 6 }}>\n        <VStack align=\"stretch\" spacing={4}>\n          <HStack justify=\"space-between\" flexDirection={{ base: \"column\", md: \"row\" }} spacing={{ base: 3, md: 0 }} align={{ base: \"stretch\", md: \"center\" }}>\n            <Heading \n              size={{ base: \"md\", md: \"lg\" }} \n              color={textPrimary}\n              fontFamily={brandConfig.fonts.heading}\n            >\n              <HStack>\n                <CalendarIcon color={primaryColor} />\n                <Text>Create New Calendar</Text>\n              </HStack>\n            </Heading>\n            <Button\n              leftIcon={<ArrowBackIcon />}\n              bg=\"rgba(255, 255, 255, 0.1)\"\n              color={textPrimary}\n              _hover={{ bg: \"rgba(255, 255, 255, 0.2)\", transform: \"translateY(-2px)\" }}\n              _active={{ transform: \"translateY(0)\" }}\n              transition=\"all 0.2s\"\n              onClick={() => navigate('/calendars')}\n              size={{ base: \"md\", md: \"lg\" }}\n              width={{ base: \"100%\", md: \"auto\" }}\n              minW={{ md: \"100px\" }}\n            >\n              Back\n            </Button>\n          </HStack>\n        </VStack>\n\n        <Box \n          as=\"form\" \n          onSubmit={handleSubmit}\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px\"\n          borderColor={cardBorder}\n          borderRadius=\"lg\"\n          p={{ base: 4, md: 6 }}\n        >\n          <Stack spacing={6}>\n            {/* Basic Information */}\n            <Stack spacing={4}>\n              <Text fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" color={textPrimary}>Basic Information</Text>\n              \n              <FormControl isRequired>\n                <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Calendar Name</FormLabel>\n                <Input\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  placeholder=\"e.g., Company Events, Team Schedule\"\n                  bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _placeholder={{ color: textMuted }}\n                  _hover={{ borderColor: textSecondary }}\n                  _focus={{\n                    borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                    boxShadow: `0 0 0 1px ${colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"}`,\n                  }}\n                  size={{ base: \"md\", md: \"lg\" }}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Description</FormLabel>\n                <Textarea\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleChange}\n                  placeholder=\"Describe the purpose of this calendar\"\n                  rows={3}\n                  bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _placeholder={{ color: textMuted }}\n                  _hover={{ borderColor: textSecondary }}\n                  _focus={{\n                    borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                    boxShadow: `0 0 0 1px ${colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"}`,\n                  }}\n                  fontSize={{ base: \"sm\", md: \"md\" }}\n                />\n              </FormControl>\n\n              <FormControl isRequired>\n                <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Calendar Type</FormLabel>\n                <Select\n                  name=\"type\"\n                  value={formData.type}\n                  onChange={handleChange}\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ borderColor: textSecondary }}\n                  _focus={{\n                    borderColor: primaryColor,\n                    boxShadow: `0 0 0 1px ${primaryColor}`,\n                  }}\n                  size={{ base: \"md\", md: \"lg\" }}\n                >\n                  {calendarTypes.map((type) => (\n                    <option key={type.name} value={type.name}>\n                      {type.label}\n                    </option>\n                  ))}\n                </Select>\n                <FormHelperText color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>\n                  Choose the type that best fits your calendar's purpose\n                </FormHelperText>\n              </FormControl>\n\n              {formData.type === 'COMPANY' && companiesData?.companies && (\n                <FormControl>\n                  <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Link to Company</FormLabel>\n                  <Select\n                    name=\"linkedCompanyId\"\n                    value={formData.linkedCompanyId}\n                    onChange={handleChange}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{ borderColor: textSecondary }}\n                    _focus={{ \n                      borderColor: primaryColor,\n                      boxShadow: `0 0 0 1px ${primaryColor}`,\n                    }}\n                    size={{ base: \"md\", md: \"lg\" }}\n                  >\n                    <option value=\"\">Select a company</option>\n                    {companiesData.companies.map((company: any) => (\n                      <option key={company.id} value={company.id}>\n                        {company.name}\n                      </option>\n                    ))}\n                  </Select>\n                </FormControl>\n              )}\n\n              {formData.type === 'EMPLOYEE' && employeesData?.employees && (\n                <FormControl>\n                  <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Link to Employee</FormLabel>\n                  <Select\n                    name=\"linkedEmployeeId\"\n                    value={formData.linkedEmployeeId}\n                    onChange={handleChange}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{ borderColor: textSecondary }}\n                    _focus={{ \n                      borderColor: primaryColor,\n                      boxShadow: `0 0 0 1px ${primaryColor}`,\n                    }}\n                    size={{ base: \"md\", md: \"lg\" }}\n                  >\n                    <option value=\"\">Select an employee</option>\n                    {employeesData.employees.map((employee: any) => (\n                      <option key={employee.id} value={employee.id}>\n                        {employee.fName} {employee.lName} ({employee.email})\n                      </option>\n                    ))}\n                  </Select>\n                </FormControl>\n              )}\n\n              <FormControl>\n                <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Calendar Color</FormLabel>\n                <HStack spacing={{ base: 2, md: 3 }}>\n                  <Input\n                    type=\"color\"\n                    name=\"color\"\n                    value={formData.color}\n                    onChange={handleChange}\n                    width={{ base: \"80px\", md: \"100px\" }}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    _hover={{ borderColor: textSecondary }}\n                  />\n                  <Input\n                    name=\"color\"\n                    value={formData.color}\n                    onChange={handleChange}\n                    placeholder=\"#4A90E2\"\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    _hover={{ borderColor: textSecondary }}\n                    _focus={{ \n                      borderColor: primaryColor,\n                      boxShadow: `0 0 0 1px ${primaryColor}`,\n                    }}\n                    size={{ base: \"md\", md: \"lg\" }}\n                  />\n                </HStack>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Timezone</FormLabel>\n                <Select\n                  name=\"timezone\"\n                  value={formData.timezone}\n                  onChange={handleChange}\n                  bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                  borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                  color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                  _hover={{ borderColor: primaryColor }}\n                  size={{ base: \"md\", md: \"lg\" }}\n                >\n                  <option value=\"UTC\">UTC</option>\n                  <option value=\"America/New_York\">Eastern Time</option>\n                  <option value=\"America/Chicago\">Central Time</option>\n                  <option value=\"America/Denver\">Mountain Time</option>\n                  <option value=\"America/Los_Angeles\">Pacific Time</option>\n                  <option value=\"Europe/London\">London</option>\n                  <option value=\"Europe/Paris\">Paris</option>\n                  <option value=\"Asia/Tokyo\">Tokyo</option>\n                  <option value=\"Australia/Sydney\">Sydney</option>\n                  <option value=\"Australia/Brisbane\">Brisbane</option>\n                </Select>\n              </FormControl>\n            </Stack>\n\n            <Divider borderColor={cardBorder} />\n\n            {/* Sharing Settings */}\n            <Stack spacing={4}>\n              <Text fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" color={textPrimary}>Sharing Settings</Text>\n              \n              <FormControl>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1}>\n                    <FormLabel mb={0} color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Share Calendar</FormLabel>\n                    <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted}>\n                      Allow others to view or edit this calendar\n                    </Text>\n                  </VStack>\n                  <Switch\n                    isChecked={formData.isShared}\n                    onChange={(e) => handleSwitchChange('isShared')(e.target.checked)}\n                  />\n                </HStack>\n              </FormControl>\n\n              {formData.isShared && (\n                <>\n                  <FormControl>\n                    <HStack justify=\"space-between\">\n                      <VStack align=\"start\" spacing={1}>\n                        <FormLabel mb={0} color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Public Read Access</FormLabel>\n                        <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted}>\n                          Anyone can view events\n                        </Text>\n                      </VStack>\n                      <Switch\n                        isChecked={formData.publicRead}\n                        onChange={(e) => handleSwitchChange('publicRead')(e.target.checked)}\n                      />\n                    </HStack>\n                  </FormControl>\n\n                  <FormControl>\n                    <HStack justify=\"space-between\">\n                      <VStack align=\"start\" spacing={1}>\n                        <FormLabel mb={0} color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Public Write Access</FormLabel>\n                        <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted}>\n                          Anyone can create events\n                        </Text>\n                      </VStack>\n                      <Switch\n                        isChecked={formData.publicWrite}\n                        onChange={(e) => handleSwitchChange('publicWrite')(e.target.checked)}\n                      />\n                    </HStack>\n                  </FormControl>\n\n                  <FormControl>\n                    <HStack justify=\"space-between\">\n                      <VStack align=\"start\" spacing={1}>\n                        <FormLabel mb={0} color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Require Authentication</FormLabel>\n                        <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted}>\n                          Users must be logged in to access\n                        </Text>\n                      </VStack>\n                      <Switch\n                        isChecked={formData.requireAuth}\n                        onChange={(e) => handleSwitchChange('requireAuth')(e.target.checked)}\n                      />\n                    </HStack>\n                  </FormControl>\n                </>\n              )}\n            </Stack>\n\n            <Divider borderColor={cardBorder} />\n\n            {/* Working Hours */}\n            <Stack spacing={4}>\n              <Text fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" color={textPrimary}>Working Hours</Text>\n              \n              <HStack spacing={{ base: 2, md: 4 }} flexDirection={{ base: \"column\", md: \"row\" }} align={{ base: \"stretch\", md: \"center\" }}>\n                <FormControl>\n                  <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Start Time</FormLabel>\n                  <Input\n                    type=\"time\"\n                    name=\"workingHoursStart\"\n                    value={formData.workingHoursStart}\n                    onChange={handleChange}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{ borderColor: textSecondary }}\n                    _focus={{ \n                      borderColor: primaryColor,\n                      boxShadow: `0 0 0 1px ${primaryColor}`,\n                    }}\n                    size={{ base: \"md\", md: \"lg\" }}\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>End Time</FormLabel>\n                  <Input\n                    type=\"time\"\n                    name=\"workingHoursEnd\"\n                    value={formData.workingHoursEnd}\n                    onChange={handleChange}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{ borderColor: textSecondary }}\n                    _focus={{ \n                      borderColor: primaryColor,\n                      boxShadow: `0 0 0 1px ${primaryColor}`,\n                    }}\n                    size={{ base: \"md\", md: \"lg\" }}\n                  />\n                </FormControl>\n              </HStack>\n\n              <FormControl>\n                <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Working Days</FormLabel>\n                <HStack wrap=\"wrap\" spacing={2}>\n                  {weekDays.map(day => (\n                    <Badge\n                      key={day}\n                      bg={formData.workingDays.includes(day) ? \"rgba(59, 130, 246, 0.2)\" : \"rgba(156, 163, 175, 0.2)\"}\n                      color={formData.workingDays.includes(day) ? primaryColor : textMuted}\n                      border=\"1px solid\"\n                      borderColor={formData.workingDays.includes(day) ? \"rgba(59, 130, 246, 0.3)\" : \"rgba(156, 163, 175, 0.3)\"}\n                      px={3}\n                      py={1}\n                      cursor=\"pointer\"\n                      onClick={() => handleDayToggle(day)}\n                    >\n                      {day.slice(0, 3)}\n                    </Badge>\n                  ))}\n                </HStack>\n              </FormControl>\n            </Stack>\n\n            <Divider borderColor={cardBorder} />\n\n            {/* Default Reminders */}\n            <Stack spacing={4}>\n              <Text fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" color={textPrimary}>Default Reminders</Text>\n              \n              <FormControl>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1}>\n                    <FormLabel mb={0} color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Enable Default Reminders</FormLabel>\n                    <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted}>\n                      Automatically add reminders to new events\n                    </Text>\n                  </VStack>\n                  <Switch\n                    isChecked={formData.defaultReminders}\n                    onChange={(e) => handleSwitchChange('defaultReminders')(e.target.checked)}\n                  />\n                </HStack>\n              </FormControl>\n\n              {formData.defaultReminders && (\n                <FormControl>\n                  <FormLabel color={textSecondary} fontSize={{ base: \"sm\", md: \"md\" }}>Reminder Time</FormLabel>\n                  <InputGroup size={{ base: \"md\", md: \"lg\" }}>\n                    <Input\n                      type=\"number\"\n                      name=\"reminderMinutes\"\n                      value={formData.reminderMinutes}\n                      onChange={handleChange}\n                      min={1}\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                      _hover={{ borderColor: textSecondary }}\n                      _focus={{ \n                        borderColor: primaryColor,\n                        boxShadow: `0 0 0 1px ${primaryColor}`,\n                      }}\n                    />\n                    <InputLeftAddon \n                      bg=\"rgba(255, 255, 255, 0.03)\"\n                      borderColor={cardBorder}\n                      color={textSecondary}\n                    >\n                      minutes before\n                    </InputLeftAddon>\n                  </InputGroup>\n                </FormControl>\n              )}\n            </Stack>\n\n            {/* Submit Buttons */}\n            <HStack spacing={{ base: 2, md: 4 }} justify=\"flex-end\" flexDirection={{ base: \"column-reverse\", md: \"row\" }} align={{ base: \"stretch\", md: \"center\" }}>\n              <Button\n                bg=\"rgba(255, 255, 255, 0.1)\"\n                color={textPrimary}\n                _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n                onClick={() => navigate('/calendars')}\n                width={{ base: \"100%\", md: \"auto\" }}\n                size={{ base: \"md\", md: \"lg\" }}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                bg={primaryColor}\n                color=\"white\"\n                _hover={{ bg: primaryHover, transform: \"translateY(-2px)\" }}\n                _active={{ transform: \"translateY(0)\" }}\n                transition=\"all 0.2s\"\n                fontWeight=\"semibold\"\n                isLoading={loading}\n                leftIcon={<CheckIcon />}\n                width={{ base: \"100%\", md: \"auto\" }}\n                minW={{ md: \"160px\" }}\n                size={{ base: \"md\", md: \"lg\" }}\n              >\n                Create Calendar\n              </Button>\n            </HStack>\n          </Stack>\n        </Box>\n      </Stack>\n      </Container>\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default NewCalendar;"],"names":["CREATE_CALENDAR","gql","_templateObject","_taggedTemplateLiteral","GET_COMPANIES","_templateObject2","GET_EMPLOYEES","_templateObject3","NewCalendar","navigate","useNavigate","toast","useToast","user","useAuth","colorMode","useColorMode","bgMain","useBreakpointValue","base","md","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","usePageTitle","formData","setFormData","useState","name","description","type","color","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","isShared","publicRead","publicWrite","requireAuth","allowedUsers","linkedCompanyId","linkedEmployeeId","defaultReminders","reminderMinutes","workingHoursStart","workingHoursEnd","workingDays","data","companiesData","useQuery","employeesData","calendarTypes","Object","entries","CalendarType","map","_ref","key","value","label","replace","trim","createCalendar","loading","CalendarVisibility","_ref2","useMutation","onCompleted","title","concat","status","duration","id","onError","error","message","handleChange","e","target","prev","_objectSpread","handleSwitchChange","field","checked","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","calendarsModuleConfig","Container","maxW","lg","py","flex","Stack","spacing","VStack","align","HStack","justify","Heading","size","fontFamily","brandConfig","fonts","heading","CalendarIcon","Text","Button","leftIcon","ArrowBackIcon","_hover","transform","_active","transition","onClick","width","minW","as","onSubmit","preventDefault","input","settings","defaultReminderMinutes","isPublic","length","shares","userId","sharedWithId","sharedWithType","permissions","companyId","variables","backdropFilter","boxShadow","border","borderColor","borderRadius","p","fontSize","fontWeight","FormControl","isRequired","FormLabel","Input","onChange","placeholder","_placeholder","_focus","Textarea","rows","Select","FormHelperText","companies","company","employees","employee","fName","lName","email","Divider","mb","Switch","isChecked","_Fragment","wrap","day","Badge","includes","px","cursor","filter","d","handleDayToggle","slice","InputGroup","min","InputLeftAddon","isLoading","CheckIcon","FooterWithFourColumns"],"sourceRoot":""}