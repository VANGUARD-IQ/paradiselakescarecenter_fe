{"version":3,"file":"static/js/1264.e1308209.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/ViewOff.mjs","../node_modules/@chakra-ui/icons/dist/esm/ChevronLeft.mjs","pages/youtubetoipfs/config.ts","../node_modules/@chakra-ui/react/dist/esm/aspect-ratio/aspect-ratio.mjs","components/IPFSVideoPlayer.tsx","pages/passwords/PasswordDetails.tsx"],"sourcesContent":["import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" })\n  ] })\n});\n\nexport { ViewOffIcon };\n","import { createIcon } from '@chakra-ui/react';\n\nconst ChevronLeftIcon = createIcon({\n  d: \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\",\n  displayName: \"ChevronLeftIcon\"\n});\n\nexport { ChevronLeftIcon };\n","// IPFS Configuration\nexport const IPFS_CONFIG = {\n  // Your private Pinata gateway\n  PRIVATE_GATEWAY_URL: 'https://scarlet-professional-perch-484.mypinata.cloud/ipfs',\n\n  // Public gateway fallback (if needed)\n  PUBLIC_GATEWAY_URL: 'https://gateway.pinata.cloud/ipfs',\n\n  // Helper function to construct IPFS URL\n  getIPFSUrl: (cid: string, usePrivate: boolean = true): string => {\n    const gateway = usePrivate ? IPFS_CONFIG.PRIVATE_GATEWAY_URL : IPFS_CONFIG.PUBLIC_GATEWAY_URL;\n    return `${gateway}/${cid}`;\n  }\n};\n\nexport default IPFS_CONFIG;","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx, mapResponsive } from '@chakra-ui/utils';\nimport { Children } from 'react';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst AspectRatio = forwardRef(\n  function(props, ref) {\n    const { ratio = 4 / 3, children, className, ...rest } = props;\n    const child = Children.only(children);\n    const _className = cx(\"chakra-aspect-ratio\", className);\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ref,\n        position: \"relative\",\n        className: _className,\n        _before: {\n          height: 0,\n          content: `\"\"`,\n          display: \"block\",\n          paddingBottom: mapResponsive(ratio, (r) => `${1 / r * 100}%`)\n        },\n        __css: {\n          \"& > *:not(style)\": {\n            overflow: \"hidden\",\n            position: \"absolute\",\n            top: \"0\",\n            right: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            width: \"100%\",\n            height: \"100%\"\n          },\n          \"& > img, & > video\": {\n            objectFit: \"cover\"\n          }\n        },\n        ...rest,\n        children: child\n      }\n    );\n  }\n);\nAspectRatio.displayName = \"AspectRatio\";\n\nexport { AspectRatio };\n","import React, { useState, useRef } from 'react';\nimport {\n    Box,\n    VStack,\n    HStack,\n    Text,\n    AspectRatio,\n    Card,\n    CardBody,\n    Badge,\n    IconButton,\n    useColorMode,\n    Tooltip,\n} from '@chakra-ui/react';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons';\nimport { getColor } from '../brandConfig';\nimport { IPFS_CONFIG } from '../pages/youtubetoipfs/config';\n\ninterface InstructionalVideo {\n    ipfsHash: string;\n    title: string;\n    description?: string;\n    ipfsUrl?: string;\n}\n\ninterface IPFSVideoPlayerProps {\n    videos: InstructionalVideo[];\n    autoplay?: boolean;\n}\n\nexport const IPFSVideoPlayer: React.FC<IPFSVideoPlayerProps> = ({ videos, autoplay = false }) => {\n    const { colorMode } = useColorMode();\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n    const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.cardGradient\", colorMode);\n    const cardBorder = getColor(colorMode === 'light' ? \"border.light\" : \"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n\n    if (!videos || videos.length === 0) {\n        return null;\n    }\n\n    const currentVideo = videos[currentIndex];\n    const hasMultiple = videos.length > 1;\n\n    const handlePrevious = () => {\n        if (currentIndex > 0) {\n            setCurrentIndex(currentIndex - 1);\n        }\n    };\n\n    const handleNext = () => {\n        if (currentIndex < videos.length - 1) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    };\n\n    const handleVideoEnd = () => {\n        // Auto-advance to next video if available\n        if (currentIndex < videos.length - 1) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    };\n\n    return (\n        <Card bg={cardBg} border=\"1px solid\" borderColor={cardBorder}>\n            <CardBody>\n                <VStack spacing={4} align=\"stretch\">\n                    {/* Video Title */}\n                    <HStack justify=\"space-between\" align=\"start\">\n                        <VStack align=\"start\" spacing={1}>\n                            <Text fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n                                {currentVideo.title}\n                            </Text>\n                            {currentVideo.description && (\n                                <Text fontSize=\"sm\" color={textSecondary}>\n                                    {currentVideo.description}\n                                </Text>\n                            )}\n                        </VStack>\n                        {hasMultiple && (\n                            <Badge colorScheme=\"purple\">\n                                {currentIndex + 1} of {videos.length}\n                            </Badge>\n                        )}\n                    </HStack>\n\n                    {/* Video Player */}\n                    <AspectRatio ratio={16 / 9} w=\"100%\">\n                        <video\n                            ref={videoRef}\n                            key={currentVideo.ipfsHash} // Force re-render when video changes\n                            controls\n                            autoPlay={autoplay}\n                            onEnded={handleVideoEnd}\n                            style={{\n                                width: '100%',\n                                height: '100%',\n                                borderRadius: '8px',\n                                backgroundColor: '#000',\n                            }}\n                        >\n                            <source\n                                src={currentVideo.ipfsUrl || IPFS_CONFIG.getIPFSUrl(currentVideo.ipfsHash)}\n                                type=\"video/mp4\"\n                            />\n                            Your browser does not support the video tag.\n                        </video>\n                    </AspectRatio>\n\n                    {/* Playlist Navigation */}\n                    {hasMultiple && (\n                        <HStack justify=\"space-between\" align=\"center\">\n                            <Tooltip label=\"Previous video\">\n                                <IconButton\n                                    aria-label=\"Previous video\"\n                                    icon={<ChevronLeftIcon />}\n                                    onClick={handlePrevious}\n                                    isDisabled={currentIndex === 0}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                />\n                            </Tooltip>\n\n                            <VStack spacing={1}>\n                                <Text fontSize=\"xs\" color={textSecondary} textAlign=\"center\">\n                                    Video {currentIndex + 1} of {videos.length}\n                                </Text>\n                            </VStack>\n\n                            <Tooltip label=\"Next video\">\n                                <IconButton\n                                    aria-label=\"Next video\"\n                                    icon={<ChevronRightIcon />}\n                                    onClick={handleNext}\n                                    isDisabled={currentIndex === videos.length - 1}\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                />\n                            </Tooltip>\n                        </HStack>\n                    )}\n\n                    {/* Playlist Thumbnails */}\n                    {hasMultiple && videos.length > 1 && (\n                        <Box>\n                            <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary} mb={2}>\n                                Playlist:\n                            </Text>\n                            <VStack spacing={2} align=\"stretch\">\n                                {videos.map((video, index) => (\n                                    <HStack\n                                        key={video.ipfsHash}\n                                        p={2}\n                                        bg={index === currentIndex ? 'blue.500' : colorMode === 'light' ? 'gray.50' : 'rgba(255, 255, 255, 0.05)'}\n                                        borderRadius=\"md\"\n                                        cursor=\"pointer\"\n                                        onClick={() => setCurrentIndex(index)}\n                                        borderWidth=\"1px\"\n                                        borderColor={index === currentIndex ? 'blue.500' : cardBorder}\n                                        _hover={{\n                                            bg: index === currentIndex ? 'blue.600' : colorMode === 'light' ? 'gray.100' : 'rgba(255, 255, 255, 0.1)'\n                                        }}\n                                    >\n                                        <Badge colorScheme={index === currentIndex ? 'white' : 'gray'}>\n                                            {index + 1}\n                                        </Badge>\n                                        <VStack align=\"start\" spacing={0} flex={1}>\n                                            <Text\n                                                fontSize=\"sm\"\n                                                fontWeight={index === currentIndex ? 'bold' : 'normal'}\n                                                color={index === currentIndex ? 'white' : textPrimary}\n                                                noOfLines={1}\n                                            >\n                                                {video.title}\n                                            </Text>\n                                            {video.description && (\n                                                <Text\n                                                    fontSize=\"xs\"\n                                                    color={index === currentIndex ? 'whiteAlpha.800' : textSecondary}\n                                                    noOfLines={1}\n                                                >\n                                                    {video.description}\n                                                </Text>\n                                            )}\n                                        </VStack>\n                                    </HStack>\n                                ))}\n                            </VStack>\n                        </Box>\n                    )}\n                </VStack>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default IPFSVideoPlayer;\n","import React, { useState } from \"react\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    useColorMode,\n    VStack,\n    HStack,\n    Card,\n    CardBody,\n    CardHeader,\n    FormControl,\n    FormLabel,\n    Input,\n    Textarea,\n    InputGroup,\n    InputRightElement,\n    IconButton,\n    Badge,\n    Spinner,\n    Center,\n    Alert,\n    AlertIcon,\n    useToast,\n    Divider,\n    Button,\n} from \"@chakra-ui/react\";\nimport { ViewIcon, ViewOffIcon, CopyIcon, ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport passwordsModuleConfig from \"./moduleConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { IPFSVideoPlayer } from \"../../components/IPFSVideoPlayer\";\n\nconst GET_PASSWORD = gql`\n    query GetPassword($id: ID!) {\n        password(id: $id) {\n            id\n            serviceName\n            loginUrl\n            dashboardUrl\n            username\n            email\n            password\n            twoFactorSecret\n            twoFactorBackupCodes\n            notes\n            company {\n                id\n                name\n                tradingName\n            }\n            createdBy {\n                id\n                fName\n                lName\n                email\n            }\n            isActive\n            expiresAt\n            instructionalVideos {\n                ipfsHash\n                title\n                description\n                ipfsUrl\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\nconst PasswordDetails: React.FC = () => {\n    usePageTitle(\"Password Details\");\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n\n    const [showPassword, setShowPassword] = useState(false);\n    const [showTwoFactor, setShowTwoFactor] = useState(false);\n\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    const { data, loading, error } = useQuery(GET_PASSWORD, {\n        variables: { id },\n        skip: !id,\n    });\n\n    const copyToClipboard = (text: string, label: string) => {\n        navigator.clipboard.writeText(text);\n        toast({\n            title: `${label} copied`,\n            status: \"success\",\n            duration: 2000,\n        });\n    };\n\n    if (loading) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Center py={20}>\n                        <Spinner size=\"xl\" />\n                    </Center>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error || !data?.password) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Alert status=\"error\">\n                        <AlertIcon />\n                        {error?.message || \"Password not found\"}\n                    </Alert>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const password = data.password;\n    const isExpired = password.expiresAt && new Date(password.expiresAt) < new Date();\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n\n            <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                <VStack spacing={6} align=\"stretch\">\n                    <HStack justify=\"space-between\">\n                        <VStack align=\"start\" spacing={1}>\n                            <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                                {password.serviceName}\n                            </Heading>\n                            <HStack>\n                                <Badge colorScheme={password.isActive ? \"green\" : \"red\"}>\n                                    {password.isActive ? \"Active\" : \"Inactive\"}\n                                </Badge>\n                                {isExpired && (\n                                    <Badge colorScheme=\"orange\">Expired</Badge>\n                                )}\n                            </HStack>\n                        </VStack>\n                        <Button\n                            variant=\"outline\"\n                            onClick={() => navigate(\"/passwords/admin\")}\n                        >\n                            Back to Passwords\n                        </Button>\n                    </HStack>\n\n                    {/* Password Information Card */}\n                    <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                        <CardHeader>\n                            <Heading size=\"md\" color={textPrimary}>Login Information</Heading>\n                        </CardHeader>\n                        <CardBody>\n                            <VStack spacing={4} align=\"stretch\">\n                                {password.loginUrl && (\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Login URL</FormLabel>\n                                        <HStack>\n                                            <Input\n                                                value={password.loginUrl}\n                                                isReadOnly\n                                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                color={textPrimary}\n                                            />\n                                            <IconButton\n                                                aria-label=\"Open URL\"\n                                                icon={<ExternalLinkIcon />}\n                                                onClick={() => window.open(password.loginUrl, '_blank')}\n                                            />\n                                        </HStack>\n                                    </FormControl>\n                                )}\n\n                                {password.dashboardUrl && (\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Dashboard URL</FormLabel>\n                                        <HStack>\n                                            <Input\n                                                value={password.dashboardUrl}\n                                                isReadOnly\n                                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                color={textPrimary}\n                                            />\n                                            <IconButton\n                                                aria-label=\"Open URL\"\n                                                icon={<ExternalLinkIcon />}\n                                                onClick={() => window.open(password.dashboardUrl, '_blank')}\n                                            />\n                                        </HStack>\n                                    </FormControl>\n                                )}\n\n                                {password.username && (\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Username</FormLabel>\n                                        <InputGroup>\n                                            <Input\n                                                value={password.username}\n                                                isReadOnly\n                                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                color={textPrimary}\n                                            />\n                                            <InputRightElement>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Copy username\"\n                                                    icon={<CopyIcon />}\n                                                    onClick={() => copyToClipboard(password.username, \"Username\")}\n                                                />\n                                            </InputRightElement>\n                                        </InputGroup>\n                                    </FormControl>\n                                )}\n\n                                {password.email && (\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Email</FormLabel>\n                                        <InputGroup>\n                                            <Input\n                                                value={password.email}\n                                                isReadOnly\n                                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                color={textPrimary}\n                                            />\n                                            <InputRightElement>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Copy email\"\n                                                    icon={<CopyIcon />}\n                                                    onClick={() => copyToClipboard(password.email, \"Email\")}\n                                                />\n                                            </InputRightElement>\n                                        </InputGroup>\n                                    </FormControl>\n                                )}\n\n                                <FormControl>\n                                    <FormLabel color={textPrimary}>Password</FormLabel>\n                                    <InputGroup>\n                                        <Input\n                                            type={showPassword ? \"text\" : \"password\"}\n                                            value={password.password}\n                                            isReadOnly\n                                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                            color={textPrimary}\n                                            fontFamily=\"mono\"\n                                        />\n                                        <InputRightElement width=\"4.5rem\">\n                                            <HStack spacing={1}>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Toggle password\"\n                                                    icon={showPassword ? <ViewOffIcon /> : <ViewIcon />}\n                                                    onClick={() => setShowPassword(!showPassword)}\n                                                />\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Copy password\"\n                                                    icon={<CopyIcon />}\n                                                    onClick={() => copyToClipboard(password.password, \"Password\")}\n                                                />\n                                            </HStack>\n                                        </InputRightElement>\n                                    </InputGroup>\n                                </FormControl>\n\n                                {password.twoFactorSecret && (\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>2FA Secret</FormLabel>\n                                        <InputGroup>\n                                            <Input\n                                                type={showTwoFactor ? \"text\" : \"password\"}\n                                                value={password.twoFactorSecret}\n                                                isReadOnly\n                                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                color={textPrimary}\n                                                fontFamily=\"mono\"\n                                            />\n                                            <InputRightElement width=\"4.5rem\">\n                                                <HStack spacing={1}>\n                                                    <IconButton\n                                                        size=\"sm\"\n                                                        variant=\"ghost\"\n                                                        aria-label=\"Toggle 2FA\"\n                                                        icon={showTwoFactor ? <ViewOffIcon /> : <ViewIcon />}\n                                                        onClick={() => setShowTwoFactor(!showTwoFactor)}\n                                                    />\n                                                    <IconButton\n                                                        size=\"sm\"\n                                                        variant=\"ghost\"\n                                                        aria-label=\"Copy 2FA\"\n                                                        icon={<CopyIcon />}\n                                                        onClick={() => copyToClipboard(password.twoFactorSecret, \"2FA Secret\")}\n                                                    />\n                                                </HStack>\n                                            </InputRightElement>\n                                        </InputGroup>\n                                    </FormControl>\n                                )}\n\n                                {password.notes && (\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Notes</FormLabel>\n                                        <Textarea\n                                            value={password.notes}\n                                            isReadOnly\n                                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                            color={textPrimary}\n                                            rows={4}\n                                        />\n                                    </FormControl>\n                                )}\n                            </VStack>\n                        </CardBody>\n                    </Card>\n\n                    {/* Instructional Videos */}\n                    {password.instructionalVideos && password.instructionalVideos.length > 0 && (\n                        <Box>\n                            <Heading size=\"md\" color={textPrimary} mb={4}>\n                                Instructional Videos\n                            </Heading>\n                            <IPFSVideoPlayer videos={password.instructionalVideos} autoplay={false} />\n                        </Box>\n                    )}\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default PasswordDetails;"],"names":["ViewOffIcon","createIcon","displayName","path","jsxs","fill","children","jsx","d","ChevronLeftIcon","IPFS_CONFIG","PRIVATE_GATEWAY_URL","PUBLIC_GATEWAY_URL","getIPFSUrl","cid","gateway","arguments","length","undefined","concat","_excluded","AspectRatio","forwardRef","props","ref","ratio","className","rest","_objectWithoutProperties","child","Children","only","_className","cx","chakra","div","_objectSpread","position","_before","height","content","display","paddingBottom","mapResponsive","r","__css","overflow","top","right","bottom","left","justifyContent","alignItems","width","objectFit","IPFSVideoPlayer","_ref","videos","autoplay","colorMode","useColorMode","currentIndex","setCurrentIndex","useState","videoRef","useRef","cardBg","getColor","cardBorder","textPrimary","textSecondary","currentVideo","hasMultiple","_jsx","Card","bg","border","borderColor","CardBody","_jsxs","VStack","spacing","align","HStack","justify","Text","fontSize","fontWeight","color","title","description","Badge","colorScheme","w","controls","autoPlay","onEnded","handleVideoEnd","style","borderRadius","backgroundColor","src","ipfsUrl","ipfsHash","type","Tooltip","label","IconButton","icon","onClick","handlePrevious","isDisabled","size","variant","textAlign","ChevronRightIcon","handleNext","Box","mb","map","video","index","p","cursor","borderWidth","_hover","flex","noOfLines","GET_PASSWORD","gql","_templateObject","_taggedTemplateLiteral","PasswordDetails","usePageTitle","id","useParams","navigate","useNavigate","toast","useToast","showPassword","setShowPassword","showTwoFactor","setShowTwoFactor","bgMain","cardGradientBg","data","loading","error","useQuery","variables","skip","copyToClipboard","text","navigator","clipboard","writeText","status","duration","minH","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","passwordsModuleConfig","Container","maxW","py","Center","Spinner","FooterWithFourColumns","password","Alert","AlertIcon","message","isExpired","expiresAt","Date","Heading","fontFamily","brandConfig","fonts","heading","serviceName","isActive","Button","CardHeader","loginUrl","FormControl","FormLabel","Input","value","isReadOnly","ExternalLinkIcon","window","open","dashboardUrl","username","InputGroup","InputRightElement","CopyIcon","email","ViewIcon","twoFactorSecret","notes","Textarea","rows","instructionalVideos"],"sourceRoot":""}