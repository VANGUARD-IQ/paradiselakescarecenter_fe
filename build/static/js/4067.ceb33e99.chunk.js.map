{"version":3,"file":"static/js/4067.ceb33e99.chunk.js","mappings":"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","sources":["pages/clients/NewClientForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  Container,\n  useToast,\n  Box,\n  useColorMode,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from \"@chakra-ui/react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport PhoneInput from \"react-phone-number-input\"\nimport \"react-phone-number-input/style.css\"\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport clientsModuleConfig from \"./moduleConfig\";\n\ninterface FormData {\n  email: string;\n  fName: string;\n  lName: string;\n  phoneNumber: string;\n}\n\nconst initialFormData: FormData = {\n  email: \"\",\n  fName: \"\",\n  lName: \"\",\n  phoneNumber: \"\",\n};\n\nconst CREATE_CLIENT = gql`\n  mutation CreateClient($input: ClientInput!) {\n    createClient(input: $input) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\n\n\nconst NewClientForm = () => {\n  usePageTitle(\"New Client\");\n  const [searchParams] = useSearchParams();\n  const [formData, setFormData] = useState<FormData>(initialFormData);\n  const [isFromBooking, setIsFromBooking] = useState(false);\n  const [createClient, { loading }] = useMutation(CREATE_CLIENT, {\n    refetchQueries: [\"GetClients\"]\n  });\n  const toast = useToast();\n  const navigate = useNavigate();\n  const { colorMode } = useColorMode();\n\n  // Pre-fill from URL parameters (e.g., from booking)\n  useEffect(() => {\n    const fName = searchParams.get('fName');\n    const lName = searchParams.get('lName');\n    const email = searchParams.get('email');\n    const phoneNumber = searchParams.get('phoneNumber');\n    const source = searchParams.get('source');\n\n    if (fName || lName || email || phoneNumber) {\n      console.log('ðŸ“‹ Pre-filling client form from URL params');\n      setFormData({\n        fName: fName || '',\n        lName: lName || '',\n        email: email || '',\n        phoneNumber: phoneNumber || '',\n      });\n\n      if (source === 'booking') {\n        setIsFromBooking(true);\n      }\n    }\n  }, [searchParams]);\n\n  // Consistent styling from brandConfig with theme support\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!formData.fName.trim() || !formData.lName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in first name and last name\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // Only validate email if it's provided\n    if (formData.email.trim()) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(formData.email)) {\n        toast({\n          title: \"Invalid Email\",\n          description: \"Please enter a valid email address\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n        return;\n      }\n    }\n\n    if (!formData.phoneNumber ||\n      !formData.phoneNumber.match(/^\\+[1-9]\\d{1,14}$/)) {\n      toast({\n        title: \"Invalid phone number\",\n        description: \"Please enter a valid phone number in E.164 format (e.g., +12345678901)\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    try {\n      const cleanPhoneNumber = formData.phoneNumber.replace(/\\s+/g, \"\");\n\n      const input: any = {\n        fName: formData.fName.trim(),\n        lName: formData.lName.trim(),\n        phoneNumber: cleanPhoneNumber\n      };\n\n      // Only include email if it's provided\n      if (formData.email.trim()) {\n        input.email = formData.email.trim();\n      }\n\n      await createClient({\n        variables: { input }\n      });\n\n      toast({\n        title: \"Success!\",\n        description: \"New client has been successfully added\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n\n      navigate(\"/clients\");\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      toast({\n        title: \"Error creating client\",\n        description: error instanceof Error\n          ? error.message\n          : \"There was an error creating the client. Please try again.\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={clientsModuleConfig} />\n      <Container maxW=\"container.md\" py={4} flex=\"1\">\n        <Card\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px\"\n          borderColor={cardBorder}\n          borderRadius=\"xl\"\n          overflow=\"hidden\"\n        >\n          <CardHeader borderBottom=\"1px\" borderColor={cardBorder}>\n            <Heading\n              size=\"lg\"\n              color={textPrimary}\n              fontFamily={brandConfig.fonts.heading}\n              fontWeight=\"600\"\n            >\n              ðŸ‘¥ New Client\n            </Heading>\n          </CardHeader>\n          <CardBody p={8}>\n            {isFromBooking && (\n              <Alert status=\"info\" mb={6} borderRadius=\"md\">\n                <AlertIcon />\n                <Box>\n                  <AlertTitle>Pre-filled from Booking</AlertTitle>\n                  <AlertDescription fontSize=\"sm\">\n                    This form has been pre-filled with information from a public booking. Review and save to create the client record.\n                  </AlertDescription>\n                </Box>\n              </Alert>\n            )}\n            <form onSubmit={handleSubmit}>\n              <Stack spacing={6}>\n                <FormControl isRequired>\n                  <FormLabel\n                    color={textPrimary}\n                    fontWeight=\"500\"\n                    fontSize=\"sm\"\n                    mb={2}\n                  >\n                    First Name\n                  </FormLabel>\n                  <Input\n                    name=\"fName\"\n                    value={formData.fName}\n                    onChange={handleChange}\n                    placeholder=\"Enter first name\"\n                    bg={colorMode === 'light' ? \"white\" : \"rgba(0, 0, 0, 0.2)\"}\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    _focus={{\n                      borderColor: colorMode === 'light' ? \"#007AFF\" : textSecondary,\n                      boxShadow: colorMode === 'light'\n                        ? \"0 0 0 1px rgba(0, 122, 255, 0.2)\"\n                        : \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                      outline: \"none\"\n                    }}\n                    _hover={{\n                      borderColor: colorMode === 'light' ? \"#007AFF\" : textSecondary\n                    }}\n                    size=\"lg\"\n                    fontFamily={brandConfig.fonts.body}\n                  />\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel\n                    color={textPrimary}\n                    fontWeight=\"500\"\n                    fontSize=\"sm\"\n                    mb={2}\n                  >\n                    Last Name\n                  </FormLabel>\n                  <Input\n                    name=\"lName\"\n                    value={formData.lName}\n                    onChange={handleChange}\n                    placeholder=\"Enter last name\"\n                    bg={colorMode === 'light' ? \"white\" : \"rgba(0, 0, 0, 0.2)\"}\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    _focus={{\n                      borderColor: colorMode === 'light' ? \"#007AFF\" : textSecondary,\n                      boxShadow: colorMode === 'light'\n                        ? \"0 0 0 1px rgba(0, 122, 255, 0.2)\"\n                        : \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                      outline: \"none\"\n                    }}\n                    _hover={{\n                      borderColor: colorMode === 'light' ? \"#007AFF\" : textSecondary\n                    }}\n                    size=\"lg\"\n                    fontFamily={brandConfig.fonts.body}\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel\n                    color={textPrimary}\n                    fontWeight=\"500\"\n                    fontSize=\"sm\"\n                    mb={2}\n                  >\n                    Email (Optional)\n                  </FormLabel>\n                  <Input\n                    name=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    placeholder=\"john@example.com (optional)\"\n                    onChange={handleChange}\n                    bg={colorMode === 'light' ? \"white\" : \"rgba(0, 0, 0, 0.2)\"}\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    _focus={{\n                      borderColor: colorMode === 'light' ? \"#007AFF\" : textSecondary,\n                      boxShadow: colorMode === 'light'\n                        ? \"0 0 0 1px rgba(0, 122, 255, 0.2)\"\n                        : \"0 0 0 1px rgba(255, 255, 255, 0.1)\",\n                      outline: \"none\"\n                    }}\n                    _hover={{\n                      borderColor: colorMode === 'light' ? \"#007AFF\" : textSecondary\n                    }}\n                    size=\"lg\"\n                    fontFamily={brandConfig.fonts.body}\n                  />\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel\n                    color={textPrimary}\n                    fontWeight=\"500\"\n                    fontSize=\"sm\"\n                    mb={2}\n                  >\n                    Phone Number\n                  </FormLabel>\n                  <Box\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                    _focusWithin={{\n                      borderColor: textSecondary,\n                      boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\"\n                    }}\n                    _hover={{\n                      borderColor: textSecondary\n                    }}\n                    bg=\"rgba(0, 0, 0, 0.2)\"\n                    p={3}\n                  >\n                    <PhoneInput\n                      international\n                      defaultCountry=\"AU\"\n                      value={formData.phoneNumber}\n                      onChange={(value) => {\n                        console.log(\"Phone input value:\", value);\n                        setFormData(prev => ({ ...prev, phoneNumber: value || \"\" }))\n                      }}\n                      placeholder=\"Enter phone number\"\n                      style={{\n                        \".PhoneInputInput\": {\n                          border: \"none\",\n                          outline: \"none\",\n                          background: \"transparent\",\n                          fontSize: \"16px\",\n                          fontFamily: brandConfig.fonts.body,\n                          color: textPrimary\n                        },\n                        \".PhoneInputCountrySelect\": {\n                          border: \"none\",\n                          background: \"transparent\",\n                          color: textPrimary\n                        }\n                      }}\n                    />\n                  </Box>\n                </FormControl>\n\n                <Button\n                  type=\"submit\"\n                  bg=\"white\"\n                  color=\"black\"\n                  _hover={{ \n                    bg: \"gray.100\",\n                    transform: \"translateY(-2px)\"\n                  }}\n                  _active={{ transform: \"translateY(1px)\" }}\n                  isLoading={loading}\n                  loadingText=\"Creating Client...\"\n                  size=\"lg\"\n                  borderRadius=\"lg\"\n                  fontWeight=\"600\"\n                  boxShadow=\"0 2px 4px rgba(255, 255, 255, 0.1)\"\n                  mt={4}\n                  fontFamily={brandConfig.fonts.body}\n                >\n                  Create Client\n                </Button>\n              </Stack>\n            </form>\n          </CardBody>\n        </Card>\n      </Container>\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default NewClientForm;\n"],"names":["initialFormData","email","fName","lName","phoneNumber","CREATE_CLIENT","gql","_templateObject","_taggedTemplateLiteral","NewClientForm","usePageTitle","searchParams","useSearchParams","formData","setFormData","useState","isFromBooking","setIsFromBooking","createClient","loading","useMutation","refetchQueries","toast","useToast","navigate","useNavigate","colorMode","useColorMode","useEffect","get","source","console","log","bg","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","handleChange","e","name","value","target","prev","_objectSpread","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","clientsModuleConfig","Container","maxW","py","flex","Card","backdropFilter","boxShadow","border","borderColor","borderRadius","overflow","CardHeader","borderBottom","Heading","size","color","fontFamily","brandConfig","fonts","heading","fontWeight","CardBody","p","Alert","status","mb","AlertIcon","AlertTitle","AlertDescription","fontSize","onSubmit","async","preventDefault","trim","test","title","description","duration","isClosable","match","cleanPhoneNumber","replace","input","variables","error","Error","message","Stack","spacing","FormControl","isRequired","FormLabel","Input","onChange","placeholder","_placeholder","_focus","outline","_hover","body","type","_focusWithin","PhoneInput","international","defaultCountry","style","background","Button","transform","_active","isLoading","loadingText","mt","FooterWithFourColumns"],"sourceRoot":""}