{"version":3,"file":"static/js/2416.ff535700.chunk.js","mappings":"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","sources":["pages/youtubetoipfs/UploadVideo.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Input,\n  Textarea,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Progress,\n  Alert,\n  AlertIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  useToast,\n  IconButton,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  WrapItem,\n  Switch,\n  useColorModeValue,\n  Divider,\n  Badge,\n  Link as ChakraLink\n} from '@chakra-ui/react';\nimport { FiUpload, FiVideo, FiX, FiPlus, FiExternalLink, FiCopy } from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport youtubeToIPFSModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst UPLOAD_VIDEO_TO_IPFS = gql`\n  mutation UploadVideoToIPFS($file: Upload!, $input: IPFSVideoInput!) {\n    uploadVideoToIPFS(file: $file, input: $input) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      fileSize\n      mimeType\n      tags\n      isPublic\n      createdAt\n    }\n  }\n`;\n\nconst UploadVideo: React.FC = () => {\n  usePageTitle(\"Upload Video\");\n  const navigate = useNavigate();\n  const toast = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const bg = useColorModeValue('gray.50', 'gray.900');\n  const cardBg = useColorModeValue('white', 'gray.800');\n\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [videoPreview, setVideoPreview] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    tags: [] as string[],\n    isPublic: true\n  });\n  const [tagInput, setTagInput] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadedVideo, setUploadedVideo] = useState<any>(null);\n\n  const [uploadVideoToIPFS] = useMutation(UPLOAD_VIDEO_TO_IPFS, {\n    onCompleted: (data) => {\n      console.log('Upload completed:', data);\n      setUploadedVideo(data.uploadVideoToIPFS);\n      setUploadProgress(100);\n      toast({\n        title: 'Video uploaded successfully!',\n        description: 'Your video has been uploaded to IPFS',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      // Reset form\n      setSelectedFile(null);\n      setVideoPreview(null);\n      setFormData({\n        title: '',\n        description: '',\n        tags: [],\n        isPublic: true\n      });\n    },\n    onError: (error) => {\n      console.error('Upload error:', error);\n      toast({\n        title: 'Upload failed',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file type\n      const allowedTypes = ['video/mp4', 'video/mpeg', 'video/quicktime', 'video/x-msvideo'];\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: 'Invalid file type',\n          description: 'Please select an MP4, MPEG, MOV, or AVI video file',\n          status: 'error',\n          duration: 3000,\n        });\n        return;\n      }\n\n      // Validate file size (500MB limit)\n      const maxSize = 500 * 1024 * 1024;\n      if (file.size > maxSize) {\n        toast({\n          title: 'File too large',\n          description: `File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds the 500MB limit`,\n          status: 'error',\n          duration: 3000,\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n      // Create preview URL\n      const url = URL.createObjectURL(file);\n      setVideoPreview(url);\n\n      // Auto-fill title if empty\n      if (!formData.title) {\n        const fileName = file.name.replace(/\\.[^/.]+$/, ''); // Remove extension\n        setFormData(prev => ({ ...prev, title: fileName }));\n      }\n    }\n  };\n\n  const handleAddTag = () => {\n    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, tagInput.trim()]\n      }));\n      setTagInput('');\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      toast({\n        title: 'No file selected',\n        description: 'Please select a video file to upload',\n        status: 'warning',\n        duration: 3000,\n      });\n      return;\n    }\n\n    if (!formData.title.trim()) {\n      toast({\n        title: 'Title required',\n        description: 'Please enter a title for your video',\n        status: 'warning',\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    // Simulate upload progress\n    const progressInterval = setInterval(() => {\n      setUploadProgress(prev => {\n        if (prev >= 90) {\n          clearInterval(progressInterval);\n          return prev;\n        }\n        return prev + 10;\n      });\n    }, 500);\n\n    try {\n      await uploadVideoToIPFS({\n        variables: {\n          file: selectedFile,\n          input: {\n            title: formData.title,\n            description: formData.description,\n            tags: formData.tags,\n            isPublic: formData.isPublic\n          }\n        }\n      });\n      clearInterval(progressInterval);\n    } catch (error) {\n      clearInterval(progressInterval);\n      console.error('Upload error:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: 'Copied to clipboard',\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  return (\n    <Box bg={bg} minH=\"100vh\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={youtubeToIPFSModuleConfig} />\n\n      <Container maxW=\"4xl\" py={8}>\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <HStack justify=\"space-between\">\n            <VStack align=\"start\" spacing={1}>\n              <Heading size=\"lg\">Upload Video to IPFS</Heading>\n              <Text color=\"gray.600\">\n                Upload your videos to the decentralized web\n              </Text>\n            </VStack>\n            <Button\n              leftIcon={<FiVideo />}\n              onClick={() => navigate('/youtubetoipfs')}\n              variant=\"outline\"\n            >\n              My Videos\n            </Button>\n          </HStack>\n\n          {/* Upload Form */}\n          <Card bg={cardBg}>\n            <CardHeader>\n              <Text fontWeight=\"bold\">Video Upload</Text>\n            </CardHeader>\n            <CardBody>\n              <VStack spacing={6} align=\"stretch\">\n                {/* File Selection */}\n                <FormControl>\n                  <FormLabel>Select Video File</FormLabel>\n                  <Input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"video/mp4,video/mpeg,video/quicktime,video/x-msvideo\"\n                    onChange={handleFileSelect}\n                    display=\"none\"\n                  />\n                  <Button\n                    leftIcon={<FiUpload />}\n                    onClick={() => fileInputRef.current?.click()}\n                    colorScheme=\"blue\"\n                    size=\"lg\"\n                    w=\"full\"\n                  >\n                    Choose Video File\n                  </Button>\n                  <FormHelperText>\n                    Supported formats: MP4, MPEG, MOV, AVI (Max 500MB)\n                  </FormHelperText>\n                </FormControl>\n\n                {/* Video Preview */}\n                {selectedFile && videoPreview && (\n                  <Box>\n                    <HStack justify=\"space-between\" mb={2}>\n                      <Text fontWeight=\"medium\">Preview</Text>\n                      <IconButton\n                        icon={<FiX />}\n                        aria-label=\"Remove video\"\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setSelectedFile(null);\n                          setVideoPreview(null);\n                        }}\n                      />\n                    </HStack>\n                    <Box borderRadius=\"md\" overflow=\"hidden\" border=\"1px solid\" borderColor=\"gray.200\">\n                      <video\n                        controls\n                        width=\"100%\"\n                        style={{ maxHeight: '400px' }}\n                      >\n                        <source src={videoPreview} type={selectedFile.type} />\n                        Your browser does not support the video tag.\n                      </video>\n                    </Box>\n                    <Text fontSize=\"sm\" color=\"gray.600\" mt={2}>\n                      File: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                    </Text>\n                  </Box>\n                )}\n\n                {/* Title */}\n                <FormControl isRequired>\n                  <FormLabel>Title</FormLabel>\n                  <Input\n                    value={formData.title}\n                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Enter video title\"\n                  />\n                </FormControl>\n\n                {/* Description */}\n                <FormControl>\n                  <FormLabel>Description</FormLabel>\n                  <Textarea\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe your video (optional)\"\n                    rows={4}\n                  />\n                </FormControl>\n\n                {/* Tags */}\n                <FormControl>\n                  <FormLabel>Tags</FormLabel>\n                  <HStack>\n                    <Input\n                      value={tagInput}\n                      onChange={(e) => setTagInput(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}\n                      placeholder=\"Add tags\"\n                    />\n                    <IconButton\n                      icon={<FiPlus />}\n                      aria-label=\"Add tag\"\n                      onClick={handleAddTag}\n                    />\n                  </HStack>\n                  {formData.tags.length > 0 && (\n                    <Wrap mt={2}>\n                      {formData.tags.map((tag) => (\n                        <WrapItem key={tag}>\n                          <Tag colorScheme=\"blue\">\n                            <TagLabel>{tag}</TagLabel>\n                            <TagCloseButton onClick={() => handleRemoveTag(tag)} />\n                          </Tag>\n                        </WrapItem>\n                      ))}\n                    </Wrap>\n                  )}\n                </FormControl>\n\n                {/* Public Toggle */}\n                <FormControl>\n                  <HStack justify=\"space-between\">\n                    <Box>\n                      <FormLabel mb={0}>Make Public</FormLabel>\n                      <FormHelperText mt={0}>\n                        Public videos can be viewed by anyone with the link\n                      </FormHelperText>\n                    </Box>\n                    <Switch\n                      isChecked={formData.isPublic}\n                      onChange={(e) => setFormData(prev => ({ ...prev, isPublic: e.target.checked }))}\n                      colorScheme=\"blue\"\n                    />\n                  </HStack>\n                </FormControl>\n\n                {/* Upload Progress */}\n                {isUploading && (\n                  <Box>\n                    <Text mb={2}>Uploading... {uploadProgress}%</Text>\n                    <Progress value={uploadProgress} colorScheme=\"blue\" size=\"sm\" />\n                  </Box>\n                )}\n\n                {/* Upload Button */}\n                <Button\n                  colorScheme=\"blue\"\n                  size=\"lg\"\n                  onClick={handleUpload}\n                  isLoading={isUploading}\n                  loadingText=\"Uploading...\"\n                  isDisabled={!selectedFile || !formData.title.trim()}\n                  leftIcon={<FiUpload />}\n                >\n                  Upload to IPFS\n                </Button>\n              </VStack>\n            </CardBody>\n          </Card>\n\n          {/* Success Message */}\n          {uploadedVideo && (\n            <Alert status=\"success\" borderRadius=\"md\">\n              <AlertIcon />\n              <Box flex=\"1\">\n                <Text fontWeight=\"bold\">Video uploaded successfully!</Text>\n                <VStack align=\"start\" spacing={2} mt={2}>\n                  <HStack>\n                    <Text fontSize=\"sm\">IPFS Hash:</Text>\n                    <Badge>{uploadedVideo.ipfsHash}</Badge>\n                    <IconButton\n                      icon={<FiCopy />}\n                      aria-label=\"Copy hash\"\n                      size=\"xs\"\n                      variant=\"ghost\"\n                      onClick={() => copyToClipboard(uploadedVideo.ipfsHash)}\n                    />\n                  </HStack>\n                  <HStack>\n                    <ChakraLink\n                      href={uploadedVideo.ipfsUrl}\n                      isExternal\n                      color=\"blue.500\"\n                      fontSize=\"sm\"\n                    >\n                      View on IPFS <FiExternalLink style={{ display: 'inline' }} />\n                    </ChakraLink>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => navigate(`/youtubetoipfs/video/${uploadedVideo.id}`)}\n                    >\n                      View Details\n                    </Button>\n                  </HStack>\n                </VStack>\n              </Box>\n            </Alert>\n          )}\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default UploadVideo;"],"names":["UPLOAD_VIDEO_TO_IPFS","gql","_templateObject","_taggedTemplateLiteral","UploadVideo","usePageTitle","navigate","useNavigate","toast","useToast","fileInputRef","useRef","bg","useColorModeValue","cardBg","selectedFile","setSelectedFile","useState","videoPreview","setVideoPreview","formData","setFormData","title","description","tags","isPublic","tagInput","setTagInput","isUploading","setIsUploading","uploadProgress","setUploadProgress","uploadedVideo","setUploadedVideo","uploadVideoToIPFS","useMutation","onCompleted","data","console","log","status","duration","isClosable","onError","error","message","handleAddTag","trim","includes","prev","_objectSpread","_jsxs","Box","minH","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","youtubeToIPFSModuleConfig","Container","maxW","py","VStack","spacing","align","HStack","justify","Heading","size","Text","color","Button","leftIcon","FiVideo","onClick","variant","Card","CardHeader","fontWeight","CardBody","FormControl","FormLabel","Input","ref","type","accept","onChange","event","_event$target$files","file","target","files","maxSize","concat","toFixed","url","URL","createObjectURL","fileName","name","replace","display","FiUpload","_fileInputRef$current","current","click","colorScheme","w","FormHelperText","mb","IconButton","icon","FiX","borderRadius","overflow","border","borderColor","controls","width","style","maxHeight","src","fontSize","mt","isRequired","value","e","placeholder","Textarea","rows","onKeyPress","key","preventDefault","FiPlus","length","Wrap","map","tag","WrapItem","Tag","TagLabel","TagCloseButton","handleRemoveTag","tagToRemove","filter","Switch","isChecked","checked","Progress","async","progressInterval","setInterval","clearInterval","variables","input","isLoading","loadingText","isDisabled","Alert","AlertIcon","flex","Badge","ipfsHash","FiCopy","copyToClipboard","text","navigator","clipboard","writeText","ChakraLink","href","ipfsUrl","isExternal","FiExternalLink","id","FooterWithFourColumns"],"sourceRoot":""}