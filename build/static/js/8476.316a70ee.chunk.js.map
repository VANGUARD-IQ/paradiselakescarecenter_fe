{"version":3,"file":"static/js/8476.316a70ee.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/wrapRegExp.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/marked/src/defaults.ts","../node_modules/marked/src/rules.ts","../node_modules/marked/src/helpers.ts","../node_modules/marked/src/Tokenizer.ts","../node_modules/marked/src/Lexer.ts","../node_modules/marked/src/Renderer.ts","../node_modules/marked/src/TextRenderer.ts","../node_modules/marked/src/Parser.ts","../node_modules/marked/src/Hooks.ts","../node_modules/marked/src/marked.ts","../node_modules/marked/src/Instance.ts"],"sourcesContent":["import _typeof from \"./typeof.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport inherits from \"./inherits.js\";\nfunction _wrapRegExp() {\n  _wrapRegExp = function _wrapRegExp(e, r) {\n    return new BabelRegExp(e, void 0, r);\n  };\n  var e = RegExp.prototype,\n    r = new WeakMap();\n  function BabelRegExp(e, t, p) {\n    var o = RegExp(e, t);\n    return r.set(o, p || r.get(e)), setPrototypeOf(o, BabelRegExp.prototype);\n  }\n  function buildGroups(e, t) {\n    var p = r.get(t);\n    return Object.keys(p).reduce(function (r, t) {\n      var o = p[t];\n      if (\"number\" == typeof o) r[t] = e[o];else {\n        for (var i = 0; void 0 === e[o[i]] && i + 1 < o.length;) i++;\n        r[t] = e[o[i]];\n      }\n      return r;\n    }, Object.create(null));\n  }\n  return inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (r) {\n    var t = e.exec.call(this, r);\n    if (t) {\n      t.groups = buildGroups(t, this);\n      var p = t.indices;\n      p && (p.groups = buildGroups(p, this));\n    }\n    return t;\n  }, BabelRegExp.prototype[Symbol.replace] = function (t, p) {\n    if (\"string\" == typeof p) {\n      var o = r.get(this);\n      return e[Symbol.replace].call(this, t, p.replace(/\\$<([^>]+)(>|$)/g, function (e, r, t) {\n        if (\"\" === t) return e;\n        var p = o[r];\n        return Array.isArray(p) ? \"$\" + p.join(\"$\") : \"number\" == typeof p ? \"$\" + p : \"\";\n      }));\n    }\n    if (\"function\" == typeof p) {\n      var i = this;\n      return e[Symbol.replace].call(this, t, function () {\n        var e = arguments;\n        return \"object\" != _typeof(e[e.length - 1]) && (e = [].slice.call(e)).push(buildGroups(e, i)), p.apply(this, e);\n      });\n    }\n    return e[Symbol.replace].call(this, t, p);\n  }, _wrapRegExp.apply(this, arguments);\n}\nexport { _wrapRegExp as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };","import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults<ParserOutput = string, RendererOutput = string>(): MarkedOptions<ParserOutput, RendererOutput> {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let _defaults: MarkedOptions<any, any> = _getDefaults();\n\nexport function changeDefaults<ParserOutput = string, RendererOutput = string>(newDefaults: MarkedOptions<ParserOutput, RendererOutput>) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\[\\s\\S]|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = edit(/link|code|html/, 'g')\n  .replace('link', /\\[(?:[^\\[\\]`]|(?<!`)(?<a>`+)[^`]+\\k<a>(?!`))*?\\]\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)]|\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)])*\\))*\\)/)\n  .replace('code', /(?<!`)(?<b>`+)[^`]+\\k<b>(?!`)/)\n  .replace('html', /<(?! )[^<>]*?>/)\n  .getRegex();\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\[\\s\\S]|[^\\[\\]\\\\])*\\]|\\\\[\\s\\S]|`+[^`]*?`+(?!`)|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\nconst _caseInsensitiveProtocol = /[hH][tT][tT][pP][sS]?|[fF][tT][pP]/;\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:protocol):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('protocol', _caseInsensitiveProtocol)\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\[\\s\\S]|[^\\\\])*?(?:\\\\[\\s\\S]|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: edit(/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|protocol:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/)\n    .replace('protocol', _caseInsensitiveProtocol)\n    .getRegex(),\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer<ParserOutput, RendererOutput>; // set by the lexer\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer<ParserOutput = string, RendererOutput = string> {\n  tokens: TokensList;\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer<ParserOutput, RendererOutput>;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out blocks from extensions\n    maskedSrc = this.options.hooks?.emStrongMask?.call({ lexer: this }, maskedSrc) ?? maskedSrc;\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  parser!: _Parser<ParserOutput, RendererOutput>; // set by the parser\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): RendererOutput {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n' as RendererOutput;\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n' as RendererOutput;\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): RendererOutput {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n` as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  def(token: Tokens.Def): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): RendererOutput {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n` as RendererOutput;\n  }\n\n  hr(token: Tokens.Hr): RendererOutput {\n    return '<hr>\\n' as RendererOutput;\n  }\n\n  list(token: Tokens.List): RendererOutput {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n' as RendererOutput;\n  }\n\n  listitem(item: Tokens.ListItem): RendererOutput {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n` as RendererOutput;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): RendererOutput {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">' as RendererOutput;\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): RendererOutput {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n` as RendererOutput;\n  }\n\n  table(token: Tokens.Table): RendererOutput {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell as ParserOutput });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell as ParserOutput });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n' as RendererOutput;\n  }\n\n  tablerow({ text }: Tokens.TableRow<ParserOutput>): RendererOutput {\n    return `<tr>\\n${text}</tr>\\n` as RendererOutput;\n  }\n\n  tablecell(token: Tokens.TableCell): RendererOutput {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n` as RendererOutput;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): RendererOutput {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>` as RendererOutput;\n  }\n\n  em({ tokens }: Tokens.Em): RendererOutput {\n    return `<em>${this.parser.parseInline(tokens)}</em>` as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return `<code>${escape(text, true)}</code>` as RendererOutput;\n  }\n\n  br(token: Tokens.Br): RendererOutput {\n    return '<br>' as RendererOutput;\n  }\n\n  del({ tokens }: Tokens.Del): RendererOutput {\n    return `<del>${this.parser.parseInline(tokens)}</del>` as RendererOutput;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): RendererOutput {\n    const text = this.parser.parseInline(tokens) as string;\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text as RendererOutput;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out as RendererOutput;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): RendererOutput {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer) as string;\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text) as RendererOutput;\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out as RendererOutput;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape): RendererOutput {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens) as unknown as RendererOutput\n      : ('escaped' in token && token.escaped ? token.text as RendererOutput : escape(token.text) as RendererOutput);\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer<RendererOutput = string> {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  em({ text }: Tokens.Em): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  del({ text }: Tokens.Del): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  link({ text }: Tokens.Link): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  image({ text }: Tokens.Image): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  br(): RendererOutput {\n    return '' as RendererOutput;\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  renderer: _Renderer<ParserOutput, RendererOutput>;\n  textRenderer: _TextRenderer<RendererOutput>;\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer<ParserOutput, RendererOutput>();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer<RendererOutput>();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'def', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'def': {\n          out += this.renderer.def(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken) as string;\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += ('\\n' + this.renderer.text(textToken));\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out as ParserOutput;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer<ParserOutput, RendererOutput> | _TextRenderer<RendererOutput> = this.renderer): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out as ParserOutput;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n    'emStrongMask',\n  ]);\n\n  static passThroughHooksRespectAsync = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: ParserOutput) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Mask contents that should not be interpreted as em/strong delimiters\n   */\n  emStrongMask(src: string) {\n    return src;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse<ParserOutput, RendererOutput> : _Parser.parseInline<ParserOutput, RendererOutput>;\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked<ParserOutput = string, RendererOutput = string> {\n  defaults = _getDefaults<ParserOutput, RendererOutput>();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser<ParserOutput, RendererOutput>;\n  Renderer = _Renderer<ParserOutput, RendererOutput>;\n  TextRenderer = _TextRenderer<RendererOutput>;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer<ParserOutput, RendererOutput>;\n  Hooks = _Hooks<ParserOutput, RendererOutput>;\n\n  constructor(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    const extensions: MarkedOptions<ParserOutput, RendererOutput>['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions<ParserOutput, RendererOutput>;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer<ParserOutput, RendererOutput>, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return (ret || '') as RendererOutput;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer<ParserOutput, RendererOutput>, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks<ParserOutput, RendererOutput>();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks<ParserOutput, RendererOutput>, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async && _Hooks.passThroughHooksRespectAsync.has(prop)) {\n                return (async() => {\n                  const ret = await hooksFunc.call(hooks, arg);\n                  return prevHook.call(hooks, ret);\n                })();\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              if (this.defaults.async) {\n                return (async() => {\n                  let ret = await hooksFunc.apply(hooks, args);\n                  if (ret === false) {\n                    ret = await prevHook.apply(hooks, args);\n                  }\n                  return ret;\n                })();\n              }\n\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Parser.parse<ParserOutput, RendererOutput>(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: true }): Promise<ParserOutput>;\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: false }): ParserOutput;\n      (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): ParserOutput | Promise<ParserOutput>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      if (opt.async) {\n        return (async() => {\n          const processedSrc = opt.hooks ? await opt.hooks.preprocess(src) : src;\n          const lexer = opt.hooks ? await opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n          const tokens = await lexer(processedSrc, opt);\n          const processedTokens = opt.hooks ? await opt.hooks.processAllTokens(tokens) : tokens;\n          if (opt.walkTokens) {\n            await Promise.all(this.walkTokens(processedTokens, opt.walkTokens));\n          }\n          const parser = opt.hooks ? await opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n          const html = await parser(processedTokens, opt);\n          return opt.hooks ? await opt.hooks.postprocess(html) : html;\n        })().catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n"],"names":["_wrapRegExp","e","r","BabelRegExp","RegExp","prototype","WeakMap","t","p","o","set","get","setPrototypeOf","buildGroups","Object","keys","reduce","i","length","create","TypeError","constructor","value","writable","configurable","defineProperty","exec","call","this","groups","indices","Symbol","replace","Array","isArray","join","arguments","slice","push","apply","L","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","T","G","u","I","h","undefined","source","n","s","m","caret","getRegex","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","concat","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","E","F","ie","oe","we","j","Q","Pe","Se","v","U","$e","ae","K","blockquote","code","def","fences","heading","hr","html","lheading","list","newline","paragraph","table","text","re","Le","_objectSpread","Me","le","D","W","ue","Ee","pe","qe","a","b","ce","ve","De","he","He","Ze","Ge","Ne","Fe","je","Qe","q","Ue","de","ke","se","X","_backpedal","anyPunctuation","autolink","blockSkip","br","del","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","escape","link","nolink","punctuation","reflink","reflinkSearch","tag","url","We","N","Xe","C","normal","M","Je","ge","w","test","J","encodeURI","_unused","V","_n$at","l","split","trim","shift","at","pop","splice","z","charAt","me","href","title","other","state","inLink","type","raw","tokens","inlineTokens","y","_defineProperty","options","space","rules","block","codeBlockStyle","match","map","Ve","lang","inline","depth","lexer","c","g","top","blockTokens","d","R","f","O","substring","ordered","start","loose","items","H","repeat","trimStart","search","ee","te","ne","xe","A","Z","Y","task","checked","trimEnd","filter","some","pre","toLowerCase","_t$","header","align","rows","inRawBlock","indexOf","fe","emStrong","lastIndex","index","codespan","_this$rules$inline$_b","_this$rules$inline$_b2","inlineText","escaped","x","links","inlineQueue","lex","lexInline","src","_this$options$extensi","_this$options$extensi2","endsWith","startBlock","forEach","charCodeAt","console","error","Error","_this$options$hooks$e","_this$options$hooks","includes","lastIndexOf","emStrongMask","_this$options$extensi3","_this$options$extensi4","startInline","P","_ref","_match","_ref2","parser","parse","_ref3","_ref4","parseInline","listitem","_e$tokens$","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","_ref7","strong","_ref8","em","_ref9","_ref0","_ref1","_ref10","image","_ref11","textRenderer","$","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_this$options$extensi5","renderers","_this$options$extensi6","S","_Class3","preprocess","postprocess","processAllTokens","provideLexer","provideParser","Set","_","setOptions","parseMarkdown","use","_this$defaults$extens","defaults","childTokens","flat","_this","_len","_key","name","_len2","_key2","level","_len3","_key3","_len4","_key4","passThroughHooks","has","passThroughHooksRespectAsync","_len5","_key5","onError","toString","Promise","all","catch","message","resolve","reject","k","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sourceRoot":""}