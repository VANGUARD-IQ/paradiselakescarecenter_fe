{"version":3,"file":"static/js/9285.107a7325.chunk.js","mappings":"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","sources":["../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n"],"names":["ccount","value","character","source","String","TypeError","count","index","indexOf","length","findAndReplace","tree","list","options","settings","ignored","convert","ignore","pairs","tupleOrList","result","Array","isArray","tuple","push","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","node","parents","grandparent","parent","siblings","children","undefined","find","replace","start","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","type","slice","global","splice","handler","RegExp","string","escape","inConstruct","notInConstruct","enterLiteralAutolink","token","this","enter","title","url","enterLiteralAutolinkValue","config","autolinkProtocol","call","exitLiteralAutolinkHttp","exit","exitLiteralAutolinkWww","data","assert","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","_","protocol","domain","path","prefix","previous","test","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","label","email","code","charCodeAt","unicodeWhitespace","unicodePunctuation","enterFootnoteCallString","buffer","enterFootnoteCall","identifier","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","resume","normalizeIdentifier","toLowerCase","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","footnoteReference","state","info","tracker","createTracker","move","subexit","safe","associationId","after","before","gfmFootnoteToMarkdown","firstLineBlank","handlers","footnoteDefinition","shift","indentLines","containerFlow","current","mapAll","mapExceptFirst","unsafe","line","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","_objectSpread","defaultStringLength","serialize","toAlignment","codePointAt","map","patternInScope","pattern","listInScope","none","includes","hardBreak","_1","checkQuote","marker","quote","Error","encodeCharacterReference","toString","toUpperCase","encodeInfo","outside","inside","outsideKind","classifyCharacter","insideKind","emphasis","checkEmphasis","between","betweenHead","open","betweenTail","close","attentionEncodeSurroundingInfo","html","image","suffix","alt","concat","imageReference","referenceType","reference","inlineCode","sequence","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","Boolean","resourceLink","link","linkReference","text","checkBullet","bullet","checkRule","rule","phrasing","strong","checkStrong","handle","blockquote","break","fence","checkFence","fences","lang","formatCodeAsIndented","repeat","Math","max","substring","expected","longestStreak","encode","meta","definition","heading","rank","min","depth","literalWithBreak","visit","EXIT","setext","formatHeadingAsSetext","lastIndexOf","closeAtx","bulletCurrent","ordered","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","style","checkListItemIndent","incrementListMarker","size","spread","ceil","paragraph","root","some","d","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","align","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","defaultHandlers","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","lines","delimiterStart","delimiterEnd","join","markdownTable","exitCheck","checked","exitParagraphWithTaskListItem","head","firstParaghraph","sibling","offset","column","Object","assign","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","tokenize","effects","ok","nok","wwwPrefixInside","consume","wwwPrefixAfter","partial","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","domainAfter","domainAtPunctuation","markdownLineEndingOrSpace","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","asciiAlpha","trailCharacterReferenceInside","emailDomainDotTrail","asciiAlphanumeric","wwwAutolink","name","self","previousWww","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_balanced","_gfmAutolinkLiteralWalkedInto","indent","factorySpace","tail","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","end","now","resolveToPotentialGfmFootnoteCall","context","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","blankLine","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","resolveAll","strikethrough","nextEvents","insideSpan","constructs","null","attentionMarkers","EditMap","constructor","add","remove","editMap","at","addImplementation","sort","a","b","vecs","pop","element","gfmTableAlign","inDelimiterRow","event","alignIndex","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","markdownLineEnding","interrupt","headDelimiterStart","markdownSpace","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","spaceThenNonSpace","emptyOptions","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","combineExtensions","document","continuation","resolveTo","flow","gfm","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","extensions","delete","gfmToMarkdown"],"sourceRoot":""}