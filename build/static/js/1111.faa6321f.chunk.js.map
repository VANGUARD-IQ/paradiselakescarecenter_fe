{"version":3,"file":"static/js/1111.faa6321f.chunk.js","mappings":"uwBAoEA,MAAMA,IAAgBC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4UAuBnBC,IAAoBH,EAAAA,EAAAA,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0QAiBvBG,IAAeL,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,yFAqBlBK,GAMDC,IAAmD,IAADC,EAAA,IAAjD,MAAEC,EAAK,QAAEC,EAAO,OAAEC,EAAM,OAAEC,EAAM,SAAEC,GAAUN,EAChD,MAAM,UAAEO,IAAcC,EAAAA,GAAAA,MAChBC,GAASC,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,kBAAoB,0BAA2BA,GACzFI,GAAaD,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,eAAiB,kBAAmBA,GAClFK,GAAcF,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,eAAiB,mBAAoBA,GACpFM,GAAgBH,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,iBAAmB,qBAAsBA,GAC1FO,GAAQC,EAAAA,EAAAA,KAiBd,OACEC,EAAAA,GAAAA,KAACC,EAAAA,EAAI,CACHC,GAAIT,EACJU,OAAO,YACPC,YAAaT,EACbU,OAAO,UACPC,QAASlB,EACTmB,OAAQ,CAAEC,OAAQ,KAAMJ,YAAa,YAAaK,UAElDC,EAAAA,GAAAA,MAACC,EAAAA,EAAQ,CAAAF,SAAA,EAEPC,EAAAA,GAAAA,MAACE,EAAAA,EAAG,CACFC,EAAE,QACFX,GAAG,WACHY,aAAa,KACbC,QAAQ,OACRC,WAAW,SACXC,eAAe,SACfC,GAAI,EACJC,SAAS,WACTC,SAAS,SAAQX,SAAA,CAEhBvB,EAAMmC,cACLrB,EAAAA,GAAAA,KAACsB,EAAAA,EAAK,CACJC,IAAKrC,EAAMmC,aACXG,IAAKtC,EAAMuC,MACXC,UAAU,QACVC,EAAE,OACFd,EAAE,OACFC,aAAa,OAEb5B,EAAM0C,SAAW1C,EAAM2C,UAEzBnB,EAAAA,GAAAA,MAACE,EAAAA,EAAG,CAACO,SAAS,WAAWQ,EAAE,OAAOd,EAAE,OAAMJ,SAAA,EACxCT,EAAAA,GAAAA,KAAA,SACE8B,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRN,UAAW,QACXZ,aAAc,YAEhBmB,QAAQ,WACRC,OAAK,EAAAzB,UAELT,EAAAA,GAAAA,KAAA,UACEuB,IAAG,GAAAY,OAAkB,QAAblD,EAAAC,EAAM0C,eAAO,IAAA3C,GAAbA,EAAemD,WAAW,QAC9BlD,EAAM0C,QACNS,GAAAA,EAAYC,WAAWpD,EAAM2C,UAAY3C,EAAM0C,SAAQ,UAC3DW,KAAK,iBAGTvC,EAAAA,GAAAA,KAACY,EAAAA,EAAG,CACFO,SAAS,WACTqB,IAAI,MACJC,KAAK,MACLC,UAAU,wBACVxC,GAAG,iBACHY,aAAa,OACb6B,EAAG,EAAElC,UAELT,EAAAA,GAAAA,KAAC4C,EAAAA,IAAM,CAACC,KAAM,GAAIC,MAAM,gBAI5B9C,EAAAA,GAAAA,KAAC+C,EAAAA,IAAO,CAACF,KAAM,GAAIC,MAAM,UAI3B9C,EAAAA,GAAAA,KAACgD,EAAAA,EAAK,CACJ7B,SAAS,WACTqB,IAAK,EACLC,KAAM,EACNQ,YAAY,aACZC,QAAQ,QAAOzC,UAEfC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAACC,QAAS,EAAE3C,SAAA,EACjBT,EAAAA,GAAAA,KAACqD,EAAAA,IAAK,CAACR,KAAM,MACb7C,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAACC,SAAS,KAAI9C,SAAEvB,EAAMsE,kBAK/BxD,EAAAA,GAAAA,KAACgD,EAAAA,EAAK,CACJ7B,SAAS,WACTqB,IAAK,EACLiB,MAAO,EACPR,YAAa/D,EAAMwE,SAAW,QAAU,OACxCR,QAAQ,QAAOzC,SAEdvB,EAAMwE,UAAW1D,EAAAA,GAAAA,KAAC2D,EAAAA,IAAO,CAACd,KAAM,MAAS7C,EAAAA,GAAAA,KAAC4D,EAAAA,IAAM,CAACf,KAAM,WAK5DnC,EAAAA,GAAAA,MAACmD,EAAAA,EAAM,CAACC,MAAM,UAAUV,QAAS,EAAE3C,SAAA,EACjCC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAACY,QAAQ,gBAAgBD,MAAM,QAAOrD,SAAA,EAC3CT,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAACU,WAAW,OAAOT,SAAS,KAAKT,MAAOlD,EAAaqE,KAAK,IAAIC,UAAU,aAAYzD,SACtFvB,EAAMuC,QAERtC,IACCuB,EAAAA,GAAAA,MAACyD,EAAAA,EAAI,CAAA1D,SAAA,EACHT,EAAAA,GAAAA,KAACoE,EAAAA,EAAU,CACTC,GAAIC,EAAAA,EACJC,MAAMvE,EAAAA,GAAAA,KAACwE,EAAAA,IAAc,IACrBtB,QAAQ,QACRL,KAAK,KACLvC,QAAUmE,GAAMA,EAAEC,qBAEpBhE,EAAAA,GAAAA,MAACiE,EAAAA,EAAQ,CAACrE,QAAUmE,GAAMA,EAAEC,kBAAkBjE,SAAA,EAC5CT,EAAAA,GAAAA,KAAC4E,EAAAA,EAAQ,CAACL,MAAMvE,EAAAA,GAAAA,KAAC6E,EAAAA,IAAM,IAAKvE,QAASjB,EAAOoB,SAAC,UAG7CT,EAAAA,GAAAA,KAAC4E,EAAAA,EAAQ,CAACL,MAAMvE,EAAAA,GAAAA,KAAC8E,EAAAA,IAAM,IAAKxE,QAASA,KAAMyE,OA/HlCC,EA+HkD9F,EAAM2C,SA9H/EoD,UAAUC,UAAUC,UAAUH,QAC9BlF,EAAM,CACJ2B,MAAO,sBACP2D,OAAQ,UACRC,SAAU,MALWL,OA+HkEvE,SAAC,oBAG5ET,EAAAA,GAAAA,KAAC4E,EAAAA,EAAQ,CAACL,MAAMvE,EAAAA,GAAAA,KAACsF,EAAAA,IAAc,IAAKjB,GAAG,IAAIkB,KAAMlD,GAAAA,EAAYC,WAAWpD,EAAM2C,UAAW2D,OAAO,SAAQ/E,SAAC,kBAGzGT,EAAAA,GAAAA,KAAC4E,EAAAA,EAAQ,CAACL,MAAMvE,EAAAA,GAAAA,KAACyF,EAAAA,IAAQ,IAAKnF,QAAShB,EAAUwD,MAAM,UAASrC,SAAC,oBAQxEvB,EAAMwG,cACL1F,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAACC,SAAS,KAAKT,MAAOjD,EAAe8F,UAAW,EAAElF,SACpDvB,EAAMwG,cAIVxG,EAAM0G,MAAQ1G,EAAM0G,KAAKC,OAAS,IACjCnF,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAACC,QAAS,EAAG0C,SAAS,OAAMrF,SAAA,CAChCvB,EAAM0G,KAAKG,MAAM,EAAG,GAAGC,IAAKC,IAC3BjG,EAAAA,GAAAA,KAACgD,EAAAA,EAAK,CAAWH,KAAK,KAAKI,YAAY,OAAMxC,SAC1CwF,GADSA,IAIb/G,EAAM0G,KAAKC,OAAS,IACnBnF,EAAAA,GAAAA,MAACsC,EAAAA,EAAK,CAACH,KAAK,KAAIpC,SAAA,CAAC,IAAEvB,EAAM0G,KAAKC,OAAS,SAK7CnF,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAACY,QAAQ,gBAAgBR,SAAS,KAAKT,MAAOjD,EAAcY,SAAA,EACjET,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAAA7C,SAxJSyF,KACtB,IAAKA,EAAO,MAAO,UAEnB,MAAM,GAAN/D,QADW+D,EAAK,SACHC,QAAQ,GAAE,QAqJRC,CAAelH,EAAMmH,aAC5BrG,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAAA7C,SAAE,IAAI6F,KAAKpH,EAAMqH,WAAWC,2BAGjCrH,GAAWD,EAAMuH,iBACjB/F,EAAAA,GAAAA,MAAC4C,EAAAA,EAAI,CAACC,SAAS,KAAKT,MAAOjD,EAAcY,SAAA,CAAC,MACpCvB,EAAMuH,2BAqQxB,GA5P+BC,KAAO,IAADC,EAAAC,GACnCC,EAAAA,GAAAA,GAAa,iBACb,MAAMC,GAAWC,EAAAA,EAAAA,MACXjH,GAAQC,EAAAA,EAAAA,MACR,UAAER,IAAcC,EAAAA,GAAAA,MAGhBU,GAAKR,EAAAA,GAAAA,IAAiC,kBAAuCH,GAC7EyH,GAAiBtH,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,kBAAoB,0BAA2BA,GACjGI,GAAaD,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,eAAiB,kBAAmBA,GAClFK,GAAcF,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,eAAiB,mBAAoBA,GAEpF0H,IADgBvH,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,iBAAmB,qBAAsBA,IAC9EG,EAAAA,GAAAA,IAAuB,UAAdH,EAAwB,aAAe,iBAAkBA,KAC9E,OAAE2H,EAAM,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,MAC7BC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAuB,OAEzDC,KAAMC,GAAcC,QAASC,GAAiBC,QAASC,KAAoBC,EAAAA,EAAAA,IAASxJ,KACpFkJ,KAAMO,GAAkBL,QAASM,KAAwBF,EAAAA,EAAAA,IAASpJ,GAAmB,CAC3FuJ,UAAW,CAAEC,MAAO,OAGfC,KAAeC,EAAAA,EAAAA,GAAYxJ,GAAc,CAC9CyJ,YAAaA,KACXxI,EAAM,CACJ2B,MAAO,gBACP2D,OAAQ,UACRC,SAAU,MAEZyC,KACAV,KAEFmB,QAAUC,IACR1I,EAAM,CACJ2B,MAAO,yBACPiE,YAAa8C,EAAMC,QACnBrD,OAAQ,QACRC,SAAU,SAoBhB,OACE3E,EAAAA,GAAAA,MAACE,EAAAA,EAAG,CAACV,GAAIA,EAAIwI,KAAK,QAAQ3H,QAAQ,OAAO4H,cAAc,SAAQlI,SAAA,EAC7DT,EAAAA,GAAAA,KAAC4I,EAAAA,EAAsB,KACvB5I,EAAAA,GAAAA,KAAC6I,EAAAA,EAAgB,CAACC,aAAcC,EAAAA,WAEhC/I,EAAAA,GAAAA,KAACY,EAAAA,EAAG,CAACqD,KAAK,IAAGxD,UACXT,EAAAA,GAAAA,KAACgJ,EAAAA,EAAS,CAACC,KAAK,MAAMC,GAAI,EAAEzI,UAC1BC,EAAAA,GAAAA,MAACmD,EAAAA,EAAM,CAACT,QAAS,EAAGU,MAAM,UAASrD,SAAA,EAEnCC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAACY,QAAQ,gBAAetD,SAAA,EAC7BC,EAAAA,GAAAA,MAACmD,EAAAA,EAAM,CAACC,MAAM,QAAQV,QAAS,EAAE3C,SAAA,EAC/BT,EAAAA,GAAAA,KAACmJ,EAAAA,EAAO,CAACtG,KAAK,KAAKC,MAAOlD,EAAYa,SAAC,wBACvCT,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAACR,MAAOmE,EAAUxG,SAAC,yCAI1BC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAACC,QAAS,EAAE3C,SAAA,EACjBT,EAAAA,GAAAA,KAACoJ,EAAAA,EAAM,CACLC,UAAUrJ,EAAAA,GAAAA,KAACsJ,EAAAA,IAAM,IACjBpG,QAAQ,UACR5C,QAASA,IAAMwG,EAAS,6BAA6BrG,SACtD,gBAGDT,EAAAA,GAAAA,KAACoJ,EAAAA,EAAM,CACLC,UAAUrJ,EAAAA,GAAAA,KAACuJ,EAAAA,IAAM,IACjBtG,YAAY,OACZ3C,QAASA,IAAMwG,EAAS,yBAAyBrG,SAClD,uBAOJiH,KACChH,EAAAA,GAAAA,MAAC8I,EAAAA,EAAU,CAACC,QAAS,CAAEC,KAAM,EAAGC,GAAI,GAAKvG,QAAS,EAAE3C,SAAA,EAClDT,EAAAA,GAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI8G,EAAgB7G,OAAO,YAAYC,YAAaT,EAAWc,UACnET,EAAAA,GAAAA,KAACW,EAAAA,EAAQ,CAAAF,UACPC,EAAAA,GAAAA,MAACkJ,EAAAA,EAAI,CAAAnJ,SAAA,EACHT,EAAAA,GAAAA,KAAC6J,EAAAA,EAAS,CAAC/G,MAAOmE,EAAUxG,SAAC,eAC7BT,EAAAA,GAAAA,KAAC8J,EAAAA,EAAU,CAAChH,MAAOlD,EAAYa,SAAEiH,GAAaqC,oBAC9C/J,EAAAA,GAAAA,KAACgK,EAAAA,EAAY,CAAClH,MAAM,WAAUrC,UAC5BC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAAA1C,SAAA,EACLT,EAAAA,GAAAA,KAAC+C,EAAAA,IAAO,KACR/C,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAAA7C,SAAC,+BAOhBT,EAAAA,GAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI8G,EAAgB7G,OAAO,YAAYC,YAAaT,EAAWc,UACnET,EAAAA,GAAAA,KAACW,EAAAA,EAAQ,CAAAF,UACPC,EAAAA,GAAAA,MAACkJ,EAAAA,EAAI,CAAAnJ,SAAA,EACHT,EAAAA,GAAAA,KAAC6J,EAAAA,EAAS,CAAC/G,MAAOmE,EAAUxG,SAAC,kBAC7BT,EAAAA,GAAAA,KAAC8J,EAAAA,EAAU,CAAChH,MAAOlD,EAAYa,SAjEtByF,KACzB,MAAM+D,EAAK/D,EAAK,WAChB,GAAI+D,GAAM,EACR,MAAM,GAAN9H,OAAU8H,EAAG9D,QAAQ,GAAE,OAGzB,MAAM,GAANhE,QADW+D,EAAK,SACHC,QAAQ,GAAE,QA2D0B+D,CAAkBxC,GAAayC,yBAChEnK,EAAAA,GAAAA,KAACgK,EAAAA,EAAY,CAAClH,MAAM,WAAUrC,UAC5BC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAAA1C,SAAA,EACLT,EAAAA,GAAAA,KAACoK,EAAAA,IAAW,KACZpK,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAAA7C,SAAC,8BAOhBT,EAAAA,GAAAA,KAACC,EAAAA,EAAI,CAACC,GAAI8G,EAAgB7G,OAAO,YAAYC,YAAaT,EAAWc,UACnET,EAAAA,GAAAA,KAACW,EAAAA,EAAQ,CAAAF,UACPC,EAAAA,GAAAA,MAACkJ,EAAAA,EAAI,CAAAnJ,SAAA,EACHT,EAAAA,GAAAA,KAAC6J,EAAAA,EAAS,CAAC/G,MAAOmE,EAAUxG,SAAC,iBAC7BT,EAAAA,GAAAA,KAAC8J,EAAAA,EAAU,CAAChH,MAAOlD,EAAYa,SAC5BiH,GAAa2C,aAAaC,OAAO,CAACC,EAAaC,IAAaD,EAAMC,EAAEhH,UAAW,MAElFxD,EAAAA,GAAAA,KAACgK,EAAAA,EAAY,CAAClH,MAAM,WAAUrC,UAC5BC,EAAAA,GAAAA,MAACyC,EAAAA,EAAM,CAAA1C,SAAA,EACLT,EAAAA,GAAAA,KAACqD,EAAAA,IAAK,KACNrD,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAAA7C,SAAC,sCAUpBC,EAAAA,GAAAA,MAAC+J,EAAAA,EAAI,CAACxH,YAAY,OAAMxC,SAAA,EACtBC,EAAAA,GAAAA,MAACgK,EAAAA,EAAO,CAAAjK,SAAA,EACNT,EAAAA,GAAAA,KAAC2K,EAAAA,EAAG,CAAAlK,SAAC,eACLT,EAAAA,GAAAA,KAAC2K,EAAAA,EAAG,CAAAlK,SAAC,uBAGPC,EAAAA,GAAAA,MAACkK,EAAAA,EAAS,CAAAnK,SAAA,EAERT,EAAAA,GAAAA,KAAC6K,EAAAA,EAAQ,CAAApK,SACNmH,IACC5H,EAAAA,GAAAA,KAAC8K,EAAAA,EAAM,CAAC5B,GAAI,GAAGzI,UACbT,EAAAA,GAAAA,KAAC+K,EAAAA,EAAO,CAAClI,KAAK,UAEF,OAAZ6E,SAAY,IAAZA,IAA0B,QAAdf,EAAZe,GAAc2C,oBAAY,IAAA1D,OAAd,EAAZA,EAA4Bd,QAAS,GACvC7F,EAAAA,GAAAA,KAACwJ,EAAAA,EAAU,CAACC,QAAS,CAAEC,KAAM,EAAGC,GAAI,EAAGqB,GAAI,GAAK5H,QAAS,EAAE3C,SACxDiH,GAAa2C,aAAarE,IAAK9G,IAC9Bc,EAAAA,GAAAA,KAACjB,GAAS,CAERG,MAAOA,EACPC,SAAS,EACTC,OAAQA,IAAM0H,EAAS,wBAAD3E,OAAyBjD,EAAM+L,KACrD5L,OAAQA,IAAMyH,EAAS,wBAAD3E,OAAyBjD,EAAM+L,GAAE,UACvD3L,SAAUA,KACRiI,EAAiBrI,GACjBiI,MAPGjI,EAAM+L,QAajBjL,EAAAA,GAAAA,KAAC8K,EAAAA,EAAM,CAAC5B,GAAI,GAAGzI,UACbC,EAAAA,GAAAA,MAACmD,EAAAA,EAAM,CAACT,QAAS,EAAE3C,SAAA,EACjBT,EAAAA,GAAAA,KAAC+C,EAAAA,IAAO,CAACF,KAAM,GAAIC,MAAM,UACzB9C,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAACR,MAAOmE,EAAUxG,SAAC,4BACxBT,EAAAA,GAAAA,KAACoJ,EAAAA,EAAM,CACLC,UAAUrJ,EAAAA,GAAAA,KAACuJ,EAAAA,IAAM,IACjBtG,YAAY,OACZ3C,QAASA,IAAMwG,EAAS,yBAAyBrG,SAClD,oCASTT,EAAAA,GAAAA,KAAC6K,EAAAA,EAAQ,CAAApK,SACNwH,IACCjI,EAAAA,GAAAA,KAAC8K,EAAAA,EAAM,CAAC5B,GAAI,GAAGzI,UACbT,EAAAA,GAAAA,KAAC+K,EAAAA,EAAO,CAAClI,KAAK,UAEE,OAAhBmF,SAAgB,IAAhBA,IAAkC,QAAlBpB,EAAhBoB,GAAkBkD,wBAAgB,IAAAtE,OAAlB,EAAhBA,EAAoCf,QAAS,GAC/C7F,EAAAA,GAAAA,KAACwJ,EAAAA,EAAU,CAACC,QAAS,CAAEC,KAAM,EAAGC,GAAI,EAAGqB,GAAI,GAAK5H,QAAS,EAAE3C,SACxDuH,GAAiBkD,iBAAiBlF,IAAK9G,IACtCc,EAAAA,GAAAA,KAACjB,GAAS,CAERG,MAAOA,EACPC,SAAS,EACTC,OAAQA,IAAM0H,EAAS,wBAAD3E,OAAyBjD,EAAM+L,MAHhD/L,EAAM+L,QAQjBjL,EAAAA,GAAAA,KAAC8K,EAAAA,EAAM,CAAC5B,GAAI,GAAGzI,UACbC,EAAAA,GAAAA,MAACmD,EAAAA,EAAM,CAACT,QAAS,EAAE3C,SAAA,EACjBT,EAAAA,GAAAA,KAAC2D,EAAAA,IAAO,CAACd,KAAM,GAAIC,MAAM,UACzB9C,EAAAA,GAAAA,KAACsD,EAAAA,EAAI,CAACR,MAAOmE,EAAUxG,SAAC,oDAYxCC,EAAAA,GAAAA,MAACyK,EAAAA,GAAK,CAACjE,OAAQA,EAAQE,QAASA,EAAQ3G,SAAA,EACtCT,EAAAA,GAAAA,KAACoL,EAAAA,EAAY,CAAClL,GAAG,iBAAiBmL,eAAe,gBACjD3K,EAAAA,GAAAA,MAAC4K,EAAAA,EAAY,CACXpL,GAAI8G,EACJ7G,OAAO,YACPC,YAAaT,EAAWc,SAAA,EAExBT,EAAAA,GAAAA,KAACuL,EAAAA,EAAW,CAACzI,MAAOlD,EAAYa,SAAC,kBACjCT,EAAAA,GAAAA,KAACwL,EAAAA,EAAgB,CAAC1I,MAAOlD,KACzBI,EAAAA,GAAAA,KAACyL,EAAAA,EAAS,CAAAhL,UACRC,EAAAA,GAAAA,MAAC4C,EAAAA,EAAI,CAACR,MAAOlD,EAAYa,SAAA,CAAC,oCACuB,OAAb6G,QAAa,IAAbA,OAAa,EAAbA,EAAe7F,MAAM,yCAG3Df,EAAAA,GAAAA,MAACgL,EAAAA,EAAW,CAAAjL,SAAA,EACVT,EAAAA,GAAAA,KAACoJ,EAAAA,EAAM,CAAClG,QAAQ,QAAQyI,GAAI,EAAGrL,QAAS8G,EAAStE,MAAOlD,EAAYa,SAAC,YAGrET,EAAAA,GAAAA,KAACoJ,EAAAA,EAAM,CAACnG,YAAY,MAAM3C,QAvMVsL,KACpBtE,GACFc,GAAY,CAAEF,UAAW,CAAE+C,GAAI3D,EAAc2D,OAqMcxK,SAAC,qBAO5DT,EAAAA,GAAAA,KAAC6L,EAAAA,EAAqB,O,mCCrjBrB,MAAMxJ,EAAc,CAEzByJ,oBAAqB,6DAGrBC,mBAAoB,oCAGpBzJ,WAAY,SAAC0J,GACX,MAAMC,IADqCC,UAAArG,OAAA,QAAAsG,IAAAD,UAAA,KAAAA,UAAA,GACd7J,EAAYyJ,oBAAsBzJ,EAAY0J,mBAC3E,MAAM,GAAN5J,OAAU8J,EAAO,KAAA9J,OAAI6J,EACvB,E","sources":["pages/youtubetoipfs/VideoGallery.tsx","pages/youtubetoipfs/config.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  SimpleGrid,\n  Card,\n  CardBody,\n  Image,\n  Badge,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Spinner,\n  Center,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Link as ChakraLink,\n  Tooltip,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText\n} from '@chakra-ui/react';\nimport {\n  FiPlus,\n  FiVideo,\n  FiExternalLink,\n  FiMoreVertical,\n  FiEdit,\n  FiTrash2,\n  FiCopy,\n  FiEye,\n  FiGlobe,\n  FiLock,\n  FiHardDrive,\n  FiHash,\n  FiPlay\n} from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport youtubeToIPFSModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { useColorMode } from \"@chakra-ui/react\";\nimport { IPFS_CONFIG } from \"./config\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst GET_MY_VIDEOS = gql`\n  query MyIPFSVideos {\n    myIPFSVideos {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      source\n      fileSize\n      mimeType\n      tags\n      viewCount\n      isPublic\n      createdAt\n      updatedAt\n    }\n    myIPFSVideoCount\n    totalIPFSStorageUsed\n  }\n`;\n\nconst GET_PUBLIC_VIDEOS = gql`\n  query PublicIPFSVideos($limit: Float!) {\n    publicIPFSVideos(limit: $limit) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      uploadedByName\n      viewCount\n      tags\n      createdAt\n    }\n  }\n`;\n\nconst DELETE_VIDEO = gql`\n  mutation DeleteIPFSVideo($id: String!) {\n    deleteIPFSVideo(id: $id)\n  }\n`;\n\ninterface Video {\n  id: string;\n  title: string;\n  description?: string;\n  ipfsHash: string;\n  ipfsUrl: string;\n  thumbnailUrl?: string;\n  fileSize?: number;\n  viewCount: number;\n  isPublic: boolean;\n  tags?: string[];\n  createdAt: string;\n  uploadedByName?: string;\n}\n\nconst VideoCard: React.FC<{\n  video: Video;\n  isOwner: boolean;\n  onView: () => void;\n  onEdit?: () => void;\n  onDelete?: () => void;\n}> = ({ video, isOwner, onView, onEdit, onDelete }) => {\n  const { colorMode } = useColorMode();\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.cardGradient\", colorMode);\n  const cardBorder = getColor(colorMode === 'light' ? \"border.light\" : \"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const toast = useToast();\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: 'Copied to clipboard',\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown';\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(2)} MB`;\n  };\n\n  return (\n    <Card\n      bg={cardBg}\n      border=\"1px solid\"\n      borderColor={cardBorder}\n      cursor=\"pointer\"\n      onClick={onView}\n      _hover={{ shadow: 'lg', borderColor: 'blue.400' }}\n    >\n      <CardBody>\n        {/* Video Thumbnail or Placeholder */}\n        <Box\n          h=\"200px\"\n          bg=\"gray.800\"\n          borderRadius=\"md\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          mb={4}\n          position=\"relative\"\n          overflow=\"hidden\"\n        >\n          {video.thumbnailUrl ? (\n            <Image\n              src={video.thumbnailUrl}\n              alt={video.title}\n              objectFit=\"cover\"\n              w=\"full\"\n              h=\"full\"\n              borderRadius=\"md\"\n            />\n          ) : video.ipfsUrl || video.ipfsHash ? (\n            // Use video element to show first frame as thumbnail\n            <Box position=\"relative\" w=\"full\" h=\"full\">\n              <video\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  objectFit: 'cover',\n                  borderRadius: '0.375rem'\n                }}\n                preload=\"metadata\"\n                muted\n              >\n                <source\n                  src={`${video.ipfsUrl?.startsWith('http')\n                    ? video.ipfsUrl\n                    : IPFS_CONFIG.getIPFSUrl(video.ipfsHash || video.ipfsUrl)}#t=0.1`}\n                  type=\"video/mp4\"\n                />\n              </video>\n              <Box\n                position=\"absolute\"\n                top=\"50%\"\n                left=\"50%\"\n                transform=\"translate(-50%, -50%)\"\n                bg=\"blackAlpha.600\"\n                borderRadius=\"full\"\n                p={3}\n              >\n                <FiPlay size={24} color=\"white\" />\n              </Box>\n            </Box>\n          ) : (\n            <FiVideo size={48} color=\"gray\" />\n          )}\n\n          {/* View count badge */}\n          <Badge\n            position=\"absolute\"\n            top={2}\n            left={2}\n            colorScheme=\"blackAlpha\"\n            variant=\"solid\"\n          >\n            <HStack spacing={1}>\n              <FiEye size={12} />\n              <Text fontSize=\"xs\">{video.viewCount}</Text>\n            </HStack>\n          </Badge>\n\n          {/* Public/Private badge */}\n          <Badge\n            position=\"absolute\"\n            top={2}\n            right={2}\n            colorScheme={video.isPublic ? 'green' : 'gray'}\n            variant=\"solid\"\n          >\n            {video.isPublic ? <FiGlobe size={12} /> : <FiLock size={12} />}\n          </Badge>\n        </Box>\n\n        {/* Video Info */}\n        <VStack align=\"stretch\" spacing={2}>\n          <HStack justify=\"space-between\" align=\"start\">\n            <Text fontWeight=\"bold\" fontSize=\"md\" color={textPrimary} flex=\"1\" wordBreak=\"break-word\">\n              {video.title}\n            </Text>\n            {isOwner && (\n              <Menu>\n                <MenuButton\n                  as={IconButton}\n                  icon={<FiMoreVertical />}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => e.stopPropagation()}\n                />\n                <MenuList onClick={(e) => e.stopPropagation()}>\n                  <MenuItem icon={<FiEdit />} onClick={onEdit}>\n                    Edit\n                  </MenuItem>\n                  <MenuItem icon={<FiCopy />} onClick={() => copyToClipboard(video.ipfsHash)}>\n                    Copy IPFS Hash\n                  </MenuItem>\n                  <MenuItem icon={<FiExternalLink />} as=\"a\" href={IPFS_CONFIG.getIPFSUrl(video.ipfsHash)} target=\"_blank\">\n                    Open in IPFS\n                  </MenuItem>\n                  <MenuItem icon={<FiTrash2 />} onClick={onDelete} color=\"red.500\">\n                    Delete\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n            )}\n          </HStack>\n\n          {video.description && (\n            <Text fontSize=\"sm\" color={textSecondary} noOfLines={2}>\n              {video.description}\n            </Text>\n          )}\n\n          {video.tags && video.tags.length > 0 && (\n            <HStack spacing={1} flexWrap=\"wrap\">\n              {video.tags.slice(0, 3).map((tag) => (\n                <Badge key={tag} size=\"sm\" colorScheme=\"blue\">\n                  {tag}\n                </Badge>\n              ))}\n              {video.tags.length > 3 && (\n                <Badge size=\"sm\">+{video.tags.length - 3}</Badge>\n              )}\n            </HStack>\n          )}\n\n          <HStack justify=\"space-between\" fontSize=\"xs\" color={textSecondary}>\n            <Text>{formatFileSize(video.fileSize)}</Text>\n            <Text>{new Date(video.createdAt).toLocaleDateString()}</Text>\n          </HStack>\n\n          {!isOwner && video.uploadedByName && (\n            <Text fontSize=\"xs\" color={textSecondary}>\n              By {video.uploadedByName}\n            </Text>\n          )}\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nconst VideoGallery: React.FC = () => {\n  usePageTitle(\"Video Gallery\");\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n\n  // Theme-aware colors\n  const bg = getColor(colorMode === 'light' ? \"background.main\" : \"background.main\", colorMode);\n  const cardGradientBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.cardGradient\", colorMode);\n  const cardBorder = getColor(colorMode === 'light' ? \"border.light\" : \"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null);\n\n  const { data: myVideosData, loading: loadingMyVideos, refetch: refetchMyVideos } = useQuery(GET_MY_VIDEOS);\n  const { data: publicVideosData, loading: loadingPublicVideos } = useQuery(GET_PUBLIC_VIDEOS, {\n    variables: { limit: 50 }\n  });\n\n  const [deleteVideo] = useMutation(DELETE_VIDEO, {\n    onCompleted: () => {\n      toast({\n        title: 'Video deleted',\n        status: 'success',\n        duration: 3000,\n      });\n      refetchMyVideos();\n      onClose();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to delete video',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  });\n\n  const handleDeleteVideo = () => {\n    if (selectedVideo) {\n      deleteVideo({ variables: { id: selectedVideo.id } });\n    }\n  };\n\n  const formatStorageSize = (bytes: number) => {\n    const gb = bytes / (1024 * 1024 * 1024);\n    if (gb >= 1) {\n      return `${gb.toFixed(2)} GB`;\n    }\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(2)} MB`;\n  };\n\n  return (\n    <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={youtubeToIPFSModuleConfig} />\n\n      <Box flex=\"1\">\n        <Container maxW=\"7xl\" py={8}>\n          <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <HStack justify=\"space-between\">\n            <VStack align=\"start\" spacing={1}>\n              <Heading size=\"lg\" color={textPrimary}>IPFS Video Gallery</Heading>\n              <Text color={textMuted}>\n                Your decentralized video library\n              </Text>\n            </VStack>\n            <HStack spacing={3}>\n              <Button\n                leftIcon={<FiHash />}\n                variant=\"outline\"\n                onClick={() => navigate('/youtubetoipfs/add-by-cid')}\n              >\n                Add by CID\n              </Button>\n              <Button\n                leftIcon={<FiPlus />}\n                colorScheme=\"blue\"\n                onClick={() => navigate('/youtubetoipfs/upload')}\n              >\n                Upload Video\n              </Button>\n            </HStack>\n          </HStack>\n\n          {/* Stats */}\n          {myVideosData && (\n            <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>\n              <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>My Videos</StatLabel>\n                    <StatNumber color={textPrimary}>{myVideosData.myIPFSVideoCount}</StatNumber>\n                    <StatHelpText color=\"gray.400\">\n                      <HStack>\n                        <FiVideo />\n                        <Text>Total uploads</Text>\n                      </HStack>\n                    </StatHelpText>\n                  </Stat>\n                </CardBody>\n              </Card>\n\n              <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>Storage Used</StatLabel>\n                    <StatNumber color={textPrimary}>{formatStorageSize(myVideosData.totalIPFSStorageUsed)}</StatNumber>\n                    <StatHelpText color=\"gray.400\">\n                      <HStack>\n                        <FiHardDrive />\n                        <Text>IPFS storage</Text>\n                      </HStack>\n                    </StatHelpText>\n                  </Stat>\n                </CardBody>\n              </Card>\n\n              <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>Total Views</StatLabel>\n                    <StatNumber color={textPrimary}>\n                      {myVideosData.myIPFSVideos.reduce((sum: number, v: Video) => sum + v.viewCount, 0)}\n                    </StatNumber>\n                    <StatHelpText color=\"gray.400\">\n                      <HStack>\n                        <FiEye />\n                        <Text>Across all videos</Text>\n                      </HStack>\n                    </StatHelpText>\n                  </Stat>\n                </CardBody>\n              </Card>\n            </SimpleGrid>\n          )}\n\n          {/* Tabs */}\n          <Tabs colorScheme=\"blue\">\n            <TabList>\n              <Tab>My Videos</Tab>\n              <Tab>Public Gallery</Tab>\n            </TabList>\n\n            <TabPanels>\n              {/* My Videos Tab */}\n              <TabPanel>\n                {loadingMyVideos ? (\n                  <Center py={10}>\n                    <Spinner size=\"xl\" />\n                  </Center>\n                ) : myVideosData?.myIPFSVideos?.length > 0 ? (\n                  <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>\n                    {myVideosData.myIPFSVideos.map((video: Video) => (\n                      <VideoCard\n                        key={video.id}\n                        video={video}\n                        isOwner={true}\n                        onView={() => navigate(`/youtubetoipfs/video/${video.id}`)}\n                        onEdit={() => navigate(`/youtubetoipfs/video/${video.id}/edit`)}\n                        onDelete={() => {\n                          setSelectedVideo(video);\n                          onOpen();\n                        }}\n                      />\n                    ))}\n                  </SimpleGrid>\n                ) : (\n                  <Center py={10}>\n                    <VStack spacing={4}>\n                      <FiVideo size={48} color=\"gray\" />\n                      <Text color={textMuted}>No videos uploaded yet</Text>\n                      <Button\n                        leftIcon={<FiPlus />}\n                        colorScheme=\"blue\"\n                        onClick={() => navigate('/youtubetoipfs/upload')}\n                      >\n                        Upload Your First Video\n                      </Button>\n                    </VStack>\n                  </Center>\n                )}\n              </TabPanel>\n\n              {/* Public Gallery Tab */}\n              <TabPanel>\n                {loadingPublicVideos ? (\n                  <Center py={10}>\n                    <Spinner size=\"xl\" />\n                  </Center>\n                ) : publicVideosData?.publicIPFSVideos?.length > 0 ? (\n                  <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>\n                    {publicVideosData.publicIPFSVideos.map((video: Video) => (\n                      <VideoCard\n                        key={video.id}\n                        video={video}\n                        isOwner={false}\n                        onView={() => navigate(`/youtubetoipfs/video/${video.id}`)}\n                      />\n                    ))}\n                  </SimpleGrid>\n                ) : (\n                  <Center py={10}>\n                    <VStack spacing={4}>\n                      <FiGlobe size={48} color=\"gray\" />\n                      <Text color={textMuted}>No public videos available</Text>\n                    </VStack>\n                  </Center>\n                )}\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n          </VStack>\n        </Container>\n      </Box>\n\n      {/* Delete Confirmation Modal */}\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n        <ModalContent\n          bg={cardGradientBg}\n          border=\"1px solid\"\n          borderColor={cardBorder}\n        >\n          <ModalHeader color={textPrimary}>Delete Video</ModalHeader>\n          <ModalCloseButton color={textPrimary} />\n          <ModalBody>\n            <Text color={textPrimary}>\n              Are you sure you want to delete \"{selectedVideo?.title}\"? This action cannot be undone.\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={onClose} color={textPrimary}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"red\" onClick={handleDeleteVideo}>\n              Delete\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default VideoGallery;","// IPFS Configuration\nexport const IPFS_CONFIG = {\n  // Your private Pinata gateway\n  PRIVATE_GATEWAY_URL: 'https://scarlet-professional-perch-484.mypinata.cloud/ipfs',\n\n  // Public gateway fallback (if needed)\n  PUBLIC_GATEWAY_URL: 'https://gateway.pinata.cloud/ipfs',\n\n  // Helper function to construct IPFS URL\n  getIPFSUrl: (cid: string, usePrivate: boolean = true): string => {\n    const gateway = usePrivate ? IPFS_CONFIG.PRIVATE_GATEWAY_URL : IPFS_CONFIG.PUBLIC_GATEWAY_URL;\n    return `${gateway}/${cid}`;\n  }\n};\n\nexport default IPFS_CONFIG;"],"names":["GET_MY_VIDEOS","gql","_templateObject","_taggedTemplateLiteral","GET_PUBLIC_VIDEOS","_templateObject2","DELETE_VIDEO","_templateObject3","VideoCard","_ref","_video$ipfsUrl","video","isOwner","onView","onEdit","onDelete","colorMode","useColorMode","cardBg","getColor","cardBorder","textPrimary","textSecondary","toast","useToast","_jsx","Card","bg","border","borderColor","cursor","onClick","_hover","shadow","children","_jsxs","CardBody","Box","h","borderRadius","display","alignItems","justifyContent","mb","position","overflow","thumbnailUrl","Image","src","alt","title","objectFit","w","ipfsUrl","ipfsHash","style","width","height","preload","muted","concat","startsWith","IPFS_CONFIG","getIPFSUrl","type","top","left","transform","p","FiPlay","size","color","FiVideo","Badge","colorScheme","variant","HStack","spacing","FiEye","Text","fontSize","viewCount","right","isPublic","FiGlobe","FiLock","VStack","align","justify","fontWeight","flex","wordBreak","Menu","MenuButton","as","IconButton","icon","FiMoreVertical","e","stopPropagation","MenuList","MenuItem","FiEdit","FiCopy","copyToClipboard","text","navigator","clipboard","writeText","status","duration","FiExternalLink","href","target","FiTrash2","description","noOfLines","tags","length","flexWrap","slice","map","tag","bytes","toFixed","formatFileSize","fileSize","Date","createdAt","toLocaleDateString","uploadedByName","VideoGallery","_myVideosData$myIPFSV","_publicVideosData$pub","usePageTitle","navigate","useNavigate","cardGradientBg","textMuted","isOpen","onOpen","onClose","useDisclosure","selectedVideo","setSelectedVideo","useState","data","myVideosData","loading","loadingMyVideos","refetch","refetchMyVideos","useQuery","publicVideosData","loadingPublicVideos","variables","limit","deleteVideo","useMutation","onCompleted","onError","error","message","minH","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","youtubeToIPFSModuleConfig","Container","maxW","py","Heading","Button","leftIcon","FiHash","FiPlus","SimpleGrid","columns","base","md","Stat","StatLabel","StatNumber","myIPFSVideoCount","StatHelpText","gb","formatStorageSize","totalIPFSStorageUsed","FiHardDrive","myIPFSVideos","reduce","sum","v","Tabs","TabList","Tab","TabPanels","TabPanel","Center","Spinner","lg","id","publicIPFSVideos","Modal","ModalOverlay","backdropFilter","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","mr","handleDeleteVideo","FooterWithFourColumns","PRIVATE_GATEWAY_URL","PUBLIC_GATEWAY_URL","cid","gateway","arguments","undefined"],"sourceRoot":""}