{"version":3,"file":"static/js/2374.acbda359.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/SmallClose.mjs","pages/clients/ClientsList.tsx"],"sourcesContent":["import { jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst SmallCloseIcon = createIcon({\n  displayName: \"SmallCloseIcon\",\n  viewBox: \"0 0 16 16\",\n  path: /* @__PURE__ */ jsx(\n    \"path\",\n    {\n      d: \"M9.41 8l2.29-2.29c.19-.18.3-.43.3-.71a1.003 1.003 0 0 0-1.71-.71L8 6.59l-2.29-2.3a1.003 1.003 0 0 0-1.42 1.42L6.59 8 4.3 10.29c-.19.18-.3.43-.3.71a1.003 1.003 0 0 0 1.71.71L8 9.41l2.29 2.29c.18.19.43.3.71.3a1.003 1.003 0 0 0 .71-1.71L9.41 8z\",\n      fillRule: \"evenodd\",\n      fill: \"currentColor\"\n    }\n  )\n});\n\nexport { SmallCloseIcon };\n","import React from \"react\";\nimport {\n  Box,\n  Container,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Text,\n  Heading,\n  Card,\n  CardHeader,\n  CardBody,\n  Button,\n  Skeleton,\n  useToast,\n  HStack,\n  IconButton,\n  useDisclosure,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  SimpleGrid,\n  Stat,\n  StatLabel,\n  StatNumber,\n  Tooltip,\n  Code,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  WrapItem,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  VStack,\n  Select,\n  Badge,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { ApolloCache, gql, useMutation, useQuery } from \"@apollo/client\";\nimport { EditIcon, DeleteIcon, CopyIcon, SearchIcon, CloseIcon, AddIcon, SmallCloseIcon } from \"@chakra-ui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { FiUsers, FiUserCheck, FiUserPlus, FiPhone, FiDollarSign } from \"react-icons/fi\";\nimport { getColor } from \"../../brandConfig\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport clientsModuleConfig from \"./moduleConfig\";\nimport { Client, ClientPermission } from \"../../generated/graphql\";\n\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      permissions\n      tags\n    }\n  }\n`;\n\nconst GET_PERMISSION_ENUM = gql`\n  query GetPermissionEnum {\n    __type(name: \"ClientPermission\") {\n      enumValues {\n        name\n        description\n      }\n    }\n  }\n`;\n\nconst ADD_CLIENT_PERMISSION = gql`\n  mutation AddClientPermission($clientId: ID!, $permission: ClientPermission!) {\n    addClientPermission(clientId: $clientId, permission: $permission) {\n      id\n      permissions\n    }\n  }\n`;\n\nconst REMOVE_CLIENT_PERMISSION = gql`\n  mutation RemoveClientPermission($clientId: ID!, $permission: ClientPermission!) {\n    removeClientPermission(clientId: $clientId, permission: $permission) {\n      id\n      permissions\n    }\n  }\n`;\n\nconst GET_ALL_TAGS = gql`\n  query GetAllClientTags {\n    allClientTags\n  }\n`;\n\nconst DELETE_CLIENT = gql`\n  mutation DeleteClient($id: ID!) {\n    deleteClient(id: $id)\n  }\n`;\n\nconst UPDATE_CLIENT = gql`\n  mutation UpdateClient($id: ID!, $input: UpdateClientInput!) {\n    updateClient(id: $id, input: $input) {\n      id\n      tags\n    }\n  }\n`;\n\n\ninterface DeleteClientResponse {\n  deleteClient: boolean;\n}\n\ninterface GetClientsResponse {\n  clients: Client[];\n}\n\nconst StatCard = ({\n  title,\n  stat,\n  icon,\n  color\n}: {\n  title: string;\n  stat: number;\n  icon: React.ReactNode;\n  color: string;\n}) => {\n  const { colorMode } = useColorMode();\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  \n  return (\n    <Box\n      p={6}\n      bg={cardGradientBg}\n      backdropFilter=\"blur(10px)\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      borderRadius=\"lg\"\n      border=\"1px\"\n      borderColor={cardBorder}\n    >\n      <HStack spacing={4}>\n        <Box color={color}>\n          {icon}\n        </Box>\n        <Stat>\n          <StatLabel color={textSecondary}>{title}</StatLabel>\n          <StatNumber fontSize=\"2xl\" fontWeight=\"bold\" color={textPrimary}>\n            {stat}\n          </StatNumber>\n        </Stat>\n      </HStack>\n    </Box>\n  );\n};\n\nconst getNewClientsThisMonth = (clients?: Client[]) => {\n  if (!clients) return 0;\n  // Note: This is just a placeholder since we don't have a creation date in the current client data\n  // You might want to add a createdAt field to your client data to make this accurate\n  return Math.floor(clients.length * 0.2); // Returns 20% of total clients as an example\n};\n\nconst ClientsList = () => {\n  usePageTitle(\"Clients\");\n  const navigate = useNavigate();\n  const { colorMode } = useColorMode();\n  const { loading, error, data, refetch } = useQuery(GET_CLIENTS);\n  const { data: tagsData } = useQuery(GET_ALL_TAGS);\n  const { data: enumData } = useQuery(GET_PERMISSION_ENUM);\n  const toast = useToast();\n  const [deleteClientMutation, { loading: deleteLoading }] = useMutation<\n    DeleteClientResponse,\n    { id: string }\n  >(DELETE_CLIENT);\n  const [updateClientMutation] = useMutation(UPDATE_CLIENT);\n  const [addPermission] = useMutation(ADD_CLIENT_PERMISSION);\n  const [removePermission] = useMutation(REMOVE_CLIENT_PERMISSION);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { isOpen: isTagModalOpen, onOpen: onTagModalOpen, onClose: onTagModalClose } = useDisclosure();\n  const cancelRef = React.useRef<HTMLButtonElement>(null);\n  const [clientToDelete, setClientToDelete] = React.useState<Client | null>(\n    null\n  );\n  const [clientToEdit, setClientToEdit] = React.useState<Client | null>(null);\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  const [selectedTags, setSelectedTags] = React.useState<string[]>([]);\n  const [newTag, setNewTag] = React.useState(\"\");\n  const [clientTags, setClientTags] = React.useState<string[]>([]);\n  const [selectedPermissions, setSelectedPermissions] = React.useState<{ [key: string]: string }>({});\n\n  // Consistent styling from brandConfig with theme support\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  const handleCopyId = async (id: string) => {\n    try {\n      await navigator.clipboard.writeText(id);\n      toast({\n        title: \"ID Copied\",\n        description: \"Client ID has been copied to clipboard\",\n        status: \"success\",\n        duration: 2000,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy ID to clipboard\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  // Get available permissions from GraphQL schema\n  const availablePermissions = enumData?.__type?.enumValues?.map((v: any) => v.name) || [];\n\n  const handleAddPermission = async (clientId: string) => {\n    const permission = selectedPermissions[clientId];\n    if (!permission) {\n      toast({\n        title: \"No permission selected\",\n        description: \"Please select a permission to add\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    try {\n      await addPermission({\n        variables: { clientId, permission },\n      });\n      \n      toast({\n        title: \"Permission added\",\n        description: `Successfully added ${permission} permission`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n      \n      refetch();\n      setSelectedPermissions({ ...selectedPermissions, [clientId]: \"\" });\n    } catch (error: any) {\n      toast({\n        title: \"Error adding permission\",\n        description: error.message,\n        status: \"error\",\n        duration: 4000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleRemovePermission = async (clientId: string, permission: string) => {\n    try {\n      await removePermission({\n        variables: { clientId, permission },\n      });\n      \n      toast({\n        title: \"Permission removed\",\n        description: `Successfully removed ${permission} permission`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n      \n      refetch();\n    } catch (error: any) {\n      toast({\n        title: \"Error removing permission\",\n        description: error.message,\n        status: \"error\",\n        duration: 4000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleDelete = (client: Client) => {\n    setClientToDelete(client);\n    onOpen();\n  };\n\n  // Filter clients based on search and tags\n  const filteredClients = React.useMemo(() => {\n    if (!data?.clients) return [];\n    \n    let filtered = [...data.clients];\n    \n    // Apply search filter\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      filtered = filtered.filter((client: Client) =>\n        client.fName?.toLowerCase().includes(search) ||\n        client.lName?.toLowerCase().includes(search) ||\n        client.email?.toLowerCase().includes(search) ||\n        client.phoneNumber?.toLowerCase().includes(search)\n      );\n    }\n    \n    // Apply tag filter\n    if (selectedTags.length > 0) {\n      filtered = filtered.filter((client: Client) =>\n        client.tags && selectedTags.some(tag => client.tags?.includes(tag))\n      );\n    }\n    \n    return filtered;\n  }, [data?.clients, searchTerm, selectedTags]);\n\n  const handleTagToggle = (tag: string) => {\n    setSelectedTags(prev =>\n      prev.includes(tag)\n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setSelectedTags([]);\n  };\n\n  const handleManageTags = (client: Client) => {\n    setClientToEdit(client);\n    setClientTags(client.tags || []);\n    onTagModalOpen();\n  };\n\n  const handleAddTag = () => {\n    if (newTag && !clientTags.includes(newTag)) {\n      setClientTags([...clientTags, newTag]);\n      setNewTag(\"\");\n    }\n  };\n\n  const handleRemoveTag = (tag: string) => {\n    setClientTags(clientTags.filter(t => t !== tag));\n  };\n\n  const handleSaveTags = async () => {\n    if (!clientToEdit) return;\n\n    try {\n      await updateClientMutation({\n        variables: {\n          id: clientToEdit.id,\n          input: { tags: clientTags }\n        }\n      });\n\n      toast({\n        title: \"Tags updated\",\n        description: \"Client tags have been successfully updated.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n\n      refetch();\n      onTagModalClose();\n      setClientToEdit(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update client tags\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const confirmDelete = async () => {\n    if (!clientToDelete) return;\n\n    try {\n      const response = await deleteClientMutation({\n        variables: { id: clientToDelete.id },\n        update(cache: ApolloCache<unknown>) {\n          const existingData = cache.readQuery<GetClientsResponse>({\n            query: GET_CLIENTS,\n          });\n\n          if (existingData) {\n            cache.writeQuery({\n              query: GET_CLIENTS,\n              data: {\n                clients: existingData.clients.filter(\n                  (c) => c.id !== clientToDelete.id\n                ),\n              },\n            });\n          }\n        },\n      });\n\n      if (response.data?.deleteClient) {\n        toast({\n          title: \"Client deleted\",\n          description: `${clientToDelete.fName} ${clientToDelete.lName} has been successfully removed.`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        onClose();\n        setClientToDelete(null);\n      } else {\n        throw new Error(\"Failed to delete client\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete client\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  if (error) {\n    toast({\n      title: \"Error loading clients\",\n      description: error.message,\n      status: \"error\",\n      duration: 5000,\n      isClosable: true,\n    });\n  }\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={clientsModuleConfig} />\n      <Container maxW=\"100%\" px={{ base: 4, md: 8 }} py={4} flex=\"1\">\n        <Card\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px\"\n          borderColor={cardBorder}\n        >\n          <CardHeader borderBottom=\"1px\" borderColor={cardBorder}>\n            <HStack justify=\"space-between\">\n              <Heading size=\"lg\" color={textPrimary}>👥 Clients</Heading>\n              <Button\n                bg={colorMode === 'light' ? \"#007AFF\" : \"white\"}\n                color={colorMode === 'light' ? \"white\" : \"black\"}\n                _hover={{\n                  bg: colorMode === 'light' ? \"#0051D0\" : \"gray.100\",\n                  transform: \"translateY(-2px)\"\n                }}\n                onClick={() => navigate(\"/newclient\")}\n                boxShadow={colorMode === 'light'\n                  ? \"0 2px 4px rgba(0, 122, 255, 0.2)\"\n                  : \"0 2px 4px rgba(255, 255, 255, 0.1)\"}\n              >\n                New Client\n              </Button>\n            </HStack>\n          </CardHeader>\n\n          <Box px={6} pb={4}>\n            <Alert\n              status=\"info\"\n              mb={4}\n              bg={colorMode === 'light'\n                ? \"rgba(0, 122, 255, 0.05)\"\n                : \"rgba(59, 130, 246, 0.1)\"}\n              borderColor={colorMode === 'light'\n                ? \"rgba(0, 122, 255, 0.2)\"\n                : \"rgba(59, 130, 246, 0.3)\"}\n              borderWidth=\"1px\"\n            >\n              <AlertIcon color={colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"} />\n              <Box>\n                <AlertTitle color={textPrimary}>Practitioner ID Information</AlertTitle>\n                <AlertDescription color={textSecondary}>\n                  Each client has a unique ID that serves as their Practitioner ID. When booking appointments with other clients,\n                  this same ID is referred to as the Practitioner ID. Click any ID below to copy it for lookup or booking purposes.\n                </AlertDescription>\n              </Box>\n            </Alert>\n\n            {/* Search and Filter Section */}\n            <VStack spacing={4} mb={6}>\n              {/* Search Input */}\n              <InputGroup size=\"lg\">\n                <InputLeftElement pointerEvents=\"none\">\n                  <SearchIcon color={textMuted} />\n                </InputLeftElement>\n                <Input\n                  placeholder=\"Search clients by name, email or phone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  bg={colorMode === 'light'\n                    ? \"white\"\n                    : \"rgba(255, 255, 255, 0.05)\"}\n                  border=\"1px\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _placeholder={{ color: textMuted }}\n                  _focus={{\n                    borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                    boxShadow: colorMode === 'light'\n                      ? \"0 0 0 1px #007AFF\"\n                      : \"0 0 0 1px #3B82F6\",\n                  }}\n                />\n              </InputGroup>\n\n              {/* Tag Filter */}\n              {tagsData?.allClientTags && tagsData.allClientTags.length > 0 && (\n                <Box width=\"100%\">\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\" color={textSecondary}>Filter by Tags:</Text>\n                    {(selectedTags.length > 0 || searchTerm) && (\n                      <Button\n                        size=\"xs\"\n                        variant=\"ghost\"\n                        onClick={clearFilters}\n                        color={textSecondary}\n                        leftIcon={<CloseIcon />}\n                      >\n                        Clear Filters\n                      </Button>\n                    )}\n                  </HStack>\n                  <Wrap spacing={2}>\n                    {tagsData.allClientTags.map((tag: string) => (\n                      <WrapItem key={tag}>\n                        <Tag\n                          size=\"md\"\n                          variant={selectedTags.includes(tag) ? \"solid\" : \"outline\"}\n                          colorScheme={selectedTags.includes(tag) ? \"blue\" : \"gray\"}\n                          cursor=\"pointer\"\n                          onClick={() => handleTagToggle(tag)}\n                          borderColor={selectedTags.includes(tag) ? \"#3B82F6\" : cardBorder}\n                          _hover={{\n                            transform: \"scale(1.05)\",\n                            boxShadow: \"0 0 0 1px #3B82F6\",\n                          }}\n                        >\n                          <TagLabel>{tag}</TagLabel>\n                        </Tag>\n                      </WrapItem>\n                    ))}\n                  </Wrap>\n                </Box>\n              )}\n\n              {/* Active Filters Display */}\n              {(searchTerm || selectedTags.length > 0) && (\n                <HStack\n                  width=\"100%\"\n                  justify=\"space-between\"\n                  p={3}\n                  bg={colorMode === 'light'\n                    ? \"rgba(0, 122, 255, 0.05)\"\n                    : \"rgba(59, 130, 246, 0.1)\"}\n                  borderRadius=\"md\"\n                >\n                  <Text fontSize=\"sm\" color={textPrimary}>\n                    Showing {filteredClients.length} of {data?.clients?.length || 0} clients\n                  </Text>\n                  {selectedTags.length > 0 && (\n                    <Badge colorScheme=\"blue\" fontSize=\"xs\">\n                      {selectedTags.length} tag{selectedTags.length !== 1 ? 's' : ''} selected\n                    </Badge>\n                  )}\n                </HStack>\n              )}\n            </VStack>\n\n            <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>\n              <StatCard\n                title=\"Total Clients\"\n                stat={filteredClients.length}\n                icon={<FiUsers size=\"3em\" />}\n                color=\"#3B82F6\"\n              />\n              <StatCard\n                title=\"Active Clients\"\n                stat={filteredClients.filter((client: Client) => client.email).length}\n                icon={<FiUserCheck size=\"3em\" />}\n                color=\"#22C55E\"\n              />\n              <StatCard\n                title=\"New This Month\"\n                stat={getNewClientsThisMonth(filteredClients)}\n                icon={<FiUserPlus size=\"3em\" />}\n                color=\"#A855F7\"\n              />\n              <StatCard\n                title=\"With Phone Numbers\"\n                stat={filteredClients.filter((client: Client) => client.phoneNumber).length}\n                icon={<FiPhone size=\"3em\" />}\n                color=\"#FB923C\"\n              />\n            </SimpleGrid>\n          </Box>\n\n          <CardBody>\n            <Box overflowX=\"auto\">\n              <Table variant=\"simple\">\n                <Thead>\n                  <Tr>\n                    <Th color={textSecondary} borderColor={cardBorder}>Client/Practitioner ID</Th>\n                    <Th color={textSecondary} borderColor={cardBorder}>Name</Th>\n                    <Th color={textSecondary} borderColor={cardBorder}>Email</Th>\n                    <Th color={textSecondary} borderColor={cardBorder}>Phone</Th>\n                    <Th color={textSecondary} borderColor={cardBorder}>Permissions</Th>\n                    <Th color={textSecondary} borderColor={cardBorder}>Tags</Th>\n                    <Th color={textSecondary} borderColor={cardBorder}>Actions</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {loading ? (\n                    // Loading state with skeleton rows\n                    [...Array(3)].map((_, index) => (\n                      <Tr key={`skeleton-${index}`}>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                        <Td>\n                          <Skeleton height=\"20px\" />\n                        </Td>\n                      </Tr>\n                    ))\n                  ) : filteredClients.length ? (\n                    // Actual data rows\n                    filteredClients.map((client: Client) => (\n                      <Tr key={client.id}>\n                        <Td borderColor={cardBorder}>\n                          <Tooltip label=\"Click to copy ID\" hasArrow>\n                            <HStack\n                              spacing={2}\n                              cursor=\"pointer\"\n                              onClick={() => handleCopyId(client.id)}\n                              _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                              p={1}\n                              borderRadius=\"md\"\n                            >\n                              <Code\n                                fontSize=\"xs\"\n                                wordBreak=\"break-all\"\n                                bg={colorMode === 'light'\n                                  ? \"rgba(0, 122, 255, 0.1)\"\n                                  : \"rgba(59, 130, 246, 0.2)\"}\n                                color={colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"}\n                                border=\"1px solid\"\n                                borderColor={colorMode === 'light'\n                                  ? \"rgba(0, 122, 255, 0.2)\"\n                                  : \"rgba(59, 130, 246, 0.3)\"}\n                              >\n                                {client.id}\n                              </Code>\n                              <CopyIcon boxSize={3} color={textMuted} />\n                            </HStack>\n                          </Tooltip>\n                        </Td>\n                        <Td borderColor={cardBorder}>\n                          <Text \n                            fontWeight=\"medium\" \n                            color={textPrimary}\n                            cursor=\"pointer\"\n                            _hover={{ color: \"#3B82F6\", textDecoration: \"underline\" }}\n                            onClick={() => window.open(`/client/${client.id}`, '_blank')}\n                          >\n                            {`${client.fName} ${client.lName}`}\n                          </Text>\n                        </Td>\n                        <Td borderColor={cardBorder}>\n                          <Text fontSize=\"sm\" color={textSecondary}>{client.email}</Text>\n                        </Td>\n                        <Td borderColor={cardBorder}>\n                          <Text fontSize=\"sm\" color={textSecondary}>{client.phoneNumber}</Text>\n                        </Td>\n                        <Td borderColor={cardBorder}>\n                          <VStack align=\"start\" spacing={2}>\n                            <Wrap spacing={1}>\n                              {client.permissions && client.permissions.length > 0 ? (\n                                client.permissions.map((permission: string) => (\n                                  <WrapItem key={permission}>\n                                    <Badge\n                                      size=\"sm\"\n                                      colorScheme=\"purple\"\n                                      variant=\"subtle\"\n                                      fontSize=\"xs\"\n                                      pr={1}\n                                    >\n                                      {permission}\n                                      <IconButton\n                                        aria-label=\"Remove permission\"\n                                        icon={<SmallCloseIcon />}\n                                        size=\"xs\"\n                                        variant=\"ghost\"\n                                        ml={1}\n                                        minW=\"auto\"\n                                        h=\"auto\"\n                                        color=\"purple.500\"\n                                        _hover={{ color: \"red.500\" }}\n                                        onClick={() => handleRemovePermission(client.id, permission)}\n                                      />\n                                    </Badge>\n                                  </WrapItem>\n                                ))\n                              ) : (\n                                <Text fontSize=\"xs\" color={textMuted}>No permissions</Text>\n                              )}\n                            </Wrap>\n                            <HStack spacing={2}>\n                              <Select\n                                size=\"xs\"\n                                placeholder=\"Add permission...\"\n                                value={selectedPermissions[client.id] || \"\"}\n                                onChange={(e) => setSelectedPermissions({\n                                  ...selectedPermissions,\n                                  [client.id]: e.target.value\n                                })}\n                                bg=\"rgba(147, 51, 234, 0.1)\"\n                                borderColor=\"rgba(147, 51, 234, 0.3)\"\n                                color={textPrimary}\n                                _hover={{ borderColor: \"rgba(147, 51, 234, 0.5)\" }}\n                                fontSize=\"xs\"\n                                maxW=\"150px\"\n                              >\n                                {availablePermissions\n                                  .filter((p: string) => !client.permissions?.includes(p as ClientPermission))\n                                  .map((permission: string) => (\n                                    <option key={permission} value={permission}>\n                                      {permission}\n                                    </option>\n                                  ))}\n                              </Select>\n                              {selectedPermissions[client.id] && (\n                                <IconButton\n                                  aria-label=\"Add permission\"\n                                  icon={<AddIcon />}\n                                  size=\"xs\"\n                                  colorScheme=\"purple\"\n                                  onClick={() => handleAddPermission(client.id)}\n                                />\n                              )}\n                            </HStack>\n                          </VStack>\n                        </Td>\n                        <Td borderColor={cardBorder}>\n                          <HStack spacing={2}>\n                            <Wrap spacing={1} flex=\"1\">\n                              {client.tags && client.tags.length > 0 ? (\n                                client.tags.map((tag: string) => (\n                                  <WrapItem key={tag}>\n                                    <Tag\n                                      size=\"sm\"\n                                      variant=\"subtle\"\n                                      colorScheme=\"blue\"\n                                    >\n                                      <TagLabel>{tag}</TagLabel>\n                                    </Tag>\n                                  </WrapItem>\n                                ))\n                              ) : (\n                                <Text fontSize=\"sm\" color={textMuted}>No tags</Text>\n                              )}\n                            </Wrap>\n                            <IconButton\n                              aria-label=\"Manage tags\"\n                              icon={<EditIcon />}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              colorScheme=\"blue\"\n                              onClick={() => handleManageTags(client)}\n                              _hover={{ bg: \"rgba(59, 130, 246, 0.2)\" }}\n                            />\n                          </HStack>\n                        </Td>\n                        <Td borderColor={cardBorder}>\n                          <HStack spacing={2}>\n                            <Tooltip label=\"Create Opportunity\" hasArrow>\n                              <IconButton\n                                aria-label=\"Create opportunity\"\n                                icon={<FiDollarSign />}\n                                size=\"sm\"\n                                bg=\"rgba(34, 197, 94, 0.2)\"\n                                color=\"#22C55E\"\n                                border=\"1px solid\"\n                                borderColor=\"rgba(34, 197, 94, 0.3)\"\n                                _hover={{ bg: \"rgba(34, 197, 94, 0.3)\" }}\n                                onClick={() => navigate(`/opportunities/new?clientId=${client.id}`)}\n                              />\n                            </Tooltip>\n                            <Tooltip label=\"Delete Client\" hasArrow>\n                              <IconButton\n                                aria-label=\"Delete client\"\n                                icon={<DeleteIcon />}\n                                size=\"sm\"\n                                bg=\"rgba(239, 68, 68, 0.2)\"\n                                color=\"#EF4444\"\n                                border=\"1px solid\"\n                                borderColor=\"rgba(239, 68, 68, 0.3)\"\n                                _hover={{ bg: \"rgba(239, 68, 68, 0.3)\" }}\n                                onClick={() => handleDelete(client)}\n                              />\n                            </Tooltip>\n                          </HStack>\n                        </Td>\n                      </Tr>\n                    ))\n                  ) : (\n                    // No data state\n                    <Tr>\n                      <Td colSpan={7} textAlign=\"center\" py={8} borderColor={cardBorder}>\n                        <Text color={textMuted}>No clients found</Text>\n                      </Td>\n                    </Tr>\n                  )}\n                </Tbody>\n              </Table>\n            </Box>\n          </CardBody>\n        </Card>\n      </Container>\n      <FooterWithFourColumns />\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay bg=\"rgba(0, 0, 0, 0.8)\">\n          <AlertDialogContent \n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            border=\"1px\"\n            borderColor={cardBorder}\n          >\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary} borderBottom=\"1px\" borderColor={cardBorder}>\n              Delete Client\n            </AlertDialogHeader>\n\n            <AlertDialogBody color={textSecondary}>\n              Are you sure you want to delete {clientToDelete?.fName} {clientToDelete?.lName}? This\n              action cannot be undone.\n            </AlertDialogBody>\n\n            <AlertDialogFooter borderTop=\"1px\" borderColor={cardBorder}>\n              <Button \n                ref={cancelRef} \n                onClick={onClose}\n                variant=\"ghost\"\n                color={textPrimary}\n                _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n              >\n                Cancel\n              </Button>\n              <Button\n                bg=\"#EF4444\"\n                color=\"white\"\n                _hover={{ bg: \"#DC2626\" }}\n                onClick={confirmDelete}\n                ml={3}\n                isLoading={deleteLoading}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n\n      {/* Tag Management Modal */}\n      <Modal isOpen={isTagModalOpen} onClose={onTagModalClose} size=\"lg\">\n        <ModalOverlay bg=\"rgba(0, 0, 0, 0.8)\" />\n        <ModalContent\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          border=\"1px\"\n          borderColor={cardBorder}\n        >\n          <ModalHeader color={textPrimary} borderBottom=\"1px\" borderColor={cardBorder}>\n            Manage Tags for {clientToEdit?.fName} {clientToEdit?.lName}\n          </ModalHeader>\n          <ModalCloseButton color={textPrimary} />\n          <ModalBody py={4}>\n            <VStack spacing={4} align=\"stretch\">\n              <FormControl>\n                <FormLabel color={textSecondary}>Current Tags</FormLabel>\n                <Wrap spacing={2}>\n                  {clientTags.length > 0 ? (\n                    clientTags.map((tag) => (\n                      <WrapItem key={tag}>\n                        <Tag size=\"md\" variant=\"solid\" colorScheme=\"blue\">\n                          <TagLabel>{tag}</TagLabel>\n                          <TagCloseButton onClick={() => handleRemoveTag(tag)} />\n                        </Tag>\n                      </WrapItem>\n                    ))\n                  ) : (\n                    <Text color={textMuted}>No tags added yet</Text>\n                  )}\n                </Wrap>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textSecondary}>Add New Tag</FormLabel>\n                <HStack>\n                  <Input\n                    placeholder=\"Enter tag name\"\n                    value={newTag}\n                    onChange={(e) => setNewTag(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        handleAddTag();\n                      }\n                    }}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{ borderColor: \"rgba(59, 130, 246, 0.5)\" }}\n                    _focus={{ borderColor: \"#3B82F6\", boxShadow: \"0 0 0 1px #3B82F6\" }}\n                  />\n                  <Button\n                    colorScheme=\"blue\"\n                    onClick={handleAddTag}\n                    bg=\"#3B82F6\"\n                    _hover={{ bg: \"#2563EB\" }}\n                  >\n                    Add\n                  </Button>\n                </HStack>\n              </FormControl>\n\n              {tagsData?.allClientTags && tagsData.allClientTags.length > 0 && (\n                <FormControl>\n                  <FormLabel color={textSecondary}>Existing Tags</FormLabel>\n                  <Wrap spacing={2}>\n                    {tagsData.allClientTags\n                      .filter((tag: string) => !clientTags.includes(tag))\n                      .map((tag: string) => (\n                        <WrapItem key={tag}>\n                          <Tag\n                            size=\"sm\"\n                            variant=\"outline\"\n                            colorScheme=\"gray\"\n                            cursor=\"pointer\"\n                            onClick={() => setClientTags([...clientTags, tag])}\n                            _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n                          >\n                            <TagLabel>{tag}</TagLabel>\n                          </Tag>\n                        </WrapItem>\n                      ))}\n                  </Wrap>\n                </FormControl>\n              )}\n            </VStack>\n          </ModalBody>\n          <ModalFooter borderTop=\"1px\" borderColor={cardBorder}>\n            <Button\n              variant=\"ghost\"\n              mr={3}\n              onClick={onTagModalClose}\n              color={textPrimary}\n              _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n            >\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSaveTags}\n              bg=\"#3B82F6\"\n              _hover={{ bg: \"#2563EB\" }}\n            >\n              Save Tags\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default ClientsList;\n"],"names":["SmallCloseIcon","createIcon","displayName","viewBox","path","jsx","d","fillRule","fill","GET_CLIENTS","gql","_templateObject","_taggedTemplateLiteral","GET_PERMISSION_ENUM","_templateObject2","ADD_CLIENT_PERMISSION","_templateObject3","REMOVE_CLIENT_PERMISSION","_templateObject4","GET_ALL_TAGS","_templateObject5","DELETE_CLIENT","_templateObject6","UPDATE_CLIENT","_templateObject7","StatCard","_ref","title","stat","icon","color","colorMode","useColorMode","cardGradientBg","getColor","cardBorder","textPrimary","textSecondary","_jsx","Box","p","bg","backdropFilter","boxShadow","borderRadius","border","borderColor","children","_jsxs","HStack","spacing","Stat","StatLabel","StatNumber","fontSize","fontWeight","ClientsList","_enumData$__type","_enumData$__type$enum","_data$clients","usePageTitle","navigate","useNavigate","loading","error","data","refetch","useQuery","tagsData","enumData","toast","useToast","deleteClientMutation","deleteLoading","useMutation","updateClientMutation","addPermission","removePermission","isOpen","onOpen","onClose","useDisclosure","isTagModalOpen","onTagModalOpen","onTagModalClose","cancelRef","React","clientToDelete","setClientToDelete","clientToEdit","setClientToEdit","searchTerm","setSearchTerm","selectedTags","setSelectedTags","newTag","setNewTag","clientTags","setClientTags","selectedPermissions","setSelectedPermissions","textMuted","availablePermissions","__type","enumValues","map","v","name","filteredClients","clients","filtered","search","toLowerCase","filter","client","_client$fName","_client$lName","_client$email","_client$phoneNumber","fName","includes","lName","email","phoneNumber","length","tags","some","tag","_client$tags","handleAddTag","description","message","status","duration","isClosable","minHeight","display","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","clientsModuleConfig","Container","maxW","px","base","md","py","flex","Card","CardHeader","borderBottom","justify","Heading","size","Button","_hover","transform","onClick","pb","Alert","mb","borderWidth","AlertIcon","AlertTitle","AlertDescription","VStack","InputGroup","InputLeftElement","pointerEvents","SearchIcon","Input","placeholder","value","onChange","e","target","_placeholder","_focus","allClientTags","width","Text","variant","clearFilters","leftIcon","CloseIcon","Wrap","WrapItem","Tag","colorScheme","cursor","prev","t","handleTagToggle","TagLabel","Badge","SimpleGrid","columns","lg","FiUsers","FiUserCheck","Math","floor","FiUserPlus","FiPhone","CardBody","overflowX","Table","Thead","Tr","Th","Tbody","Array","_","index","Td","Skeleton","height","concat","Tooltip","label","hasArrow","async","navigator","clipboard","writeText","id","handleCopyId","Code","wordBreak","CopyIcon","boxSize","textDecoration","window","open","align","permissions","permission","pr","IconButton","ml","minW","h","clientId","variables","handleRemovePermission","Select","_objectSpread","_client$permissions","AddIcon","handleAddPermission","EditIcon","handleManageTags","FiDollarSign","DeleteIcon","handleDelete","colSpan","textAlign","FooterWithFourColumns","AlertDialog","leastDestructiveRef","AlertDialogOverlay","AlertDialogContent","AlertDialogHeader","AlertDialogBody","AlertDialogFooter","borderTop","ref","_response$data","update","cache","existingData","readQuery","query","writeQuery","c","deleteClient","Error","isLoading","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","TagCloseButton","handleRemoveTag","onKeyDown","key","ModalFooter","mr","input"],"sourceRoot":""}