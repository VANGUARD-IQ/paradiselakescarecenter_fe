{"version":3,"file":"static/js/5401.759f28dc.chunk.js","mappings":"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","sources":["pages/emails/CommunicationTaskModal.tsx","pages/emails/CommunicationTaskList.tsx","pages/emails/InboundEmailDetail.tsx","pages/emails/components/ConvertToProjectModal.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    VStack,\n    Input,\n    FormControl,\n    FormLabel,\n    useToast,\n    Select,\n    Textarea,\n    HStack,\n    Badge,\n    Avatar,\n    Text,\n    useColorModeValue,\n    Box,\n    Icon,\n    FormHelperText,\n} from \"@chakra-ui/react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { FiCalendar, FiUser, FiFlag, FiCheckCircle, FiClock, FiXCircle, FiAlertCircle } from \"react-icons/fi\";\nimport { getColor } from \"../../brandConfig\";\n\nconst CREATE_COMMUNICATION_TASK = gql`\n    mutation CreateCommunicationTask($input: CommunicationTaskInput!) {\n        createCommunicationTask(input: $input) {\n            id\n            title\n            description\n            status\n            priority\n            dueDate\n            assignedTo {\n                id\n                fName\n                lName\n                email\n            }\n            notes\n            communicationId\n            communicationType\n            createdAt\n        }\n    }\n`;\n\nconst UPDATE_COMMUNICATION_TASK = gql`\n    mutation UpdateCommunicationTask($id: ID!, $input: UpdateCommunicationTaskInput!) {\n        updateCommunicationTask(id: $id, input: $input) {\n            id\n            title\n            description\n            status\n            priority\n            dueDate\n            assignedTo {\n                id\n                fName\n                lName\n                email\n            }\n            notes\n            completedAt\n        }\n    }\n`;\n\nconst GET_CLIENTS = gql`\n    query GetClients {\n        clients {\n            id\n            fName\n            lName\n            email\n            businessName\n        }\n    }\n`;\n\ninterface CommunicationTaskModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    communicationId: string;\n    communicationType: \"INBOUND_EMAIL\" | \"OUTBOUND_EMAIL\" | \"SMS\" | \"PHONE_CALL\" | \"MEETING\" | \"OTHER\";\n    onTaskCreated?: () => void;\n    existingTask?: {\n        id: string;\n        title: string;\n        description?: string;\n        status: string;\n        priority: string;\n        dueDate?: string;\n        assignedTo?: { id: string }[];\n        notes?: string;\n    };\n}\n\nconst CommunicationTaskModal: React.FC<CommunicationTaskModalProps> = ({\n    isOpen,\n    onClose,\n    communicationId,\n    communicationType,\n    onTaskCreated,\n    existingTask,\n}) => {\n    const toast = useToast();\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [status, setStatus] = useState(\"TODO\");\n    const [priority, setPriority] = useState(\"MEDIUM\");\n    const [dueDate, setDueDate] = useState(\"\");\n    const [assignedToIds, setAssignedToIds] = useState<string[]>([]);\n    const [notes, setNotes] = useState(\"\");\n\n    // Theme colors from brandConfig\n    const bg = getColor(\"background.cardGradient\");\n    const borderColor = getColor(\"border.darkCard\");\n    const textColor = getColor(\"text.primaryDark\");\n    const mutedText = getColor(\"text.mutedDark\");\n    const modalBg = getColor(\"background.main\");\n    const inputBg = getColor(\"background.main\");\n\n    const { data: clientsData } = useQuery(GET_CLIENTS);\n\n    const [createTask, { loading: creating }] = useMutation(CREATE_COMMUNICATION_TASK, {\n        onCompleted: () => {\n            toast({\n                title: \"Task created\",\n                description: \"The task has been created successfully\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n            onTaskCreated?.();\n            handleClose();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error creating task\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        },\n    });\n\n    const [updateTask, { loading: updating }] = useMutation(UPDATE_COMMUNICATION_TASK, {\n        onCompleted: () => {\n            toast({\n                title: \"Task updated\",\n                description: \"The task has been updated successfully\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n            onTaskCreated?.();\n            handleClose();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error updating task\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        },\n    });\n\n    useEffect(() => {\n        if (existingTask) {\n            setTitle(existingTask.title);\n            setDescription(existingTask.description || \"\");\n            setStatus(existingTask.status);\n            setPriority(existingTask.priority);\n            \n            // Format the date for the datetime-local input\n            if (existingTask.dueDate) {\n                const date = new Date(existingTask.dueDate);\n                // Format as YYYY-MM-DDTHH:mm for datetime-local input\n                const year = date.getFullYear();\n                const month = String(date.getMonth() + 1).padStart(2, '0');\n                const day = String(date.getDate()).padStart(2, '0');\n                const hours = String(date.getHours()).padStart(2, '0');\n                const minutes = String(date.getMinutes()).padStart(2, '0');\n                setDueDate(`${year}-${month}-${day}T${hours}:${minutes}`);\n            } else {\n                setDueDate(\"\");\n            }\n            \n            setAssignedToIds(existingTask.assignedTo?.map((a) => a.id) || []);\n            setNotes(existingTask.notes || \"\");\n        }\n    }, [existingTask]);\n\n    const handleClose = () => {\n        setTitle(\"\");\n        setDescription(\"\");\n        setStatus(\"TODO\");\n        setPriority(\"MEDIUM\");\n        setDueDate(\"\");\n        setAssignedToIds([]);\n        setNotes(\"\");\n        onClose();\n    };\n\n    const handleSubmit = async () => {\n        if (!title.trim()) {\n            toast({\n                title: \"Title required\",\n                description: \"Please enter a task title\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        // Format the date properly for GraphQL DateTime scalar\n        let formattedDueDate;\n        if (dueDate) {\n            // If the date string doesn't include seconds, add them\n            if (dueDate.length === 16) { // Format: \"2025-08-28T18:42\"\n                formattedDueDate = new Date(dueDate + \":00\").toISOString();\n            } else {\n                formattedDueDate = new Date(dueDate).toISOString();\n            }\n        }\n\n        const input: any = {\n            title: title.trim(),\n            description: description.trim() || undefined,\n            status,\n            priority,\n            dueDate: formattedDueDate || undefined,\n            assignedTo: assignedToIds.length > 0 ? assignedToIds : undefined,\n            notes: notes.trim() || undefined,\n        };\n\n        if (existingTask) {\n            await updateTask({\n                variables: { id: existingTask.id, input },\n            });\n        } else {\n            await createTask({\n                variables: {\n                    input: {\n                        ...input,\n                        communicationId,\n                        communicationType,\n                    },\n                },\n            });\n        }\n    };\n\n    const getStatusIcon = (status: string) => {\n        switch (status) {\n            case \"TODO\":\n                return FiClock;\n            case \"IN_PROGRESS\":\n                return FiAlertCircle;\n            case \"COMPLETED\":\n                return FiCheckCircle;\n            case \"CANCELLED\":\n                return FiXCircle;\n            default:\n                return FiClock;\n        }\n    };\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case \"TODO\":\n                return \"gray\";\n            case \"IN_PROGRESS\":\n                return \"blue\";\n            case \"COMPLETED\":\n                return \"green\";\n            case \"CANCELLED\":\n                return \"red\";\n            default:\n                return \"gray\";\n        }\n    };\n\n    const getPriorityColor = (priority: string) => {\n        switch (priority) {\n            case \"LOW\":\n                return \"gray\";\n            case \"MEDIUM\":\n                return \"yellow\";\n            case \"HIGH\":\n                return \"orange\";\n            case \"URGENT\":\n                return \"red\";\n            default:\n                return \"gray\";\n        }\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={handleClose} size=\"xl\">\n            <ModalOverlay bg=\"rgba(0, 0, 0, 0.8)\" backdropFilter=\"blur(4px)\" />\n            <ModalContent \n                bg={modalBg} \n                border=\"1px solid\" \n                borderColor={borderColor}\n                color={textColor}\n            >\n                <ModalHeader color={textColor} borderBottom=\"1px solid\" borderColor={borderColor}>\n                    {existingTask ? \"Edit Task\" : \"Create Task\"}\n                </ModalHeader>\n                <ModalCloseButton color={textColor} />\n                <ModalBody pb={6}>\n                    <VStack spacing={4} align=\"stretch\">\n                        <FormControl isRequired>\n                            <FormLabel color={textColor}>Title</FormLabel>\n                            <Input\n                                value={title}\n                                onChange={(e) => setTitle(e.target.value)}\n                                placeholder=\"Enter task title\"\n                                bg={inputBg}\n                                borderColor={borderColor}\n                                color={textColor}\n                                _placeholder={{ color: mutedText }}\n                                _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                            />\n                            <FormHelperText color={mutedText}>Brief title describing the task</FormHelperText>\n                        </FormControl>\n\n                        <FormControl>\n                            <FormLabel color={textColor}>Description</FormLabel>\n                            <Textarea\n                                value={description}\n                                onChange={(e) => setDescription(e.target.value)}\n                                placeholder=\"Detailed description of the task\"\n                                rows={3}\n                                bg={inputBg}\n                                borderColor={borderColor}\n                                color={textColor}\n                                _placeholder={{ color: mutedText }}\n                                _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                            />\n                        </FormControl>\n\n                        <HStack spacing={4}>\n                            <FormControl flex={1}>\n                                <FormLabel color={textColor}>\n                                    <HStack spacing={2}>\n                                        <Icon as={getStatusIcon(status)} color={textColor} />\n                                        <Text>Status</Text>\n                                    </HStack>\n                                </FormLabel>\n                                <Select \n                                    value={status} \n                                    onChange={(e) => setStatus(e.target.value)}\n                                    bg={inputBg}\n                                    borderColor={borderColor}\n                                    color={textColor}\n                                    _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                    _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                                >\n                                    <option value=\"TODO\">To Do</option>\n                                    <option value=\"IN_PROGRESS\">In Progress</option>\n                                    <option value=\"COMPLETED\">Completed</option>\n                                    <option value=\"CANCELLED\">Cancelled</option>\n                                </Select>\n                            </FormControl>\n\n                            <FormControl flex={1}>\n                                <FormLabel color={textColor}>\n                                    <HStack spacing={2}>\n                                        <Icon as={FiFlag} color={textColor} />\n                                        <Text>Priority</Text>\n                                    </HStack>\n                                </FormLabel>\n                                <Select \n                                    value={priority} \n                                    onChange={(e) => setPriority(e.target.value)}\n                                    bg={inputBg}\n                                    borderColor={borderColor}\n                                    color={textColor}\n                                    _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                    _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                                >\n                                    <option value=\"LOW\">Low</option>\n                                    <option value=\"MEDIUM\">Medium</option>\n                                    <option value=\"HIGH\">High</option>\n                                    <option value=\"URGENT\">Urgent</option>\n                                </Select>\n                            </FormControl>\n                        </HStack>\n\n                        <HStack spacing={4}>\n                            <FormControl flex={1}>\n                                <FormLabel color={textColor}>\n                                    <HStack spacing={2}>\n                                        <Icon as={FiCalendar} color={textColor} />\n                                        <Text>Due Date</Text>\n                                    </HStack>\n                                </FormLabel>\n                                <Input\n                                    type=\"datetime-local\"\n                                    value={dueDate}\n                                    onChange={(e) => setDueDate(e.target.value)}\n                                    bg={inputBg}\n                                    borderColor={borderColor}\n                                    color={textColor}\n                                    _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                    _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                                />\n                            </FormControl>\n\n                            <FormControl flex={1}>\n                                <FormLabel color={textColor}>\n                                    <HStack spacing={2}>\n                                        <Icon as={FiUser} color={textColor} />\n                                        <Text>Assign To</Text>\n                                    </HStack>\n                                </FormLabel>\n                                <Select\n                                    value={assignedToIds[0] || \"\"}\n                                    onChange={(e) => setAssignedToIds(e.target.value ? [e.target.value] : [])}\n                                    placeholder=\"Select assignee\"\n                                    bg={inputBg}\n                                    borderColor={borderColor}\n                                    color={textColor}\n                                    _placeholder={{ color: mutedText }}\n                                    _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                    _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                                >\n                                    {clientsData?.clients?.map((client: any) => (\n                                        <option key={client.id} value={client.id}>\n                                            {client.fName} {client.lName} - {client.email}\n                                        </option>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                        </HStack>\n\n                        <FormControl>\n                            <FormLabel color={textColor}>Notes</FormLabel>\n                            <Textarea\n                                value={notes}\n                                onChange={(e) => setNotes(e.target.value)}\n                                placeholder=\"Additional notes or context\"\n                                rows={2}\n                                bg={inputBg}\n                                borderColor={borderColor}\n                                color={textColor}\n                                _placeholder={{ color: mutedText }}\n                                _hover={{ borderColor: getColor(\"primaryBlue\") }}\n                                _focus={{ borderColor: getColor(\"primaryBlue\"), boxShadow: \"none\" }}\n                            />\n                        </FormControl>\n\n                        {/* Status and Priority Preview */}\n                        <Box p={3} borderWidth={1} borderRadius=\"md\" borderColor={borderColor}>\n                            <HStack spacing={4}>\n                                <Badge colorScheme={getStatusColor(status)} px={2} py={1}>\n                                    <HStack spacing={1}>\n                                        <Icon as={getStatusIcon(status)} />\n                                        <Text>{status.replace(\"_\", \" \")}</Text>\n                                    </HStack>\n                                </Badge>\n                                <Badge colorScheme={getPriorityColor(priority)} px={2} py={1}>\n                                    <HStack spacing={1}>\n                                        <Icon as={FiFlag} />\n                                        <Text>{priority}</Text>\n                                    </HStack>\n                                </Badge>\n                                {dueDate && (\n                                    <Badge colorScheme=\"purple\" px={2} py={1}>\n                                        <HStack spacing={1}>\n                                            <Icon as={FiCalendar} />\n                                            <Text>Due: {new Date(dueDate).toLocaleDateString()}</Text>\n                                        </HStack>\n                                    </Badge>\n                                )}\n                            </HStack>\n                        </Box>\n\n                        <HStack justify=\"flex-end\" spacing={3}>\n                            <Button \n                                variant=\"ghost\" \n                                onClick={handleClose}\n                                color={textColor}\n                                _hover={{ bg: getColor(\"background.cardGradient\") }}\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                colorScheme=\"blue\"\n                                onClick={handleSubmit}\n                                isLoading={creating || updating}\n                                loadingText={existingTask ? \"Updating...\" : \"Creating...\"}\n                            >\n                                {existingTask ? \"Update Task\" : \"Create Task\"}\n                            </Button>\n                        </HStack>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    );\n};\n\nexport default CommunicationTaskModal;","import React, { useState } from \"react\";\nimport {\n    VStack,\n    HStack,\n    Box,\n    Text,\n    IconButton,\n    Badge,\n    Button,\n    Checkbox,\n    Avatar,\n    Tooltip,\n    useColorModeValue,\n    Card,\n    CardBody,\n    Divider,\n    Progress,\n    Flex,\n    Icon,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    useToast,\n} from \"@chakra-ui/react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport {\n    FiPlus,\n    FiEdit2,\n    FiTrash2,\n    FiCheckCircle,\n    FiClock,\n    FiAlertCircle,\n    FiXCircle,\n    FiFlag,\n    FiCalendar,\n    FiUser,\n    FiMoreVertical,\n    FiCheck,\n    FiX,\n} from \"react-icons/fi\";\nimport CommunicationTaskModal from \"./CommunicationTaskModal\";\nimport { getColor } from \"../../brandConfig\";\nimport { CommunicationTask } from \"../../generated/graphql\";\n\nconst TOGGLE_TASK_STATUS = gql`\n    mutation ToggleCommunicationTaskStatus($id: ID!) {\n        toggleCommunicationTaskStatus(id: $id) {\n            id\n            status\n            completedAt\n        }\n    }\n`;\n\nconst DELETE_TASK = gql`\n    mutation DeleteCommunicationTask($id: ID!) {\n        deleteCommunicationTask(id: $id)\n    }\n`;\n\ninterface CommunicationTaskListProps {\n    tasks: CommunicationTask[];\n    communicationId: string;\n    communicationType: \"INBOUND_EMAIL\" | \"OUTBOUND_EMAIL\" | \"SMS\" | \"PHONE_CALL\" | \"MEETING\" | \"OTHER\";\n    onTasksUpdated: () => void;\n    allowEdit?: boolean;\n}\n\nconst CommunicationTaskList: React.FC<CommunicationTaskListProps> = ({\n    tasks,\n    communicationId,\n    communicationType,\n    onTasksUpdated,\n    allowEdit = true,\n}) => {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedTask, setSelectedTask] = useState<CommunicationTask | null>(null);\n    const toast = useToast();\n\n    // Theme colors from brandConfig\n    const bg = getColor(\"background.cardGradient\");\n    const borderColor = getColor(\"border.darkCard\");\n    const textColor = getColor(\"text.primaryDark\");\n    const textSecondary = getColor(\"text.secondaryDark\");\n    const mutedText = getColor(\"text.mutedDark\");\n    const cardBg = getColor(\"taskCardBg\");\n\n    const [toggleStatus] = useMutation(TOGGLE_TASK_STATUS, {\n        onCompleted: () => {\n            onTasksUpdated();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error updating task\",\n                description: error.message,\n                status: \"error\",\n                duration: 3000,\n                isClosable: true,\n            });\n        },\n    });\n\n    const [deleteTask] = useMutation(DELETE_TASK, {\n        onCompleted: () => {\n            toast({\n                title: \"Task deleted\",\n                status: \"success\",\n                duration: 2000,\n                isClosable: true,\n            });\n            onTasksUpdated();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error deleting task\",\n                description: error.message,\n                status: \"error\",\n                duration: 3000,\n                isClosable: true,\n            });\n        },\n    });\n\n    const getStatusIcon = (status: string) => {\n        switch (status) {\n            case \"TODO\":\n                return FiClock;\n            case \"IN_PROGRESS\":\n                return FiAlertCircle;\n            case \"COMPLETED\":\n                return FiCheckCircle;\n            case \"CANCELLED\":\n                return FiXCircle;\n            default:\n                return FiClock;\n        }\n    };\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case \"TODO\":\n                return \"gray\";\n            case \"IN_PROGRESS\":\n                return \"blue\";\n            case \"COMPLETED\":\n                return \"green\";\n            case \"CANCELLED\":\n                return \"red\";\n            default:\n                return \"gray\";\n        }\n    };\n\n    const getPriorityColor = (priority: string) => {\n        switch (priority) {\n            case \"LOW\":\n                return \"gray\";\n            case \"MEDIUM\":\n                return \"yellow\";\n            case \"HIGH\":\n                return \"orange\";\n            case \"URGENT\":\n                return \"red\";\n            default:\n                return \"gray\";\n        }\n    };\n\n    const handleEditTask = (task: CommunicationTask) => {\n        setSelectedTask(task);\n        setIsModalOpen(true);\n    };\n\n    const handleCreateTask = () => {\n        setSelectedTask(null);\n        setIsModalOpen(true);\n    };\n\n    const handleToggleStatus = async (taskId: string) => {\n        await toggleStatus({ variables: { id: taskId } });\n    };\n\n    const handleDeleteTask = async (taskId: string) => {\n        if (window.confirm(\"Are you sure you want to delete this task?\")) {\n            await deleteTask({ variables: { id: taskId } });\n        }\n    };\n\n    const completedTasks = tasks.filter((t) => t.status === \"COMPLETED\").length;\n    const completionPercentage = tasks.length > 0 ? (completedTasks / tasks.length) * 100 : 0;\n\n    // DEBUG: Log task data\n    console.log('📋 [CommunicationTaskList] Tasks prop:', tasks);\n    console.log('📋 [CommunicationTaskList] Tasks length:', tasks.length);\n    console.log('📋 [CommunicationTaskList] Completed tasks:', completedTasks);\n\n    const isOverdue = (dueDate: string) => {\n        return new Date(dueDate) < new Date();\n    };\n\n    const formatDueDate = (dueDate: string) => {\n        const date = new Date(dueDate);\n        const now = new Date();\n        const diffInDays = Math.ceil((date.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (diffInDays === 0) return \"Today\";\n        if (diffInDays === 1) return \"Tomorrow\";\n        if (diffInDays === -1) return \"Yesterday\";\n        if (diffInDays > 0 && diffInDays <= 7) return `In ${diffInDays} days`;\n        if (diffInDays < 0) return `${Math.abs(diffInDays)} days overdue`;\n        return date.toLocaleDateString();\n    };\n\n    return (\n        <Card bg={bg} borderColor={borderColor} variant=\"outline\">\n            <CardBody>\n                <VStack align=\"stretch\" spacing={4}>\n                    {/* Header */}\n                    <HStack justify=\"space-between\">\n                        <VStack align=\"start\" spacing={1}>\n                            <Text fontSize=\"lg\" fontWeight=\"semibold\" color={textColor}>\n                                Tasks\n                            </Text>\n                            <HStack spacing={2}>\n                                <Text fontSize=\"sm\" color={mutedText}>\n                                    {completedTasks} of {tasks.length} completed\n                                </Text>\n                                {tasks.length > 0 && (\n                                    <Badge colorScheme={completionPercentage === 100 ? \"green\" : \"blue\"}>\n                                        {Math.round(completionPercentage)}%\n                                    </Badge>\n                                )}\n                            </HStack>\n                        </VStack>\n                        {allowEdit && (\n                            <Button\n                                leftIcon={<FiPlus />}\n                                colorScheme=\"blue\"\n                                size=\"sm\"\n                                onClick={handleCreateTask}\n                            >\n                                Add Task\n                            </Button>\n                        )}\n                    </HStack>\n\n                    {/* Progress Bar */}\n                    {tasks.length > 0 && (\n                        <Progress\n                            value={completionPercentage}\n                            size=\"sm\"\n                            colorScheme={completionPercentage === 100 ? \"green\" : \"blue\"}\n                            borderRadius=\"full\"\n                        />\n                    )}\n\n                    <Divider />\n\n                    {/* Task List */}\n                    {tasks.length === 0 ? (\n                        <Box py={8} textAlign=\"center\">\n                            <Icon as={FiCheckCircle} boxSize={12} color={mutedText} mb={3} />\n                            <Text color={mutedText}>No tasks yet</Text>\n                            {allowEdit && (\n                                <Button\n                                    mt={3}\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    colorScheme=\"blue\"\n                                    onClick={handleCreateTask}\n                                >\n                                    Create your first task\n                                </Button>\n                            )}\n                        </Box>\n                    ) : (\n                        <VStack align=\"stretch\" spacing={2}>\n                            {tasks.map((task) => (\n                                <Box\n                                    key={task.id}\n                                    p={3}\n                                    bg={cardBg}\n                                    borderRadius=\"md\"\n                                    borderWidth={1}\n                                    borderColor={borderColor}\n                                    opacity={task.status === \"COMPLETED\" ? 0.7 : 1}\n                                    _hover={{ shadow: \"sm\" }}\n                                >\n                                    <HStack justify=\"space-between\" align=\"start\">\n                                        <HStack align=\"start\" spacing={3} flex={1}>\n                                            {/* Checkbox */}\n                                            {allowEdit && (\n                                                <Checkbox\n                                                    isChecked={task.status === \"COMPLETED\"}\n                                                    onChange={() => handleToggleStatus(task.id)}\n                                                    colorScheme=\"green\"\n                                                    mt={1}\n                                                />\n                                            )}\n\n                                            {/* Task Content */}\n                                            <VStack align=\"start\" spacing={1} flex={1}>\n                                                <Text\n                                                    fontWeight=\"medium\"\n                                                    color={textColor}\n                                                    textDecoration={task.status === \"COMPLETED\" ? \"line-through\" : \"none\"}\n                                                >\n                                                    {task.title}\n                                                </Text>\n                                                {task.description && (\n                                                    <Text fontSize=\"sm\" color={textSecondary}>\n                                                        {task.description}\n                                                    </Text>\n                                                )}\n                                                \n                                                {/* Metadata */}\n                                                <HStack spacing={3} flexWrap=\"wrap\">\n                                                    <Badge colorScheme={getStatusColor(task.status)} size=\"sm\">\n                                                        <HStack spacing={1}>\n                                                            <Icon as={getStatusIcon(task.status)} boxSize={3} />\n                                                            <Text fontSize=\"xs\">{task.status.replace(\"_\", \" \")}</Text>\n                                                        </HStack>\n                                                    </Badge>\n                                                    \n                                                    <Badge colorScheme={getPriorityColor(task.priority)} size=\"sm\">\n                                                        <HStack spacing={1}>\n                                                            <Icon as={FiFlag} boxSize={3} />\n                                                            <Text fontSize=\"xs\">{task.priority}</Text>\n                                                        </HStack>\n                                                    </Badge>\n                                                    \n                                                    {task.dueDate && (\n                                                        <Badge\n                                                            colorScheme={isOverdue(task.dueDate) && task.status !== \"COMPLETED\" ? \"red\" : \"purple\"}\n                                                            size=\"sm\"\n                                                        >\n                                                            <HStack spacing={1}>\n                                                                <Icon as={FiCalendar} boxSize={3} />\n                                                                <Text fontSize=\"xs\">{formatDueDate(task.dueDate)}</Text>\n                                                            </HStack>\n                                                        </Badge>\n                                                    )}\n                                                    \n                                                    {task.assignedTo && task.assignedTo.length > 0 && (\n                                                        <HStack spacing={1}>\n                                                            <Icon as={FiUser} boxSize={3} color={mutedText} />\n                                                            <Text fontSize=\"xs\" color={mutedText}>\n                                                                {task.assignedTo[0].fName} {task.assignedTo[0].lName}\n                                                            </Text>\n                                                        </HStack>\n                                                    )}\n                                                </HStack>\n                                            </VStack>\n                                        </HStack>\n\n                                        {/* Actions */}\n                                        {allowEdit && (\n                                            <Menu>\n                                                <MenuButton\n                                                    as={IconButton}\n                                                    icon={<FiMoreVertical />}\n                                                    variant=\"ghost\"\n                                                    size=\"sm\"\n                                                />\n                                                <MenuList>\n                                                    <MenuItem\n                                                        icon={<FiEdit2 />}\n                                                        onClick={() => handleEditTask(task)}\n                                                    >\n                                                        Edit\n                                                    </MenuItem>\n                                                    <MenuItem\n                                                        icon={<FiTrash2 />}\n                                                        onClick={() => handleDeleteTask(task.id)}\n                                                        color=\"red.500\"\n                                                    >\n                                                        Delete\n                                                    </MenuItem>\n                                                </MenuList>\n                                            </Menu>\n                                        )}\n                                    </HStack>\n                                </Box>\n                            ))}\n                        </VStack>\n                    )}\n                </VStack>\n            </CardBody>\n\n            {/* Task Modal */}\n            <CommunicationTaskModal\n                isOpen={isModalOpen}\n                onClose={() => {\n                    setIsModalOpen(false);\n                    setSelectedTask(null);\n                }}\n                communicationId={communicationId}\n                communicationType={communicationType}\n                onTaskCreated={onTasksUpdated}\n                existingTask={selectedTask ? {\n                    id: selectedTask.id,\n                    title: selectedTask.title,\n                    description: selectedTask.description || undefined,\n                    status: selectedTask.status,\n                    priority: selectedTask.priority,\n                    dueDate: selectedTask.dueDate || undefined,\n                    assignedTo: selectedTask.assignedTo?.map(a => ({ id: a.id })) || undefined,\n                    notes: selectedTask.notes || undefined\n                } : undefined}\n            />\n        </Card>\n    );\n};\n\nexport default CommunicationTaskList;","import React, { useState } from 'react';\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    VStack,\n    HStack,\n    Button,\n    Badge,\n    Card,\n    CardBody,\n    Divider,\n    IconButton,\n    useToast,\n    Spinner,\n    Center,\n    Icon,\n    Link,\n    Tooltip,\n    useDisclosure,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalCloseButton,\n    Input,\n    Tag,\n    TagLabel,\n    TagCloseButton,\n    Wrap,\n    WrapItem\n} from '@chakra-ui/react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiArrowLeft, FiStar, FiTrash2, FiArchive, FiMail, FiDownload, FiPaperclip, FiExternalLink, FiPackage, FiCornerUpLeft, FiTag, FiUsers, FiCornerUpRight, FiFileText } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport emailsModuleConfig from './moduleConfig';\nimport CommunicationTaskList from './CommunicationTaskList';\nimport { ConvertToProjectModal } from './components/ConvertToProjectModal';\n\nconst GET_INBOUND_EMAIL_QUERY = gql`\n    query GetInboundEmail($id: ID!) {\n        inboundEmail(id: $id) {\n            id\n            messageId\n            subject\n            from\n            fromName\n            fromFull\n            to\n            toFull\n            cc\n            ccFull\n            bcc\n            replyTo\n            date\n            textBody\n            htmlBody\n            isRead\n            isStarred\n            folder\n            labels\n            attachments {\n                name\n                contentType\n                contentLength\n                ipfsUrl\n                ipfsHash\n            }\n            tasks {\n                id\n                title\n                description\n                status\n                priority\n                dueDate\n                assignedTo {\n                    id\n                    fName\n                    lName\n                    email\n                }\n                notes\n                completedAt\n                createdAt\n            }\n        }\n    }\n`;\n\n// Unused - keeping for future implementation\n// const MARK_AS_READ_MUTATION = gql`\n//     mutation MarkAsRead($id: ID!, $isRead: Boolean!) {\n//         markInboundEmailAsRead(id: $id, isRead: $isRead) {\n//             id\n//             isRead\n//         }\n//     }\n// `;\n\nconst STAR_EMAIL_MUTATION = gql`\n    mutation StarEmail($id: ID!, $isStarred: Boolean!) {\n        starInboundEmail(id: $id, isStarred: $isStarred) {\n            id\n            isStarred\n        }\n    }\n`;\n\nconst ADD_EMAIL_LABEL_MUTATION = gql`\n    mutation AddInboundEmailLabel($emailId: String!, $label: String!) {\n        addInboundEmailLabel(emailId: $emailId, label: $label) {\n            id\n            labels\n        }\n    }\n`;\n\nconst REMOVE_EMAIL_LABEL_MUTATION = gql`\n    mutation RemoveInboundEmailLabel($emailId: String!, $label: String!) {\n        removeInboundEmailLabel(emailId: $emailId, label: $label) {\n            id\n            labels\n        }\n    }\n`;\n\nconst AVAILABLE_LABELS_QUERY = gql`\n    query AvailableInboundEmailLabels {\n        availableInboundEmailLabels\n    }\n`;\n\nconst MOVE_TO_FOLDER_MUTATION = gql`\n    mutation MoveToFolder($id: ID!, $folder: String!) {\n        moveInboundEmailToFolder(id: $id, folder: $folder) {\n            id\n            folder\n        }\n    }\n`;\n\nconst DELETE_EMAIL_MUTATION = gql`\n    mutation DeleteInboundEmail($id: ID!) {\n        deleteInboundEmail(id: $id)\n    }\n`;\n\nconst InboundEmailDetail: React.FC = () => {\n    usePageTitle(\"Inbound Email\");\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n    const toast = useToast();\n\n    // Consistent styling from brandConfig\n    const bg = getColor(\"background.main\");\n    const cardGradientBg = getColor(\"background.cardGradient\");\n    const cardBorder = getColor(\"border.darkCard\");\n    const textPrimary = getColor(\"text.primaryDark\");\n    const textSecondary = getColor(\"text.secondaryDark\");\n    const textMuted = getColor(\"text.mutedDark\");\n    \n    // Modal state for Convert to Project\n    const { isOpen: isConvertModalOpen, onOpen: onConvertModalOpen, onClose: onConvertModalClose } = useDisclosure();\n    \n    // Modal state for Tag Management\n    const { isOpen: isTagModalOpen, onOpen: onTagModalOpen, onClose: onTagModalClose } = useDisclosure();\n    const [newLabel, setNewLabel] = useState('');\n\n    const { data, loading, error, refetch } = useQuery(GET_INBOUND_EMAIL_QUERY, {\n        variables: { id },\n        skip: !id,\n        fetchPolicy: 'cache-and-network',\n        onError: (err) => {\n            console.error('Failed to fetch email:', err);\n            console.error('GraphQL Errors:', err.graphQLErrors);\n            console.error('Network Error:', err.networkError);\n            toast({\n                title: 'Error loading email',\n                description: err.message || 'Unable to fetch email details',\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    // DEBUG LOGGING FOR ATTACHMENTS AND TASKS\n    React.useEffect(() => {\n        if (data?.inboundEmail) {\n            console.log('\\n📧 ========== FRONTEND EMAIL DATA RECEIVED ==========');\n            console.log('📧 Email ID:', data.inboundEmail.id);\n            console.log('📧 Email Subject:', data.inboundEmail.subject);\n            console.log('📧 Attachments exists:', !!data.inboundEmail.attachments);\n            console.log('📧 Attachments is array:', Array.isArray(data.inboundEmail.attachments));\n            console.log('📧 Attachments length:', data.inboundEmail.attachments?.length || 0);\n            console.log('📧 Attachments data:', JSON.stringify(data.inboundEmail.attachments, null, 2));\n            console.log('📧 Tasks exists:', !!data.inboundEmail.tasks);\n            console.log('📧 Tasks is array:', Array.isArray(data.inboundEmail.tasks));\n            console.log('📧 Tasks length:', data.inboundEmail.tasks?.length || 0);\n            console.log('📧 Tasks data:', JSON.stringify(data.inboundEmail.tasks, null, 2));\n            console.log('📧 ========== END FRONTEND EMAIL DATA ==========\\n');\n        }\n    }, [data]);\n\n    const { data: availableLabelsData } = useQuery(AVAILABLE_LABELS_QUERY);\n    \n    const [starEmail] = useMutation(STAR_EMAIL_MUTATION);\n    const [moveToFolder] = useMutation(MOVE_TO_FOLDER_MUTATION);\n    const [addLabel] = useMutation(ADD_EMAIL_LABEL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Tag added',\n                status: 'success',\n                duration: 2000,\n            });\n            refetch();\n        },\n    });\n    \n    const [removeLabel] = useMutation(REMOVE_EMAIL_LABEL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Tag removed',\n                status: 'success',\n                duration: 2000,\n            });\n            refetch();\n        },\n    });\n    \n    const [deleteEmail] = useMutation(DELETE_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email deleted',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            navigate('/emails');\n        }\n    });\n\n    const handleStar = async () => {\n        if (data?.inboundEmail) {\n            await starEmail({\n                variables: {\n                    id: data.inboundEmail.id,\n                    isStarred: !data.inboundEmail.isStarred\n                }\n            });\n        }\n    };\n\n    const handleArchive = async () => {\n        if (data?.inboundEmail) {\n            const isArchived = data.inboundEmail.folder === 'Archived';\n            const newFolder = isArchived ? 'Inbox' : 'Archived';\n            \n            await moveToFolder({\n                variables: {\n                    id: data.inboundEmail.id,\n                    folder: newFolder\n                }\n            });\n            \n            toast({\n                title: isArchived ? 'Email moved back to inbox' : 'Email archived',\n                description: isArchived ? 'Email has been restored to your inbox' : 'Email has been moved to archive',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            \n            // Navigate back to emails list after action\n            setTimeout(() => {\n                navigate('/emails');\n            }, 1000);\n        }\n    };\n\n    const handleDownloadPDF = async () => {\n        if (!data?.inboundEmail) return;\n        \n        try {\n            // Find the email content container - use a more reliable selector\n            // Look for the card body that contains the email content\n            let emailContentElement = document.getElementById('email-content-container');\n            \n            // If no ID, try to find by content structure\n            if (!emailContentElement) {\n                // Look for the card body that contains the email\n                const cardBodies = document.querySelectorAll('.chakra-card__body');\n                Array.from(cardBodies).forEach((card) => {\n                    // Check if this card contains email content by looking for specific elements\n                    if (!emailContentElement && card.querySelector('.chakra-heading') && card.querySelector('.chakra-divider')) {\n                        emailContentElement = card as HTMLElement;\n                    }\n                });\n            }\n            \n            if (!emailContentElement) {\n                throw new Error('Email content element not found');\n            }\n\n            // Show a loading toast while generating PDF\n            toast({\n                title: 'Generating PDF',\n                description: 'Please wait while we prepare your PDF...',\n                status: 'info',\n                duration: 2000,\n            });\n\n            // Clone the element to avoid modifying the original\n            const clonedElement = emailContentElement.cloneNode(true) as HTMLElement;\n            \n            // Remove interactive elements from the clone\n            const buttonsToRemove = clonedElement.querySelectorAll('button, .chakra-button, [aria-label*=\"Manage\"]');\n            buttonsToRemove.forEach(button => button.remove());\n            \n            // Force black text and proper styling\n            clonedElement.style.cssText = `\n                position: absolute !important;\n                left: -9999px !important;\n                top: 0 !important;\n                background-color: white !important;\n                width: 800px !important;\n                padding: 20px !important;\n                color: black !important;\n                font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif !important;\n                height: auto !important;\n                max-height: none !important;\n                overflow: visible !important;\n            `;\n            \n            // Force all text elements to be black and ensure visibility\n            const allTextElements = clonedElement.querySelectorAll('*');\n            allTextElements.forEach((el) => {\n                const element = el as HTMLElement;\n                \n                // Remove any height restrictions\n                if (element.style.maxHeight) {\n                    element.style.maxHeight = 'none';\n                }\n                if (element.style.height && element.style.height !== 'auto') {\n                    element.style.height = 'auto';\n                }\n                element.style.overflow = 'visible';\n                \n                // Skip elements that should keep their background colors\n                if (!element.classList.contains('chakra-badge') && \n                    !element.style.backgroundColor &&\n                    !element.style.background) {\n                    element.style.color = 'black';\n                }\n                // Ensure text in paragraphs and headings is black\n                if (element.tagName.match(/^(P|H[1-6]|SPAN|DIV|TD|TH|LI)$/i)) {\n                    element.style.color = 'black !important';\n                }\n            });\n\n            // Temporarily append the clone to body for rendering\n            document.body.appendChild(clonedElement);\n            \n            // Wait for images and content to load\n            await new Promise(resolve => setTimeout(resolve, 500));\n\n            // Use html2canvas to capture the element\n            const canvas = await html2canvas(clonedElement, {\n                scale: 2, // Higher quality\n                useCORS: true, // Allow cross-origin images\n                allowTaint: true, // Allow tainted canvas for external images\n                logging: false,\n                backgroundColor: '#ffffff',\n                width: 800,\n                height: clonedElement.scrollHeight, // Capture full height\n                windowWidth: 800,\n                windowHeight: clonedElement.scrollHeight,\n                onclone: (clonedDoc, element) => {\n                    // Additional styling in the cloned document\n                    element.style.color = 'black';\n                    element.style.backgroundColor = 'white';\n                    \n                    // Ensure all text is black\n                    const texts = element.querySelectorAll('p, h1, h2, h3, h4, h5, h6, span, div, td, th, li');\n                    texts.forEach((textEl) => {\n                        const el = textEl as HTMLElement;\n                        if (!el.style.backgroundColor && !el.classList.contains('chakra-badge')) {\n                            el.style.color = 'black';\n                        }\n                    });\n                }\n            });\n\n            // Remove the cloned element\n            document.body.removeChild(clonedElement);\n\n            // Create PDF from canvas\n            const imgData = canvas.toDataURL('image/png');\n            const pdf = new jsPDF({\n                orientation: 'portrait',\n                unit: 'mm',\n                format: 'a4'\n            });\n\n            // Calculate dimensions to fit the page\n            const pdfWidth = pdf.internal.pageSize.getWidth();\n            const pdfHeight = pdf.internal.pageSize.getHeight();\n            const imgWidth = pdfWidth - 20; // 10mm margins on each side\n            const imgHeight = (canvas.height * imgWidth) / canvas.width;\n            \n            // Calculate how many pages we need\n            const pageContentHeight = pdfHeight - 20; // Leave margins\n            const totalPages = Math.ceil(imgHeight / pageContentHeight);\n            \n            // Add the image to PDF, splitting across pages if needed\n            for (let page = 0; page < totalPages; page++) {\n                if (page > 0) {\n                    pdf.addPage();\n                }\n                \n                const sourceY = page * (pageContentHeight * canvas.width / imgWidth);\n                const sourceHeight = Math.min(canvas.height - sourceY, (pageContentHeight * canvas.width / imgWidth));\n                \n                // Create a temporary canvas for this page portion\n                const pageCanvas = document.createElement('canvas');\n                pageCanvas.width = canvas.width;\n                pageCanvas.height = sourceHeight;\n                const ctx = pageCanvas.getContext('2d');\n                \n                if (ctx) {\n                    ctx.drawImage(\n                        canvas,\n                        0, sourceY, canvas.width, sourceHeight,\n                        0, 0, canvas.width, sourceHeight\n                    );\n                    \n                    const pageImgData = pageCanvas.toDataURL('image/png');\n                    const pageImgHeight = (sourceHeight * imgWidth) / canvas.width;\n                    \n                    pdf.addImage(\n                        pageImgData,\n                        'PNG',\n                        10,\n                        10,\n                        imgWidth,\n                        pageImgHeight,\n                        undefined,\n                        'FAST'\n                    );\n                }\n            }\n\n            // Add metadata\n            const email = data.inboundEmail;\n            pdf.setProperties({\n                title: email.subject,\n                subject: `Email from ${email.from}`,\n                author: brandConfig.siteName || 'Email Archive',\n                keywords: email.labels?.join(', ') || '',\n                creator: brandConfig.siteName || 'Email Archive'\n            });\n\n            // Download the PDF\n            const fileName = `${email.subject.replace(/[^a-z0-9]/gi, '_').substring(0, 50)}_${format(new Date(email.date), 'yyyy-MM-dd')}.pdf`;\n            pdf.save(fileName);\n            \n            toast({\n                title: 'PDF Downloaded',\n                description: 'Email has been exported as PDF',\n                status: 'success',\n                duration: 3000,\n            });\n        } catch (error) {\n            console.error('Error generating PDF:', error);\n            toast({\n                title: 'Error',\n                description: 'Failed to generate PDF. Please try again.',\n                status: 'error',\n                duration: 3000,\n            });\n        }\n    };\n\n    const handleDelete = async () => {\n        if (window.confirm('Are you sure you want to delete this email?')) {\n            await deleteEmail({ variables: { id } });\n        }\n    };\n\n    const handleAddLabel = async () => {\n        if (newLabel && data?.inboundEmail) {\n            await addLabel({\n                variables: {\n                    emailId: data.inboundEmail.id,\n                    label: newLabel\n                }\n            });\n            setNewLabel('');\n        }\n    };\n    \n    const handleRemoveLabel = async (label: string) => {\n        if (data?.inboundEmail) {\n            await removeLabel({\n                variables: {\n                    emailId: data.inboundEmail.id,\n                    label: label\n                }\n            });\n        }\n    };\n    \n    const handleReply = () => {\n        if (data?.inboundEmail) {\n            const email = data.inboundEmail;\n\n            // Store the email data in sessionStorage\n            const replyData = {\n                to: email.from,\n                subject: email.subject.startsWith('Re:') ? email.subject : `Re: ${email.subject}`,\n                fromName: email.fromName || email.from || '',\n                date: email.date,\n                textBody: email.textBody || '',\n                htmlBody: email.htmlBody || '',\n                // Include the original recipient email address (the one that received this email)\n                // This will be used to set the 'from' field in the reply\n                originalTo: email.to && email.to.length > 0 ? email.to[0] : (email.toFull && email.toFull.length > 0 ? email.toFull[0] : null)\n            };\n\n            sessionStorage.setItem('replyEmail', JSON.stringify(replyData));\n            navigate('/emails/new?action=reply');\n        }\n    };\n    \n    const handleReplyToAll = () => {\n        if (data?.inboundEmail) {\n            const email = data.inboundEmail;\n            \n            // Collect all recipients\n            const toRecipients = [email.from];\n            const ccRecipients: string[] = [];\n            \n            // Add original TO recipients to CC\n            if (email.to && Array.isArray(email.to)) {\n                email.to.forEach((recipient: string) => {\n                    if (recipient && recipient !== email.from) {\n                        ccRecipients.push(recipient);\n                    }\n                });\n            }\n            \n            // Add original CC recipients to CC\n            if (email.cc && Array.isArray(email.cc)) {\n                email.cc.forEach((recipient: string) => {\n                    if (recipient && !ccRecipients.includes(recipient)) {\n                        ccRecipients.push(recipient);\n                    }\n                });\n            }\n            \n            // Store the email data in sessionStorage\n            const replyAllData = {\n                to: toRecipients.join(','),\n                cc: ccRecipients.join(','),\n                subject: email.subject.startsWith('Re:') ? email.subject : `Re: ${email.subject}`,\n                fromName: email.fromName || email.from || '',\n                date: email.date,\n                textBody: email.textBody || '',\n                htmlBody: email.htmlBody || '',\n                // Include the original recipient email address for setting 'from' field\n                originalTo: email.to && email.to.length > 0 ? email.to[0] : (email.toFull && email.toFull.length > 0 ? email.toFull[0] : null)\n            };\n            \n            sessionStorage.setItem('replyEmail', JSON.stringify(replyAllData));\n            navigate('/emails/new?action=replyAll');\n        }\n    };\n    \n    const handleForward = () => {\n        if (data?.inboundEmail) {\n            const email = data.inboundEmail;\n            \n            // Store the email data in sessionStorage to avoid URL length issues\n            const forwardData = {\n                subject: email.subject.startsWith('Fwd:') ? email.subject : `Fwd: ${email.subject}`,\n                fromName: email.fromName || email.from || '',\n                fromEmail: email.from || '',\n                date: email.date,\n                textBody: email.textBody || '',\n                htmlBody: email.htmlBody || '',\n                originalSubject: email.subject.replace('Fwd: ', ''),\n                attachments: email.attachments || []\n            };\n            \n            sessionStorage.setItem('forwardEmail', JSON.stringify(forwardData));\n            \n            // Navigate with a simple flag\n            navigate('/emails/new?action=forward');\n        }\n    };\n\n    if (loading) {\n        return (\n            <Box minH=\"100vh\" bg={bg} display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n                <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n                <Container maxW={{ base: \"container.sm\", md: \"container.md\", lg: \"container.xl\" }} px={{ base: 4, md: 8 }} py={{ base: 4, md: 8 }} flex=\"1\">\n                    <Center py={20}>\n                        <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                    </Center>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error || !data?.inboundEmail) {\n        return (\n            <Box minH=\"100vh\" bg={bg} display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n                <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n                <Container maxW={{ base: \"container.sm\", md: \"container.md\", lg: \"container.xl\" }} px={{ base: 4, md: 8 }} py={{ base: 4, md: 8 }} flex=\"1\">\n                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                        <CardBody>\n                            <Center py={10}>\n                                <VStack spacing={4}>\n                                    <Icon as={FiMail} boxSize={12} color={textMuted} />\n                                    <Text color={textMuted} fontSize=\"lg\">\n                                        {error ? 'Error loading email' : 'Email not found'}\n                                    </Text>\n                                    {error && (\n                                        <VStack spacing={2}>\n                                            <Text color={textMuted} fontSize=\"sm\" textAlign=\"center\">\n                                                {error.message}\n                                            </Text>\n                                            {id && (\n                                                <Text color={textMuted} fontSize=\"xs\" fontFamily=\"mono\">\n                                                    ID: {id}\n                                                </Text>\n                                            )}\n                                        </VStack>\n                                    )}\n                                    <Button\n                                        leftIcon={<FiArrowLeft />}\n                                        onClick={() => navigate('/emails')}\n                                        variant=\"ghost\"\n                                    >\n                                        Back to Emails\n                                    </Button>\n                                </VStack>\n                            </Center>\n                        </CardBody>\n                    </Card>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const email = data.inboundEmail;\n\n    return (\n        <Box minH=\"100vh\" bg={bg} display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n            \n            <Container maxW={{ base: \"container.sm\", md: \"container.md\", lg: \"container.xl\" }} px={{ base: 4, md: 8 }} py={{ base: 4, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                    <VStack align=\"stretch\" spacing={{ base: 3, md: 0 }}>\n                        <HStack spacing={{ base: 2, md: 3 }} flexWrap={{ base: \"wrap\", md: \"nowrap\" }} justify={{ base: \"stretch\", md: \"flex-start\" }}>\n                            <Button\n                                leftIcon={<FiArrowLeft />}\n                                onClick={() => navigate('/emails')}\n                                variant=\"outline\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                _hover={{ bg: cardGradientBg }}\n                                size={{ base: \"sm\", md: \"md\" }}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Back to Inbox\n                            </Button>\n                            <Button\n                                leftIcon={<FiCornerUpLeft />}\n                                onClick={handleReply}\n                                variant=\"solid\"\n                                bg={getColor('primaryBlue')}\n                                color=\"white\"\n                                _hover={{ bg: getColor('primaryBlueHover'), transform: \"scale(1.02)\" }}\n                                _active={{ bg: getColor('primaryBlue') }}\n                                px={{ base: 4, md: 6 }}\n                                fontWeight=\"medium\"\n                                size={{ base: \"sm\", md: \"md\" }}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Reply\n                            </Button>\n                            <Button\n                                leftIcon={<FiUsers />}\n                                onClick={handleReplyToAll}\n                                variant=\"outline\"\n                                borderColor={getColor('primaryBlue')}\n                                color={getColor('primaryBlue')}\n                                _hover={{ bg: getColor('primaryBlue'), color: \"white\", transform: \"scale(1.02)\" }}\n                                _active={{ bg: getColor('primaryBlueHover') }}\n                                px={{ base: 4, md: 6 }}\n                                fontWeight=\"medium\"\n                                size={{ base: \"sm\", md: \"md\" }}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Reply to All\n                            </Button>\n                            <Button\n                                leftIcon={<FiCornerUpRight />}\n                                onClick={handleForward}\n                                variant=\"outline\"\n                                borderColor={getColor('primaryBlue')}\n                                color={getColor('primaryBlue')}\n                                _hover={{ bg: getColor('primaryBlue'), color: \"white\", transform: \"scale(1.02)\" }}\n                                _active={{ bg: getColor('primaryBlueHover') }}\n                                px={{ base: 4, md: 6 }}\n                                fontWeight=\"medium\"\n                                size={{ base: \"sm\", md: \"md\" }}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Forward\n                            </Button>\n                            <Button \n                                leftIcon={<FiPackage />}\n                                size={{ base: \"sm\", md: \"lg\" }}\n                                variant=\"solid\"\n                                bg=\"green.500\"\n                                color=\"white\"\n                                _hover={{ bg: \"green.600\", transform: \"scale(1.05)\" }}\n                                _active={{ bg: \"green.700\" }}\n                                onClick={onConvertModalOpen}\n                                px={{ base: 4, md: 8 }}\n                                fontSize={{ base: \"sm\", md: \"lg\" }}\n                                fontWeight=\"bold\"\n                                boxShadow=\"lg\"\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Convert to Project\n                            </Button>\n                        </HStack>\n                        <HStack spacing={{ base: 2, md: 3 }} justify={{ base: \"center\", md: \"flex-end\" }}>\n                            <Tooltip \n                                label=\"Export as PDF\" \n                                placement=\"bottom\"\n                                bg={getColor('primaryBlue')}\n                                color=\"white\"\n                                fontSize=\"sm\"\n                                px={3}\n                                py={2}\n                                borderRadius=\"md\"\n                                hasArrow\n                            >\n                                <IconButton\n                                    aria-label=\"Export as PDF\"\n                                    icon={<FiFileText />}\n                                    onClick={handleDownloadPDF}\n                                    variant=\"ghost\"\n                                    color={textMuted}\n                                    _hover={{ \n                                        transform: \"scale(1.1)\",\n                                        color: getColor('primaryBlue')\n                                    }}\n                                />\n                            </Tooltip>\n                            \n                            <Tooltip \n                                label={email.isStarred ? \"Unstar email\" : \"Star email\"} \n                                placement=\"bottom\"\n                                bg={getColor('primaryBlue')}\n                                color=\"white\"\n                                fontSize=\"sm\"\n                                px={3}\n                                py={2}\n                                borderRadius=\"md\"\n                                hasArrow\n                            >\n                                <IconButton\n                                    aria-label=\"Star email\"\n                                    icon={<FiStar />}\n                                    onClick={handleStar}\n                                    variant=\"ghost\"\n                                    color={email.isStarred ? getColor('starYellow') : textMuted}\n                                    _hover={{ \n                                        transform: \"scale(1.1)\",\n                                        color: email.isStarred ? getColor('starYellowHover') : getColor('primaryBlue')\n                                    }}\n                                />\n                            </Tooltip>\n                            \n                            <Tooltip \n                                label={email.folder === 'Archived' \n                                    ? \"Move back to Inbox if tasks are not completed\" \n                                    : \"Archive email when all tasks are done\"} \n                                placement=\"bottom\"\n                                bg={getColor('primaryBlue')}\n                                color=\"white\"\n                                fontSize=\"sm\"\n                                px={3}\n                                py={2}\n                                borderRadius=\"md\"\n                                hasArrow\n                            >\n                                <IconButton\n                                    aria-label={email.folder === 'Archived' ? \"Unarchive email\" : \"Archive email\"}\n                                    icon={<FiArchive />}\n                                    onClick={handleArchive}\n                                    variant=\"ghost\"\n                                    color={email.folder === 'Archived' ? getColor('primaryBlue') : textMuted}\n                                    _hover={{ \n                                        transform: \"scale(1.1)\",\n                                        color: getColor('primaryBlue')\n                                    }}\n                                />\n                            </Tooltip>\n                            \n                            <Tooltip \n                                label=\"Delete email\" \n                                placement=\"bottom\"\n                                bg={getColor('status.error')}\n                                color=\"white\"\n                                fontSize=\"sm\"\n                                px={3}\n                                py={2}\n                                borderRadius=\"md\"\n                                hasArrow\n                            >\n                                <IconButton\n                                    aria-label=\"Delete email\"\n                                    icon={<FiTrash2 />}\n                                    onClick={handleDelete}\n                                    variant=\"ghost\"\n                                    color=\"red.500\"\n                                    _hover={{ \n                                        transform: \"scale(1.1)\",\n                                        color: \"red.600\",\n                                        bg: \"red.50\"\n                                    }}\n                                />\n                            </Tooltip>\n                        </HStack>\n                    </VStack>\n\n                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                        <CardBody p={{ base: 3, md: 6 }} id=\"email-content-container\">\n                            <VStack align=\"stretch\" spacing={{ base: 4, md: 6 }}>\n                                {/* Subject and metadata */}\n                                <VStack align=\"stretch\" spacing={3}>\n                                    <VStack align=\"start\" spacing={{ base: 2, md: 3 }}>\n                                        <Heading size={{ base: \"md\", md: \"lg\", lg: \"xl\" }} color={textPrimary}>\n                                            {email.subject}\n                                        </Heading>\n                                        {email.folder && (\n                                            <Badge colorScheme=\"blue\" fontSize={{ base: \"xs\", md: \"sm\" }}>{email.folder}</Badge>\n                                        )}\n                                    </VStack>\n                                    \n                                    <HStack spacing={2} align=\"center\">\n                                        {email.labels?.length > 0 && (\n                                            <Wrap spacing={2}>\n                                                {email.labels.map((label: string) => (\n                                                    <WrapItem key={label}>\n                                                        <Tag\n                                                            size=\"md\"\n                                                            bg=\"rgba(168, 85, 247, 0.2)\"\n                                                            color=\"#A855F7\"\n                                                            border=\"1px solid\"\n                                                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                        >\n                                                            <TagLabel>{label}</TagLabel>\n                                                        </Tag>\n                                                    </WrapItem>\n                                                ))}\n                                            </Wrap>\n                                        )}\n                                        <Tooltip \n                                            label=\"Manage tags\" \n                                            placement=\"top\"\n                                            bg={getColor('primaryBlue')}\n                                            color=\"white\"\n                                            fontSize=\"sm\"\n                                            px={3}\n                                            py={2}\n                                            borderRadius=\"md\"\n                                            hasArrow\n                                        >\n                                            <IconButton\n                                                aria-label=\"Manage tags\"\n                                                icon={<FiTag />}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                color={textMuted}\n                                                _hover={{ \n                                                    bg: cardGradientBg, \n                                                    color: getColor('primaryBlue'),\n                                                    transform: \"scale(1.1)\"\n                                                }}\n                                                onClick={onTagModalOpen}\n                                            />\n                                        </Tooltip>\n                                    </HStack>\n                                </VStack>\n\n                                <Divider borderColor={cardBorder} />\n\n                                {/* From/To information */}\n                                <VStack align=\"stretch\" spacing={{ base: 2, md: 3 }}>\n                                    <VStack align=\"start\" spacing={1}>\n                                        <Text fontWeight=\"bold\" color={textMuted} fontSize={{ base: \"sm\", md: \"md\" }}>From:</Text>\n                                        <Text color={textPrimary} fontSize={{ base: \"sm\", md: \"md\" }} pl={{ base: 0, md: 4 }}>\n                                            {email.fromFull || email.from}\n                                        </Text>\n                                    </VStack>\n                                    <VStack align=\"start\" spacing={1}>\n                                        <Text fontWeight=\"bold\" color={textMuted} fontSize={{ base: \"sm\", md: \"md\" }}>To:</Text>\n                                        <VStack align=\"start\" spacing={1} pl={{ base: 0, md: 4 }}>\n                                            {email.toFull?.map((to: string, index: number) => (\n                                                <Text key={index} color={textPrimary} fontSize={{ base: \"sm\", md: \"md\" }}>{to}</Text>\n                                            )) || email.to?.map((to: string, index: number) => (\n                                                <Text key={index} color={textPrimary} fontSize={{ base: \"sm\", md: \"md\" }}>{to}</Text>\n                                            ))}\n                                        </VStack>\n                                    </VStack>\n                                    {email.cc?.length > 0 && (\n                                        <HStack align=\"start\">\n                                            <Text fontWeight=\"bold\" color={textMuted} minW=\"80px\">CC:</Text>\n                                            <VStack align=\"start\" spacing={1}>\n                                                {email.ccFull?.map((cc: string, index: number) => (\n                                                    <Text key={index} color={textPrimary}>{cc}</Text>\n                                                )) || email.cc?.map((cc: string, index: number) => (\n                                                    <Text key={index} color={textPrimary}>{cc}</Text>\n                                                ))}\n                                            </VStack>\n                                        </HStack>\n                                    )}\n                                    <VStack align=\"start\" spacing={1}>\n                                        <Text fontWeight=\"bold\" color={textMuted} fontSize={{ base: \"sm\", md: \"md\" }}>Date:</Text>\n                                        <Text color={textPrimary} fontSize={{ base: \"sm\", md: \"md\" }} pl={{ base: 0, md: 4 }}>\n                                            {format(new Date(email.date), 'PPpp')}\n                                        </Text>\n                                    </VStack>\n                                </VStack>\n\n                                <Divider borderColor={cardBorder} />\n\n                                {/* Email content */}\n                                <Box>\n                                    {email.htmlBody ? (\n                                        <Box\n                                            dangerouslySetInnerHTML={{ __html: email.htmlBody }}\n                                            color={textSecondary}\n                                            sx={{\n                                                '& a': { color: getColor('primaryBlue'), textDecoration: 'underline' },\n                                                '& p': { marginBottom: '1em' },\n                                                '& ul, & ol': { paddingLeft: '2em', marginBottom: '1em' },\n                                                '& blockquote': { \n                                                    borderLeft: '3px solid',\n                                                    borderColor: cardBorder,\n                                                    paddingLeft: '1em',\n                                                    marginLeft: '0',\n                                                    color: textMuted\n                                                }\n                                            }}\n                                        />\n                                    ) : (\n                                        <Text whiteSpace=\"pre-wrap\" color={textSecondary}>\n                                            {email.textBody || 'No content available'}\n                                        </Text>\n                                    )}\n                                </Box>\n\n                                {/* Attachments */}\n                                {email.attachments?.length > 0 && (\n                                    <>\n                                        <Divider borderColor={cardBorder} />\n                                        <VStack align=\"stretch\" spacing={3}>\n                                            <HStack>\n                                                <Icon as={FiPaperclip} color={textMuted} />\n                                                <Text fontWeight=\"bold\" color={textMuted}>\n                                                    Attachments ({email.attachments.length})\n                                                </Text>\n                                            </HStack>\n                                            <VStack align=\"stretch\" spacing={2}>\n                                                {email.attachments.map((attachment: any, index: number) => (\n                                                    <Box key={index}>\n                                                        {attachment.ipfsUrl ? (\n                                                            <Link\n                                                                href={attachment.ipfsUrl}\n                                                                isExternal\n                                                                _hover={{ textDecoration: 'none' }}\n                                                            >\n                                                                <HStack \n                                                                    p={3} \n                                                                    bg={bg} \n                                                                    borderRadius=\"md\"\n                                                                    border=\"1px solid\"\n                                                                    borderColor={cardBorder}\n                                                                    cursor=\"pointer\"\n                                                                    _hover={{ \n                                                                        bg: 'whiteAlpha.50',\n                                                                        borderColor: getColor('primaryBlue') \n                                                                    }}\n                                                                    transition=\"all 0.2s\"\n                                                                >\n                                                                    <Icon as={FiDownload} color={getColor('primaryBlue')} />\n                                                                    <VStack align=\"start\" spacing={0} flex={1}>\n                                                                        <Text color={textPrimary} fontWeight=\"medium\">\n                                                                            {attachment.name}\n                                                                        </Text>\n                                                                        <HStack spacing={2}>\n                                                                            <Text fontSize=\"sm\" color={textMuted}>\n                                                                                {attachment.contentType}\n                                                                            </Text>\n                                                                            <Text fontSize=\"sm\" color={textMuted}>\n                                                                                • {Math.round(attachment.contentLength / 1024)} KB\n                                                                            </Text>\n                                                                            {attachment.ipfsHash && (\n                                                                                <Text fontSize=\"xs\" color={textMuted} fontFamily=\"mono\">\n                                                                                    • IPFS: {attachment.ipfsHash.substring(0, 8)}...\n                                                                                </Text>\n                                                                            )}\n                                                                        </HStack>\n                                                                    </VStack>\n                                                                    <Icon as={FiExternalLink} color={textMuted} />\n                                                                </HStack>\n                                                            </Link>\n                                                        ) : (\n                                                            <HStack \n                                                                p={3} \n                                                                bg={bg} \n                                                                borderRadius=\"md\"\n                                                                border=\"1px solid\"\n                                                                borderColor={cardBorder}\n                                                                opacity={0.7}\n                                                            >\n                                                                <Icon as={FiPaperclip} color={textMuted} />\n                                                                <VStack align=\"start\" spacing={0} flex={1}>\n                                                                    <Text color={textPrimary}>\n                                                                        {attachment.name}\n                                                                    </Text>\n                                                                    <Text fontSize=\"sm\" color={textMuted}>\n                                                                        {attachment.contentType} • {Math.round(attachment.contentLength / 1024)} KB\n                                                                    </Text>\n                                                                </VStack>\n                                                                <Badge colorScheme=\"gray\" fontSize=\"xs\">\n                                                                    Not uploaded\n                                                                </Badge>\n                                                            </HStack>\n                                                        )}\n                                                    </Box>\n                                                ))}\n                                            </VStack>\n                                        </VStack>\n                                    </>\n                                )}\n                            </VStack>\n                        </CardBody>\n                    </Card>\n                    \n                    {/* Tasks Section */}\n                    <Box mt={6}>\n                        <CommunicationTaskList\n                            tasks={email.tasks || []}\n                            communicationId={id!}\n                            communicationType=\"INBOUND_EMAIL\"\n                            onTasksUpdated={() => {\n                                // Refetch email to get updated tasks\n                                refetch();\n                            }}\n                            allowEdit={true}\n                        />\n                    </Box>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n            \n            {/* Convert to Project Modal */}\n            {data?.inboundEmail && (\n                <ConvertToProjectModal \n                    isOpen={isConvertModalOpen}\n                    onClose={onConvertModalClose}\n                    email={{\n                        id: data.inboundEmail.id,\n                        subject: data.inboundEmail.subject || '',\n                        bodyMarkdown: data.inboundEmail.textBody || '',\n                        from: data.inboundEmail.from || ''\n                    }}\n                />\n            )}\n            \n            {data?.inboundEmail && (\n                <Modal isOpen={isTagModalOpen} onClose={onTagModalClose} size=\"md\">\n                    <ModalOverlay bg=\"blackAlpha.800\" backdropFilter=\"blur(5px)\" />\n                    <ModalContent bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                        <ModalHeader color={textPrimary}>\n                            Manage Tags\n                        </ModalHeader>\n                        <ModalCloseButton color={textMuted} />\n                        <ModalBody>\n                            <VStack spacing={4} align=\"stretch\">\n                                <Text fontSize=\"sm\" color={textSecondary} noOfLines={2}>\n                                    <strong>Subject:</strong> {data.inboundEmail.subject}\n                                </Text>\n                                \n                                {data.inboundEmail.labels && data.inboundEmail.labels.length > 0 && (\n                                    <Box>\n                                        <Text fontSize=\"sm\" color={textMuted} mb={2}>Current tags:</Text>\n                                        <Wrap spacing={2}>\n                                            {data.inboundEmail.labels.map((label: string) => (\n                                                <WrapItem key={label}>\n                                                    <Tag\n                                                        size=\"md\"\n                                                        bg=\"rgba(168, 85, 247, 0.2)\"\n                                                        color=\"#A855F7\"\n                                                        border=\"1px solid\"\n                                                        borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                    >\n                                                        <TagLabel>{label}</TagLabel>\n                                                        <TagCloseButton \n                                                            onClick={() => handleRemoveLabel(label)}\n                                                        />\n                                                    </Tag>\n                                                </WrapItem>\n                                            ))}\n                                        </Wrap>\n                                    </Box>\n                                )}\n                                \n                                <Box>\n                                    <Text fontSize=\"sm\" color={textMuted} mb={2}>Add new tag:</Text>\n                                    <HStack>\n                                        <Input\n                                            value={newLabel}\n                                            onChange={(e) => setNewLabel(e.target.value)}\n                                            placeholder=\"Enter tag name\"\n                                            size=\"sm\"\n                                            bg={bg}\n                                            color={textPrimary}\n                                            borderColor={cardBorder}\n                                            _placeholder={{ color: textMuted }}\n                                            onKeyPress={(e) => {\n                                                if (e.key === 'Enter') {\n                                                    handleAddLabel();\n                                                }\n                                            }}\n                                        />\n                                        <Button\n                                            size=\"sm\"\n                                            onClick={handleAddLabel}\n                                            bg={getColor('primaryBlue')}\n                                            color=\"white\"\n                                            _hover={{ bg: getColor('primaryBlueHover') }}\n                                            isDisabled={!newLabel.trim()}\n                                        >\n                                            Add\n                                        </Button>\n                                    </HStack>\n                                </Box>\n                                \n                                {availableLabelsData?.availableInboundEmailLabels && availableLabelsData.availableInboundEmailLabels.length > 0 && (\n                                    <Box>\n                                        <Text fontSize=\"sm\" color={textMuted} mb={2}>Quick add from existing tags:</Text>\n                                        <Wrap spacing={2}>\n                                            {availableLabelsData.availableInboundEmailLabels\n                                                .filter((label: string) => \n                                                    !data.inboundEmail.labels?.includes(label)\n                                                )\n                                                .map((label: string) => (\n                                                    <WrapItem key={label}>\n                                                        <Tag\n                                                            size=\"sm\"\n                                                            cursor=\"pointer\"\n                                                            bg={cardBorder}\n                                                            color={textSecondary}\n                                                            _hover={{ \n                                                                bg: \"rgba(168, 85, 247, 0.2)\",\n                                                                color: \"#A855F7\"\n                                                            }}\n                                                            onClick={() => {\n                                                                setNewLabel(label);\n                                                                handleAddLabel();\n                                                            }}\n                                                        >\n                                                            <TagLabel>{label}</TagLabel>\n                                                        </Tag>\n                                                    </WrapItem>\n                                                ))}\n                                        </Wrap>\n                                    </Box>\n                                )}\n                            </VStack>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button variant=\"ghost\" onClick={onTagModalClose} color={textMuted}>\n                                Done\n                            </Button>\n                        </ModalFooter>\n                    </ModalContent>\n                </Modal>\n            )}\n        </Box>\n    );\n};\n\nexport default InboundEmailDetail;","import React, { useState, useEffect } from 'react';\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalCloseButton,\n    Button,\n    VStack,\n    HStack,\n    FormControl,\n    FormLabel,\n    Input,\n    Textarea,\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    NumberIncrementStepper,\n    NumberDecrementStepper,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    IconButton,\n    useToast,\n    Text,\n    Box,\n    Badge,\n    Divider,\n    Spinner,\n    Alert,\n    AlertIcon,\n    Switch,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n} from '@chakra-ui/react';\nimport { useMutation, gql } from '@apollo/client';\nimport { FiPlus, FiTrash2, FiPackage, FiDollarSign, FiClock, FiCheck } from 'react-icons/fi';\nimport { getColor } from '../../../brandConfig';\n\nconst SCAN_EMAIL_FOR_PROJECT = gql`\n    mutation ScanEmailAndGenerateProjectProposal(\n        $emailContent: String!\n        $emailSubject: String\n        $senderName: String\n        $senderEmail: String\n    ) {\n        scanEmailAndGenerateProjectProposal(\n            emailContent: $emailContent\n            emailSubject: $emailSubject\n            senderName: $senderName\n            senderEmail: $senderEmail\n        ) {\n            projectName\n            projectSummary\n            clientName\n            clientEmail\n            clientPhone\n            tasks {\n                title\n                description\n                estimatedHours\n                order\n                category\n            }\n            suggestedPrice\n            upfrontPayment\n            finalPayment\n            deliveryTimeline\n            deliverables\n            specialRequirements\n        }\n    }\n`;\n\nconst CREATE_PROJECT = gql`\n    mutation CreateProject($input: ProjectInput!) {\n        createProject(input: $input) {\n            id\n            projectName\n            projectGoal\n            suggestedPrice\n            upfrontPayment\n        }\n    }\n`;\n\nconst CREATE_TASK = gql`\n    mutation CreateTask($input: TaskInput!) {\n        createTask(input: $input) {\n            id\n            name\n            description\n            status\n        }\n    }\n`;\n\nconst CREATE_BILL = gql`\n    mutation CreateBill($input: BillInput!) {\n        createBill(input: $input) {\n            id\n            status\n            totalAmount\n        }\n    }\n`;\n\ninterface Task {\n    title: string;\n    description: string;\n    estimatedHours: number;\n    order: number;\n    category: string;\n}\n\ninterface ProjectProposal {\n    projectName: string;\n    projectSummary: string;\n    clientName: string;\n    clientEmail?: string;\n    clientPhone?: string;\n    tasks: Task[];\n    suggestedPrice: number;\n    upfrontPayment: number;\n    finalPayment: number;\n    deliveryTimeline: string;\n    deliverables: string[];\n    specialRequirements?: string;\n}\n\ninterface ConvertToProjectModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    email: {\n        id: string;\n        subject: string;\n        bodyMarkdown: string;\n        from: string;\n    };\n}\n\nexport const ConvertToProjectModal: React.FC<ConvertToProjectModalProps> = ({\n    isOpen,\n    onClose,\n    email\n}) => {\n    const toast = useToast();\n    const [proposal, setProposal] = useState<ProjectProposal | null>(null);\n    const [isAnalyzing, setIsAnalyzing] = useState(false);\n    const [isCreating, setIsCreating] = useState(false);\n    const [createInvoice, setCreateInvoice] = useState(true);\n    const [activeTab, setActiveTab] = useState(0);\n\n    const [scanEmail] = useMutation(SCAN_EMAIL_FOR_PROJECT);\n    const [createProject] = useMutation(CREATE_PROJECT);\n    const [createTask] = useMutation(CREATE_TASK);\n    const [createBill] = useMutation(CREATE_BILL);\n\n    // Styling\n    const textPrimary = getColor('textPrimary');\n    const textSecondary = getColor('textSecondary');\n    const bg = getColor('background');\n    const cardBorder = getColor('cardBorder');\n\n    useEffect(() => {\n        if (isOpen && !proposal && !isAnalyzing) {\n            analyzeEmail();\n        }\n    }, [isOpen]);\n\n    const analyzeEmail = async () => {\n        setIsAnalyzing(true);\n        try {\n            const result = await scanEmail({\n                variables: {\n                    emailContent: email.bodyMarkdown || '',\n                    emailSubject: email.subject || '',\n                    senderName: email.from?.split('<')[0].trim() || '',\n                    senderEmail: email.from?.match(/<(.+)>/)?.[1] || email.from || ''\n                }\n            });\n\n            if (result.data?.scanEmailAndGenerateProjectProposal) {\n                setProposal(result.data.scanEmailAndGenerateProjectProposal);\n                toast({\n                    title: 'Analysis Complete',\n                    description: 'AI has extracted project details from the email',\n                    status: 'success',\n                    duration: 3000\n                });\n            }\n        } catch (error) {\n            console.error('Failed to analyze email:', error);\n            toast({\n                title: 'Analysis failed',\n                description: 'Could not analyze email. Please fill in details manually.',\n                status: 'error',\n                duration: 5000\n            });\n            // Set default proposal\n            setProposal({\n                projectName: email.subject || 'New Project',\n                projectSummary: '',\n                clientName: '',\n                clientEmail: '',\n                clientPhone: '',\n                tasks: [],\n                suggestedPrice: 0,\n                upfrontPayment: 0,\n                finalPayment: 0,\n                deliveryTimeline: '2 weeks',\n                deliverables: [],\n                specialRequirements: ''\n            });\n        } finally {\n            setIsAnalyzing(false);\n        }\n    };\n\n    const handleCreateProject = async () => {\n        if (!proposal) return;\n        \n        setIsCreating(true);\n        try {\n            // Create the project with proposal fields\n            const projectResult = await createProject({\n                variables: {\n                    input: {\n                        projectName: proposal.projectName,\n                        projectGoal: proposal.projectSummary,\n                        projectDescription: proposal.specialRequirements || '',\n                        billingClient: '000000000000000000000000', // Default/placeholder client\n                        // Proposal fields\n                        clientEmail: proposal.clientEmail,\n                        clientPhone: proposal.clientPhone,\n                        suggestedPrice: proposal.suggestedPrice,\n                        upfrontPayment: proposal.upfrontPayment,\n                        finalPayment: proposal.finalPayment,\n                        deliveryTimeline: proposal.deliveryTimeline,\n                        deliverables: proposal.deliverables,\n                        specialRequirements: proposal.specialRequirements,\n                        sourceEmailId: email.id,\n                        proposalStatus: 'draft'\n                    }\n                }\n            });\n\n            const projectId = projectResult.data?.createProject?.id;\n\n            if (projectId) {\n                // Create tasks for the project\n                for (const task of proposal.tasks) {\n                    await createTask({\n                        variables: {\n                            input: {\n                                projectId,\n                                name: task.title,\n                                description: task.description,\n                                estimatedHours: task.estimatedHours,\n                                order: task.order,\n                                category: task.category,\n                                status: 'TODO'\n                            }\n                        }\n                    });\n                }\n\n                // Create a draft invoice if requested\n                if (createInvoice && proposal.suggestedPrice > 0) {\n                    try {\n                        await createBill({\n                            variables: {\n                                input: {\n                                    projectId,\n                                    isPaid: false,\n                                    status: 'DRAFT',\n                                    currency: 'AUD',\n                                    showPaymentDetails: false,\n                                    lineItems: [\n                                        {\n                                            description: `${proposal.projectName} - Complete Project`,\n                                            amount: proposal.suggestedPrice\n                                        }\n                                    ],\n                                    paymentTerms: `Total project value. 50% upfront ($${proposal.upfrontPayment}), 50% on completion ($${proposal.finalPayment})`\n                                }\n                            }\n                        });\n                    } catch (billError) {\n                        console.error('Failed to create draft invoice:', billError);\n                    }\n                }\n\n                toast({\n                    title: 'Project Created! 🎉',\n                    description: `Created project with ${proposal.tasks.length} tasks${createInvoice ? ' and draft invoice' : ''}`,\n                    status: 'success',\n                    duration: 5000\n                });\n\n                // Open project in new tab\n                window.open(`/projects/${projectId}`, '_blank');\n                \n                // Close modal\n                onClose();\n            }\n        } catch (error) {\n            console.error('Failed to create project:', error);\n            toast({\n                title: 'Failed to create project',\n                description: 'Please try again',\n                status: 'error',\n                duration: 5000\n            });\n        } finally {\n            setIsCreating(false);\n        }\n    };\n\n    const addTask = () => {\n        if (!proposal) return;\n        const newTask: Task = {\n            title: 'New Task',\n            description: '',\n            estimatedHours: 1,\n            order: proposal.tasks.length + 1,\n            category: 'Development'\n        };\n        setProposal({\n            ...proposal,\n            tasks: [...proposal.tasks, newTask]\n        });\n    };\n\n    const removeTask = (index: number) => {\n        if (!proposal) return;\n        setProposal({\n            ...proposal,\n            tasks: proposal.tasks.filter((_, i) => i !== index)\n        });\n    };\n\n    const updateTask = (index: number, field: keyof Task, value: any) => {\n        if (!proposal) return;\n        const updatedTasks = [...proposal.tasks];\n        updatedTasks[index] = {\n            ...updatedTasks[index],\n            [field]: value\n        };\n        setProposal({\n            ...proposal,\n            tasks: updatedTasks\n        });\n    };\n\n    const totalHours = proposal?.tasks.reduce((sum, task) => sum + task.estimatedHours, 0) || 0;\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"6xl\">\n            <ModalOverlay />\n            <ModalContent bg={bg} borderColor={cardBorder}>\n                <ModalHeader color={textPrimary}>\n                    <HStack>\n                        <FiPackage />\n                        <Text>Convert Email to Project</Text>\n                    </HStack>\n                </ModalHeader>\n                <ModalCloseButton color={textSecondary} />\n\n                <ModalBody>\n                    {isAnalyzing ? (\n                        <VStack spacing={4} py={8}>\n                            <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                            <Text color={textSecondary}>AI is analyzing email content...</Text>\n                            <Text fontSize=\"sm\" color={textSecondary}>Extracting project details and tasks</Text>\n                        </VStack>\n                    ) : proposal ? (\n                        <Tabs index={activeTab} onChange={setActiveTab}>\n                            <TabList>\n                                <Tab color={textSecondary}>Project Details</Tab>\n                                <Tab color={textSecondary}>Tasks ({proposal.tasks.length})</Tab>\n                                <Tab color={textSecondary}>Pricing</Tab>\n                            </TabList>\n\n                            <TabPanels>\n                                {/* Project Details Tab */}\n                                <TabPanel>\n                                    <VStack spacing={4} align=\"stretch\">\n                                        <FormControl>\n                                            <FormLabel color={textSecondary}>Project Name</FormLabel>\n                                            <Input\n                                                value={proposal.projectName}\n                                                onChange={(e) => setProposal({ ...proposal, projectName: e.target.value })}\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                            />\n                                        </FormControl>\n\n                                        <FormControl>\n                                            <FormLabel color={textSecondary}>Project Summary</FormLabel>\n                                            <Textarea\n                                                value={proposal.projectSummary}\n                                                onChange={(e) => setProposal({ ...proposal, projectSummary: e.target.value })}\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                                rows={3}\n                                            />\n                                        </FormControl>\n\n                                        <HStack spacing={4}>\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>Client Name</FormLabel>\n                                                <Input\n                                                    value={proposal.clientName}\n                                                    onChange={(e) => setProposal({ ...proposal, clientName: e.target.value })}\n                                                    bg={bg}\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                />\n                                            </FormControl>\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>Client Email</FormLabel>\n                                                <Input\n                                                    value={proposal.clientEmail || ''}\n                                                    onChange={(e) => setProposal({ ...proposal, clientEmail: e.target.value })}\n                                                    bg={bg}\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                />\n                                            </FormControl>\n                                        </HStack>\n\n                                        <FormControl>\n                                            <FormLabel color={textSecondary}>\n                                                <FiClock style={{ display: 'inline', marginRight: '8px' }} />\n                                                Delivery Timeline\n                                            </FormLabel>\n                                            <Input\n                                                value={proposal.deliveryTimeline}\n                                                onChange={(e) => setProposal({ ...proposal, deliveryTimeline: e.target.value })}\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                            />\n                                        </FormControl>\n                                    </VStack>\n                                </TabPanel>\n\n                                {/* Tasks Tab */}\n                                <TabPanel>\n                                    <VStack spacing={4} align=\"stretch\">\n                                        <HStack justify=\"space-between\">\n                                            <Text color={textSecondary}>\n                                                Total Hours: <Badge colorScheme=\"blue\">{totalHours}h</Badge>\n                                            </Text>\n                                            <Button\n                                                size=\"sm\"\n                                                leftIcon={<FiPlus />}\n                                                variant=\"outline\"\n                                                onClick={addTask}\n                                            >\n                                                Add Task\n                                            </Button>\n                                        </HStack>\n\n                                        <Box maxH=\"300px\" overflowY=\"auto\">\n                                            <Table size=\"sm\">\n                                                <Thead>\n                                                    <Tr>\n                                                        <Th color={textSecondary}>Task</Th>\n                                                        <Th color={textSecondary}>Description</Th>\n                                                        <Th color={textSecondary} isNumeric>Hours</Th>\n                                                        <Th></Th>\n                                                    </Tr>\n                                                </Thead>\n                                                <Tbody>\n                                                    {proposal.tasks.map((task, index) => (\n                                                        <Tr key={index}>\n                                                            <Td>\n                                                                <Input\n                                                                    value={task.title}\n                                                                    onChange={(e) => updateTask(index, 'title', e.target.value)}\n                                                                    size=\"sm\"\n                                                                    bg={bg}\n                                                                    borderColor={cardBorder}\n                                                                    color={textPrimary}\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <Input\n                                                                    value={task.description}\n                                                                    onChange={(e) => updateTask(index, 'description', e.target.value)}\n                                                                    size=\"sm\"\n                                                                    bg={bg}\n                                                                    borderColor={cardBorder}\n                                                                    color={textPrimary}\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <NumberInput\n                                                                    value={task.estimatedHours}\n                                                                    onChange={(_, value) => updateTask(index, 'estimatedHours', value)}\n                                                                    min={0.5}\n                                                                    step={0.5}\n                                                                    size=\"sm\"\n                                                                    width=\"80px\"\n                                                                >\n                                                                    <NumberInputField \n                                                                        bg={bg}\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                    />\n                                                                    <NumberInputStepper>\n                                                                        <NumberIncrementStepper />\n                                                                        <NumberDecrementStepper />\n                                                                    </NumberInputStepper>\n                                                                </NumberInput>\n                                                            </Td>\n                                                            <Td>\n                                                                <IconButton\n                                                                    aria-label=\"Remove task\"\n                                                                    icon={<FiTrash2 />}\n                                                                    size=\"sm\"\n                                                                    variant=\"ghost\"\n                                                                    colorScheme=\"red\"\n                                                                    onClick={() => removeTask(index)}\n                                                                />\n                                                            </Td>\n                                                        </Tr>\n                                                    ))}\n                                                </Tbody>\n                                            </Table>\n                                        </Box>\n                                    </VStack>\n                                </TabPanel>\n\n                                {/* Pricing Tab */}\n                                <TabPanel>\n                                    <VStack spacing={4} align=\"stretch\">\n                                        <Alert status=\"info\" variant=\"subtle\">\n                                            <AlertIcon />\n                                            <Box>\n                                                <Text fontWeight=\"bold\">AI Pricing Recommendation</Text>\n                                                <Text fontSize=\"sm\">Based on {totalHours} hours of work</Text>\n                                            </Box>\n                                        </Alert>\n\n                                        <HStack spacing={4}>\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>\n                                                    <FiDollarSign style={{ display: 'inline' }} /> Total Price\n                                                </FormLabel>\n                                                <NumberInput\n                                                    value={proposal.suggestedPrice}\n                                                    onChange={(_, value) => setProposal({ \n                                                        ...proposal, \n                                                        suggestedPrice: value,\n                                                        upfrontPayment: Math.round(value * 0.5),\n                                                        finalPayment: Math.round(value * 0.5)\n                                                    })}\n                                                    min={0}\n                                                    step={100}\n                                                >\n                                                    <NumberInputField \n                                                        bg={bg}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                    />\n                                                    <NumberInputStepper>\n                                                        <NumberIncrementStepper />\n                                                        <NumberDecrementStepper />\n                                                    </NumberInputStepper>\n                                                </NumberInput>\n                                            </FormControl>\n\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>50% Upfront</FormLabel>\n                                                <NumberInput\n                                                    value={proposal.upfrontPayment}\n                                                    onChange={(_, value) => setProposal({ ...proposal, upfrontPayment: value })}\n                                                    min={0}\n                                                    step={100}\n                                                >\n                                                    <NumberInputField \n                                                        bg={bg}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                    />\n                                                    <NumberInputStepper>\n                                                        <NumberIncrementStepper />\n                                                        <NumberDecrementStepper />\n                                                    </NumberInputStepper>\n                                                </NumberInput>\n                                            </FormControl>\n\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>50% Final</FormLabel>\n                                                <NumberInput\n                                                    value={proposal.finalPayment}\n                                                    onChange={(_, value) => setProposal({ ...proposal, finalPayment: value })}\n                                                    min={0}\n                                                    step={100}\n                                                >\n                                                    <NumberInputField \n                                                        bg={bg}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                    />\n                                                    <NumberInputStepper>\n                                                        <NumberIncrementStepper />\n                                                        <NumberDecrementStepper />\n                                                    </NumberInputStepper>\n                                                </NumberInput>\n                                            </FormControl>\n                                        </HStack>\n\n                                        <Divider />\n\n                                        <FormControl display=\"flex\" alignItems=\"center\">\n                                            <FormLabel mb={0} color={textSecondary}>\n                                                Create draft invoice for full amount\n                                            </FormLabel>\n                                            <Switch\n                                                isChecked={createInvoice}\n                                                onChange={(e) => setCreateInvoice(e.target.checked)}\n                                                colorScheme=\"green\"\n                                            />\n                                        </FormControl>\n\n                                        {createInvoice && (\n                                            <Alert status=\"success\" variant=\"subtle\">\n                                                <AlertIcon />\n                                                <Text fontSize=\"sm\">\n                                                    A draft invoice for ${proposal.suggestedPrice} will be created. \n                                                    You can then generate a 50% upfront invoice from it.\n                                                </Text>\n                                            </Alert>\n                                        )}\n                                    </VStack>\n                                </TabPanel>\n                            </TabPanels>\n                        </Tabs>\n                    ) : null}\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button variant=\"ghost\" mr={3} onClick={onClose} isDisabled={isCreating}>\n                        Cancel\n                    </Button>\n                    <Button\n                        leftIcon={<FiPackage />}\n                        colorScheme=\"green\"\n                        onClick={handleCreateProject}\n                        isLoading={isCreating}\n                        isDisabled={!proposal || !proposal.projectName || isAnalyzing}\n                    >\n                        Create Project & Open\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};"],"names":["CREATE_COMMUNICATION_TASK","gql","_templateObject","_taggedTemplateLiteral","UPDATE_COMMUNICATION_TASK","_templateObject2","GET_CLIENTS","_templateObject3","_ref","_clientsData$clients","isOpen","onClose","communicationId","communicationType","onTaskCreated","existingTask","toast","useToast","title","setTitle","useState","description","setDescription","status","setStatus","priority","setPriority","dueDate","setDueDate","assignedToIds","setAssignedToIds","notes","setNotes","borderColor","getColor","textColor","mutedText","modalBg","inputBg","data","clientsData","useQuery","createTask","loading","creating","useMutation","onCompleted","duration","isClosable","handleClose","onError","error","message","updateTask","updating","useEffect","_existingTask$assigne","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","concat","assignedTo","map","a","id","getStatusIcon","FiClock","FiAlertCircle","FiCheckCircle","FiXCircle","_jsxs","Modal","size","children","_jsx","ModalOverlay","bg","backdropFilter","ModalContent","border","color","ModalHeader","borderBottom","ModalCloseButton","ModalBody","pb","VStack","spacing","align","FormControl","isRequired","FormLabel","Input","value","onChange","e","target","placeholder","_placeholder","_hover","_focus","boxShadow","FormHelperText","Textarea","rows","HStack","flex","Icon","as","Text","Select","FiFlag","FiCalendar","type","FiUser","clients","client","fName","lName","email","Box","p","borderWidth","borderRadius","Badge","colorScheme","getStatusColor","px","py","replace","getPriorityColor","toLocaleDateString","justify","Button","variant","onClick","async","trim","formattedDueDate","length","toISOString","input","undefined","variables","_objectSpread","isLoading","loadingText","TOGGLE_TASK_STATUS","DELETE_TASK","_selectedTask$assigne","tasks","onTasksUpdated","allowEdit","isModalOpen","setIsModalOpen","selectedTask","setSelectedTask","textSecondary","cardBg","toggleStatus","deleteTask","handleCreateTask","completedTasks","filter","t","completionPercentage","console","log","formatDueDate","now","diffInDays","Math","ceil","getTime","abs","Card","CardBody","fontSize","fontWeight","round","leftIcon","FiPlus","Progress","Divider","textAlign","boxSize","mb","mt","task","opacity","shadow","Checkbox","isChecked","taskId","handleToggleStatus","textDecoration","flexWrap","Menu","MenuButton","IconButton","icon","FiMoreVertical","MenuList","MenuItem","FiEdit2","handleEditTask","FiTrash2","window","confirm","handleDeleteTask","CommunicationTaskModal","GET_INBOUND_EMAIL_QUERY","STAR_EMAIL_MUTATION","ADD_EMAIL_LABEL_MUTATION","REMOVE_EMAIL_LABEL_MUTATION","_templateObject4","AVAILABLE_LABELS_QUERY","_templateObject5","MOVE_TO_FOLDER_MUTATION","_templateObject6","DELETE_EMAIL_MUTATION","_templateObject7","InboundEmailDetail","_email$labels2","_email$toFull","_email$to","_email$cc","_email$ccFull","_email$cc2","_email$attachments","usePageTitle","useParams","navigate","useNavigate","cardGradientBg","cardBorder","textPrimary","textMuted","isConvertModalOpen","onOpen","onConvertModalOpen","onConvertModalClose","useDisclosure","isTagModalOpen","onTagModalOpen","onTagModalClose","newLabel","setNewLabel","refetch","skip","fetchPolicy","err","graphQLErrors","networkError","React","_data$inboundEmail$at","_data$inboundEmail$ta","inboundEmail","subject","attachments","Array","isArray","JSON","stringify","availableLabelsData","starEmail","moveToFolder","addLabel","removeLabel","deleteEmail","handleAddLabel","emailId","label","minH","display","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","emailsModuleConfig","Container","maxW","base","md","lg","Center","Spinner","FooterWithFourColumns","FiMail","fontFamily","FiArrowLeft","width","FiCornerUpLeft","handleReply","replyData","to","from","startsWith","fromName","textBody","htmlBody","originalTo","toFull","sessionStorage","setItem","transform","_active","FiUsers","handleReplyToAll","toRecipients","ccRecipients","forEach","recipient","push","cc","includes","replyAllData","join","FiCornerUpRight","handleForward","forwardData","fromEmail","originalSubject","FiPackage","Tooltip","placement","hasArrow","FiFileText","_email$labels","emailContentElement","document","getElementById","cardBodies","querySelectorAll","card","querySelector","Error","clonedElement","cloneNode","button","remove","style","cssText","el","element","maxHeight","height","overflow","classList","contains","backgroundColor","background","tagName","match","body","appendChild","Promise","resolve","setTimeout","canvas","html2canvas","scale","useCORS","allowTaint","logging","scrollHeight","windowWidth","windowHeight","onclone","clonedDoc","textEl","removeChild","toDataURL","pdf","jsPDF","orientation","unit","format","pdfWidth","internal","pageSize","getWidth","pdfHeight","getHeight","imgWidth","imgHeight","pageContentHeight","totalPages","page","addPage","sourceY","sourceHeight","min","pageCanvas","createElement","ctx","getContext","drawImage","pageImgData","pageImgHeight","addImage","setProperties","author","brandConfig","siteName","keywords","labels","creator","fileName","substring","save","isStarred","FiStar","folder","FiArchive","isArchived","newFolder","Heading","Wrap","WrapItem","Tag","TagLabel","FiTag","pl","fromFull","index","minW","ccFull","dangerouslySetInnerHTML","__html","sx","marginBottom","paddingLeft","borderLeft","marginLeft","whiteSpace","_Fragment","FiPaperclip","attachment","ipfsUrl","Link","href","isExternal","cursor","transition","FiDownload","name","contentType","contentLength","ipfsHash","FiExternalLink","CommunicationTaskList","ConvertToProjectModal","bodyMarkdown","noOfLines","TagCloseButton","handleRemoveLabel","onKeyPress","key","isDisabled","availableInboundEmailLabels","_data$inboundEmail$la","ModalFooter","SCAN_EMAIL_FOR_PROJECT","CREATE_PROJECT","CREATE_TASK","CREATE_BILL","proposal","setProposal","isAnalyzing","setIsAnalyzing","isCreating","setIsCreating","createInvoice","setCreateInvoice","activeTab","setActiveTab","scanEmail","createProject","createBill","analyzeEmail","_email$from","_email$from2","_email$from2$match","_result$data","result","emailContent","emailSubject","senderName","split","senderEmail","scanEmailAndGenerateProjectProposal","projectName","projectSummary","clientName","clientEmail","clientPhone","suggestedPrice","upfrontPayment","finalPayment","deliveryTimeline","deliverables","specialRequirements","field","updatedTasks","totalHours","reduce","sum","estimatedHours","Tabs","TabList","Tab","TabPanels","TabPanel","marginRight","addTask","newTask","order","category","maxH","overflowY","Table","Thead","Tr","Th","isNumeric","Tbody","Td","NumberInput","_","step","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","i","removeTask","Alert","AlertIcon","FiDollarSign","alignItems","Switch","checked","mr","_projectResult$data","_projectResult$data$c","projectId","projectGoal","projectDescription","billingClient","sourceEmailId","proposalStatus","isPaid","currency","showPaymentDetails","lineItems","amount","paymentTerms","billError","open"],"sourceRoot":""}