{"version":3,"file":"static/js/5875.c6adc1f2.chunk.js","mappings":"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","sources":["pages/youtubetoipfs/IPFSVideosAdmin.tsx","pages/youtubetoipfs/config.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Card,\n  CardBody,\n  Badge,\n  Button,\n  Input,\n  Select,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalCloseButton,\n  useDisclosure,\n  Spinner,\n  IconButton,\n  Tooltip,\n  Image,\n  Link as ChakraLink,\n  Wrap,\n  WrapItem,\n  Tag\n} from '@chakra-ui/react';\nimport {\n  FiVideo,\n  FiUser,\n  FiEye,\n  FiTrash2,\n  FiExternalLink,\n  FiCopy,\n  FiGlobe,\n  FiLock,\n  FiCalendar,\n  FiHardDrive,\n  FiPlay,\n  FiDownload\n} from 'react-icons/fi';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { format } from 'date-fns';\nimport { getColor } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport youtubeToIPFSModuleConfig from \"./moduleConfig\";\nimport { useNavigate } from 'react-router-dom';\nimport { IPFS_CONFIG } from \"./config\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL queries and mutations\n// Note: This query needs to be implemented in the backend\n// For now, we'll use the public videos query as a placeholder\nconst GET_ALL_IPFS_VIDEOS = gql`\n  query GetPublicIPFSVideos($limit: Float!) {\n    publicIPFSVideos(limit: $limit) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      originalUrl\n      source\n      duration\n      fileSize\n      mimeType\n      uploadedBy\n      uploadedByName\n      tags\n      viewCount\n      isPublic\n      youtubeVideoId\n      youtubeChannelName\n      youtubeChannelId\n      createdAt\n      updatedAt\n      tenantId\n    }\n  }\n`;\n\nconst DELETE_IPFS_VIDEO = gql`\n  mutation DeleteIPFSVideo($id: String!) {\n    deleteIPFSVideo(id: $id)\n  }\n`;\n\ninterface IPFSVideo {\n  id: string;\n  title: string;\n  description?: string;\n  ipfsHash: string;\n  ipfsUrl: string;\n  thumbnailUrl?: string;\n  originalUrl?: string;\n  source: string;\n  duration?: number;\n  fileSize?: number;\n  mimeType?: string;\n  uploadedBy?: string;\n  uploadedByName?: string;\n  tags?: string[];\n  viewCount: number;\n  isPublic: boolean;\n  youtubeVideoId?: string;\n  youtubeChannelName?: string;\n  youtubeChannelId?: string;\n  createdAt: string;\n  updatedAt: string;\n  tenantId: string;\n}\n\nconst IPFSVideosAdmin: React.FC = () => {\n  usePageTitle(\"IPFS Videos Admin\");\n  const toast = useToast();\n  const navigate = useNavigate();\n  const { isOpen: isDeleteOpen, onOpen: onDeleteOpen, onClose: onDeleteClose } = useDisclosure();\n  const { isOpen: isViewOpen, onOpen: onViewOpen, onClose: onViewClose } = useDisclosure();\n\n  const [selectedVideo, setSelectedVideo] = useState<IPFSVideo | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterSource, setFilterSource] = useState('all');\n  const [filterVisibility, setFilterVisibility] = useState('all');\n  const [filterTenant, setFilterTenant] = useState('all');\n\n  // GraphQL queries\n  const { data: videosData, loading: videosLoading, error: videosError, refetch: refetchVideos } = useQuery(GET_ALL_IPFS_VIDEOS, {\n    variables: { limit: 1000 } // Get a large number of public videos for now\n  });\n\n  // GraphQL mutations\n  const [deleteVideo] = useMutation(DELETE_IPFS_VIDEO, {\n    onCompleted: () => {\n      toast({\n        title: 'Video deleted successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetchVideos();\n      onDeleteClose();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting video',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const bg = getColor(\"background.main\");\n  const cardGradientBg = getColor(\"background.cardGradient\");\n  const cardBorder = getColor(\"border.darkCard\");\n  const textColor = \"white\";\n  const mutedTextColor = \"gray.300\";\n  const labelColor = \"gray.400\";\n\n  const videos = videosData?.publicIPFSVideos || [];\n\n  // Filter videos based on search and filters\n  const filteredVideos = videos.filter((video: IPFSVideo) => {\n    const matchesSearch = video.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         video.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         video.uploadedByName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSource = filterSource === 'all' || video.source === filterSource;\n    const matchesVisibility = filterVisibility === 'all' ||\n                             (filterVisibility === 'public' && video.isPublic) ||\n                             (filterVisibility === 'private' && !video.isPublic);\n    const matchesTenant = filterTenant === 'all' || video.tenantId === filterTenant;\n\n    return matchesSearch && matchesSource && matchesVisibility && matchesTenant;\n  });\n\n  const handleDeleteVideo = async () => {\n    if (selectedVideo) {\n      await deleteVideo({ variables: { id: selectedVideo.id } });\n    }\n  };\n\n  const handleCopyToClipboard = (text: string, label: string = 'Text') => {\n    navigator.clipboard.writeText(text).then(() => {\n      toast({\n        title: `${label} copied to clipboard`,\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n    }).catch(() => {\n      toast({\n        title: 'Failed to copy',\n        status: 'error',\n        duration: 2000,\n        isClosable: true,\n      });\n    });\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown';\n    const gb = bytes / (1024 * 1024 * 1024);\n    if (gb >= 1) {\n      return `${gb.toFixed(2)} GB`;\n    }\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(2)} MB`;\n  };\n\n  const formatDuration = (seconds?: number) => {\n    if (!seconds) return 'Unknown';\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getSourceBadgeColor = (source: string) => {\n    switch (source) {\n      case 'YOUTUBE': return 'red';\n      case 'UPLOAD': return 'blue';\n      case 'OTHER': return 'gray';\n      default: return 'gray';\n    }\n  };\n\n  const getUniqueTenants = (): string[] => {\n    const tenantIds = Array.from(new Set(videos.map((v: IPFSVideo) => v.tenantId).filter(Boolean))) as string[];\n    return tenantIds;\n  };\n\n  const openViewModal = (video: IPFSVideo) => {\n    setSelectedVideo(video);\n    onViewOpen();\n  };\n\n  const openDeleteModal = (video: IPFSVideo) => {\n    setSelectedVideo(video);\n    onDeleteOpen();\n  };\n\n  if (videosLoading) {\n    return (\n      <Box minH=\"100vh\" bg={bg} p={6} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        <Spinner size=\"xl\" color={textColor} />\n      </Box>\n    );\n  }\n\n  if (videosError) {\n    return (\n      <Box minH=\"100vh\" bg={bg}>\n        <NavbarWithCallToAction />\n        <Box p={6}>\n          <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n            <CardBody>\n              <VStack spacing={4}>\n                <Text color=\"red.400\" fontSize=\"lg\">Error loading IPFS videos</Text>\n                <Text color={textColor} fontSize=\"sm\">{videosError.message}</Text>\n                <Button onClick={() => refetchVideos()} colorScheme=\"blue\">\n                  Try Again\n                </Button>\n              </VStack>\n            </CardBody>\n          </Card>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  return (\n    <Box minH=\"100vh\" bg={bg}>\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={youtubeToIPFSModuleConfig} />\n      <Box p={{ base: 4, md: 6 }}>\n        <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\" maxW={{ base: \"100%\", lg: \"none\" }}>\n          {/* Header */}\n          <Box>\n            <Text fontSize={{ base: \"2xl\", md: \"3xl\" }} fontWeight=\"bold\" color={textColor} mb={2}>\n              🎬 IPFS Videos Administration\n            </Text>\n            <Text color={mutedTextColor} fontSize={{ base: \"md\", md: \"lg\" }} lineHeight=\"1.6\">\n              Manage all IPFS videos across all users and tenants. View detailed information, monitor usage, and perform administrative actions.\n            </Text>\n\n            {/* Warning about backend limitation */}\n            <Box mt={4} p={3} bg=\"orange.900\" borderRadius=\"md\" border=\"1px solid\" borderColor=\"orange.700\">\n              <Text color=\"orange.200\" fontSize=\"sm\">\n                ⚠️ <strong>Backend Note:</strong> Currently showing public videos only. The backend needs an <code>allIPFSVideos</code> query with admin permissions to show all videos across all users and tenants.\n              </Text>\n            </Box>\n          </Box>\n\n          {/* Stats Cards */}\n          <HStack spacing={{ base: 2, md: 4 }} direction={{ base: \"column\", md: \"row\" }} align=\"stretch\">\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              flex={1}\n            >\n              <CardBody p={{ base: 4, md: 6 }}>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1} flex=\"1\">\n                    <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Total Videos</Text>\n                    <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                      {videos.length}\n                    </Text>\n                    <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                      Across all tenants\n                    </Text>\n                  </VStack>\n                  <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"blue.500\" color=\"white\">\n                    <FiVideo size={24} />\n                  </Box>\n                </HStack>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              flex={1}\n            >\n              <CardBody p={{ base: 4, md: 6 }}>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1} flex=\"1\">\n                    <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Total Views</Text>\n                    <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                      {videos.reduce((sum: number, video: IPFSVideo) => sum + video.viewCount, 0)}\n                    </Text>\n                    <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                      All videos combined\n                    </Text>\n                  </VStack>\n                  <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"green.500\" color=\"white\">\n                    <FiEye size={24} />\n                  </Box>\n                </HStack>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              flex={1}\n            >\n              <CardBody p={{ base: 4, md: 6 }}>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1} flex=\"1\">\n                    <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Total Storage</Text>\n                    <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                      {formatFileSize(videos.reduce((sum: number, video: IPFSVideo) => sum + (video.fileSize || 0), 0))}\n                    </Text>\n                    <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                      IPFS storage used\n                    </Text>\n                  </VStack>\n                  <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"purple.500\" color=\"white\">\n                    <FiHardDrive size={24} />\n                  </Box>\n                </HStack>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              flex={1}\n            >\n              <CardBody p={{ base: 4, md: 6 }}>\n                <HStack justify=\"space-between\">\n                  <VStack align=\"start\" spacing={1} flex=\"1\">\n                    <Text fontSize={{ base: \"xs\", md: \"sm\" }} color=\"gray.300\">Public Videos</Text>\n                    <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textColor}>\n                      {videos.filter((v: IPFSVideo) => v.isPublic).length}\n                    </Text>\n                    <Text fontSize=\"2xs\" color=\"gray.400\" display={{ base: \"none\", md: \"block\" }}>\n                      Publicly accessible\n                    </Text>\n                  </VStack>\n                  <Box p={{ base: 2, md: 3 }} borderRadius=\"lg\" bg=\"orange.500\" color=\"white\">\n                    <FiGlobe size={24} />\n                  </Box>\n                </HStack>\n              </CardBody>\n            </Card>\n          </HStack>\n\n          {/* Filters */}\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n          >\n            <CardBody p={{ base: 4, md: 6 }}>\n              <VStack spacing={4} align=\"stretch\">\n                <Input\n                  placeholder=\"Search videos by title, description, or uploader...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  bg=\"whiteAlpha.100\"\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                  _placeholder={{ color: \"gray.500\" }}\n                />\n                <HStack spacing={3} justifyContent=\"space-between\">\n                  <HStack spacing={3} flex=\"1\">\n                    <Select\n                      value={filterSource}\n                      onChange={(e) => setFilterSource(e.target.value)}\n                      bg=\"whiteAlpha.100\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      color={textColor}\n                      flex={1}\n                    >\n                      <option value=\"all\">All Sources</option>\n                      <option value=\"YOUTUBE\">YouTube</option>\n                      <option value=\"UPLOAD\">Upload</option>\n                      <option value=\"OTHER\">Other</option>\n                    </Select>\n                    <Select\n                      value={filterVisibility}\n                      onChange={(e) => setFilterVisibility(e.target.value)}\n                      bg=\"whiteAlpha.100\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      color={textColor}\n                      flex={1}\n                    >\n                      <option value=\"all\">All Visibility</option>\n                      <option value=\"public\">Public</option>\n                      <option value=\"private\">Private</option>\n                    </Select>\n                    <Select\n                      value={filterTenant}\n                      onChange={(e) => setFilterTenant(e.target.value)}\n                      bg=\"whiteAlpha.100\"\n                      border=\"1px solid\"\n                      borderColor={cardBorder}\n                      color={textColor}\n                      flex={1}\n                    >\n                      <option value=\"all\">All Tenants</option>\n                      {getUniqueTenants().map((tenantId) => (\n                        <option key={tenantId} value={tenantId}>\n                          {tenantId}\n                        </option>\n                      ))}\n                    </Select>\n                  </HStack>\n                </HStack>\n              </VStack>\n            </CardBody>\n          </Card>\n\n          {/* Videos Table */}\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px solid\"\n            borderColor={cardBorder}\n          >\n            <CardBody p={{ base: 2, md: 6 }}>\n              <Box overflowX=\"auto\">\n                <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\" }}>\n                  <Thead>\n                    <Tr>\n                      <Th color={labelColor}>Video</Th>\n                      <Th color={labelColor}>Source</Th>\n                      <Th color={labelColor}>Visibility</Th>\n                      <Th color={labelColor}>Uploader</Th>\n                      <Th color={labelColor}>Views</Th>\n                      <Th color={labelColor}>Size/Duration</Th>\n                      <Th color={labelColor}>IPFS Info</Th>\n                      <Th color={labelColor}>Tags</Th>\n                      <Th color={labelColor}>Created</Th>\n                      <Th color={labelColor}>Actions</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {filteredVideos.map((video: IPFSVideo) => (\n                      <Tr key={video.id}>\n                        <Td>\n                          <HStack spacing={3}>\n                            {video.thumbnailUrl ? (\n                              <Image\n                                src={video.thumbnailUrl}\n                                alt={video.title}\n                                boxSize={12}\n                                objectFit=\"cover\"\n                                borderRadius=\"md\"\n                              />\n                            ) : (\n                              <Box\n                                boxSize={12}\n                                bg=\"gray.600\"\n                                borderRadius=\"md\"\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                              >\n                                <FiVideo color=\"gray\" />\n                              </Box>\n                            )}\n                            <VStack align=\"start\" spacing={0}>\n                              <Text color={textColor} fontWeight=\"medium\" fontSize=\"sm\" noOfLines={1}>\n                                {video.title}\n                              </Text>\n                              {video.description && (\n                                <Text fontSize=\"xs\" color={mutedTextColor} noOfLines={1}>\n                                  {video.description}\n                                </Text>\n                              )}\n                              <Text fontSize=\"xs\" color=\"gray.500\">\n                                ID: {video.id.slice(0, 8)}...\n                              </Text>\n                            </VStack>\n                          </HStack>\n                        </Td>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <Badge colorScheme={getSourceBadgeColor(video.source)}>\n                              {video.source}\n                            </Badge>\n                            {video.youtubeVideoId && (\n                              <Text fontSize=\"xs\" color=\"gray.500\">\n                                YT: {video.youtubeVideoId}\n                              </Text>\n                            )}\n                            {video.youtubeChannelName && (\n                              <Text fontSize=\"xs\" color=\"gray.500\" noOfLines={1}>\n                                {video.youtubeChannelName}\n                              </Text>\n                            )}\n                          </VStack>\n                        </Td>\n                        <Td>\n                          <Badge colorScheme={video.isPublic ? 'green' : 'gray'}>\n                            {video.isPublic ? (\n                              <HStack spacing={1}>\n                                <FiGlobe size={10} />\n                                <Text>Public</Text>\n                              </HStack>\n                            ) : (\n                              <HStack spacing={1}>\n                                <FiLock size={10} />\n                                <Text>Private</Text>\n                              </HStack>\n                            )}\n                          </Badge>\n                        </Td>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <Text color={textColor} fontSize=\"sm\">\n                              {video.uploadedByName || 'Anonymous'}\n                            </Text>\n                            {video.uploadedBy && (\n                              <Text fontSize=\"xs\" color=\"gray.500\">\n                                ID: {video.uploadedBy.slice(0, 8)}...\n                              </Text>\n                            )}\n                            <Text fontSize=\"xs\" color=\"gray.500\">\n                              Tenant: {video.tenantId.slice(0, 8)}...\n                            </Text>\n                          </VStack>\n                        </Td>\n                        <Td>\n                          <HStack spacing={1}>\n                            <FiEye size={12} />\n                            <Text color={textColor} fontSize=\"sm\">\n                              {video.viewCount}\n                            </Text>\n                          </HStack>\n                        </Td>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <Text color={textColor} fontSize=\"sm\">\n                              {formatFileSize(video.fileSize)}\n                            </Text>\n                            <Text color={mutedTextColor} fontSize=\"xs\">\n                              {formatDuration(video.duration)}\n                            </Text>\n                            {video.mimeType && (\n                              <Text color=\"gray.500\" fontSize=\"xs\">\n                                {video.mimeType}\n                              </Text>\n                            )}\n                          </VStack>\n                        </Td>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <HStack spacing={1}>\n                              <Text color={textColor} fontSize=\"xs\" fontFamily=\"mono\">\n                                {video.ipfsHash.slice(0, 10)}...\n                              </Text>\n                              <Tooltip label=\"Copy IPFS Hash\">\n                                <IconButton\n                                  aria-label=\"Copy hash\"\n                                  icon={<FiCopy />}\n                                  size=\"xs\"\n                                  variant=\"ghost\"\n                                  color={mutedTextColor}\n                                  onClick={() => handleCopyToClipboard(video.ipfsHash, 'IPFS Hash')}\n                                  _hover={{ color: textColor }}\n                                />\n                              </Tooltip>\n                            </HStack>\n                            <ChakraLink\n                              href={IPFS_CONFIG.getIPFSUrl(video.ipfsHash)}\n                              isExternal\n                              color=\"blue.400\"\n                              fontSize=\"xs\"\n                              _hover={{ color: \"blue.300\" }}\n                            >\n                              View on IPFS <FiExternalLink style={{ display: 'inline' }} />\n                            </ChakraLink>\n                          </VStack>\n                        </Td>\n                        <Td>\n                          {video.tags && video.tags.length > 0 ? (\n                            <Wrap>\n                              {video.tags.slice(0, 2).map((tag) => (\n                                <WrapItem key={tag}>\n                                  <Tag size=\"sm\" colorScheme=\"blue\">\n                                    {tag}\n                                  </Tag>\n                                </WrapItem>\n                              ))}\n                              {video.tags.length > 2 && (\n                                <WrapItem>\n                                  <Tag size=\"sm\" variant=\"outline\">\n                                    +{video.tags.length - 2}\n                                  </Tag>\n                                </WrapItem>\n                              )}\n                            </Wrap>\n                          ) : (\n                            <Text color={mutedTextColor} fontSize=\"sm\">\n                              None\n                            </Text>\n                          )}\n                        </Td>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <Text color={mutedTextColor} fontSize=\"xs\">\n                              {format(new Date(video.createdAt), 'MMM dd, yyyy')}\n                            </Text>\n                            <Text color=\"gray.500\" fontSize=\"xs\">\n                              {format(new Date(video.createdAt), 'HH:mm')}\n                            </Text>\n                            {video.updatedAt !== video.createdAt && (\n                              <Text color=\"gray.500\" fontSize=\"xs\">\n                                Updated: {format(new Date(video.updatedAt), 'MMM dd')}\n                              </Text>\n                            )}\n                          </VStack>\n                        </Td>\n                        <Td>\n                          <HStack spacing={1}>\n                            <Tooltip label=\"View Video\">\n                              <IconButton\n                                aria-label=\"View video\"\n                                icon={<FiPlay />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                color={textColor}\n                                onClick={() => navigate(`/youtubetoipfs/video/${video.id}`)}\n                              />\n                            </Tooltip>\n                            <Tooltip label=\"View Details\">\n                              <IconButton\n                                aria-label=\"View details\"\n                                icon={<FiEye />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                color={textColor}\n                                onClick={() => openViewModal(video)}\n                              />\n                            </Tooltip>\n                            <Tooltip label=\"Delete Video\">\n                              <IconButton\n                                aria-label=\"Delete video\"\n                                icon={<FiTrash2 />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                color=\"red.400\"\n                                onClick={() => openDeleteModal(video)}\n                              />\n                            </Tooltip>\n                          </HStack>\n                        </Td>\n                      </Tr>\n                    ))}\n                  </Tbody>\n                </Table>\n                {filteredVideos.length === 0 && (\n                  <Box py={8} textAlign=\"center\">\n                    <Text color={mutedTextColor}>No videos found</Text>\n                  </Box>\n                )}\n              </Box>\n            </CardBody>\n          </Card>\n\n          {/* Video Details Modal */}\n          <Modal isOpen={isViewOpen} onClose={onViewClose} size={{ base: \"full\", md: \"xl\" }}>\n            <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n            <ModalContent\n              bg={cardGradientBg}\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              margin={{ base: 0, md: \"auto\" }}\n              borderRadius={{ base: 0, md: \"md\" }}\n              maxH={{ base: \"100vh\", md: \"90vh\" }}\n            >\n              <ModalHeader color={textColor} fontSize={{ base: \"lg\", md: \"xl\" }}>\n                Video Details\n                {selectedVideo && (\n                  <Text fontSize=\"sm\" color={mutedTextColor} mt={1}>\n                    {selectedVideo.title}\n                  </Text>\n                )}\n              </ModalHeader>\n              <ModalCloseButton color={textColor} />\n              <ModalBody pb={6} maxH=\"60vh\" overflowY=\"auto\">\n                {selectedVideo && (\n                  <VStack spacing={4} align=\"stretch\">\n                    {/* Video Preview */}\n                    {selectedVideo.thumbnailUrl && (\n                      <Box>\n                        <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                          Thumbnail\n                        </Text>\n                        <Image\n                          src={selectedVideo.thumbnailUrl}\n                          alt={selectedVideo.title}\n                          maxH=\"200px\"\n                          objectFit=\"cover\"\n                          borderRadius=\"md\"\n                        />\n                      </Box>\n                    )}\n\n                    {/* Basic Info */}\n                    <Box>\n                      <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                        Basic Information\n                      </Text>\n                      <VStack align=\"stretch\" spacing={2} p={3} bg=\"whiteAlpha.50\" borderRadius=\"md\">\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Title:</Text>\n                          <Text color={textColor} fontSize=\"sm\">{selectedVideo.title}</Text>\n                        </HStack>\n                        {selectedVideo.description && (\n                          <HStack justify=\"space-between\" align=\"start\">\n                            <Text color=\"gray.400\" fontSize=\"sm\">Description:</Text>\n                            <Text color={textColor} fontSize=\"sm\" textAlign=\"right\" maxW=\"60%\">\n                              {selectedVideo.description}\n                            </Text>\n                          </HStack>\n                        )}\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Source:</Text>\n                          <Badge colorScheme={getSourceBadgeColor(selectedVideo.source)}>\n                            {selectedVideo.source}\n                          </Badge>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Visibility:</Text>\n                          <Badge colorScheme={selectedVideo.isPublic ? 'green' : 'gray'}>\n                            {selectedVideo.isPublic ? 'Public' : 'Private'}\n                          </Badge>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Views:</Text>\n                          <Text color={textColor} fontSize=\"sm\">{selectedVideo.viewCount}</Text>\n                        </HStack>\n                      </VStack>\n                    </Box>\n\n                    {/* Technical Details */}\n                    <Box>\n                      <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                        Technical Details\n                      </Text>\n                      <VStack align=\"stretch\" spacing={2} p={3} bg=\"whiteAlpha.50\" borderRadius=\"md\">\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">File Size:</Text>\n                          <Text color={textColor} fontSize=\"sm\">{formatFileSize(selectedVideo.fileSize)}</Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Duration:</Text>\n                          <Text color={textColor} fontSize=\"sm\">{formatDuration(selectedVideo.duration)}</Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">MIME Type:</Text>\n                          <Text color={textColor} fontSize=\"sm\">{selectedVideo.mimeType || 'Unknown'}</Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">IPFS Hash:</Text>\n                          <HStack>\n                            <Text color={textColor} fontSize=\"xs\" fontFamily=\"mono\">\n                              {selectedVideo.ipfsHash.slice(0, 15)}...\n                            </Text>\n                            <IconButton\n                              aria-label=\"Copy hash\"\n                              icon={<FiCopy />}\n                              size=\"xs\"\n                              variant=\"ghost\"\n                              onClick={() => handleCopyToClipboard(selectedVideo.ipfsHash, 'IPFS Hash')}\n                            />\n                          </HStack>\n                        </HStack>\n                      </VStack>\n                    </Box>\n\n                    {/* Upload Info */}\n                    <Box>\n                      <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                        Upload Information\n                      </Text>\n                      <VStack align=\"stretch\" spacing={2} p={3} bg=\"whiteAlpha.50\" borderRadius=\"md\">\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Uploaded By:</Text>\n                          <Text color={textColor} fontSize=\"sm\">{selectedVideo.uploadedByName || 'Anonymous'}</Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">User ID:</Text>\n                          <Text color={textColor} fontSize=\"xs\" fontFamily=\"mono\">\n                            {selectedVideo.uploadedBy || 'Unknown'}\n                          </Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Tenant ID:</Text>\n                          <Text color={textColor} fontSize=\"xs\" fontFamily=\"mono\">\n                            {selectedVideo.tenantId}\n                          </Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Created:</Text>\n                          <Text color={textColor} fontSize=\"sm\">\n                            {format(new Date(selectedVideo.createdAt), 'MMM dd, yyyy HH:mm')}\n                          </Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color=\"gray.400\" fontSize=\"sm\">Updated:</Text>\n                          <Text color={textColor} fontSize=\"sm\">\n                            {format(new Date(selectedVideo.updatedAt), 'MMM dd, yyyy HH:mm')}\n                          </Text>\n                        </HStack>\n                      </VStack>\n                    </Box>\n\n                    {/* YouTube Info */}\n                    {(selectedVideo.youtubeVideoId || selectedVideo.youtubeChannelName || selectedVideo.originalUrl) && (\n                      <Box>\n                        <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                          YouTube Information\n                        </Text>\n                        <VStack align=\"stretch\" spacing={2} p={3} bg=\"whiteAlpha.50\" borderRadius=\"md\">\n                          {selectedVideo.youtubeVideoId && (\n                            <HStack justify=\"space-between\">\n                              <Text color=\"gray.400\" fontSize=\"sm\">Video ID:</Text>\n                              <Text color={textColor} fontSize=\"sm\">{selectedVideo.youtubeVideoId}</Text>\n                            </HStack>\n                          )}\n                          {selectedVideo.youtubeChannelName && (\n                            <HStack justify=\"space-between\">\n                              <Text color=\"gray.400\" fontSize=\"sm\">Channel Name:</Text>\n                              <Text color={textColor} fontSize=\"sm\">{selectedVideo.youtubeChannelName}</Text>\n                            </HStack>\n                          )}\n                          {selectedVideo.youtubeChannelId && (\n                            <HStack justify=\"space-between\">\n                              <Text color=\"gray.400\" fontSize=\"sm\">Channel ID:</Text>\n                              <Text color={textColor} fontSize=\"sm\">{selectedVideo.youtubeChannelId}</Text>\n                            </HStack>\n                          )}\n                          {selectedVideo.originalUrl && (\n                            <HStack justify=\"space-between\">\n                              <Text color=\"gray.400\" fontSize=\"sm\">Original URL:</Text>\n                              <ChakraLink\n                                href={selectedVideo.originalUrl}\n                                isExternal\n                                color=\"blue.400\"\n                                fontSize=\"sm\"\n                              >\n                                View Original <FiExternalLink style={{ display: 'inline' }} />\n                              </ChakraLink>\n                            </HStack>\n                          )}\n                        </VStack>\n                      </Box>\n                    )}\n\n                    {/* Tags */}\n                    {selectedVideo.tags && selectedVideo.tags.length > 0 && (\n                      <Box>\n                        <Text color=\"gray.300\" fontSize=\"sm\" mb={2}>\n                          Tags\n                        </Text>\n                        <Wrap>\n                          {selectedVideo.tags.map((tag) => (\n                            <WrapItem key={tag}>\n                              <Tag size=\"sm\" colorScheme=\"blue\">\n                                {tag}\n                              </Tag>\n                            </WrapItem>\n                          ))}\n                        </Wrap>\n                      </Box>\n                    )}\n                  </VStack>\n                )}\n              </ModalBody>\n              <ModalFooter>\n                <Button variant=\"ghost\" onClick={onViewClose} color={textColor}>\n                  Close\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n\n          {/* Delete Confirmation Modal */}\n          <Modal isOpen={isDeleteOpen} onClose={onDeleteClose}>\n            <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n            <ModalContent\n              bg={cardGradientBg}\n              border=\"1px solid\"\n              borderColor={cardBorder}\n            >\n              <ModalHeader color={textColor}>Delete Video</ModalHeader>\n              <ModalCloseButton color={textColor} />\n              <ModalBody>\n                <Text color={textColor}>\n                  Are you sure you want to delete \"{selectedVideo?.title}\"? This action cannot be undone and will remove the video from IPFS.\n                </Text>\n              </ModalBody>\n              <ModalFooter>\n                <Button variant=\"ghost\" mr={3} onClick={onDeleteClose} color={textColor}>\n                  Cancel\n                </Button>\n                <Button colorScheme=\"red\" onClick={handleDeleteVideo}>\n                  Delete\n                </Button>\n              </ModalFooter>\n            </ModalContent>\n          </Modal>\n        </VStack>\n      </Box>\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default IPFSVideosAdmin;","// IPFS Configuration\nexport const IPFS_CONFIG = {\n  // Your private Pinata gateway\n  PRIVATE_GATEWAY_URL: 'https://scarlet-professional-perch-484.mypinata.cloud/ipfs',\n\n  // Public gateway fallback (if needed)\n  PUBLIC_GATEWAY_URL: 'https://gateway.pinata.cloud/ipfs',\n\n  // Helper function to construct IPFS URL\n  getIPFSUrl: (cid: string, usePrivate: boolean = true): string => {\n    const gateway = usePrivate ? IPFS_CONFIG.PRIVATE_GATEWAY_URL : IPFS_CONFIG.PUBLIC_GATEWAY_URL;\n    return `${gateway}/${cid}`;\n  }\n};\n\nexport default IPFS_CONFIG;"],"names":["GET_ALL_IPFS_VIDEOS","gql","_templateObject","_taggedTemplateLiteral","DELETE_IPFS_VIDEO","_templateObject2","IPFSVideosAdmin","usePageTitle","toast","useToast","navigate","useNavigate","isOpen","isDeleteOpen","onOpen","onDeleteOpen","onClose","onDeleteClose","useDisclosure","isViewOpen","onViewOpen","onViewClose","selectedVideo","setSelectedVideo","useState","searchTerm","setSearchTerm","filterSource","setFilterSource","filterVisibility","setFilterVisibility","filterTenant","setFilterTenant","data","videosData","loading","videosLoading","error","videosError","refetch","refetchVideos","useQuery","variables","limit","deleteVideo","useMutation","onCompleted","title","status","duration","isClosable","onError","description","message","bg","getColor","cardGradientBg","cardBorder","textColor","mutedTextColor","labelColor","videos","publicIPFSVideos","filteredVideos","filter","video","_video$description","_video$uploadedByName","matchesSearch","toLowerCase","includes","uploadedByName","matchesSource","source","matchesVisibility","isPublic","matchesTenant","tenantId","handleCopyToClipboard","text","label","arguments","length","undefined","navigator","clipboard","writeText","then","concat","catch","formatFileSize","bytes","gb","toFixed","formatDuration","seconds","hours","Math","floor","minutes","secs","toString","padStart","getSourceBadgeColor","_jsx","Box","minH","p","display","alignItems","justifyContent","children","Spinner","size","color","_jsxs","NavbarWithCallToAction","Card","border","borderColor","CardBody","VStack","spacing","Text","fontSize","Button","onClick","colorScheme","FooterWithFourColumns","ModuleBreadcrumb","moduleConfig","youtubeToIPFSModuleConfig","base","md","align","maxW","lg","fontWeight","mb","lineHeight","mt","borderRadius","HStack","direction","backdropFilter","boxShadow","flex","justify","FiVideo","reduce","sum","viewCount","FiEye","fileSize","FiHardDrive","v","FiGlobe","Input","placeholder","value","onChange","e","target","_placeholder","Select","Array","from","Set","map","Boolean","overflowX","Table","variant","Thead","Tr","Th","Tbody","Td","thumbnailUrl","Image","src","alt","boxSize","objectFit","noOfLines","id","slice","Badge","youtubeVideoId","youtubeChannelName","FiLock","uploadedBy","mimeType","fontFamily","ipfsHash","Tooltip","IconButton","icon","FiCopy","_hover","ChakraLink","href","IPFS_CONFIG","getIPFSUrl","isExternal","FiExternalLink","style","tags","Wrap","tag","WrapItem","Tag","format","Date","createdAt","updatedAt","FiPlay","openViewModal","FiTrash2","openDeleteModal","py","textAlign","Modal","ModalOverlay","ModalContent","margin","maxH","ModalHeader","ModalCloseButton","ModalBody","pb","overflowY","originalUrl","youtubeChannelId","ModalFooter","mr","async","PRIVATE_GATEWAY_URL","PUBLIC_GATEWAY_URL","cid","gateway"],"sourceRoot":""}