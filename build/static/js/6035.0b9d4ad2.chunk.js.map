{"version":3,"file":"static/js/6035.0b9d4ad2.chunk.js","mappings":"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","sources":["pages/transcriptions/TranscriptionDetails.tsx"],"sourcesContent":["import React from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Container,\n  Heading,\n  Button,\n  Card,\n  CardBody,\n  Spinner,\n  Alert,\n  AlertIcon,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Divider,\n  Textarea,\n  Grid,\n  GridItem,\n  IconButton,\n  Tooltip,\n  useToast,\n  useColorMode,\n} from '@chakra-ui/react';\nimport {\n  FiArrowLeft,\n  FiDownload,\n  FiRefreshCw,\n  FiTrash2,\n  FiClock,\n  FiCheckCircle,\n  FiXCircle,\n  FiFileText,\n  FiMusic,\n} from 'react-icons/fi';\nimport { getColor, brandConfig } from '../../brandConfig';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport transcriptionsModuleConfig from './moduleConfig';\n\nconst GET_TRANSCRIPTION = gql`\n  query GetTranscription($id: ID!) {\n    transcription(id: $id) {\n      id\n      title\n      description\n      audioUrl\n      fileName\n      fileSize\n      duration\n      transcription\n      status\n      errorMessage\n      detectedLanguage\n      confidence\n      processingTime\n      createdAt\n      updatedAt\n      owner {\n        id\n        fName\n        lName\n      }\n    }\n  }\n`;\n\nconst RETRY_TRANSCRIPTION = gql`\n  mutation RetryTranscription($id: ID!) {\n    retryTranscription(id: $id) {\n      id\n      status\n    }\n  }\n`;\n\nconst TRANSCRIBE_AUDIO = gql`\n  mutation TranscribeAudio($input: TranscriptionUploadInput!) {\n    transcribeAudio(input: $input) {\n      id\n      status\n      transcription\n    }\n  }\n`;\n\nconst DELETE_TRANSCRIPTION = gql`\n  mutation DeleteTranscription($id: ID!) {\n    deleteTranscription(id: $id)\n  }\n`;\n\nconst TranscriptionDetails: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n\n  // Brand styling\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n\n  const { data, loading, error, refetch } = useQuery(GET_TRANSCRIPTION, {\n    variables: { id },\n  });\n\n  // Set up polling based on status\n  React.useEffect(() => {\n    if (data?.transcription?.status === 'PROCESSING' || data?.transcription?.status === 'UPLOADING') {\n      const interval = setInterval(() => {\n        refetch();\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [data?.transcription?.status, refetch]);\n\n  const [retryTranscription, { loading: retrying }] = useMutation(RETRY_TRANSCRIPTION, {\n    onCompleted: () => {\n      toast({\n        title: 'Transcription restarted',\n        status: 'success',\n        duration: 3000,\n      });\n      refetch();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error retrying transcription',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    },\n  });\n\n  const [transcribeAudio, { loading: transcribing }] = useMutation(TRANSCRIBE_AUDIO, {\n    onCompleted: () => {\n      toast({\n        title: 'Transcription started!',\n        description: 'Your audio is being transcribed. This may take a few minutes.',\n        status: 'success',\n        duration: 5000,\n      });\n      refetch();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error starting transcription',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    },\n  });\n\n  const [deleteTranscription, { loading: deleting }] = useMutation(DELETE_TRANSCRIPTION, {\n    onCompleted: () => {\n      toast({\n        title: 'Transcription deleted',\n        status: 'success',\n        duration: 3000,\n      });\n      navigate('/transcriptions');\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting transcription',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    },\n  });\n\n  const handleDownload = () => {\n    if (!data?.transcription?.transcription) return;\n\n    const blob = new Blob([data.transcription.transcription], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${data.transcription.title || 'transcription'}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: 'Download started',\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  const handleRetry = () => {\n    if (window.confirm('Are you sure you want to retry this transcription?')) {\n      retryTranscription({ variables: { id } });\n    }\n  };\n\n  const handleStartTranscription = () => {\n    const audioUrl = window.prompt(\n      'Enter the Pinata IPFS URL for the audio file:\\n\\n' +\n      'Example: https://scarlet-professional-perch-484.mypinata.cloud/ipfs/bafyb...\\n' +\n      'or just the CID: bafyb...',\n      transcription.audioUrl || ''\n    );\n\n    if (!audioUrl) return;\n\n    // If they just entered a CID, construct the full URL\n    const fullUrl = audioUrl.startsWith('http')\n      ? audioUrl\n      : `https://scarlet-professional-perch-484.mypinata.cloud/ipfs/${audioUrl}`;\n\n    transcribeAudio({\n      variables: {\n        input: {\n          transcriptionId: id,\n          audioUrl: fullUrl,\n          fileName: transcription.fileName || 'audio.m4a',\n          fileSize: transcription.fileSize || 0,\n        }\n      }\n    });\n  };\n\n  const handleDelete = () => {\n    if (window.confirm('Are you sure you want to delete this transcription? This action cannot be undone.')) {\n      deleteTranscription({ variables: { id } });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig: Record<string, { color: string; icon: any; label: string }> = {\n      PENDING: { color: 'gray', icon: FiClock, label: 'Pending' },\n      UPLOADING: { color: 'purple', icon: FiClock, label: 'Uploading' },\n      PROCESSING: { color: 'blue', icon: FiClock, label: 'Processing' },\n      COMPLETED: { color: 'green', icon: FiCheckCircle, label: 'Completed' },\n      FAILED: { color: 'red', icon: FiXCircle, label: 'Failed' },\n    };\n\n    const config = statusConfig[status] || statusConfig.PENDING;\n    const Icon = config.icon;\n\n    return (\n      <Badge colorScheme={config.color} display=\"flex\" alignItems=\"center\" gap={1} fontSize=\"md\" p={2}>\n        <Icon size={16} />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const formatDuration = (seconds?: number) => {\n    if (!seconds) return 'N/A';\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={transcriptionsModuleConfig} />\n        <Box flex=\"1\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <VStack spacing={4}>\n            <Spinner size=\"xl\" color={primaryColor} />\n            <Text color={textSecondary}>Loading transcription...</Text>\n          </VStack>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (error || !data?.transcription) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={transcriptionsModuleConfig} />\n        <Container maxW=\"container.md\" flex=\"1\" py={8}>\n          <Alert status=\"error\" borderRadius=\"lg\">\n            <AlertIcon />\n            <VStack align=\"start\">\n              <Text fontWeight=\"bold\">Error loading transcription</Text>\n              <Text fontSize=\"sm\">{error?.message || 'Transcription not found'}</Text>\n            </VStack>\n          </Alert>\n          <Button\n            leftIcon={<FiArrowLeft />}\n            mt={4}\n            onClick={() => navigate('/transcriptions')}\n          >\n            Back to Transcriptions\n          </Button>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const transcription = data.transcription;\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={transcriptionsModuleConfig} />\n\n      <Container maxW=\"container.xl\" py={8} flex=\"1\">\n        {/* Header */}\n        <HStack justify=\"space-between\" mb={6}>\n          <Button\n            leftIcon={<FiArrowLeft />}\n            variant=\"ghost\"\n            color={textSecondary}\n            onClick={() => navigate('/transcriptions')}\n          >\n            Back to Transcriptions\n          </Button>\n\n          <HStack>\n            {(transcription.status === 'PENDING' || transcription.status === 'UPLOADING') && (\n              <Tooltip label=\"Start transcription with Pinata URL\">\n                <Button\n                  leftIcon={<FiRefreshCw />}\n                  onClick={handleStartTranscription}\n                  isLoading={transcribing}\n                  colorScheme=\"blue\"\n                  size=\"sm\"\n                >\n                  Start Transcription\n                </Button>\n              </Tooltip>\n            )}\n            {transcription.status === 'FAILED' && (\n              <Tooltip label=\"Retry transcription\">\n                <IconButton\n                  aria-label=\"Retry\"\n                  icon={<FiRefreshCw />}\n                  onClick={handleRetry}\n                  isLoading={retrying}\n                  colorScheme=\"blue\"\n                />\n              </Tooltip>\n            )}\n            {transcription.status === 'COMPLETED' && (\n              <Tooltip label=\"Download transcription\">\n                <IconButton\n                  aria-label=\"Download\"\n                  icon={<FiDownload />}\n                  onClick={handleDownload}\n                  colorScheme=\"green\"\n                />\n              </Tooltip>\n            )}\n            <Tooltip label=\"Delete transcription\">\n              <IconButton\n                aria-label=\"Delete\"\n                icon={<FiTrash2 />}\n                onClick={handleDelete}\n                isLoading={deleting}\n                colorScheme=\"red\"\n                variant=\"outline\"\n              />\n            </Tooltip>\n          </HStack>\n        </HStack>\n\n        {/* Title and Status */}\n        <VStack align=\"start\" spacing={2} mb={6}>\n          <HStack>\n            <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n              🎤 {transcription.title}\n            </Heading>\n            {getStatusBadge(transcription.status)}\n          </HStack>\n          {transcription.description && (\n            <Text color={textSecondary}>{transcription.description}</Text>\n          )}\n        </VStack>\n\n        {/* Metadata Grid */}\n        <Grid templateColumns=\"repeat(auto-fit, minmax(200px, 1fr))\" gap={4} mb={6}>\n          <GridItem>\n            <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth={1}>\n              <CardBody>\n                <VStack align=\"start\" spacing={1}>\n                  <HStack>\n                    <FiFileText color={textSecondary} />\n                    <Text color={textSecondary} fontSize=\"sm\">File Name</Text>\n                  </HStack>\n                  <Text color={textPrimary} fontWeight=\"medium\">\n                    {transcription.fileName || 'Unknown'}\n                  </Text>\n                </VStack>\n              </CardBody>\n            </Card>\n          </GridItem>\n\n          <GridItem>\n            <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth={1}>\n              <CardBody>\n                <VStack align=\"start\" spacing={1}>\n                  <HStack>\n                    <FiMusic color={textSecondary} />\n                    <Text color={textSecondary} fontSize=\"sm\">Duration</Text>\n                  </HStack>\n                  <Text color={textPrimary} fontWeight=\"medium\">\n                    {formatDuration(transcription.duration)}\n                  </Text>\n                </VStack>\n              </CardBody>\n            </Card>\n          </GridItem>\n\n          <GridItem>\n            <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth={1}>\n              <CardBody>\n                <VStack align=\"start\" spacing={1}>\n                  <Text color={textSecondary} fontSize=\"sm\">Language</Text>\n                  <Text color={textPrimary} fontWeight=\"medium\">\n                    {transcription.detectedLanguage || 'Not detected'}\n                  </Text>\n                </VStack>\n              </CardBody>\n            </Card>\n          </GridItem>\n\n          <GridItem>\n            <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth={1}>\n              <CardBody>\n                <VStack align=\"start\" spacing={1}>\n                  <Text color={textSecondary} fontSize=\"sm\">Confidence</Text>\n                  <Text color={textPrimary} fontWeight=\"medium\">\n                    {transcription.confidence ? `${(transcription.confidence * 100).toFixed(1)}%` : 'N/A'}\n                  </Text>\n                </VStack>\n              </CardBody>\n            </Card>\n          </GridItem>\n        </Grid>\n\n        {/* Processing Alert */}\n        {(transcription.status === 'PROCESSING' || transcription.status === 'UPLOADING') && (\n          <Alert status=\"info\" borderRadius=\"lg\" mb={6}>\n            <AlertIcon />\n            <VStack align=\"start\" spacing={1} flex={1}>\n              <Text fontWeight=\"bold\">Transcription in progress</Text>\n              <Text fontSize=\"sm\">\n                Your audio is being transcribed. This page will refresh automatically every 5 seconds.\n              </Text>\n              {transcription.processingTime && (\n                <Text fontSize=\"sm\">Processing time so far: {transcription.processingTime.toFixed(2)}s</Text>\n              )}\n            </VStack>\n          </Alert>\n        )}\n\n        {/* Error Alert */}\n        {transcription.status === 'FAILED' && (\n          <Alert status=\"error\" borderRadius=\"lg\" mb={6}>\n            <AlertIcon />\n            <VStack align=\"start\" spacing={1} flex={1}>\n              <Text fontWeight=\"bold\">Transcription failed</Text>\n              <Text fontSize=\"sm\">{transcription.errorMessage || 'An error occurred during transcription'}</Text>\n              <Button\n                size=\"sm\"\n                leftIcon={<FiRefreshCw />}\n                onClick={handleRetry}\n                isLoading={retrying}\n                mt={2}\n              >\n                Retry Transcription\n              </Button>\n            </VStack>\n          </Alert>\n        )}\n\n        {/* Transcription Text */}\n        {transcription.status === 'COMPLETED' && transcription.transcription && (\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px\"\n            borderColor={cardBorder}\n            borderRadius=\"lg\"\n          >\n            <CardBody>\n              <HStack justify=\"space-between\" mb={4}>\n                <Heading size=\"md\" color={textPrimary}>\n                  Transcription\n                </Heading>\n                <Button\n                  leftIcon={<FiDownload />}\n                  size=\"sm\"\n                  onClick={handleDownload}\n                  colorScheme=\"green\"\n                >\n                  Download as TXT\n                </Button>\n              </HStack>\n              <Divider mb={4} />\n              <Textarea\n                value={transcription.transcription}\n                readOnly\n                bg=\"rgba(0, 0, 0, 0.2)\"\n                borderColor={cardBorder}\n                color={textPrimary}\n                minH=\"400px\"\n                fontFamily=\"monospace\"\n                fontSize=\"sm\"\n                p={4}\n              />\n              <VStack align=\"start\" mt={4} spacing={1}>\n                <Text color={textSecondary} fontSize=\"sm\">\n                  Word count: {transcription.transcription.split(/\\s+/).length}\n                </Text>\n                <Text color={textSecondary} fontSize=\"sm\">\n                  Character count: {transcription.transcription.length}\n                </Text>\n                {transcription.processingTime && (\n                  <Text color={textSecondary} fontSize=\"sm\">\n                    Processing time: {transcription.processingTime.toFixed(2)}s\n                  </Text>\n                )}\n              </VStack>\n            </CardBody>\n          </Card>\n        )}\n\n        {/* No transcription yet */}\n        {transcription.status === 'PENDING' && (\n          <Alert status=\"warning\" borderRadius=\"lg\">\n            <AlertIcon />\n            <Text>Transcription has not started yet. The audio file may still be uploading.</Text>\n          </Alert>\n        )}\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default TranscriptionDetails;\n"],"names":["GET_TRANSCRIPTION","gql","_templateObject","_taggedTemplateLiteral","RETRY_TRANSCRIPTION","_templateObject2","TRANSCRIBE_AUDIO","_templateObject3","DELETE_TRANSCRIPTION","_templateObject4","TranscriptionDetails","_data$transcription3","id","useParams","navigate","useNavigate","toast","useToast","colorMode","useColorMode","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","primaryColor","data","loading","error","refetch","useQuery","variables","React","_data$transcription","_data$transcription2","transcription","status","interval","setInterval","clearInterval","retryTranscription","retrying","useMutation","onCompleted","title","duration","onError","description","message","transcribeAudio","transcribing","deleteTranscription","deleting","handleDownload","_data$transcription4","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","concat","body","appendChild","click","removeChild","revokeObjectURL","handleRetry","confirm","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","transcriptionsModuleConfig","flex","alignItems","justifyContent","VStack","spacing","Spinner","size","color","Text","FooterWithFourColumns","Container","maxW","py","Alert","borderRadius","AlertIcon","align","fontWeight","fontSize","Button","leftIcon","FiArrowLeft","mt","onClick","HStack","justify","mb","variant","Tooltip","label","FiRefreshCw","handleStartTranscription","audioUrl","prompt","fullUrl","startsWith","input","transcriptionId","fileName","fileSize","isLoading","colorScheme","IconButton","icon","FiDownload","FiTrash2","handleDelete","Heading","fontFamily","brandConfig","fonts","heading","statusConfig","PENDING","FiClock","UPLOADING","PROCESSING","COMPLETED","FiCheckCircle","FAILED","FiXCircle","config","Icon","Badge","gap","p","getStatusBadge","Grid","templateColumns","GridItem","Card","borderColor","borderWidth","CardBody","FiFileText","FiMusic","seconds","mins","Math","floor","secs","toString","padStart","formatDuration","detectedLanguage","confidence","toFixed","processingTime","errorMessage","backdropFilter","boxShadow","border","Divider","Textarea","value","readOnly","split","length"],"sourceRoot":""}