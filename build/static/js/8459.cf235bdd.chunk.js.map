{"version":3,"file":"static/js/8459.cf235bdd.chunk.js","mappings":"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","sources":["pages/frontend-upgrades/UpgradeDetail.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Heading,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Card,\n  CardBody,\n  CardHeader,\n  useToast,\n  Link as ChakraLink,\n  Icon,\n  IconButton,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Select,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Textarea,\n  Progress,\n  Divider,\n  useColorMode\n} from '@chakra-ui/react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { gql } from '@apollo/client';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { FiExternalLink, FiArrowLeft, FiCheck, FiX, FiClock, FiEdit } from 'react-icons/fi';\nimport ReactMarkdown from 'react-markdown';\nimport { getColor } from '../../brandConfig';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\n\nconst GET_FRONTEND_UPGRADE = gql`\n  query GetFrontendUpgrade($id: ID!) {\n    frontendUpgrade(id: $id) {\n      id\n      title\n      description\n      gitCommitUrls\n      category\n      originTenantName\n      markdownDocumentation\n      createdDate\n      lastModified\n      createdBy\n      completedCount\n      totalTenantCount\n      isPendingForMaster\n      appliedToTenants {\n        tenantId\n        tenantName\n        status\n        appliedDate\n        appliedBy\n        notes\n      }\n    }\n  }\n`;\n\nconst MARK_UPGRADE_APPLIED = gql`\n  mutation MarkUpgradeApplied($input: MarkUpgradeAppliedInput!) {\n    markUpgradeApplied(input: $input) {\n      id\n      appliedToTenants {\n        tenantId\n        tenantName\n        status\n        appliedDate\n        appliedBy\n        notes\n      }\n    }\n  }\n`;\n\nconst categoryColors: Record<string, string> = {\n  UI_ENHANCEMENT: 'purple',\n  BUG_FIX: 'red',\n  PERFORMANCE: 'green',\n  SECURITY: 'orange',\n  FEATURE: 'blue',\n  REFACTOR: 'teal',\n  ACCESSIBILITY: 'pink',\n  OTHER: 'gray'\n};\n\nconst categoryLabels: Record<string, string> = {\n  UI_ENHANCEMENT: 'UI Enhancement',\n  BUG_FIX: 'Bug Fix',\n  PERFORMANCE: 'Performance',\n  SECURITY: 'Security',\n  FEATURE: 'Feature',\n  REFACTOR: 'Refactor',\n  ACCESSIBILITY: 'Accessibility',\n  OTHER: 'Other'\n};\n\nconst statusColors: Record<string, string> = {\n  PENDING: 'gray',\n  IN_PROGRESS: 'blue',\n  COMPLETED: 'green',\n  SKIPPED: 'orange'\n};\n\nconst statusIcons: Record<string, any> = {\n  PENDING: FiClock,\n  IN_PROGRESS: FiEdit,\n  COMPLETED: FiCheck,\n  SKIPPED: FiX\n};\n\nconst UpgradeDetail: React.FC = () => {\n  const { colorMode } = useColorMode();\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const [selectedTenantId, setSelectedTenantId] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('');\n  const [notes, setNotes] = useState('');\n\n  const { data, loading, refetch } = useQuery(GET_FRONTEND_UPGRADE, {\n    variables: { id },\n    skip: !id\n  });\n\n  const [markApplied, { loading: markLoading }] = useMutation(MARK_UPGRADE_APPLIED, {\n    onCompleted: () => {\n      toast({\n        title: 'Status Updated',\n        description: 'Successfully updated upgrade status for tenant',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      onClose();\n      setSelectedTenantId('');\n      setSelectedStatus('');\n      setNotes('');\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  });\n\n  const upgrade = data?.frontendUpgrade;\n\n  const handleMarkStatus = (tenantId: string, currentStatus: string, currentNotes?: string) => {\n    setSelectedTenantId(tenantId);\n    setSelectedStatus(currentStatus);\n    setNotes(currentNotes || '');\n    onOpen();\n  };\n\n  const handleSubmitStatus = async () => {\n    if (!selectedStatus) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please select a status',\n        status: 'warning',\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    await markApplied({\n      variables: {\n        input: {\n          upgradeId: id,\n          tenantId: selectedTenantId,\n          status: selectedStatus,\n          notes: notes || undefined\n        }\n      }\n    });\n  };\n\n  if (loading) {\n    return (\n      <Box p={6}>\n        <Text>Loading upgrade details...</Text>\n      </Box>\n    );\n  }\n\n  if (!upgrade) {\n    return (\n      <Box p={6}>\n        <Text>Upgrade not found</Text>\n      </Box>\n    );\n  }\n\n  const progressPercentage = (upgrade.completedCount / upgrade.totalTenantCount) * 100;\n\n  return (\n    <>\n      <NavbarWithCallToAction />\n      <Box p={6}>\n        <VStack spacing={6} align=\"stretch\" maxW=\"1200px\" mx=\"auto\">\n        {/* Header */}\n        <HStack justify=\"space-between\">\n          <HStack>\n            <IconButton\n              aria-label=\"Go back\"\n              icon={<FiArrowLeft />}\n              onClick={() => navigate('/frontend-upgrades')}\n              variant=\"ghost\"\n            />\n            <Heading size=\"lg\">{upgrade.title}</Heading>\n          </HStack>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => navigate(`/frontend-upgrades/${id}/edit`)}\n          >\n            Edit\n          </Button>\n        </HStack>\n\n        {/* Overview Card */}\n        <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n          <CardBody>\n            <VStack spacing={4} align=\"stretch\">\n              <HStack spacing={2}>\n                <Badge colorScheme={categoryColors[upgrade.category]}>\n                  {categoryLabels[upgrade.category]}\n                </Badge>\n                {upgrade.isPendingForMaster && (\n                  <Badge colorScheme=\"orange\">Master Pending</Badge>\n                )}\n              </HStack>\n\n              <Text>{upgrade.description}</Text>\n\n              <Divider />\n\n              <HStack spacing={8}>\n                <Box>\n                  <Text fontSize=\"sm\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>Origin</Text>\n                  <Text fontWeight=\"semibold\">{upgrade.originTenantName}</Text>\n                </Box>\n                <Box>\n                  <Text fontSize=\"sm\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>Created</Text>\n                  <Text fontWeight=\"semibold\">{new Date(upgrade.createdDate).toLocaleDateString()}</Text>\n                </Box>\n                {upgrade.createdBy && (\n                  <Box>\n                    <Text fontSize=\"sm\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>Created By</Text>\n                    <Text fontWeight=\"semibold\">{upgrade.createdBy}</Text>\n                  </Box>\n                )}\n              </HStack>\n\n              <Box>\n                <HStack justify=\"space-between\" mb={2}>\n                  <Text fontSize=\"sm\" fontWeight=\"semibold\">\n                    Progress: {upgrade.completedCount} of {upgrade.totalTenantCount} sites\n                  </Text>\n                  <Text fontSize=\"sm\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>\n                    {Math.round(progressPercentage)}%\n                  </Text>\n                </HStack>\n                <Progress\n                  value={progressPercentage}\n                  colorScheme={progressPercentage === 100 ? 'green' : 'blue'}\n                  size=\"sm\"\n                  borderRadius=\"full\"\n                />\n              </Box>\n            </VStack>\n          </CardBody>\n        </Card>\n\n        {/* Git Commits */}\n        <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n          <CardHeader>\n            <Heading size=\"md\">Git Commits</Heading>\n          </CardHeader>\n          <CardBody pt={0}>\n            <VStack align=\"stretch\" spacing={2}>\n              {upgrade.gitCommitUrls.map((url: string, index: number) => (\n                <HStack key={index}>\n                  <Text fontSize=\"sm\" fontWeight=\"semibold\">#{index + 1}</Text>\n                  <ChakraLink\n                    href={url}\n                    isExternal\n                    color=\"blue.500\"\n                    fontSize=\"sm\"\n                  >\n                    {url} <Icon as={FiExternalLink} ml={1} />\n                  </ChakraLink>\n                </HStack>\n              ))}\n            </VStack>\n          </CardBody>\n        </Card>\n\n        {/* Documentation */}\n        {upgrade.markdownDocumentation && (\n          <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n            <CardHeader>\n              <Heading size=\"md\">Documentation</Heading>\n            </CardHeader>\n            <CardBody pt={0}>\n              <Box\n                p={4}\n                border=\"1px solid\"\n                borderColor={colorMode === 'light' ? 'gray.200' : 'gray.600'}\n                borderRadius=\"md\"\n              >\n                <ReactMarkdown>{upgrade.markdownDocumentation}</ReactMarkdown>\n              </Box>\n            </CardBody>\n          </Card>\n        )}\n\n        {/* Tenant Status Table */}\n        <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n          <CardHeader>\n            <Heading size=\"md\">Deployment Status by Tenant</Heading>\n          </CardHeader>\n          <CardBody pt={0}>\n            <Box overflowX=\"auto\">\n              <Table variant=\"simple\">\n                <Thead>\n                  <Tr>\n                    <Th>Tenant</Th>\n                    <Th>Status</Th>\n                    <Th>Applied Date</Th>\n                    <Th>Applied By</Th>\n                    <Th>Notes</Th>\n                    <Th>Actions</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {upgrade.appliedToTenants.map((tenant: any) => (\n                    <Tr key={tenant.tenantId}>\n                      <Td fontWeight=\"semibold\">{tenant.tenantName}</Td>\n                      <Td>\n                        <Badge\n                          colorScheme={statusColors[tenant.status]}\n                          display=\"flex\"\n                          alignItems=\"center\"\n                          gap={1}\n                          w=\"fit-content\"\n                        >\n                          <Icon as={statusIcons[tenant.status]} />\n                          {tenant.status}\n                        </Badge>\n                      </Td>\n                      <Td>\n                        {tenant.appliedDate\n                          ? new Date(tenant.appliedDate).toLocaleDateString()\n                          : '-'}\n                      </Td>\n                      <Td>{tenant.appliedBy || '-'}</Td>\n                      <Td maxW=\"200px\" isTruncated>\n                        {tenant.notes || '-'}\n                      </Td>\n                      <Td>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleMarkStatus(tenant.tenantId, tenant.status, tenant.notes)}\n                        >\n                          Update\n                        </Button>\n                      </Td>\n                    </Tr>\n                  ))}\n                </Tbody>\n              </Table>\n            </Box>\n          </CardBody>\n        </Card>\n      </VStack>\n\n      {/* Update Status Modal */}\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Update Status</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack spacing={4} align=\"stretch\">\n              <Text fontWeight=\"semibold\">\n                {upgrade.appliedToTenants.find((t: any) => t.tenantId === selectedTenantId)?.tenantName}\n              </Text>\n              <Select\n                value={selectedStatus}\n                onChange={(e) => setSelectedStatus(e.target.value)}\n              >\n                <option value=\"\">Select Status</option>\n                <option value=\"PENDING\">Pending</option>\n                <option value=\"IN_PROGRESS\">In Progress</option>\n                <option value=\"COMPLETED\">Completed</option>\n                <option value=\"SKIPPED\">Skipped</option>\n              </Select>\n              <Textarea\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Optional notes about this status update...\"\n                rows={3}\n              />\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button\n              bg={getColor('secondary', colorMode)}\n              color=\"white\"\n              onClick={handleSubmitStatus}\n              isLoading={markLoading}\n              _hover={{ bg: getColor('secondaryHover', colorMode) }}\n            >\n              Update Status\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      </Box>\n      <FooterWithFourColumns />\n    </>\n  );\n};\n\nexport default UpgradeDetail;\n"],"names":["GET_FRONTEND_UPGRADE","gql","_templateObject","_taggedTemplateLiteral","MARK_UPGRADE_APPLIED","_templateObject2","categoryColors","UI_ENHANCEMENT","BUG_FIX","PERFORMANCE","SECURITY","FEATURE","REFACTOR","ACCESSIBILITY","OTHER","categoryLabels","statusColors","PENDING","IN_PROGRESS","COMPLETED","SKIPPED","statusIcons","FiClock","FiEdit","FiCheck","FiX","UpgradeDetail","_upgrade$appliedToTen","colorMode","useColorMode","id","useParams","navigate","useNavigate","toast","useToast","isOpen","onOpen","onClose","useDisclosure","selectedTenantId","setSelectedTenantId","useState","selectedStatus","setSelectedStatus","notes","setNotes","data","loading","refetch","useQuery","variables","skip","markApplied","markLoading","useMutation","onCompleted","title","description","status","duration","isClosable","onError","error","message","upgrade","frontendUpgrade","_jsx","Box","p","children","Text","progressPercentage","completedCount","totalTenantCount","_jsxs","_Fragment","NavbarWithCallToAction","VStack","spacing","align","maxW","mx","HStack","justify","IconButton","icon","FiArrowLeft","onClick","variant","Heading","size","Button","concat","Card","bg","getColor","CardBody","Badge","colorScheme","category","isPendingForMaster","Divider","fontSize","color","fontWeight","originTenantName","Date","createdDate","toLocaleDateString","createdBy","mb","Math","round","Progress","value","borderRadius","CardHeader","pt","gitCommitUrls","map","url","index","ChakraLink","href","isExternal","Icon","as","FiExternalLink","ml","markdownDocumentation","border","borderColor","ReactMarkdown","overflowX","Table","Thead","Tr","Th","Tbody","appliedToTenants","tenant","Td","tenantName","display","alignItems","gap","w","appliedDate","appliedBy","isTruncated","handleMarkStatus","tenantId","currentStatus","currentNotes","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","find","t","Select","onChange","e","target","Textarea","placeholder","rows","ModalFooter","mr","async","input","upgradeId","undefined","isLoading","_hover","FooterWithFourColumns"],"sourceRoot":""}