{"version":3,"file":"static/js/6255.adef6387.chunk.js","mappings":"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","sources":["pages/transcriptions/NewTranscription.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport {\n  Box,\n  Container,\n  Heading,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Card,\n  CardBody,\n  useToast,\n  VStack,\n  Text,\n  Progress,\n  HStack,\n  Icon,\n  Alert,\n  AlertIcon,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { FiUpload, FiFile, FiArrowLeft } from 'react-icons/fi';\nimport { getColor, brandConfig } from '../../brandConfig';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport transcriptionsModuleConfig from './moduleConfig';\n\nconst CREATE_TRANSCRIPTION = gql`\n  mutation CreateTranscription($input: TranscriptionInput!) {\n    createTranscription(input: $input) {\n      id\n      title\n      status\n    }\n  }\n`;\n\nconst UPLOAD_TO_PINATA = gql`\n  mutation UploadToPinata($file: Upload!) {\n    uploadToPinata(file: $file)\n  }\n`;\n\nconst TRANSCRIBE_AUDIO = gql`\n  mutation TranscribeAudio($input: TranscriptionUploadInput!) {\n    transcribeAudio(input: $input) {\n      id\n      status\n      transcription\n    }\n  }\n`;\n\nconst NewTranscription: React.FC = () => {\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { user } = useAuth();\n  const { colorMode } = useColorMode();\n\n  // Brand styling\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n  });\n\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [currentStep, setCurrentStep] = useState<'form' | 'uploading' | 'transcribing' | 'complete'>('form');\n\n  const [createTranscription] = useMutation(CREATE_TRANSCRIPTION);\n  const [uploadToPinata] = useMutation(UPLOAD_TO_PINATA);\n  const [transcribeAudio] = useMutation(TRANSCRIBE_AUDIO);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setSelectedFile(file);\n\n      // Auto-fill title if empty\n      if (!formData.title) {\n        setFormData({\n          ...formData,\n          title: file.name.replace(/\\.[^/.]+$/, ''), // Remove extension\n        });\n      }\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!selectedFile) {\n      toast({\n        title: 'No file selected',\n        description: 'Please select an audio or video file to transcribe',\n        status: 'warning',\n        duration: 3000,\n      });\n      return;\n    }\n\n    if (!user?.id) {\n      toast({\n        title: 'Not authenticated',\n        description: 'Please log in to create transcriptions',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    try {\n      // Step 1: Create transcription record\n      setCurrentStep('form');\n      setUploadProgress(10);\n\n      const { data: transcriptionData } = await createTranscription({\n        variables: {\n          input: {\n            title: formData.title,\n            description: formData.description,\n            owner: user.id,\n          },\n        },\n      });\n\n      const transcriptionId = transcriptionData.createTranscription.id;\n      setUploadProgress(20);\n\n      // Step 2: Upload file to Pinata\n      setCurrentStep('uploading');\n      setUploadProgress(30);\n\n      const { data: pinataData } = await uploadToPinata({\n        variables: {\n          file: selectedFile,\n        },\n      });\n\n      // uploadToPinata returns just the IPFS hash string\n      const ipfsHash = pinataData.uploadToPinata;\n      const pinataUrl = ipfsHash.startsWith('http')\n        ? ipfsHash\n        : `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;\n\n      setUploadProgress(60);\n\n      // Step 3: Trigger transcription\n      setCurrentStep('transcribing');\n      setUploadProgress(70);\n\n      await transcribeAudio({\n        variables: {\n          input: {\n            transcriptionId,\n            audioUrl: pinataUrl,\n            fileName: selectedFile.name,\n            fileSize: selectedFile.size,\n          },\n        },\n      });\n\n      setUploadProgress(100);\n      setCurrentStep('complete');\n\n      toast({\n        title: 'Transcription started!',\n        description: 'Your audio is being transcribed. This may take a few minutes.',\n        status: 'success',\n        duration: 5000,\n      });\n\n      // Navigate to the transcription details page\n      setTimeout(() => {\n        navigate(`/transcriptions/${transcriptionId}`);\n      }, 1500);\n\n    } catch (error: any) {\n      console.error('Error creating transcription:', error);\n      setCurrentStep('form');\n      setUploadProgress(0);\n\n      toast({\n        title: 'Error creating transcription',\n        description: error.message || 'An unexpected error occurred',\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  const getStepMessage = () => {\n    switch (currentStep) {\n      case 'uploading':\n        return '📤 Uploading file to IPFS...';\n      case 'transcribing':\n        return '🍋 Starting LemonFox transcription...';\n      case 'complete':\n        return '✅ Transcription started successfully!';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={transcriptionsModuleConfig} />\n\n      <Container maxW=\"container.md\" py={8} flex=\"1\">\n        <Button\n          leftIcon={<FiArrowLeft />}\n          variant=\"ghost\"\n          color={textSecondary}\n          mb={4}\n          onClick={() => navigate('/transcriptions')}\n        >\n          Back to Transcriptions\n        </Button>\n\n        <Heading\n          mb={6}\n          color={textPrimary}\n          fontFamily={brandConfig.fonts.heading}\n        >\n          🎤 New Transcription\n        </Heading>\n\n        <Card\n          bg={cardGradientBg}\n          backdropFilter=\"blur(10px)\"\n          boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n          border=\"1px\"\n          borderColor={cardBorder}\n          borderRadius=\"lg\"\n        >\n          <CardBody>\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4}>\n                {/* Title */}\n                <FormControl isRequired>\n                  <FormLabel color={textPrimary}>Title</FormLabel>\n                  <Input\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    value={formData.title}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      title: e.target.value,\n                    })}\n                    placeholder=\"Enter transcription title\"\n                  />\n                </FormControl>\n\n                {/* Description */}\n                <FormControl>\n                  <FormLabel color={textPrimary}>Description (optional)</FormLabel>\n                  <Textarea\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    value={formData.description}\n                    onChange={(e) => setFormData({\n                      ...formData,\n                      description: e.target.value,\n                    })}\n                    placeholder=\"Add a description for this transcription\"\n                    rows={3}\n                  />\n                </FormControl>\n\n                {/* File Upload */}\n                <FormControl isRequired>\n                  <FormLabel color={textPrimary}>Audio/Video File</FormLabel>\n                  <VStack spacing={2} align=\"stretch\">\n                    <Input\n                      type=\"file\"\n                      accept=\"audio/*,video/*,.mp3,.wav,.flac,.aac,.opus,.ogg,.m4a,.mp4,.mpeg,.mov,.webm\"\n                      onChange={handleFileChange}\n                      display=\"none\"\n                      id=\"file-upload\"\n                    />\n                    <Button\n                      as=\"label\"\n                      htmlFor=\"file-upload\"\n                      leftIcon={<FiUpload />}\n                      variant=\"outline\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                      _hover={{ bg: 'rgba(255, 255, 255, 0.05)' }}\n                      cursor=\"pointer\"\n                    >\n                      Choose File\n                    </Button>\n\n                    {selectedFile && (\n                      <HStack\n                        p={3}\n                        bg=\"rgba(255, 255, 255, 0.03)\"\n                        borderRadius=\"md\"\n                        borderWidth={1}\n                        borderColor={cardBorder}\n                      >\n                        <Icon as={FiFile} color={primaryColor} />\n                        <VStack align=\"start\" spacing={0} flex={1}>\n                          <Text color={textPrimary} fontSize=\"sm\" fontWeight=\"medium\">\n                            {selectedFile.name}\n                          </Text>\n                          <Text color={textSecondary} fontSize=\"xs\">\n                            {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n                          </Text>\n                        </VStack>\n                      </HStack>\n                    )}\n                  </VStack>\n                </FormControl>\n\n                {/* Progress */}\n                {uploadProgress > 0 && (\n                  <VStack w=\"full\" spacing={2}>\n                    <Progress\n                      value={uploadProgress}\n                      w=\"full\"\n                      colorScheme=\"blue\"\n                      borderRadius=\"full\"\n                      hasStripe\n                      isAnimated\n                    />\n                    <Text color={textSecondary} fontSize=\"sm\">\n                      {getStepMessage()}\n                    </Text>\n                  </VStack>\n                )}\n\n                {/* Info Alert */}\n                <Alert status=\"info\" borderRadius=\"md\">\n                  <AlertIcon />\n                  <VStack align=\"start\" spacing={1} fontSize=\"sm\">\n                    <Text fontWeight=\"bold\">Supported formats:</Text>\n                    <Text>mp3, wav, flac, aac, opus, ogg, m4a, mp4, mpeg, mov, webm</Text>\n                    <Text mt={2} fontWeight=\"bold\">Processing time:</Text>\n                    <Text>Typically 1-2 minutes for every 30 minutes of audio</Text>\n                  </VStack>\n                </Alert>\n\n                {/* Submit Button */}\n                <Button\n                  type=\"submit\"\n                  bg={primaryColor}\n                  color=\"white\"\n                  _hover={{ bg: primaryHover }}\n                  isLoading={currentStep !== 'form'}\n                  loadingText={getStepMessage()}\n                  width=\"full\"\n                  size=\"lg\"\n                  leftIcon={<FiUpload />}\n                >\n                  Upload & Transcribe\n                </Button>\n              </VStack>\n            </form>\n          </CardBody>\n        </Card>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default NewTranscription;\n"],"names":["CREATE_TRANSCRIPTION","gql","_templateObject","_taggedTemplateLiteral","UPLOAD_TO_PINATA","_templateObject2","TRANSCRIBE_AUDIO","_templateObject3","NewTranscription","navigate","useNavigate","toast","useToast","user","useAuth","colorMode","useColorMode","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","formData","setFormData","useState","title","description","selectedFile","setSelectedFile","uploadProgress","setUploadProgress","currentStep","setCurrentStep","createTranscription","useMutation","uploadToPinata","transcribeAudio","getStepMessage","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","transcriptionsModuleConfig","Container","maxW","py","flex","Button","leftIcon","FiArrowLeft","variant","color","mb","onClick","Heading","fontFamily","brandConfig","fonts","heading","Card","backdropFilter","boxShadow","border","borderColor","borderRadius","CardBody","onSubmit","async","e","preventDefault","id","data","transcriptionData","variables","input","owner","transcriptionId","pinataData","file","ipfsHash","pinataUrl","startsWith","concat","audioUrl","fileName","name","fileSize","size","status","duration","setTimeout","error","console","message","VStack","spacing","FormControl","isRequired","FormLabel","Input","_placeholder","value","onChange","_objectSpread","target","placeholder","Textarea","rows","align","type","accept","files","replace","as","htmlFor","FiUpload","_hover","cursor","HStack","p","borderWidth","Icon","FiFile","Text","fontSize","fontWeight","toFixed","w","Progress","colorScheme","hasStripe","isAnimated","Alert","AlertIcon","mt","isLoading","loadingText","width","FooterWithFourColumns"],"sourceRoot":""}