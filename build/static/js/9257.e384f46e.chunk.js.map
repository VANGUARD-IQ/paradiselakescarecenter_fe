{"version":3,"file":"static/js/9257.e384f46e.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/react/dist/esm/stat/stat-group.mjs","pages/frontend-upgrades/UpgradesList.tsx"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst StatGroup = forwardRef(\n  function StatGroup2(props, ref) {\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...props,\n        ref,\n        role: \"group\",\n        className: cx(\"chakra-stat__group\", props.className),\n        __css: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-around\",\n          alignItems: \"flex-start\"\n        }\n      }\n    );\n  }\n);\nStatGroup.displayName = \"StatGroup\";\n\nexport { StatGroup };\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Heading,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Card,\n  CardBody,\n  CardHeader,\n  Progress,\n  Select,\n  useToast,\n  Link as ChakraLink,\n  Wrap,\n  WrapItem,\n  Icon,\n  Flex,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatGroup,\n  useColorMode\n} from '@chakra-ui/react';\nimport { useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom';\nimport { FiExternalLink, FiPlus, FiFilter } from 'react-icons/fi';\nimport { getColor } from '../../brandConfig';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\n\nconst GET_FRONTEND_UPGRADES = gql`\n  query GetFrontendUpgrades($category: UpgradeCategory, $status: UpgradeStatus, $tenantId: ID) {\n    frontendUpgrades(category: $category, status: $status, tenantId: $tenantId) {\n      id\n      title\n      description\n      gitCommitUrls\n      category\n      originTenantName\n      createdDate\n      completedCount\n      totalTenantCount\n      isPendingForMaster\n      appliedToTenants {\n        tenantId\n        tenantName\n        status\n        appliedDate\n      }\n    }\n  }\n`;\n\nconst GET_UPGRADE_STATS = gql`\n  query GetUpgradeStats {\n    frontendUpgradeStats {\n      totalUpgrades\n      pendingUpgrades\n      completedUpgrades\n      inProgressUpgrades\n    }\n  }\n`;\n\nconst categoryColors: Record<string, string> = {\n  UI_ENHANCEMENT: 'purple',\n  BUG_FIX: 'red',\n  PERFORMANCE: 'green',\n  SECURITY: 'orange',\n  FEATURE: 'blue',\n  REFACTOR: 'teal',\n  ACCESSIBILITY: 'pink',\n  OTHER: 'gray'\n};\n\nconst categoryLabels: Record<string, string> = {\n  UI_ENHANCEMENT: 'UI Enhancement',\n  BUG_FIX: 'Bug Fix',\n  PERFORMANCE: 'Performance',\n  SECURITY: 'Security',\n  FEATURE: 'Feature',\n  REFACTOR: 'Refactor',\n  ACCESSIBILITY: 'Accessibility',\n  OTHER: 'Other'\n};\n\nconst UpgradesList: React.FC = () => {\n  const { colorMode } = useColorMode();\n  const navigate = useNavigate();\n  const [categoryFilter, setCategoryFilter] = useState<string>('');\n  const [statusFilter, setStatusFilter] = useState<string>('');\n\n  const { data, loading, error } = useQuery(GET_FRONTEND_UPGRADES, {\n    variables: {\n      category: categoryFilter || undefined,\n      status: statusFilter || undefined\n    }\n  });\n\n  const { data: statsData } = useQuery(GET_UPGRADE_STATS);\n\n  const upgrades = data?.frontendUpgrades || [];\n  const stats = statsData?.frontendUpgradeStats;\n\n  const getProgressColor = (completedCount: number, totalCount: number) => {\n    const percentage = (completedCount / totalCount) * 100;\n    if (percentage === 100) return 'green';\n    if (percentage >= 50) return 'blue';\n    if (percentage > 0) return 'yellow';\n    return 'gray';\n  };\n\n  return (\n    <>\n      <NavbarWithCallToAction />\n      <Box p={6}>\n        <VStack spacing={6} align=\"stretch\">\n        {/* Header */}\n        <Flex justify=\"space-between\" align=\"center\">\n          <Heading size=\"lg\">Frontend Upgrades</Heading>\n          <Button\n            leftIcon={<FiPlus />}\n            bg={getColor('secondary', colorMode)}\n            color=\"white\"\n            onClick={() => navigate('/frontend-upgrades/new')}\n            _hover={{ bg: getColor('secondaryHover', colorMode) }}\n          >\n            Track New Upgrade\n          </Button>\n        </Flex>\n\n        {/* Stats */}\n        {stats && (\n          <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n            <CardBody>\n              <StatGroup>\n                <Stat>\n                  <StatLabel>Total Upgrades</StatLabel>\n                  <StatNumber>{stats.totalUpgrades}</StatNumber>\n                </Stat>\n                <Stat>\n                  <StatLabel>Pending</StatLabel>\n                  <StatNumber color=\"orange.500\">{stats.pendingUpgrades}</StatNumber>\n                </Stat>\n                <Stat>\n                  <StatLabel>In Progress</StatLabel>\n                  <StatNumber color=\"blue.500\">{stats.inProgressUpgrades}</StatNumber>\n                </Stat>\n                <Stat>\n                  <StatLabel>Completed</StatLabel>\n                  <StatNumber color=\"green.500\">{stats.completedUpgrades}</StatNumber>\n                </Stat>\n              </StatGroup>\n            </CardBody>\n          </Card>\n        )}\n\n        {/* Filters */}\n        <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n          <CardBody>\n            <HStack spacing={4}>\n              <Icon as={FiFilter} />\n              <Select\n                placeholder=\"All Categories\"\n                value={categoryFilter}\n                onChange={(e) => setCategoryFilter(e.target.value)}\n                maxW=\"250px\"\n              >\n                {Object.entries(categoryLabels).map(([key, label]) => (\n                  <option key={key} value={key}>{label}</option>\n                ))}\n              </Select>\n              <Select\n                placeholder=\"All Statuses\"\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                maxW=\"250px\"\n              >\n                <option value=\"PENDING\">Pending</option>\n                <option value=\"IN_PROGRESS\">In Progress</option>\n                <option value=\"COMPLETED\">Completed</option>\n                <option value=\"SKIPPED\">Skipped</option>\n              </Select>\n              {(categoryFilter || statusFilter) && (\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setCategoryFilter('');\n                    setStatusFilter('');\n                  }}\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Upgrades List */}\n        {loading && <Text>Loading upgrades...</Text>}\n        {error && (\n          <Text color=\"red.500\">Error loading upgrades: {error.message}</Text>\n        )}\n\n        {!loading && !error && upgrades.length === 0 && (\n          <Card bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}>\n            <CardBody>\n              <VStack spacing={4} py={8}>\n                <Text fontSize=\"lg\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>\n                  No upgrades tracked yet\n                </Text>\n                <Button\n                  leftIcon={<FiPlus />}\n                  bg={getColor('secondary', colorMode)}\n                  color=\"white\"\n                  onClick={() => navigate('/frontend-upgrades/new')}\n                  _hover={{ bg: getColor('secondaryHover', colorMode) }}\n                >\n                  Track Your First Upgrade\n                </Button>\n              </VStack>\n            </CardBody>\n          </Card>\n        )}\n\n        {upgrades.map((upgrade: any) => (\n          <Card\n            key={upgrade.id}\n            bg={colorMode === 'light' ? 'white' : getColor('background.darkSurface', colorMode)}\n            _hover={{\n              shadow: 'lg',\n              transform: 'translateY(-2px)',\n              transition: 'all 0.2s'\n            }}\n            cursor=\"pointer\"\n            onClick={() => navigate(`/frontend-upgrades/${upgrade.id}`)}\n          >\n            <CardHeader>\n              <VStack align=\"stretch\" spacing={2}>\n                <HStack justify=\"space-between\">\n                  <Heading size=\"md\">{upgrade.title}</Heading>\n                  <Wrap>\n                    <WrapItem>\n                      <Badge colorScheme={categoryColors[upgrade.category]}>\n                        {categoryLabels[upgrade.category]}\n                      </Badge>\n                    </WrapItem>\n                    {upgrade.isPendingForMaster && (\n                      <WrapItem>\n                        <Badge colorScheme=\"orange\">Master Pending</Badge>\n                      </WrapItem>\n                    )}\n                  </Wrap>\n                </HStack>\n                <Text fontSize=\"sm\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>\n                  Origin: {upgrade.originTenantName}\n                </Text>\n              </VStack>\n            </CardHeader>\n            <CardBody pt={0}>\n              <VStack align=\"stretch\" spacing={4}>\n                <Text>{upgrade.description}</Text>\n\n                {/* Git Commit Links */}\n                {upgrade.gitCommitUrls && upgrade.gitCommitUrls.length > 0 && (\n                  <HStack spacing={2} flexWrap=\"wrap\">\n                    <Text fontSize=\"sm\" fontWeight=\"semibold\">Commits:</Text>\n                    {upgrade.gitCommitUrls.map((url: string, index: number) => (\n                      <ChakraLink\n                        key={index}\n                        href={url}\n                        isExternal\n                        fontSize=\"sm\"\n                        color=\"blue.500\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        #{index + 1} <Icon as={FiExternalLink} ml={1} />\n                      </ChakraLink>\n                    ))}\n                  </HStack>\n                )}\n\n                {/* Progress */}\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\" fontWeight=\"semibold\">\n                      Applied to {upgrade.completedCount} of {upgrade.totalTenantCount} sites\n                    </Text>\n                    <Text fontSize=\"sm\" color={colorMode === 'light' ? 'gray.600' : 'gray.400'}>\n                      {Math.round((upgrade.completedCount / upgrade.totalTenantCount) * 100)}%\n                    </Text>\n                  </HStack>\n                  <Progress\n                    value={(upgrade.completedCount / upgrade.totalTenantCount) * 100}\n                    colorScheme={getProgressColor(upgrade.completedCount, upgrade.totalTenantCount)}\n                    size=\"sm\"\n                    borderRadius=\"full\"\n                  />\n                </Box>\n\n                {/* Date */}\n                <Text fontSize=\"xs\" color={colorMode === 'light' ? 'gray.500' : 'gray.500'}>\n                  Created: {new Date(upgrade.createdDate).toLocaleDateString()}\n                </Text>\n              </VStack>\n            </CardBody>\n          </Card>\n        ))}\n        </VStack>\n      </Box>\n      <FooterWithFourColumns />\n    </>\n  );\n};\n\nexport default UpgradesList;\n"],"names":["StatGroup","forwardRef","props","ref","jsx","chakra","div","_objectSpread","role","className","cx","__css","display","flexWrap","justifyContent","alignItems","displayName","GET_FRONTEND_UPGRADES","gql","_templateObject","_taggedTemplateLiteral","GET_UPGRADE_STATS","_templateObject2","categoryColors","UI_ENHANCEMENT","BUG_FIX","PERFORMANCE","SECURITY","FEATURE","REFACTOR","ACCESSIBILITY","OTHER","categoryLabels","UpgradesList","colorMode","useColorMode","navigate","useNavigate","categoryFilter","setCategoryFilter","useState","statusFilter","setStatusFilter","data","loading","error","useQuery","variables","category","undefined","status","statsData","upgrades","frontendUpgrades","stats","frontendUpgradeStats","getProgressColor","completedCount","totalCount","percentage","_jsxs","_Fragment","children","_jsx","NavbarWithCallToAction","Box","p","VStack","spacing","align","Flex","justify","Heading","size","Button","leftIcon","FiPlus","bg","getColor","color","onClick","_hover","Card","CardBody","Stat","StatLabel","StatNumber","totalUpgrades","pendingUpgrades","inProgressUpgrades","completedUpgrades","HStack","Icon","as","FiFilter","Select","placeholder","value","onChange","e","target","maxW","Object","entries","map","_ref","key","label","variant","Text","message","length","py","fontSize","upgrade","shadow","transform","transition","cursor","concat","id","CardHeader","title","Wrap","WrapItem","Badge","colorScheme","isPendingForMaster","originTenantName","pt","description","gitCommitUrls","fontWeight","url","index","ChakraLink","href","isExternal","stopPropagation","FiExternalLink","ml","mb","totalTenantCount","Math","round","Progress","borderRadius","Date","createdDate","toLocaleDateString","FooterWithFourColumns"],"sourceRoot":""}