{"version":3,"file":"static/js/8056.1733ce50.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/react/dist/esm/stat/stat-arrow.mjs","pages/opportunities/OpportunityDashboard.tsx"],"sourcesContent":["'use client';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { useStatStyles } from './stat.mjs';\nimport { Icon } from '../icon/icon.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst StatDownArrow = (props) => /* @__PURE__ */ jsx(Icon, { color: \"red.400\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z\"\n  }\n) });\nStatDownArrow.displayName = \"StatDownArrow\";\nfunction StatUpArrow(props) {\n  return /* @__PURE__ */ jsx(Icon, { color: \"green.400\", ...props, children: /* @__PURE__ */ jsx(\n    \"path\",\n    {\n      fill: \"currentColor\",\n      d: \"M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z\"\n    }\n  ) });\n}\nStatUpArrow.displayName = \"StatUpArrow\";\nfunction StatArrow(props) {\n  const { type, \"aria-label\": ariaLabel, ...rest } = props;\n  const styles = useStatStyles();\n  const BaseIcon = type === \"increase\" ? StatUpArrow : StatDownArrow;\n  const defaultAriaLabel = type === \"increase\" ? \"increased by\" : \"decreased by\";\n  const label = ariaLabel || defaultAriaLabel;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsx(chakra.span, { srOnly: true, children: label }),\n    /* @__PURE__ */ jsx(BaseIcon, { \"aria-hidden\": true, ...rest, __css: styles.icon })\n  ] });\n}\nStatArrow.displayName = \"StatArrow\";\n\nexport { StatArrow, StatDownArrow, StatUpArrow };\n","import React from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  Button,\n  VStack,\n  HStack,\n  Text,\n  useToast,\n  SimpleGrid,\n  Card,\n  CardBody,\n  CardHeader,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  StatArrow,\n  Progress,\n  Flex,\n  Icon,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  IconButton,\n  Tooltip,\n  Badge,\n  Divider,\n  Center,\n  Spinner,\n  useColorMode\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport {\n  FiDollarSign,\n  FiTrendingUp,\n  FiTarget,\n  FiPercent,\n  FiAlertCircle,\n  FiPlus,\n  FiCheckCircle,\n  FiClock,\n  FiArrowRight,\n  FiRefreshCw,\n  FiSend,\n  FiPhone,\n  FiMail,\n  FiCalendar,\n  FiFileText\n} from 'react-icons/fi';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport opportunitiesModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL Queries\nconst GET_PIPELINE_METRICS = gql`\n  query GetPipelineMetrics {\n    pipelineMetrics {\n      totalOpportunities\n      totalValue\n      averageDealSize\n      conversionRate\n      averageSalesCycle\n      expectedRevenue\n      stageMetrics {\n        stageName\n        count\n        value\n        conversionToNext\n        averageTimeInStage\n      }\n      monthlyTrend {\n        month\n        created\n        won\n        lost\n        value\n      }\n      healthScore\n      suggestedActions {\n        type\n        title\n        description\n        priority\n      }\n    }\n  }\n`;\n\nconst GET_REVENUE_TARGETS = gql`\n  query GetRevenueTargets {\n    revenueTargets {\n      monthly\n      quarterly\n      yearly\n      currentMonthProgress\n      currentQuarterProgress\n      currentYearProgress\n      requiredOpportunities {\n        monthly\n        quarterly\n        yearly\n      }\n    }\n  }\n`;\n\nconst CREATE_OPPORTUNITY_TASK = gql`\n  mutation CreateOpportunityTask($input: OpportunityTaskInput!) {\n    createOpportunityTask(input: $input) {\n      id\n      title\n      description\n      priority\n      dueDate\n    }\n  }\n`;\n\ninterface TaskTemplate {\n  icon: any;\n  title: string;\n  description: string;\n  priority: string;\n  category: string;\n}\n\nconst taskTemplates: TaskTemplate[] = [\n  {\n    icon: FiSend,\n    title: \"Send initial proposal\",\n    description: \"Draft and send a proposal to the client outlining your solution\",\n    priority: \"HIGH\",\n    category: \"proposal\"\n  },\n  {\n    icon: FiPhone,\n    title: \"Schedule discovery call\",\n    description: \"Book a call to understand client needs and pain points\",\n    priority: \"HIGH\",\n    category: \"discovery\"\n  },\n  {\n    icon: FiMail,\n    title: \"Send follow-up email\",\n    description: \"Follow up on your last interaction with the client\",\n    priority: \"MEDIUM\",\n    category: \"followup\"\n  },\n  {\n    icon: FiCalendar,\n    title: \"Schedule product demo\",\n    description: \"Book a demo to showcase your solution to the client\",\n    priority: \"HIGH\",\n    category: \"demo\"\n  },\n  {\n    icon: FiFileText,\n    title: \"Prepare contract\",\n    description: \"Draft the contract terms and pricing for client review\",\n    priority: \"HIGH\",\n    category: \"closing\"\n  },\n  {\n    icon: FiDollarSign,\n    title: \"Send quote\",\n    description: \"Provide detailed pricing and payment terms\",\n    priority: \"HIGH\",\n    category: \"pricing\"\n  }\n];\n\nconst PipelineHealthIndicator: React.FC<{ score: number }> = ({ score }) => {\n  const { colorMode } = useColorMode();\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  const getHealthColor = (score: number) => {\n    if (score >= 80) return 'green';\n    if (score >= 60) return 'yellow';\n    if (score >= 40) return 'orange';\n    return 'red';\n  };\n\n  const getHealthLabel = (score: number) => {\n    if (score >= 80) return 'Excellent';\n    if (score >= 60) return 'Good';\n    if (score >= 40) return 'Needs Attention';\n    return 'Critical';\n  };\n\n  return (\n    <Card\n      bg={cardGradientBg}\n      backdropFilter=\"blur(10px)\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      border=\"1px\"\n      borderColor={cardBorder}\n      borderRadius=\"lg\"\n    >\n      <CardBody>\n        <VStack spacing={3}>\n          <Text fontSize=\"sm\" fontWeight=\"bold\" color={textPrimary}>\n            Pipeline Health\n          </Text>\n          <Box position=\"relative\" width=\"120px\" height=\"120px\">\n            <svg width=\"120\" height=\"120\" style={{ transform: 'rotate(-90deg)' }}>\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"50\"\n                stroke=\"#E2E8F0\"\n                strokeWidth=\"10\"\n                fill=\"none\"\n              />\n              <circle\n                cx=\"60\"\n                cy=\"60\"\n                r=\"50\"\n                stroke={`var(--chakra-colors-${getHealthColor(score)}-500)`}\n                strokeWidth=\"10\"\n                fill=\"none\"\n                strokeDasharray={`${Math.PI * 100}`}\n                strokeDashoffset={`${Math.PI * 100 * (1 - score / 100)}`}\n                style={{ transition: 'stroke-dashoffset 0.5s ease' }}\n              />\n            </svg>\n            <Center position=\"absolute\" top=\"0\" left=\"0\" width=\"120px\" height=\"120px\">\n              <VStack spacing={0}>\n                <Text fontSize=\"2xl\" fontWeight=\"bold\" color={`${getHealthColor(score)}.500`}>\n                  {score}%\n                </Text>\n                <Text fontSize=\"xs\" color={textMuted}>\n                  {getHealthLabel(score)}\n                </Text>\n              </VStack>\n            </Center>\n          </Box>\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nconst ConversionFunnel: React.FC<{ stageMetrics: any[] }> = ({ stageMetrics }) => {\n  const maxValue = Math.max(...stageMetrics.map(s => s.value));\n  const { colorMode } = useColorMode();\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  return (\n    <Card\n      bg={cardGradientBg}\n      backdropFilter=\"blur(10px)\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      border=\"1px\"\n      borderColor={cardBorder}\n      borderRadius=\"lg\"\n    >\n      <CardHeader>\n        <Text fontWeight=\"bold\" color={textPrimary}>Conversion Funnel</Text>\n      </CardHeader>\n      <CardBody>\n        <VStack spacing={2} align=\"stretch\">\n          {stageMetrics.map((stage) => (\n            <Box key={stage.stageName}>\n              <HStack justify=\"space-between\" mb={1}>\n                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                  {stage.stageName}\n                </Text>\n                <HStack spacing={4}>\n                  <Badge colorScheme=\"blue\" bg={colorMode === 'light' ? 'blue.100' : 'rgba(56, 178, 255, 0.2)'} color={colorMode === 'light' ? 'blue.800' : 'white'}>{stage.count} deals</Badge>\n                  <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\">\n                    ${stage.value >= 1000\n                      ? `${(stage.value / 1000).toFixed(1)}k`\n                      : stage.value.toFixed(0)}\n                  </Text>\n                </HStack>\n              </HStack>\n              <Progress\n                value={(stage.value / maxValue) * 100}\n                size=\"sm\"\n                colorScheme=\"blue\"\n                borderRadius=\"full\"\n              />\n              {stage.conversionToNext > 0 && (\n                <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                  {stage.conversionToNext}% convert to next stage\n                </Text>\n              )}\n            </Box>\n          ))}\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nconst TaskSuggestions: React.FC<{ onCreateTask: (template: TaskTemplate) => void }> = ({ onCreateTask }) => {\n  const { colorMode } = useColorMode();\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  return (\n    <Card\n      bg={cardGradientBg}\n      backdropFilter=\"blur(10px)\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      border=\"1px\"\n      borderColor={cardBorder}\n      borderRadius=\"lg\"\n    >\n      <CardHeader>\n        <HStack justify=\"space-between\">\n          <Text fontWeight=\"bold\" color={textPrimary}>Suggested Actions</Text>\n          <Tooltip label=\"Create tasks to move deals forward\">\n            <Icon as={FiAlertCircle} color={textMuted} />\n          </Tooltip>\n        </HStack>\n      </CardHeader>\n      <CardBody>\n        <VStack spacing={3} align=\"stretch\">\n          {taskTemplates.slice(0, 4).map((template, index) => (\n            <HStack\n              key={index}\n              p={3}\n              borderWidth=\"1px\"\n              borderColor=\"rgba(255, 255, 255, 0.2)\"\n              borderRadius=\"md\"\n              _hover={{ bg: 'rgba(255, 255, 255, 0.1)', cursor: 'pointer' }}\n              onClick={() => onCreateTask(template)}\n            >\n              <Icon as={template.icon} color={getColor('primary', colorMode)} boxSize={5} />\n              <VStack align=\"start\" flex=\"1\" spacing={0}>\n                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                  {template.title}\n                </Text>\n                <Text fontSize=\"xs\" color={textMuted}>\n                  {template.description}\n                </Text>\n              </VStack>\n              <IconButton\n                icon={<FiPlus />}\n                aria-label=\"Create task\"\n                size=\"sm\"\n                variant=\"ghost\"\n              />\n            </HStack>\n          ))}\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nconst OpportunityDashboard: React.FC = () => {\n  usePageTitle(\"Opportunity Dashboard\");\n\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n\n  const { data: metricsData, loading: loadingMetrics, error: metricsError, refetch } = useQuery(GET_PIPELINE_METRICS, {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  });\n  const { data: targetsData, loading: loadingTargets, error: targetsError } = useQuery(GET_REVENUE_TARGETS, {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  });\n\n  // Log errors for debugging\n  if (metricsError) {\n    console.error('Pipeline Metrics Error:', metricsError);\n  }\n  if (targetsError) {\n    console.error('Revenue Targets Error:', targetsError);\n  }\n  const [createTask] = useMutation(CREATE_OPPORTUNITY_TASK);\n\n  const metrics = metricsData?.pipelineMetrics;\n  const targets = targetsData?.revenueTargets;\n\n  // Brand styling variables\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const buttonBg = getColor(\"button.bg\", colorMode);\n  const buttonHoverBg = getColor(\"button.hoverBg\", colorMode);\n\n  const handleCreateTask = async (template: TaskTemplate) => {\n    try {\n      await createTask({\n        variables: {\n          input: {\n            title: template.title,\n            description: template.description,\n            priority: template.priority,\n            dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString() // 3 days from now\n          }\n        }\n      });\n\n      toast({\n        title: 'Task created',\n        description: `\"${template.title}\" has been added to your tasks`,\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      refetch();\n    } catch (error: any) {\n      toast({\n        title: 'Failed to create task',\n        description: error.message || 'An error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  if (loadingMetrics || loadingTargets) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n        <Box maxW=\"100%\" px={{ base: 4, md: 8 }} py={8} flex=\"1\">\n          <Center>\n            <Spinner size=\"xl\" />\n          </Center>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const hasOpportunities = metrics?.totalOpportunities > 0;\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n\n      <Box maxW=\"100%\" px={{ base: 4, md: 8 }} py={8} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <VStack spacing={4} align=\"stretch\">\n            <VStack align=\"start\" spacing={1}>\n              <Heading size=\"lg\" color={textPrimary}>Opportunity Pipeline</Heading>\n              <Text color={textMuted} fontSize={{ base: 'sm', md: 'md' }}>\n                Track your sales pipeline health and conversion metrics\n              </Text>\n            </VStack>\n            <HStack spacing={2} flexWrap=\"wrap\">\n              <Button\n                leftIcon={<FiRefreshCw />}\n                variant=\"outline\"\n                size={{ base: 'sm', md: 'md' }}\n                borderColor={colorMode === 'light' ? 'gray.300' : 'rgba(255, 255, 255, 0.3)'}\n                color={textPrimary}\n                _hover={{ bg: colorMode === 'light' ? 'gray.50' : cardGradientBg }}\n                onClick={() => refetch()}\n              >\n                Refresh\n              </Button>\n              <Button\n                leftIcon={<FiPlus />}\n                size={{ base: 'sm', md: 'md' }}\n                bg={buttonBg}\n                color=\"white\"\n                _hover={{ bg: buttonHoverBg }}\n                onClick={() => navigate('/opportunities/new')}\n              >\n                New Opportunity\n              </Button>\n            </HStack>\n          </VStack>\n\n          {/* No Opportunities Alert */}\n          {!hasOpportunities && (\n            <Alert status=\"warning\" borderRadius=\"md\">\n              <AlertIcon />\n              <Box>\n                <AlertTitle>No opportunities in your pipeline!</AlertTitle>\n                <AlertDescription>\n                  Start by creating your first opportunity to track potential deals.\n                </AlertDescription>\n              </Box>\n              <Button\n                ml=\"auto\"\n                colorScheme=\"orange\"\n                size=\"sm\"\n                leftIcon={<FiPlus />}\n                onClick={() => navigate('/opportunities/new')}\n              >\n                Create First Opportunity\n              </Button>\n            </Alert>\n          )}\n\n          {/* Key Metrics */}\n          <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={4}>\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Total Pipeline Value</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">\n                    ${(metrics?.totalValue || 0).toLocaleString()}\n                  </StatNumber>\n                  <StatHelpText color={textMuted}>\n                    <StatArrow type=\"increase\" />\n                    {metrics?.totalOpportunities || 0} opportunities\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Expected Revenue</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">\n                    ${(metrics?.expectedRevenue || 0).toLocaleString()}\n                  </StatNumber>\n                  <StatHelpText color={textMuted}>\n                    Based on probability\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Conversion Rate</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">\n                    {metrics?.conversionRate || 0}%\n                  </StatNumber>\n                  <StatHelpText color={textMuted}>\n                    Won / Total Closed\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardBody>\n                <Stat>\n                  <StatLabel color={textSecondary}>Avg Deal Size</StatLabel>\n                  <StatNumber color={textPrimary} fontSize=\"2xl\">\n                    ${(metrics?.averageDealSize || 0).toLocaleString()}\n                  </StatNumber>\n                  <StatHelpText color={textMuted}>\n                    {metrics?.averageSalesCycle || 0} day cycle\n                  </StatHelpText>\n                </Stat>\n              </CardBody>\n            </Card>\n          </SimpleGrid>\n\n          {/* Revenue Targets */}\n          {targets && (\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardHeader>\n                <Text fontWeight=\"bold\" color={textPrimary}>Revenue Targets & Progress</Text>\n              </CardHeader>\n              <CardBody>\n                <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>\n                  <Box>\n                    <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\" mb={2}>\n                      Monthly Target: ${(targets.monthly || 0).toLocaleString()}\n                    </Text>\n                    <Progress\n                      value={targets.currentMonthProgress || 0}\n                      colorScheme=\"green\"\n                      size=\"sm\"\n                      borderRadius=\"full\"\n                    />\n                    <Text fontSize=\"xs\" color={textSecondary} mt={1}>\n                      {targets.currentMonthProgress || 0}% achieved\n                    </Text>\n                    <Text fontSize=\"xs\" color={textMuted}>\n                      Need {targets.requiredOpportunities?.monthly || 0} more opportunities\n                    </Text>\n                  </Box>\n\n                  <Box>\n                    <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\" mb={2}>\n                      Quarterly Target: ${(targets.quarterly || 0).toLocaleString()}\n                    </Text>\n                    <Progress\n                      value={targets.currentQuarterProgress || 0}\n                      colorScheme=\"blue\"\n                      size=\"sm\"\n                      borderRadius=\"full\"\n                    />\n                    <Text fontSize=\"xs\" color={textSecondary} mt={1}>\n                      {targets.currentQuarterProgress || 0}% achieved\n                    </Text>\n                    <Text fontSize=\"xs\" color={textMuted}>\n                      Need {targets.requiredOpportunities?.quarterly || 0} more opportunities\n                    </Text>\n                  </Box>\n\n                  <Box>\n                    <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\" mb={2}>\n                      Yearly Target: ${(targets.yearly || 0).toLocaleString()}\n                    </Text>\n                    <Progress\n                      value={targets.currentYearProgress || 0}\n                      colorScheme=\"purple\"\n                      size=\"sm\"\n                      borderRadius=\"full\"\n                    />\n                    <Text fontSize=\"xs\" color={textSecondary} mt={1}>\n                      {targets.currentYearProgress || 0}% achieved\n                    </Text>\n                    <Text fontSize=\"xs\" color={textMuted}>\n                      Need {targets.requiredOpportunities?.yearly || 0} more opportunities\n                    </Text>\n                  </Box>\n                </SimpleGrid>\n              </CardBody>\n            </Card>\n          )}\n\n          {/* Main Dashboard Grid */}\n          <SimpleGrid columns={{ base: 1, lg: 3 }} spacing={6}>\n            {/* Pipeline Health */}\n            <PipelineHealthIndicator score={metrics?.healthScore || 0} />\n\n            {/* Conversion Funnel */}\n            {metrics?.stageMetrics && (\n              <ConversionFunnel stageMetrics={metrics.stageMetrics} />\n            )}\n\n            {/* Task Suggestions */}\n            <TaskSuggestions onCreateTask={handleCreateTask} />\n          </SimpleGrid>\n\n          {/* Suggested Actions Alert */}\n          {metrics?.suggestedActions && metrics.suggestedActions.length > 0 && (\n            <Card\n              bg={cardGradientBg}\n              backdropFilter=\"blur(10px)\"\n              boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n              border=\"1px\"\n              borderColor={cardBorder}\n              borderRadius=\"lg\"\n            >\n              <CardHeader>\n                <HStack>\n                  <Icon as={FiTarget} color=\"#FFA500\" />\n                  <Text fontWeight=\"bold\" color={textPrimary}>Recommended Actions</Text>\n                </HStack>\n              </CardHeader>\n              <CardBody>\n                <VStack spacing={3} align=\"stretch\">\n                  {metrics.suggestedActions.map((action: any, index: number) => (\n                    <HStack key={index} align=\"start\" spacing={3}>\n                      <Icon\n                        as={action.priority === 'HIGH' ? FiAlertCircle : FiCheckCircle}\n                        color={action.priority === 'HIGH' ? 'red.500' : 'green.500'}\n                        mt={1}\n                      />\n                      <VStack align=\"start\" spacing={0} flex=\"1\">\n                        <Text fontWeight=\"medium\" color={textPrimary}>{action.title}</Text>\n                        <Text fontSize=\"sm\" color={textMuted}>\n                          {action.description}\n                        </Text>\n                      </VStack>\n                      <Badge colorScheme={action.priority === 'HIGH' ? 'red' : 'yellow'}>\n                        {action.priority}\n                      </Badge>\n                    </HStack>\n                  ))}\n                </VStack>\n              </CardBody>\n            </Card>\n          )}\n        </VStack>\n      </Box>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default OpportunityDashboard;"],"names":["_excluded","StatDownArrow","props","jsx","Icon","_objectSpread","color","children","fill","d","StatUpArrow","StatArrow","type","ariaLabel","rest","_objectWithoutProperties","styles","useStatStyles","BaseIcon","label","jsxs","Fragment","chakra","span","srOnly","__css","icon","displayName","GET_PIPELINE_METRICS","gql","_templateObject","_taggedTemplateLiteral","GET_REVENUE_TARGETS","_templateObject2","CREATE_OPPORTUNITY_TASK","_templateObject3","taskTemplates","FiSend","title","description","priority","category","FiPhone","FiMail","FiCalendar","FiFileText","FiDollarSign","PipelineHealthIndicator","_ref","score","colorMode","useColorMode","cardGradientBg","getColor","cardBorder","textPrimary","textMuted","getHealthColor","_jsx","Card","bg","backdropFilter","boxShadow","border","borderColor","borderRadius","CardBody","_jsxs","VStack","spacing","Text","fontSize","fontWeight","Box","position","width","height","style","transform","cx","cy","r","stroke","strokeWidth","concat","strokeDasharray","Math","PI","strokeDashoffset","transition","Center","top","left","getHealthLabel","ConversionFunnel","_ref2","stageMetrics","maxValue","max","map","s","value","CardHeader","align","stage","HStack","justify","mb","stageName","Badge","colorScheme","count","toFixed","Progress","size","conversionToNext","mt","TaskSuggestions","_ref3","onCreateTask","Tooltip","as","FiAlertCircle","slice","template","index","p","borderWidth","_hover","cursor","onClick","boxSize","flex","IconButton","FiPlus","variant","OpportunityDashboard","_targets$requiredOppo","_targets$requiredOppo2","_targets$requiredOppo3","usePageTitle","navigate","useNavigate","toast","useToast","data","metricsData","loading","loadingMetrics","error","metricsError","refetch","useQuery","fetchPolicy","errorPolicy","targetsData","loadingTargets","targetsError","console","createTask","useMutation","metrics","pipelineMetrics","targets","revenueTargets","bgMain","textSecondary","buttonBg","buttonHoverBg","minH","display","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","opportunitiesModuleConfig","maxW","px","base","md","py","Spinner","FooterWithFourColumns","hasOpportunities","totalOpportunities","Heading","flexWrap","Button","leftIcon","FiRefreshCw","Alert","status","AlertIcon","AlertTitle","AlertDescription","ml","SimpleGrid","columns","lg","Stat","StatLabel","StatNumber","totalValue","toLocaleString","StatHelpText","expectedRevenue","conversionRate","averageDealSize","averageSalesCycle","monthly","currentMonthProgress","requiredOpportunities","quarterly","currentQuarterProgress","yearly","currentYearProgress","healthScore","async","variables","input","dueDate","Date","now","toISOString","duration","isClosable","message","suggestedActions","length","FiTarget","action","FiCheckCircle"],"sourceRoot":""}