{"version":3,"file":"static/js/7231.2e710e6c.chunk.js","mappings":"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","sources":["pages/assets/AssetDetails.tsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Text,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  SimpleGrid,\n  Badge,\n  useToast,\n  IconButton,\n  Flex,\n  Avatar,\n  Divider,\n  Spinner,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  ModalFooter,\n  useDisclosure,\n  FormControl,\n  FormLabel,\n  Textarea,\n  Select,\n  Input,\n  NumberInput,\n  NumberInputField,\n  Link,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Wrap,\n  WrapItem,\n  Tag,\n  TableContainer,\n  Table,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport {\n  ArrowBackIcon,\n  EditIcon,\n  DeleteIcon,\n  DownloadIcon,\n  CalendarIcon,\n  AddIcon,\n  ExternalLinkIcon,\n} from \"@chakra-ui/icons\";\nimport { FaQrcode, FaTools, FaCamera, FaHistory, FaPrint } from \"react-icons/fa\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport assetsModuleConfig from \"./moduleConfig\";\n\n// GraphQL Queries and Mutations\nconst GET_ASSET_DETAILS = gql`\n  query GetAssetDetails($id: ID!) {\n    asset(id: $id) {\n      id\n      assetId\n      name\n      assetType {\n        id\n        name\n        category\n        icon\n        maintenanceIntervalDays\n      }\n      company {\n        id\n        name\n        address\n        phone\n      }\n      assignedTo {\n        id\n        fName\n        lName\n        email\n        phone\n        profilePhoto\n      }\n      manufacturer\n      model\n      serialNumber\n      purchaseDate\n      purchasePrice\n      supplier\n      warrantyExpiry\n      status\n      condition\n      location {\n        building\n        floor\n        room\n        section\n        coordinates\n      }\n      description\n      photos\n      qrCode\n      publicUrl\n      barcode\n      lastMaintenanceDate\n      nextMaintenanceDate\n      maintenanceNotes\n      tags\n      customFields\n      createdAt\n      updatedAt\n      logCount\n    }\n    assetLogs(assetId: $id) {\n      id\n      assetId\n      createdBy {\n        id\n        fName\n        lName\n        profilePhoto\n      }\n      action\n      description\n      photos\n      conditionBefore\n      conditionAfter\n      cost\n      notes\n      timestamp\n      nextActionDate\n    }\n  }\n`;\n\nconst ADD_ASSET_LOG = gql`\n  mutation AddAssetLog($input: AssetLogInput!) {\n    addAssetLog(input: $input) {\n      id\n      action\n      description\n      timestamp\n    }\n  }\n`;\n\nconst DELETE_ASSET = gql`\n  mutation DeleteAsset($id: ID!) {\n    deleteAsset(id: $id)\n  }\n`;\n\nconst AssetDetails = () => {\n  usePageTitle(\"Asset Details\");\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const toast = useToast();\n  const { user } = useAuth();\n  const { colorMode } = useColorMode();\n  const hasPermission = (permissions: string[]) => {\n    if (!user?.permissions) return false;\n    return permissions.some(permission => user.permissions?.includes(permission));\n  };\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n\n  // Brand colors\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n  const successGreen = getColor(\"successGreen\", colorMode);\n  const errorRed = getColor(\"status.error\", colorMode);\n  \n  const { isOpen: isLogModalOpen, onOpen: onLogModalOpen, onClose: onLogModalClose } = useDisclosure();\n  const { isOpen: isQrModalOpen, onOpen: onQrModalOpen, onClose: onQrModalClose } = useDisclosure();\n\n  const [logForm, setLogForm] = useState({\n    action: \"Comment\",\n    description: \"\",\n    conditionBefore: \"\",\n    conditionAfter: \"\",\n    cost: 0,\n    notes: \"\",\n    nextActionDate: \"\",\n    photos: [] as string[],\n  });\n\n  const { loading, error, data, refetch } = useQuery(GET_ASSET_DETAILS, {\n    variables: { id },\n  });\n\n  const [addAssetLog, { loading: addingLog }] = useMutation(ADD_ASSET_LOG, {\n    onCompleted: () => {\n      toast({\n        title: \"Log entry added\",\n        description: \"The log entry has been added successfully.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n      onLogModalClose();\n      refetch();\n      setLogForm({\n        action: \"Comment\",\n        description: \"\",\n        conditionBefore: \"\",\n        conditionAfter: \"\",\n        cost: 0,\n        notes: \"\",\n        nextActionDate: \"\",\n        photos: [],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error adding log entry\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [deleteAsset] = useMutation(DELETE_ASSET, {\n    onCompleted: () => {\n      toast({\n        title: \"Asset deleted\",\n        description: \"The asset has been successfully deleted.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n      navigate(\"/assets\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting asset\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const handleDelete = async () => {\n    if (window.confirm(\"Are you sure you want to delete this asset? This action cannot be undone.\")) {\n      await deleteAsset({ variables: { id } });\n    }\n  };\n\n  const handleAddLog = async () => {\n    const input = {\n      assetId: id!,\n      ...logForm,\n      cost: logForm.cost || undefined,\n      nextActionDate: logForm.nextActionDate || undefined,\n      conditionBefore: logForm.conditionBefore || undefined,\n      conditionAfter: logForm.conditionAfter || undefined,\n      photos: logForm.photos.length > 0 ? logForm.photos : undefined,\n    };\n\n    await addAssetLog({ variables: { input } });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"ACTIVE\": return \"green\";\n      case \"IN_MAINTENANCE\": return \"orange\";\n      case \"RETIRED\": return \"gray\";\n      case \"DISPOSED\": return \"red\";\n      case \"LOST\": return \"purple\";\n      case \"DAMAGED\": return \"yellow\";\n      default: return \"gray\";\n    }\n  };\n\n  const getConditionColor = (condition: string) => {\n    switch (condition) {\n      case \"NEW\": return \"teal\";\n      case \"EXCELLENT\": return \"green\";\n      case \"GOOD\": return \"blue\";\n      case \"FAIR\": return \"yellow\";\n      case \"POOR\": return \"orange\";\n      case \"BROKEN\": return \"red\";\n      default: return \"gray\";\n    }\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case \"Created\": return \"🆕\";\n      case \"Maintenance\": return \"🔧\";\n      case \"Repair\": return \"🔨\";\n      case \"Inspection\": return \"🔍\";\n      case \"Comment\": return \"💬\";\n      case \"Status Changed\": return \"🔄\";\n      case \"Condition Changed\": return \"📊\";\n      default: return \"📝\";\n    }\n  };\n\n  const printQRCode = () => {\n    if (!qrCodeRef.current) return;\n    \n    const printWindow = window.open(\"\", \"_blank\");\n    if (!printWindow) return;\n\n    const asset = data?.asset;\n    printWindow.document.write(`\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Asset QR Code - ${asset?.name}</title>\n          <style>\n            body {\n              font-family: Arial, sans-serif;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              min-height: 100vh;\n              margin: 0;\n            }\n            .qr-container {\n              text-align: center;\n              padding: 20px;\n              border: 2px solid #000;\n              border-radius: 10px;\n            }\n            .qr-code {\n              margin: 20px 0;\n            }\n            .asset-info {\n              margin: 10px 0;\n            }\n            .asset-id {\n              font-size: 24px;\n              font-weight: bold;\n            }\n            .asset-name {\n              font-size: 18px;\n              margin: 10px 0;\n            }\n            .company {\n              font-size: 14px;\n              color: #666;\n            }\n            @media print {\n              body {\n                margin: 0;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"qr-container\">\n            <div class=\"asset-id\">Asset ID: ${asset?.assetId}</div>\n            <div class=\"asset-name\">${asset?.name}</div>\n            <div class=\"qr-code\">\n              <img src=\"${asset?.qrCode}\" alt=\"QR Code\" style=\"width: 200px; height: 200px;\" />\n            </div>\n            ${asset?.company ? `<div class=\"company\">${asset.company.name}</div>` : ''}\n            <div class=\"asset-info\">Scan for details</div>\n          </div>\n          <script>\n            window.onload = function() {\n              window.print();\n              window.onafterprint = function() {\n                window.close();\n              };\n            };\n          </script>\n        </body>\n      </html>\n    `);\n    printWindow.document.close();\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={assetsModuleConfig} />\n        <Container maxW=\"container.xl\" px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n          <VStack spacing={6}>\n            <Spinner size=\"xl\" color={primaryColor} />\n            <Text color={textPrimary}>Loading asset details...</Text>\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (error || !data?.asset) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={assetsModuleConfig} />\n        <Container maxW=\"container.xl\" px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n          <Text color={errorRed}>Error loading asset: {error?.message || \"Asset not found\"}</Text>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const asset = data.asset;\n  const logs = data.assetLogs || [];\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={assetsModuleConfig} />\n      <Container maxW=\"container.xl\" px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\" gap={4}>\n            <HStack spacing={4}>\n              <IconButton\n                icon={<ArrowBackIcon />}\n                aria-label=\"Back\"\n                variant=\"ghost\"\n                color={textPrimary}\n                _hover={{ bg: cardGradientBg }}\n                onClick={() => navigate(\"/assets\")}\n              />\n              <Box>\n                <HStack spacing={2}>\n                  <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\" color={textPrimary}>\n                    {asset.assetType?.icon} {asset.name}\n                  </Text>\n                  {asset.qrCode && <FaQrcode size={20} color={primaryColor} />}\n                </HStack>\n                <Text color={textMuted}>Asset ID: {asset.assetId}</Text>\n              </Box>\n            </HStack>\n\n            <VStack spacing={2} align=\"stretch\" display={{ base: \"flex\", md: \"none\" }}>\n              <HStack spacing={2} wrap=\"wrap\">\n                <Button\n                  leftIcon={<FaQrcode />}\n                  onClick={onQrModalOpen}\n                  variant=\"outline\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ bg: cardGradientBg }}\n                  size={{ base: \"sm\", md: \"md\" }}\n                  width={{ base: \"auto\", md: \"auto\" }}\n                >\n                  View QR\n                </Button>\n                <Button\n                  leftIcon={<FaPrint />}\n                  onClick={printQRCode}\n                  variant=\"outline\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ bg: cardGradientBg }}\n                  size={{ base: \"sm\", md: \"md\" }}\n                  width={{ base: \"auto\", md: \"auto\" }}\n                >\n                  Print QR\n                </Button>\n              </HStack>\n              <HStack spacing={2} wrap=\"wrap\">\n                <Button\n                  leftIcon={<AddIcon />}\n                  onClick={onLogModalOpen}\n                  bg={primaryColor}\n                  color=\"white\"\n                  _hover={{ bg: primaryHover }}\n                  size={{ base: \"sm\", md: \"md\" }}\n                  width={{ base: \"100%\", md: \"auto\" }}\n                >\n                  Add Log\n                </Button>\n                <Button\n                  leftIcon={<EditIcon />}\n                  onClick={() => navigate(`/assets/edit/${asset.id}`)}\n                  bg={successGreen}\n                  color=\"white\"\n                  _hover={{ bg: \"green.600\" }}\n                  size={{ base: \"sm\", md: \"md\" }}\n                  width={{ base: \"100%\", md: \"auto\" }}\n                >\n                  Edit\n                </Button>\n                {hasPermission([\"ADMIN\", \"ASSET_MANAGER\"]) && (\n                  <IconButton\n                    icon={<DeleteIcon />}\n                    aria-label=\"Delete\"\n                    bg={errorRed}\n                    color=\"white\"\n                    _hover={{ bg: \"red.600\" }}\n                    variant=\"solid\"\n                    onClick={handleDelete}\n                    size={{ base: \"sm\", md: \"md\" }}\n                  />\n                )}\n              </HStack>\n            </VStack>\n\n            <HStack spacing={2} display={{ base: \"none\", md: \"flex\" }}>\n              <Button\n                leftIcon={<FaQrcode />}\n                onClick={onQrModalOpen}\n                variant=\"outline\"\n                borderColor={cardBorder}\n                color={textPrimary}\n                _hover={{ bg: cardGradientBg }}\n                size={{ base: \"sm\", md: \"md\" }}\n                width={{ base: \"100%\", md: \"auto\" }}\n              >\n                View QR\n              </Button>\n              <Button\n                leftIcon={<FaPrint />}\n                onClick={printQRCode}\n                variant=\"outline\"\n                borderColor={cardBorder}\n                color={textPrimary}\n                _hover={{ bg: cardGradientBg }}\n                size={{ base: \"sm\", md: \"md\" }}\n                width={{ base: \"100%\", md: \"auto\" }}\n              >\n                Print QR\n              </Button>\n              <Button\n                leftIcon={<AddIcon />}\n                onClick={onLogModalOpen}\n                bg={primaryColor}\n                color=\"white\"\n                _hover={{ bg: primaryHover }}\n                size={{ base: \"sm\", md: \"md\" }}\n                width={{ base: \"100%\", md: \"auto\" }}\n              >\n                Add Log\n              </Button>\n              <Button\n                leftIcon={<EditIcon />}\n                onClick={() => navigate(`/assets/edit/${asset.id}`)}\n                bg={successGreen}\n                color=\"white\"\n                _hover={{ bg: \"green.600\" }}\n                size={{ base: \"sm\", md: \"md\" }}\n                width={{ base: \"100%\", md: \"auto\" }}\n              >\n                Edit\n              </Button>\n              {hasPermission([\"ADMIN\", \"ASSET_MANAGER\"]) && (\n                <IconButton\n                  icon={<DeleteIcon />}\n                  aria-label=\"Delete\"\n                  bg={errorRed}\n                  color=\"white\"\n                  _hover={{ bg: \"red.600\" }}\n                  variant=\"solid\"\n                  onClick={handleDelete}\n                  size={{ base: \"sm\", md: \"md\" }}\n                />\n              )}\n            </HStack>\n          </Flex>\n\n          {/* Status Badges */}\n          <HStack spacing={4}>\n            <Badge colorScheme={getStatusColor(asset.status)} fontSize=\"md\" px={3} py={1}>\n              Status: {asset.status}\n            </Badge>\n            <Badge colorScheme={getConditionColor(asset.condition)} fontSize=\"md\" px={3} py={1}>\n              Condition: {asset.condition}\n            </Badge>\n            {asset.nextMaintenanceDate && new Date(asset.nextMaintenanceDate) <= new Date() && (\n              <Badge colorScheme=\"red\" fontSize=\"md\" px={3} py={1}>\n                ⚠️ Maintenance Overdue\n              </Badge>\n            )}\n          </HStack>\n\n          {/* Main Content Tabs */}\n          <Tabs>\n            <TabList>\n              <Tab>Overview</Tab>\n              <Tab>Details</Tab>\n              <Tab>History ({logs.length})</Tab>\n              <Tab>Maintenance</Tab>\n            </TabList>\n\n            <TabPanels>\n              {/* Overview Tab */}\n              <TabPanel>\n                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>\n                  {/* Basic Info Card */}\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Basic Information</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <VStack align=\"stretch\" spacing={3}>\n                        {asset.assetType && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Type:</Text>\n                            <Text color={textPrimary}>{asset.assetType.name}</Text>\n                          </HStack>\n                        )}\n                        {asset.manufacturer && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Manufacturer:</Text>\n                            <Text color={textPrimary}>{asset.manufacturer}</Text>\n                          </HStack>\n                        )}\n                        {asset.model && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Model:</Text>\n                            <Text color={textPrimary}>{asset.model}</Text>\n                          </HStack>\n                        )}\n                        {asset.serialNumber && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Serial Number:</Text>\n                            <Text color={textPrimary}>{asset.serialNumber}</Text>\n                          </HStack>\n                        )}\n                        {asset.barcode && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Barcode:</Text>\n                            <Text color={textPrimary}>{asset.barcode}</Text>\n                          </HStack>\n                        )}\n                      </VStack>\n                    </CardBody>\n                  </Card>\n\n                  {/* Assignment Card */}\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Assignment & Location</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <VStack align=\"stretch\" spacing={3}>\n                        {asset.company && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Company:</Text>\n                            <Text fontWeight=\"medium\" color={textPrimary}>{asset.company.name}</Text>\n                          </Box>\n                        )}\n                        {asset.assignedTo && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Assigned To:</Text>\n                            <HStack spacing={2} mt={1}>\n                              <Avatar\n                                size=\"sm\"\n                                name={`${asset.assignedTo.fName} ${asset.assignedTo.lName}`}\n                                src={asset.assignedTo.profilePhoto}\n                              />\n                              <Box>\n                                <Text fontWeight=\"medium\" color={textPrimary}>\n                                  {asset.assignedTo.fName} {asset.assignedTo.lName}\n                                </Text>\n                                <Text fontSize=\"xs\" color={textSecondary}>\n                                  {asset.assignedTo.email}\n                                </Text>\n                              </Box>\n                            </HStack>\n                          </Box>\n                        )}\n                        {asset.location && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Location:</Text>\n                            <Text color={textPrimary}>\n                              {[\n                                asset.location.building,\n                                asset.location.floor,\n                                asset.location.room,\n                                asset.location.section,\n                              ]\n                                .filter(Boolean)\n                                .join(\", \") || \"Not specified\"}\n                            </Text>\n                          </Box>\n                        )}\n                      </VStack>\n                    </CardBody>\n                  </Card>\n\n                  {/* Purchase Info Card */}\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Purchase Information</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <VStack align=\"stretch\" spacing={3}>\n                        {asset.purchaseDate && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Purchase Date:</Text>\n                            <Text color={textPrimary}>{new Date(asset.purchaseDate).toLocaleDateString()}</Text>\n                          </HStack>\n                        )}\n                        {asset.purchasePrice && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Purchase Price:</Text>\n                            <Text color={textPrimary}>${asset.purchasePrice.toFixed(2)}</Text>\n                          </HStack>\n                        )}\n                        {asset.supplier && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Supplier:</Text>\n                            <Text color={textPrimary}>{asset.supplier}</Text>\n                          </HStack>\n                        )}\n                        {asset.warrantyExpiry && (\n                          <HStack justify=\"space-between\" direction={{ base: \"column\", md: \"row\" }} align={{ base: \"start\", md: \"center\" }}>\n                            <Text color={textSecondary}>Warranty Expiry:</Text>\n                            <Text color={new Date(asset.warrantyExpiry) < new Date() ? errorRed : textPrimary}>\n                              {new Date(asset.warrantyExpiry).toLocaleDateString()}\n                            </Text>\n                          </HStack>\n                        )}\n                      </VStack>\n                    </CardBody>\n                  </Card>\n\n                  {/* Quick Stats Card */}\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Statistics</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <SimpleGrid columns={2} spacing={4}>\n                        <Stat>\n                          <StatLabel color={textSecondary}>Log Entries</StatLabel>\n                          <StatNumber color={textPrimary}>{logs.length}</StatNumber>\n                        </Stat>\n                        <Stat>\n                          <StatLabel color={textSecondary}>Age</StatLabel>\n                          <StatNumber color={textPrimary}>\n                            {asset.purchaseDate\n                              ? Math.floor(\n                                  (new Date().getTime() - new Date(asset.purchaseDate).getTime()) /\n                                    (1000 * 60 * 60 * 24 * 365)\n                                )\n                              : \"-\"}\n                          </StatNumber>\n                          <StatHelpText color={textSecondary}>years</StatHelpText>\n                        </Stat>\n                      </SimpleGrid>\n                    </CardBody>\n                  </Card>\n                </SimpleGrid>\n\n                {/* Description */}\n                {asset.description && (\n                  <Card\n                    mt={6}\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Description</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <Text color={textPrimary}>{asset.description}</Text>\n                    </CardBody>\n                  </Card>\n                )}\n\n                {/* Tags */}\n                {asset.tags && asset.tags.length > 0 && (\n                  <Card\n                    mt={6}\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Tags</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <Wrap>\n                        {asset.tags.map((tag: string) => (\n                          <WrapItem key={tag}>\n                            <Tag size=\"md\" variant=\"solid\" bg={primaryColor} color=\"white\">\n                              {tag}\n                            </Tag>\n                          </WrapItem>\n                        ))}\n                      </Wrap>\n                    </CardBody>\n                  </Card>\n                )}\n              </TabPanel>\n\n              {/* Details Tab */}\n              <TabPanel>\n                <Card\n                  bg={cardGradientBg}\n                  backdropFilter=\"blur(10px)\"\n                  boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                  border=\"1px\"\n                  borderColor={cardBorder}\n                  borderRadius=\"lg\"\n                >\n                  <CardBody>\n                    <VStack align=\"stretch\" spacing={4}>\n                      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>\n                        <Box>\n                          <Text color={textSecondary} fontSize=\"sm\">Created:</Text>\n                          <Text color={textPrimary}>{new Date(asset.createdAt).toLocaleString()}</Text>\n                        </Box>\n                        <Box>\n                          <Text color={textSecondary} fontSize=\"sm\">Last Updated:</Text>\n                          <Text color={textPrimary}>{new Date(asset.updatedAt).toLocaleString()}</Text>\n                        </Box>\n                        {asset.publicUrl && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Public URL:</Text>\n                            <Link href={asset.publicUrl} isExternal color={primaryColor}>\n                              {asset.publicUrl} <ExternalLinkIcon mx=\"2px\" />\n                            </Link>\n                          </Box>\n                        )}\n                      </SimpleGrid>\n\n                      {asset.customFields && (\n                        <Box>\n                          <Text fontWeight=\"bold\" mb={2} color={textPrimary}>Custom Fields</Text>\n                          <Box p={3} bg={cardGradientBg} borderRadius=\"md\" border=\"1px\" borderColor={cardBorder}>\n                            <pre style={{ color: textPrimary, fontSize: '12px', whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>{JSON.stringify(JSON.parse(asset.customFields), null, 2)}</pre>\n                          </Box>\n                        </Box>\n                      )}\n\n                      {asset.photos && asset.photos.length > 0 && (\n                        <Box>\n                          <Text fontWeight=\"bold\" mb={2} color={textPrimary}>Photos</Text>\n                          <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>\n                            {asset.photos.map((photo: string, index: number) => (\n                              <Image\n                                key={index}\n                                src={photo}\n                                alt={`Asset photo ${index + 1}`}\n                                borderRadius=\"md\"\n                                cursor=\"pointer\"\n                                onClick={() => window.open(photo, \"_blank\")}\n                              />\n                            ))}\n                          </SimpleGrid>\n                        </Box>\n                      )}\n                    </VStack>\n                  </CardBody>\n                </Card>\n              </TabPanel>\n\n              {/* History Tab */}\n              <TabPanel>\n                <Card\n                  bg={cardGradientBg}\n                  backdropFilter=\"blur(10px)\"\n                  boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                  border=\"1px\"\n                  borderColor={cardBorder}\n                  borderRadius=\"lg\"\n                >\n                  <CardBody>\n                    <VStack align=\"stretch\" spacing={4}>\n                      {logs.length === 0 ? (\n                        <VStack py={8}>\n                          <FaHistory size={48} color=\"gray\" />\n                          <Text color={textSecondary}>No history entries yet</Text>\n                          <Button\n                            onClick={onLogModalOpen}\n                            bg={primaryColor}\n                            color=\"white\"\n                            _hover={{ bg: primaryHover }}\n                            size={{ base: \"sm\", md: \"md\" }}\n                            width={{ base: \"100%\", md: \"auto\" }}\n                          >\n                            Add First Entry\n                          </Button>\n                        </VStack>\n                      ) : (\n                        logs.map((log: any) => (\n                          <Box key={log.id} p={4} borderWidth={1} borderRadius=\"md\" borderColor={cardBorder} bg={cardGradientBg}>\n                            <Flex justify=\"space-between\" align=\"start\">\n                              <HStack align=\"start\" spacing={3}>\n                                <Text fontSize=\"xl\">{getActionIcon(log.action)}</Text>\n                                <Box flex={1}>\n                                  <HStack spacing={2}>\n                                    <Text fontWeight=\"bold\" color={textPrimary}>{log.action}</Text>\n                                    <Text fontSize=\"sm\" color={textSecondary}>\n                                      {new Date(log.timestamp).toLocaleString()}\n                                    </Text>\n                                  </HStack>\n                                  {log.description && (\n                                    <Text mt={1}>{log.description}</Text>\n                                  )}\n                                  {log.notes && (\n                                    <Text mt={1} fontSize=\"sm\" color=\"gray.600\">\n                                      Notes: {log.notes}\n                                    </Text>\n                                  )}\n                                  {(log.conditionBefore || log.conditionAfter) && (\n                                    <HStack mt={2} spacing={2}>\n                                      {log.conditionBefore && (\n                                        <Badge colorScheme={getConditionColor(log.conditionBefore)}>\n                                          {log.conditionBefore}\n                                        </Badge>\n                                      )}\n                                      {log.conditionBefore && log.conditionAfter && (\n                                        <Text fontSize=\"sm\">→</Text>\n                                      )}\n                                      {log.conditionAfter && (\n                                        <Badge colorScheme={getConditionColor(log.conditionAfter)}>\n                                          {log.conditionAfter}\n                                        </Badge>\n                                      )}\n                                    </HStack>\n                                  )}\n                                  {log.cost && (\n                                    <Text mt={1} fontSize=\"sm\" color=\"orange.500\">\n                                      Cost: ${log.cost.toFixed(2)}\n                                    </Text>\n                                  )}\n                                  {log.nextActionDate && (\n                                    <HStack mt={1} spacing={1}>\n                                      <CalendarIcon boxSize={3} />\n                                      <Text fontSize=\"sm\">\n                                        Next action: {new Date(log.nextActionDate).toLocaleDateString()}\n                                      </Text>\n                                    </HStack>\n                                  )}\n                                  {log.photos && log.photos.length > 0 && (\n                                    <HStack mt={2} spacing={2}>\n                                      {log.photos.map((photo: string, idx: number) => (\n                                        <Image\n                                          key={idx}\n                                          src={photo}\n                                          alt={`Log photo ${idx + 1}`}\n                                          boxSize=\"50px\"\n                                          objectFit=\"cover\"\n                                          borderRadius=\"md\"\n                                          cursor=\"pointer\"\n                                          onClick={() => window.open(photo, \"_blank\")}\n                                        />\n                                      ))}\n                                    </HStack>\n                                  )}\n                                  <HStack mt={2} spacing={2}>\n                                    <Avatar\n                                      size=\"xs\"\n                                      name={`${log.createdBy.fName} ${log.createdBy.lName}`}\n                                      src={log.createdBy.profilePhoto}\n                                    />\n                                    <Text fontSize=\"xs\" color=\"gray.500\">\n                                      {log.createdBy.fName} {log.createdBy.lName}\n                                    </Text>\n                                  </HStack>\n                                </Box>\n                              </HStack>\n                            </Flex>\n                          </Box>\n                        ))\n                      )}\n                    </VStack>\n                  </CardBody>\n                </Card>\n              </TabPanel>\n\n              {/* Maintenance Tab */}\n              <TabPanel>\n                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Maintenance Schedule</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <VStack align=\"stretch\" spacing={3}>\n                        {asset.lastMaintenanceDate && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Last Maintenance:</Text>\n                            <Text color={textPrimary}>{new Date(asset.lastMaintenanceDate).toLocaleDateString()}</Text>\n                          </Box>\n                        )}\n                        {asset.nextMaintenanceDate && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Next Maintenance:</Text>\n                            <Text\n                              color={new Date(asset.nextMaintenanceDate) <= new Date() ? errorRed : successGreen}\n                              fontWeight=\"bold\"\n                            >\n                              {new Date(asset.nextMaintenanceDate).toLocaleDateString()}\n                            </Text>\n                          </Box>\n                        )}\n                        {asset.assetType?.maintenanceIntervalDays && (\n                          <Box>\n                            <Text color={textSecondary} fontSize=\"sm\">Maintenance Interval:</Text>\n                            <Text color={textPrimary}>Every {asset.assetType.maintenanceIntervalDays} days</Text>\n                          </Box>\n                        )}\n                      </VStack>\n                    </CardBody>\n                  </Card>\n\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Maintenance Notes</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <Text color={textPrimary}>{asset.maintenanceNotes || \"No maintenance notes available\"}</Text>\n                    </CardBody>\n                  </Card>\n\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <Text fontWeight=\"bold\" color={textPrimary}>Maintenance History</Text>\n                    </CardHeader>\n                    <CardBody>\n                      <VStack align=\"stretch\" spacing={2}>\n                        {logs\n                          .filter((log: any) => log.action === \"Maintenance\" || log.action === \"Repair\")\n                          .map((log: any) => (\n                            <Box key={log.id} p={2} borderWidth={1} borderRadius=\"md\" borderColor={cardBorder} bg={cardGradientBg}>\n                              <HStack justify=\"space-between\">\n                                <Text fontWeight=\"medium\" color={textPrimary}>{log.action}</Text>\n                                <Text fontSize=\"sm\" color={textSecondary}>\n                                  {new Date(log.timestamp).toLocaleDateString()}\n                                </Text>\n                              </HStack>\n                              {log.description && (\n                                <Text fontSize=\"sm\" mt={1} color={textPrimary}>{log.description}</Text>\n                              )}\n                              {log.cost && (\n                                <Text fontSize=\"sm\" color={primaryColor}>\n                                  Cost: ${log.cost.toFixed(2)}\n                                </Text>\n                              )}\n                            </Box>\n                          ))}\n                        {logs.filter((log: any) => log.action === \"Maintenance\" || log.action === \"Repair\").length === 0 && (\n                          <Text color={textSecondary} textAlign=\"center\" py={4}>\n                            No maintenance history\n                          </Text>\n                        )}\n                      </VStack>\n                    </CardBody>\n                  </Card>\n                </SimpleGrid>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </VStack>\n      </Container>\n      <FooterWithFourColumns />\n\n      {/* Add Log Modal */}\n      <Modal isOpen={isLogModalOpen} onClose={onLogModalClose} size=\"xl\">\n        <ModalOverlay />\n        <ModalContent bg={cardGradientBg} backdropFilter=\"blur(10px)\" border=\"1px\" borderColor={cardBorder}>\n          <ModalHeader color={textPrimary}>Add Log Entry</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack spacing={4}>\n              <FormControl>\n                <FormLabel>Action Type</FormLabel>\n                <Select\n                  value={logForm.action}\n                  onChange={(e) => setLogForm({ ...logForm, action: e.target.value })}\n                >\n                  <option value=\"Comment\">Comment</option>\n                  <option value=\"Maintenance\">Maintenance</option>\n                  <option value=\"Repair\">Repair</option>\n                  <option value=\"Inspection\">Inspection</option>\n                  <option value=\"Condition Changed\">Condition Changed</option>\n                  <option value=\"Status Changed\">Status Changed</option>\n                </Select>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                  value={logForm.description}\n                  onChange={(e) => setLogForm({ ...logForm, description: e.target.value })}\n                  placeholder=\"Describe what was done...\"\n                  rows={3}\n                />\n              </FormControl>\n\n              {(logForm.action === \"Condition Changed\" || logForm.action === \"Inspection\") && (\n                <SimpleGrid columns={2} spacing={4} w=\"full\">\n                  <FormControl>\n                    <FormLabel>Condition Before</FormLabel>\n                    <Select\n                      value={logForm.conditionBefore}\n                      onChange={(e) => setLogForm({ ...logForm, conditionBefore: e.target.value })}\n                    >\n                      <option value=\"\">Select...</option>\n                      <option value=\"NEW\">New</option>\n                      <option value=\"EXCELLENT\">Excellent</option>\n                      <option value=\"GOOD\">Good</option>\n                      <option value=\"FAIR\">Fair</option>\n                      <option value=\"POOR\">Poor</option>\n                      <option value=\"BROKEN\">Broken</option>\n                    </Select>\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel>Condition After</FormLabel>\n                    <Select\n                      value={logForm.conditionAfter}\n                      onChange={(e) => setLogForm({ ...logForm, conditionAfter: e.target.value })}\n                    >\n                      <option value=\"\">Select...</option>\n                      <option value=\"NEW\">New</option>\n                      <option value=\"EXCELLENT\">Excellent</option>\n                      <option value=\"GOOD\">Good</option>\n                      <option value=\"FAIR\">Fair</option>\n                      <option value=\"POOR\">Poor</option>\n                      <option value=\"BROKEN\">Broken</option>\n                    </Select>\n                  </FormControl>\n                </SimpleGrid>\n              )}\n\n              {(logForm.action === \"Maintenance\" || logForm.action === \"Repair\") && (\n                <>\n                  <FormControl>\n                    <FormLabel>Cost</FormLabel>\n                    <NumberInput\n                      value={logForm.cost}\n                      onChange={(value) => setLogForm({ ...logForm, cost: Number(value) })}\n                      precision={2}\n                      min={0}\n                    >\n                      <NumberInputField />\n                    </NumberInput>\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel>Next Action Date</FormLabel>\n                    <Input\n                      type=\"date\"\n                      value={logForm.nextActionDate}\n                      onChange={(e) => setLogForm({ ...logForm, nextActionDate: e.target.value })}\n                    />\n                  </FormControl>\n                </>\n              )}\n\n              <FormControl>\n                <FormLabel>Notes</FormLabel>\n                <Textarea\n                  value={logForm.notes}\n                  onChange={(e) => setLogForm({ ...logForm, notes: e.target.value })}\n                  placeholder=\"Additional notes...\"\n                  rows={2}\n                />\n              </FormControl>\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              variant=\"outline\"\n              mr={3}\n              onClick={onLogModalClose}\n              borderColor={cardBorder}\n              color={textPrimary}\n              _hover={{ bg: cardGradientBg }}\n            >\n              Cancel\n            </Button>\n            <Button\n              bg={primaryColor}\n              color=\"white\"\n              _hover={{ bg: primaryHover }}\n              onClick={handleAddLog}\n              isLoading={addingLog}\n            >\n              Add Entry\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      {/* QR Code Modal */}\n      <Modal isOpen={isQrModalOpen} onClose={onQrModalClose} size=\"md\">\n        <ModalOverlay />\n        <ModalContent bg={cardGradientBg} backdropFilter=\"blur(10px)\" border=\"1px\" borderColor={cardBorder}>\n          <ModalHeader color={textPrimary}>Asset QR Code</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack spacing={4} ref={qrCodeRef}>\n              <Text fontWeight=\"bold\" fontSize=\"lg\" color={textPrimary}>\n                {asset.name}\n              </Text>\n              <Text color={textSecondary}>ID: {asset.assetId}</Text>\n              {asset.qrCode && (\n                <Image\n                  src={asset.qrCode}\n                  alt=\"Asset QR Code\"\n                  boxSize=\"250px\"\n                  mx=\"auto\"\n                />\n              )}\n              <Text fontSize=\"sm\" color={textSecondary} textAlign=\"center\">\n                Scan this code to view asset details\n              </Text>\n              {asset.publicUrl && (\n                <Link href={asset.publicUrl} isExternal color={primaryColor} fontSize=\"sm\">\n                  {asset.publicUrl} <ExternalLinkIcon mx=\"2px\" />\n                </Link>\n              )}\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              onClick={printQRCode}\n              leftIcon={<FaPrint />}\n              bg={primaryColor}\n              color=\"white\"\n              _hover={{ bg: primaryHover }}\n              mr={3}\n            >\n              Print\n            </Button>\n            <Button\n              onClick={onQrModalClose}\n              variant=\"outline\"\n              borderColor={cardBorder}\n              color={textPrimary}\n              _hover={{ bg: cardGradientBg }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default AssetDetails;"],"names":["GET_ASSET_DETAILS","gql","_templateObject","_taggedTemplateLiteral","ADD_ASSET_LOG","_templateObject2","DELETE_ASSET","_templateObject3","AssetDetails","_asset$assetType","_asset$assetType2","usePageTitle","navigate","useNavigate","id","useParams","toast","useToast","user","useAuth","colorMode","useColorMode","hasPermission","permissions","some","permission","_user$permissions","includes","qrCodeRef","useRef","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","successGreen","errorRed","isOpen","isLogModalOpen","onOpen","onLogModalOpen","onClose","onLogModalClose","useDisclosure","isQrModalOpen","onQrModalOpen","onQrModalClose","logForm","setLogForm","useState","action","description","conditionBefore","conditionAfter","cost","notes","nextActionDate","photos","loading","error","data","refetch","useQuery","variables","addAssetLog","addingLog","useMutation","onCompleted","title","status","duration","isClosable","onError","message","deleteAsset","handleDelete","async","window","confirm","getConditionColor","condition","getActionIcon","printQRCode","current","printWindow","open","asset","document","write","concat","name","assetId","qrCode","company","close","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","assetsModuleConfig","Container","maxW","px","base","md","py","flex","VStack","spacing","Spinner","size","color","Text","FooterWithFourColumns","logs","assetLogs","align","Flex","justify","wrap","gap","HStack","IconButton","icon","ArrowBackIcon","variant","_hover","onClick","fontSize","fontWeight","assetType","FaQrcode","Button","leftIcon","borderColor","width","FaPrint","AddIcon","EditIcon","DeleteIcon","Badge","colorScheme","getStatusColor","nextMaintenanceDate","Date","Tabs","TabList","Tab","length","TabPanels","TabPanel","SimpleGrid","columns","Card","backdropFilter","boxShadow","border","borderRadius","CardHeader","CardBody","direction","manufacturer","model","serialNumber","barcode","assignedTo","mt","Avatar","fName","lName","src","profilePhoto","email","location","building","floor","room","section","filter","Boolean","join","purchaseDate","toLocaleDateString","purchasePrice","toFixed","supplier","warrantyExpiry","Stat","StatLabel","StatNumber","Math","getTime","StatHelpText","tags","Wrap","map","tag","WrapItem","Tag","createdAt","toLocaleString","updatedAt","publicUrl","Link","href","isExternal","ExternalLinkIcon","mx","customFields","mb","p","style","whiteSpace","wordWrap","JSON","stringify","parse","photo","index","Image","alt","cursor","FaHistory","log","borderWidth","timestamp","CalendarIcon","boxSize","idx","objectFit","createdBy","lastMaintenanceDate","maintenanceIntervalDays","maintenanceNotes","textAlign","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","FormLabel","Select","value","onChange","e","_objectSpread","target","Textarea","placeholder","rows","w","_Fragment","NumberInput","Number","precision","min","NumberInputField","Input","type","ModalFooter","mr","input","undefined","isLoading","ref"],"sourceRoot":""}