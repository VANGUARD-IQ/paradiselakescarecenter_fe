{"version":3,"file":"static/js/9329.550bdc3d.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/ArrowUp.mjs","../node_modules/@chakra-ui/icons/dist/esm/ArrowDown.mjs","pages/bills/Bills.tsx"],"sourcesContent":["import { createIcon } from '@chakra-ui/react';\n\nconst ArrowUpIcon = createIcon({\n  d: \"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\",\n  displayName: \"ArrowUpIcon\"\n});\n\nexport { ArrowUpIcon };\n","import { createIcon } from '@chakra-ui/react';\n\nconst ArrowDownIcon = createIcon({\n  d: \"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\",\n  displayName: \"ArrowDownIcon\"\n});\n\nexport { ArrowDownIcon };\n","import React, { useMemo, useState } from \"react\";\nimport {\n    Box,\n    Container,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Text,\n    Heading,\n    Card,\n    CardHeader,\n    CardBody,\n    Button,\n    Skeleton,\n    useToast,\n    Badge,\n    HStack,\n    IconButton,\n    SimpleGrid,\n    Stat,\n    StatLabel,\n    StatNumber,\n    StatHelpText,\n    Tooltip,\n    VStack,\n    Progress,\n    Divider,\n    useColorMode,\n    Select,\n} from \"@chakra-ui/react\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { ViewIcon, DeleteIcon, AddIcon, ArrowUpIcon, ArrowDownIcon } from \"@chakra-ui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport billsModuleConfig from \"./moduleConfig\";\nimport { FiDollarSign, FiCheckCircle, FiClock, FiCalendar, FiSend, FiFileText, FiTrendingUp, FiTarget } from \"react-icons/fi\";\nimport { getColor } from \"../../brandConfig\";\nimport { Bill, BillStatus, BillCurrency } from \"../../generated/graphql\";\n\nconst GET_ALL_BILLS = gql`\n  query GetAllBills {\n    bills {\n      id\n      status\n      isPaid\n      issuedBy\n      currency\n      lineItems {\n        id\n        description\n        amount\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n      tenantId\n    }\n  }\n`;\n\nconst GET_CLIENT_BY_BILL = gql`\n  query GetClientDetailsByBillId($billId: ID!) {\n    getClientDetailsByBillId(billId: $billId) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      businessName\n    }\n  }\n`;\n\nconst DELETE_BILL = gql`\n  mutation DeleteBill($id: ID!) {\n    deleteBill(id: $id)\n  }\n`;\n\ninterface LineItem {\n    description: string;\n    amount: number;\n}\n\n\ninterface GetBillsResponse {\n    bills: Bill[];\n}\n\ninterface ClientInfo {\n    id: string;\n    fName: string;\n    lName: string;\n    email: string;\n    phoneNumber: string;\n    businessName: string;\n}\n\nconst StatCard = ({\n    title,\n    stat,\n    icon,\n    color,\n    helpText,\n    trend,\n    progress,\n    goal\n}: {\n    title: string;\n    stat: number | string;\n    icon: React.ReactNode;\n    color: string;\n    helpText?: string;\n    trend?: { value: number; isPositive: boolean };\n    progress?: number;\n    goal?: string;\n}) => {\n    const { colorMode } = useColorMode();\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    \n    return (\n        <Box\n            p={6}\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            borderRadius=\"lg\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px\"\n            borderColor={cardBorder}\n            position=\"relative\"\n        >\n            <VStack align=\"stretch\" spacing={3}>\n                <HStack spacing={4}>\n                    <Box color={color}>\n                        {icon}\n                    </Box>\n                    <Stat flex={1}>\n                        <StatLabel color={textMuted} fontSize=\"md\" fontWeight=\"medium\">{title}</StatLabel>\n                        <HStack align=\"baseline\" spacing={2}>\n                            <StatNumber fontSize=\"4xl\" fontWeight=\"bold\" color={textPrimary}>\n                                {stat}\n                            </StatNumber>\n                            {trend && (\n                                <HStack spacing={1} color={trend.isPositive ? \"green.400\" : \"red.400\"}>\n                                    {trend.isPositive ? <ArrowUpIcon boxSize={3} /> : <ArrowDownIcon boxSize={3} />}\n                                    <Text fontSize=\"sm\" fontWeight=\"medium\">\n                                        {Math.abs(trend.value)}%\n                                    </Text>\n                                </HStack>\n                            )}\n                        </HStack>\n                        {helpText && (\n                            <StatHelpText color={textMuted} fontSize=\"sm\" fontWeight=\"medium\">\n                                {helpText}\n                            </StatHelpText>\n                        )}\n                    </Stat>\n                </HStack>\n                {progress !== undefined && (\n                    <Box>\n                        <Progress \n                            value={progress} \n                            size=\"sm\" \n                            colorScheme={progress >= 100 ? \"green\" : progress >= 50 ? \"yellow\" : \"red\"}\n                            borderRadius=\"full\"\n                        />\n                        {goal && (\n                            <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                                Goal: {goal}\n                            </Text>\n                        )}\n                    </Box>\n                )}\n            </VStack>\n        </Box>\n    );\n};\n\n// Component to fetch and display client info for each bill\nconst ClientCell = ({ billId }: { billId: string }) => {\n    const { colorMode } = useColorMode();\n    const { loading, error, data } = useQuery(GET_CLIENT_BY_BILL, {\n        variables: { billId },\n        skip: !billId,\n    });\n\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    \n    if (loading) return <Skeleton height=\"20px\" width=\"120px\" />;\n    if (error || !data?.getClientDetailsByBillId) return <Text color={textMuted}>-</Text>;\n\n    const client = data.getClientDetailsByBillId;\n    return <Text color={textPrimary}>{client.fName} {client.lName}</Text>;\n};\n\nconst Bills = () => {\n    usePageTitle(\"Bills\");\n    const navigate = useNavigate();\n    const { colorMode } = useColorMode();\n    const { loading, error, data, refetch } = useQuery<GetBillsResponse>(GET_ALL_BILLS);\n    const [deleteBill] = useMutation(DELETE_BILL);\n    const toast = useToast();\n\n    // Consistent styling from brandConfig with theme support\n    const bg = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    React.useEffect(() => {\n        if (data) {\n            console.log(\"GET_ALL_BILLS response:\", data);\n        }\n    }, [data]);\n\n    const formatDate = (dateString: string) => {\n        return new Date(dateString).toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n        });\n    };\n\n    const formatCurrency = (amount: number) => {\n        return amount.toLocaleString(\"en-US\", {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        });\n    };\n\n    const formatMonthName = (monthKey: string) => {\n        const [year, month] = monthKey.split('-');\n        const date = new Date(parseInt(year), parseInt(month) - 1, 1);\n        return date.toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"long\",\n        });\n    };\n\n    const getWeekNumber = (date: Date) => {\n        const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n        const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n        return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n    };\n\n    const currentWeekNumber = getWeekNumber(new Date());\n\n    // Filter state - default to showing SENT bills only\n    const [statusFilter, setStatusFilter] = useState<string>(\"SENT\");\n    const [paymentFilter, setPaymentFilter] = useState<string>(\"ALL\");\n    const [dateFilter, setDateFilter] = useState<string>(\"ALL\");\n\n    // Month view state - null means show current live metrics\n    const [selectedMonth, setSelectedMonth] = useState<string | null>(null);\n\n    // Calculate metrics with time-based filtering\n    const billMetrics = useMemo(() => {\n        if (!data?.bills) return {\n            last7Days: { proposal: 0, draft: 0, sent: 0, paid: 0, proposalValue: 0, draftValue: 0, sentValue: 0, paidValue: 0, paidProposals: 0, paidProposalValue: 0 },\n            last30Days: { proposal: 0, draft: 0, sent: 0, paid: 0, proposalValue: 0, draftValue: 0, sentValue: 0, paidValue: 0, paidProposals: 0, paidProposalValue: 0 },\n            allTime: { proposal: 0, draft: 0, sent: 0, paid: 0, proposalValue: 0, draftValue: 0, sentValue: 0, paidValue: 0, unpaidValue: 0, paidProposals: 0, paidProposalValue: 0 },\n            trends: { proposal: 0, draft: 0, sent: 0, paid: 0, revenue: 0 },\n            selectedMonthMetrics: null\n        };\n\n        const now = new Date();\n        const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        const fourteenDaysAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n        const calculateMetrics = (bills: Bill[]) => {\n            return bills.reduce((acc, bill) => {\n                const total = bill.lineItems?.reduce((sum, item) => sum + item.amount, 0);\n                \n                if (bill.status === \"PROPOSAL\") {\n                    acc.proposal++;\n                    acc.proposalValue += total || 0;\n                    if (bill.isPaid) {\n                        // Track paid proposals separately\n                        acc.paidProposals = (acc.paidProposals || 0) + 1;\n                        acc.paidProposalValue = (acc.paidProposalValue || 0) + (total || 0);\n                    }\n                } else if (bill.status === \"DRAFT\") {\n                    acc.draft++;\n                    acc.draftValue += total || 0;\n                } else if (bill.status === \"SENT\") {\n                    acc.sent++;\n                    acc.sentValue += total || 0;\n                    if (bill.isPaid) {\n                        acc.paid++;\n                        acc.paidValue += total || 0;\n                    } else {\n                        acc.unpaidValue = (acc.unpaidValue || 0) + (total || 0);\n                    }\n                }\n                \n                return acc;\n            }, { proposal: 0, draft: 0, sent: 0, paid: 0, proposalValue: 0, draftValue: 0, sentValue: 0, paidValue: 0, unpaidValue: 0, paidProposals: 0, paidProposalValue: 0 });\n        };\n\n        // Last 7 days - use updatedAt for SENT bills (when they were actually sent)\n        const last7DaysBills = data.bills.filter(bill => {\n            const dateToCheck = bill.status === \"SENT\" ? new Date(bill.updatedAt) : new Date(bill.createdAt);\n            return dateToCheck >= sevenDaysAgo;\n        });\n        const last7Days = calculateMetrics(last7DaysBills);\n\n        // Previous 7 days (for trend calculation)\n        const prev7DaysBills = data.bills.filter(bill => {\n            const dateToCheck = bill.status === \"SENT\" ? new Date(bill.updatedAt) : new Date(bill.createdAt);\n            return dateToCheck >= fourteenDaysAgo && dateToCheck < sevenDaysAgo;\n        });\n        const prev7Days = calculateMetrics(prev7DaysBills);\n\n        // Last 30 days - use updatedAt for SENT bills\n        const last30DaysBills = data.bills.filter(bill => {\n            const dateToCheck = bill.status === \"SENT\" ? new Date(bill.updatedAt) : new Date(bill.createdAt);\n            return dateToCheck >= thirtyDaysAgo;\n        });\n        const last30Days = calculateMetrics(last30DaysBills);\n\n        // All time\n        const allTime = calculateMetrics(data.bills);\n\n        // Calculate trends (% change from previous period)\n        const calculateTrend = (current: number, previous: number) => {\n            if (previous === 0) return current > 0 ? 100 : 0;\n            return Math.round(((current - previous) / previous) * 100);\n        };\n\n        const trends = {\n            proposal: calculateTrend(last7Days.proposal, prev7Days.proposal),\n            draft: calculateTrend(last7Days.draft, prev7Days.draft),\n            sent: calculateTrend(last7Days.sent, prev7Days.sent),\n            paid: calculateTrend(last7Days.paid, prev7Days.paid),\n            revenue: calculateTrend(last7Days.paidValue, prev7Days.paidValue)\n        };\n\n        // Calculate metrics for selected month if one is chosen\n        let selectedMonthMetrics = null;\n        if (selectedMonth) {\n            const [year, month] = selectedMonth.split('-').map(Number);\n            const monthStart = new Date(year, month - 1, 1); // month is 0-indexed\n            const monthEnd = new Date(year, month, 0, 23, 59, 59); // last day of month\n\n            const monthBills = data.bills.filter(bill => {\n                const billDate = bill.status === \"SENT\" ? new Date(bill.updatedAt) : new Date(bill.createdAt);\n                return billDate >= monthStart && billDate <= monthEnd;\n            });\n\n            selectedMonthMetrics = calculateMetrics(monthBills);\n        }\n\n        return { last7Days, last30Days, allTime, trends, selectedMonthMetrics };\n    }, [data, selectedMonth]);\n\n    // Weekly goal tracking\n    const weeklyGoals = {\n        proposals: 3, // At least 3 proposals per week\n        drafts: 2,    // At least 2 drafts per week\n        sent: 2,      // At least 2 bills sent per week\n        revenue: 5000 // Target revenue\n    };\n\n    const goalProgress = {\n        proposals: Math.min(100, (billMetrics.last7Days.proposal / weeklyGoals.proposals) * 100),\n        drafts: Math.min(100, (billMetrics.last7Days.draft / weeklyGoals.drafts) * 100),\n        sent: Math.min(100, (billMetrics.last7Days.sent / weeklyGoals.sent) * 100),\n        revenue: Math.min(100, (billMetrics.last7Days.paidValue / weeklyGoals.revenue) * 100)\n    };\n\n    // Generate list of available months from bills data\n    const availableMonths = useMemo(() => {\n        if (!data?.bills) return [];\n\n        const monthsSet = new Set<string>();\n        data.bills.forEach(bill => {\n            const billDate = bill.status === \"SENT\" ? new Date(bill.updatedAt) : new Date(bill.createdAt);\n            const monthKey = `${billDate.getFullYear()}-${String(billDate.getMonth() + 1).padStart(2, '0')}`;\n            monthsSet.add(monthKey);\n        });\n\n        // Convert to array and sort descending (newest first)\n        return Array.from(monthsSet).sort((a, b) => b.localeCompare(a));\n    }, [data?.bills]);\n\n    // Filter bills based on selected filters\n    const filteredBills = useMemo(() => {\n        if (!data?.bills) return [];\n\n        const now = new Date();\n\n        // If a specific month is selected, use that for date filtering\n        let dateStart: Date | null = null;\n        let dateEnd: Date | null = null;\n\n        if (selectedMonth) {\n            const [year, month] = selectedMonth.split('-').map(Number);\n            dateStart = new Date(year, month - 1, 1); // Start of month\n            dateEnd = new Date(year, month, 0, 23, 59, 59); // End of month\n        } else {\n            // Otherwise use the regular date filter\n            switch (dateFilter) {\n                case \"THIS_WEEK\":\n                    dateStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n                    break;\n                case \"THIS_MONTH\":\n                    dateStart = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n                    break;\n                case \"LAST_6_MONTHS\":\n                    dateStart = new Date(now.getTime() - 180 * 24 * 60 * 60 * 1000);\n                    break;\n                case \"THIS_YEAR\":\n                    dateStart = new Date(now.getFullYear(), 0, 1); // Jan 1st of current year\n                    break;\n                case \"ALL\":\n                default:\n                    break;\n            }\n        }\n\n        return data.bills.filter(bill => {\n            const statusMatch = statusFilter === \"ALL\" || bill.status === statusFilter;\n            const paymentMatch = paymentFilter === \"ALL\" ||\n                (paymentFilter === \"PAID\" && bill.isPaid) ||\n                (paymentFilter === \"PENDING\" && !bill.isPaid);\n\n            // For date filtering, use updatedAt for SENT bills, createdAt for others\n            const billDate = bill.status === \"SENT\" ? new Date(bill.updatedAt) : new Date(bill.createdAt);\n\n            let dateMatch = true;\n            if (dateStart && dateEnd) {\n                // Specific month range\n                dateMatch = billDate >= dateStart && billDate <= dateEnd;\n            } else if (dateStart) {\n                // From dateStart onwards\n                dateMatch = billDate >= dateStart;\n            }\n\n            return statusMatch && paymentMatch && dateMatch;\n        });\n    }, [data?.bills, statusFilter, paymentFilter, dateFilter, selectedMonth]);\n\n    const handleViewBill = (bill: Bill) => {\n        window.open(`/bill/${bill.id}`, '_blank');\n    };\n\n    const handleDeleteBill = async (billId: string) => {\n        if (window.confirm(\"Are you sure you want to delete this bill?\")) {\n            try {\n                await deleteBill({\n                    variables: { id: billId }\n                });\n                toast({\n                    title: \"Bill deleted\",\n                    status: \"success\",\n                    duration: 3000,\n                    isClosable: true,\n                });\n                refetch(); // Refresh the bills list\n            } catch (error) {\n                toast({\n                    title: \"Error deleting bill\",\n                    description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n            }\n        }\n    };\n\n    if (error) {\n        toast({\n            title: \"Error loading bills\",\n            description: error.message,\n            status: \"error\",\n            duration: 5000,\n            isClosable: true,\n        });\n    }\n\n    return (\n        <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n            <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    borderWidth=\"1px\"\n                    borderColor={cardBorder}\n                    overflow=\"hidden\"\n                >\n                    <CardHeader borderBottomWidth=\"1px\" borderColor={cardBorder}>\n                        <HStack justify=\"space-between\">\n                            <Heading size=\"lg\" color={textPrimary}>💰 Bills</Heading>\n                            <Button\n                                bg=\"white\"\n                                color=\"black\"\n                                onClick={() => navigate(\"/bills/new\")}\n                                leftIcon={<AddIcon />}\n                                _hover={{\n                                    bg: \"gray.100\",\n                                    transform: \"translateY(-2px)\"\n                                }}\n                            >\n                                New Bill\n                            </Button>\n                        </HStack>\n                    </CardHeader>\n\n                    <Box px={6} pb={6}>\n                        {/* Month Selector */}\n                        <Box mb={6}>\n                            <HStack spacing={4} align=\"center\">\n                                <Text fontSize=\"md\" fontWeight=\"medium\" color={textMuted}>\n                                    View by Month:\n                                </Text>\n                                <Select\n                                    value={selectedMonth || \"\"}\n                                    onChange={(e) => setSelectedMonth(e.target.value || null)}\n                                    bg={cardGradientBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    maxW=\"300px\"\n                                >\n                                    <option value=\"\">Current (Live Metrics)</option>\n                                    {availableMonths.map(month => (\n                                        <option key={month} value={month}>\n                                            {formatMonthName(month)}\n                                        </option>\n                                    ))}\n                                </Select>\n                                {selectedMonth && (\n                                    <Button\n                                        size=\"sm\"\n                                        onClick={() => setSelectedMonth(null)}\n                                        colorScheme=\"blue\"\n                                        variant=\"outline\"\n                                    >\n                                        Clear\n                                    </Button>\n                                )}\n                            </HStack>\n                        </Box>\n\n                        {/* Show either selected month metrics OR current metrics */}\n                        {selectedMonth && billMetrics.selectedMonthMetrics ? (\n                            <>\n                                {/* Selected Month Metrics */}\n                                <Text fontSize=\"xl\" fontWeight=\"bold\" color={textPrimary} mb={4}>\n                                    📊 {formatMonthName(selectedMonth)}\n                                </Text>\n                                <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6} mb={6}>\n                                    <StatCard\n                                        title=\"Bills Sent\"\n                                        stat={`$${formatCurrency(billMetrics.selectedMonthMetrics.sentValue)}`}\n                                        icon={<FiSend size=\"3em\" />}\n                                        color=\"blue.500\"\n                                        helpText={`${billMetrics.selectedMonthMetrics.sent} bills sent`}\n                                    />\n                                    <StatCard\n                                        title=\"Paid\"\n                                        stat={`$${formatCurrency(billMetrics.selectedMonthMetrics.paidValue)}`}\n                                        icon={<FiCheckCircle size=\"3em\" />}\n                                        color=\"green.500\"\n                                        helpText={`${billMetrics.selectedMonthMetrics.paid} bills paid`}\n                                    />\n                                    <StatCard\n                                        title=\"Outstanding\"\n                                        stat={`$${formatCurrency(billMetrics.selectedMonthMetrics.sentValue - billMetrics.selectedMonthMetrics.paidValue)}`}\n                                        icon={<FiClock size=\"3em\" />}\n                                        color=\"red.500\"\n                                        helpText={`${billMetrics.selectedMonthMetrics.sent - billMetrics.selectedMonthMetrics.paid} unpaid bills`}\n                                    />\n                                </SimpleGrid>\n                            </>\n                        ) : (\n                            <>\n                        {/* Primary KPIs - Last 7 Days */}\n                        <Text fontSize=\"xl\" fontWeight=\"bold\" color={textPrimary} mb={4}>\n                            📊 Last 7 Days <Text as=\"span\" fontSize=\"md\" color={textMuted} fontWeight=\"normal\">(Week {currentWeekNumber} of {new Date().getFullYear()})</Text>\n                        </Text>\n                        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6} mb={6}>\n                            <StatCard\n                                title=\"Bills Sent\"\n                                stat={`$${formatCurrency(billMetrics.last7Days.sentValue)}`}\n                                icon={<FiSend size=\"3em\" />}\n                                color=\"blue.500\"\n                                helpText={`${billMetrics.last7Days.sent} bills sent`}\n                            />\n                            <StatCard\n                                title=\"Paid\"\n                                stat={`$${formatCurrency(billMetrics.last7Days.paidValue)}`}\n                                icon={<FiCheckCircle size=\"3em\" />}\n                                color=\"green.500\"\n                                helpText={`${billMetrics.last7Days.paid} bills paid`}\n                            />\n                            <StatCard\n                                title=\"Outstanding\"\n                                stat={`$${formatCurrency(billMetrics.last7Days.sentValue - billMetrics.last7Days.paidValue)}`}\n                                icon={<FiClock size=\"3em\" />}\n                                color=\"red.500\"\n                                helpText={`${billMetrics.last7Days.sent - billMetrics.last7Days.paid} unpaid bills`}\n                            />\n                        </SimpleGrid>\n\n                        <Divider my={4} borderColor={cardBorder} />\n\n                        {/* 30-Day Metrics */}\n                        <Text fontSize=\"xl\" fontWeight=\"bold\" color={textPrimary} mb={4}>\n                            📈 Last 30 Days\n                        </Text>\n                        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6} mb={6}>\n                            <StatCard\n                                title=\"Bills Sent\"\n                                stat={`$${formatCurrency(billMetrics.last30Days.sentValue)}`}\n                                icon={<FiSend size=\"3em\" />}\n                                color=\"blue.500\"\n                                helpText={`${billMetrics.last30Days.sent} bills sent`}\n                            />\n                            <StatCard\n                                title=\"Paid\"\n                                stat={`$${formatCurrency(billMetrics.last30Days.paidValue)}`}\n                                icon={<FiCheckCircle size=\"3em\" />}\n                                color=\"green.500\"\n                                helpText={`${billMetrics.last30Days.paid} bills paid`}\n                            />\n                            <StatCard\n                                title=\"Outstanding\"\n                                stat={`$${formatCurrency(billMetrics.last30Days.sentValue - billMetrics.last30Days.paidValue)}`}\n                                icon={<FiClock size=\"3em\" />}\n                                color=\"red.500\"\n                                helpText={`${billMetrics.last30Days.sent - billMetrics.last30Days.paid} unpaid bills`}\n                            />\n                        </SimpleGrid>\n\n                        <Divider my={4} borderColor={cardBorder} />\n\n                        {/* All-Time Summary */}\n                        <Text fontSize=\"xl\" fontWeight=\"bold\" color={textPrimary} mb={4}>\n                            💼 All-Time Summary\n                        </Text>\n                        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>\n                            <StatCard\n                                title=\"Total Revenue\"\n                                stat={`$${formatCurrency(billMetrics.allTime.paidValue)}`}\n                                icon={<FiDollarSign size=\"3em\" />}\n                                color=\"green.500\"\n                                helpText={`${billMetrics.allTime.paid} bills paid`}\n                            />\n                            <StatCard\n                                title=\"Outstanding\"\n                                stat={`$${formatCurrency(billMetrics.allTime.unpaidValue)}`}\n                                icon={<FiClock size=\"3em\" />}\n                                color=\"red.500\"\n                                helpText={`${billMetrics.allTime.sent - billMetrics.allTime.paid} unpaid bills`}\n                            />\n                            <StatCard\n                                title=\"Total Sent\"\n                                stat={`$${formatCurrency(billMetrics.allTime.sentValue)}`}\n                                icon={<FiSend size=\"3em\" />}\n                                color=\"blue.500\"\n                                helpText={`${billMetrics.allTime.sent} bills sent`}\n                            />\n                        </SimpleGrid>\n                        </>\n                        )}\n                    </Box>\n\n                    <CardBody>\n                        {/* Filter Controls */}\n                        <HStack spacing={4} mb={6} px={6} wrap=\"wrap\">\n                            <Box flex={1} minW=\"200px\">\n                                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textMuted} mb={2}>\n                                    Filter by Status\n                                </Text>\n                                <Select\n                                    value={statusFilter}\n                                    onChange={(e) => setStatusFilter(e.target.value)}\n                                    bg={cardGradientBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                >\n                                    <option value=\"ALL\">All Statuses</option>\n                                    <option value=\"DRAFT\">Drafts Only</option>\n                                    <option value=\"PROPOSAL\">Proposals Only</option>\n                                    <option value=\"SENT\">Sent Bills Only</option>\n                                </Select>\n                            </Box>\n                            <Box flex={1} minW=\"200px\">\n                                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textMuted} mb={2}>\n                                    Filter by Payment\n                                </Text>\n                                <Select\n                                    value={paymentFilter}\n                                    onChange={(e) => setPaymentFilter(e.target.value)}\n                                    bg={cardGradientBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                >\n                                    <option value=\"ALL\">All Payments</option>\n                                    <option value=\"PAID\">Paid Only</option>\n                                    <option value=\"PENDING\">Pending Only</option>\n                                </Select>\n                            </Box>\n                            <Box flex={1} minW=\"200px\">\n                                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textMuted} mb={2}>\n                                    Filter by Time Period\n                                </Text>\n                                <Select\n                                    value={dateFilter}\n                                    onChange={(e) => setDateFilter(e.target.value)}\n                                    bg={cardGradientBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                >\n                                    <option value=\"ALL\">All Time</option>\n                                    <option value=\"THIS_WEEK\">This Week (Last 7 Days)</option>\n                                    <option value=\"THIS_MONTH\">This Month (Last 30 Days)</option>\n                                    <option value=\"LAST_6_MONTHS\">Last 6 Months</option>\n                                    <option value=\"THIS_YEAR\">This Year</option>\n                                </Select>\n                            </Box>\n                            <Box flex={1} minW=\"150px\">\n                                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textMuted} mb={2}>\n                                    Showing Results\n                                </Text>\n                                <Text fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n                                    {filteredBills.length} bills\n                                </Text>\n                            </Box>\n                        </HStack>\n\n                        <Box overflowX=\"auto\">\n                            <Table variant=\"simple\">\n                                <Thead>\n                                    <Tr>\n                                        <Th color={textSecondary}>Bill ID</Th>\n                                        <Th color={textSecondary}>Client Name</Th>\n                                        <Th color={textSecondary}>Status</Th>\n                                        <Th color={textSecondary}>Total Amount</Th>\n                                        <Th color={textSecondary}>Items</Th>\n                                        <Th color={textSecondary}>Payment Status</Th>\n                                        <Th color={textSecondary}>Date</Th>\n                                        <Th color={textSecondary}>Actions</Th>\n                                    </Tr>\n                                </Thead>\n                                <Tbody>\n                                    {loading ? (\n                                        [...Array(3)].map((_, index) => (\n                                            <Tr key={`skeleton-${index}`}>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                                <Td><Skeleton height=\"20px\" /></Td>\n                                            </Tr>\n                                        ))\n                                    ) : filteredBills.length ? (\n                                        filteredBills.map((bill: Bill) => (\n                                            <Tr key={bill.id}>\n                                                <Td>\n                                                    <Text color={textPrimary}>{bill.id}</Text>\n                                                </Td>\n                                                <Td color={textPrimary}>\n                                                    <ClientCell billId={bill.id} />\n                                                </Td>\n                                                <Td>\n                                                    <Badge\n                                                        bg={\n                                                            bill.status === \"SENT\" ? \"rgba(59, 130, 246, 0.2)\" :\n                                                            bill.status === \"PROPOSAL\" ? \"rgba(147, 51, 234, 0.2)\" :\n                                                            \"rgba(251, 146, 60, 0.2)\"\n                                                        }\n                                                        color={\n                                                            bill.status === \"SENT\" ? \"#3B82F6\" :\n                                                            bill.status === \"PROPOSAL\" ? \"#9333EA\" :\n                                                            \"#FB923C\"\n                                                        }\n                                                        border=\"1px solid\"\n                                                        borderColor={\n                                                            bill.status === \"SENT\" ? \"rgba(59, 130, 246, 0.3)\" :\n                                                            bill.status === \"PROPOSAL\" ? \"rgba(147, 51, 234, 0.3)\" :\n                                                            \"rgba(251, 146, 60, 0.3)\"\n                                                        }\n                                                    >\n                                                        {bill.status}\n                                                    </Badge>\n                                                </Td>\n                                                <Td>\n                                                    <Text color={textPrimary}>\n                                                        ${bill.lineItems?.reduce((sum, item) => sum + item.amount, 0).toFixed(2)} {bill.currency || \"AUD\"}\n                                                    </Text>\n                                                </Td>\n                                                <Td>\n                                                    <Text color={textSecondary}>{bill.lineItems?.length || 0} items</Text>\n                                                </Td>\n                                                <Td>\n                                                    <Badge\n                                                        bg={bill.isPaid ? \"rgba(34, 197, 94, 0.2)\" : \"rgba(251, 191, 36, 0.2)\"}\n                                                        color={bill.isPaid ? \"#22C55E\" : \"#FBBF24\"}\n                                                        border=\"1px solid\"\n                                                        borderColor={bill.isPaid ? \"rgba(34, 197, 94, 0.3)\" : \"rgba(251, 191, 36, 0.3)\"}\n                                                    >\n                                                        {bill.isPaid ? \"Paid\" : \"Pending\"}\n                                                    </Badge>\n                                                </Td>\n                                                <Td>\n                                                    <Text color={textSecondary}>{formatDate(bill.createdAt)}</Text>\n                                                </Td>\n                                                <Td>\n                                                    <HStack spacing={2}>\n                                                        <Tooltip label=\"View bill details\" hasArrow>\n                                                            <IconButton\n                                                                aria-label=\"View bill details\"\n                                                                icon={<ViewIcon />}\n                                                                size=\"sm\"\n                                                                colorScheme=\"teal\"\n                                                                onClick={() => handleViewBill(bill)}\n                                                            />\n                                                        </Tooltip>\n                                                        <Tooltip label=\"Delete bill\" hasArrow>\n                                                            <IconButton\n                                                                aria-label=\"Delete bill\"\n                                                                icon={<DeleteIcon />}\n                                                                size=\"sm\"\n                                                                colorScheme=\"red\"\n                                                                onClick={() => handleDeleteBill(bill.id)}\n                                                            />\n                                                        </Tooltip>\n                                                    </HStack>\n                                                </Td>\n                                            </Tr>\n                                        ))\n                                    ) : (\n                                        <Tr>\n                                            <Td colSpan={8} textAlign=\"center\" py={8}>\n                                                <Text color={textMuted}>No bills found</Text>\n                                            </Td>\n                                        </Tr>\n                                    )}\n                                </Tbody>\n                            </Table>\n                        </Box>\n                    </CardBody>\n                </Card>\n            </Container>\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default Bills;"],"names":["ArrowUpIcon","createIcon","d","displayName","ArrowDownIcon","GET_ALL_BILLS","gql","_templateObject","_taggedTemplateLiteral","GET_CLIENT_BY_BILL","_templateObject2","DELETE_BILL","_templateObject3","StatCard","_ref","title","stat","icon","color","helpText","trend","progress","goal","colorMode","useColorMode","cardGradientBg","getColor","cardBorder","textPrimary","textMuted","_jsx","Box","p","bg","backdropFilter","borderRadius","boxShadow","border","borderColor","position","children","_jsxs","VStack","align","spacing","HStack","Stat","flex","StatLabel","fontSize","fontWeight","StatNumber","isPositive","boxSize","Text","Math","abs","value","StatHelpText","undefined","Progress","size","colorScheme","mt","ClientCell","_ref2","billId","loading","error","data","useQuery","variables","skip","Skeleton","height","width","getClientDetailsByBillId","client","fName","lName","Bills","usePageTitle","navigate","useNavigate","refetch","deleteBill","useMutation","toast","useToast","textSecondary","React","console","log","formatCurrency","amount","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatMonthName","monthKey","year","month","split","Date","parseInt","toLocaleDateString","currentWeekNumber","date","firstDayOfYear","getFullYear","pastDaysOfYear","getTime","ceil","getDay","getWeekNumber","statusFilter","setStatusFilter","useState","paymentFilter","setPaymentFilter","dateFilter","setDateFilter","selectedMonth","setSelectedMonth","billMetrics","useMemo","bills","last7Days","proposal","draft","sent","paid","proposalValue","draftValue","sentValue","paidValue","paidProposals","paidProposalValue","last30Days","allTime","unpaidValue","trends","revenue","selectedMonthMetrics","now","sevenDaysAgo","thirtyDaysAgo","fourteenDaysAgo","calculateMetrics","reduce","acc","bill","_bill$lineItems","total","lineItems","sum","item","status","isPaid","filter","updatedAt","createdAt","prev7Days","dateToCheck","calculateTrend","current","previous","round","map","Number","monthStart","monthEnd","billDate","weeklyGoals","availableMonths","min","monthsSet","Set","forEach","concat","String","getMonth","padStart","add","Array","from","sort","a","b","localeCompare","filteredBills","dateStart","dateEnd","statusMatch","paymentMatch","dateMatch","description","message","duration","isClosable","minHeight","display","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","billsModuleConfig","Container","maxW","py","Card","borderWidth","overflow","CardHeader","borderBottomWidth","justify","Heading","Button","onClick","leftIcon","AddIcon","_hover","transform","px","pb","mb","Select","onChange","e","target","variant","_Fragment","SimpleGrid","columns","base","md","FiSend","FiCheckCircle","FiClock","as","Divider","my","FiDollarSign","CardBody","wrap","minW","length","overflowX","Table","Thead","Tr","Th","Tbody","_","index","Td","_bill$lineItems2","_bill$lineItems3","dateString","id","Badge","toFixed","currency","day","Tooltip","label","hasArrow","IconButton","ViewIcon","window","open","handleViewBill","DeleteIcon","async","confirm","Error","handleDeleteBill","colSpan","textAlign","FooterWithFourColumns"],"sourceRoot":""}