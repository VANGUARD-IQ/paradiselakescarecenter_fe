{"version":3,"file":"static/js/521.f02e7acc.chunk.js","mappings":"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","sources":["../node_modules/@tiptap/extension-image/src/image.ts","../node_modules/@tiptap/extension-image/src/index.ts","pages/companyknowledge/CompanyKnowledgeEditor.tsx"],"sourcesContent":["import { mergeAttributes, Node, nodeInputRule } from '@tiptap/core'\n\nexport interface ImageOptions {\n  /**\n   * Controls if the image node should be inline or not.\n   * @default false\n   * @example true\n   */\n  inline: boolean\n\n  /**\n   * Controls if base64 images are allowed. Enable this if you want to allow\n   * base64 image urls in the `src` attribute.\n   * @default false\n   * @example true\n   */\n  allowBase64: boolean\n\n  /**\n   * HTML attributes to add to the image element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>\n}\n\nexport interface SetImageOptions {\n  src: string\n  alt?: string\n  title?: string\n  width?: number\n  height?: number\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    image: {\n      /**\n       * Add an image\n       * @param options The image attributes\n       * @example\n       * editor\n       *   .commands\n       *   .setImage({ src: 'https://tiptap.dev/logo.png', alt: 'tiptap', title: 'tiptap logo' })\n       */\n      setImage: (options: SetImageOptions) => ReturnType\n    }\n  }\n}\n\n/**\n * Matches an image to a ![image](src \"title\") on input.\n */\nexport const inputRegex = /(?:^|\\s)(!\\[(.+|:?)]\\((\\S+)(?:(?:\\s+)[\"'](\\S+)[\"'])?\\))$/\n\n/**\n * This extension allows you to insert images.\n * @see https://www.tiptap.dev/api/nodes/image\n */\nexport const Image = Node.create<ImageOptions>({\n  name: 'image',\n\n  addOptions() {\n    return {\n      inline: false,\n      allowBase64: false,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline() {\n    return this.options.inline\n  },\n\n  group() {\n    return this.options.inline ? 'inline' : 'block'\n  },\n\n  draggable: true,\n\n  addAttributes() {\n    return {\n      src: {\n        default: null,\n      },\n      alt: {\n        default: null,\n      },\n      title: {\n        default: null,\n      },\n      width: {\n        default: null,\n      },\n      height: {\n        default: null,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: this.options.allowBase64 ? 'img[src]' : 'img[src]:not([src^=\"data:\"])',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  parseMarkdown: (token, helpers) => {\n    return helpers.createNode('image', {\n      src: token.href,\n      title: token.title,\n      alt: token.text,\n    })\n  },\n\n  renderMarkdown: node => {\n    const src = node.attrs?.src ?? ''\n    const alt = node.attrs?.alt ?? ''\n    const title = node.attrs?.title ?? ''\n\n    return title ? `![${alt}](${src} \"${title}\")` : `![${alt}](${src})`\n  },\n\n  addCommands() {\n    return {\n      setImage:\n        options =>\n        ({ commands }) => {\n          return commands.insertContent({\n            type: this.name,\n            attrs: options,\n          })\n        },\n    }\n  },\n\n  addInputRules() {\n    return [\n      nodeInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => {\n          const [, , alt, src, title] = match\n\n          return { src, alt, title }\n        },\n      }),\n    ]\n  },\n})\n","import { Image } from './image.js'\n\nexport * from './image.js'\n\nexport default Image\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    Button,\n    VStack,\n    HStack,\n    FormControl,\n    FormLabel,\n    Input,\n    Textarea,\n    Select,\n    useColorMode,\n    useToast,\n    Spinner,\n    Card,\n    CardBody,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n    Switch,\n    IconButton,\n    Tooltip,\n    Divider,\n    Tag,\n    TagLabel,\n    TagCloseButton,\n    Flex,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\nimport {\n    FiBold,\n    FiItalic,\n    FiUnderline,\n    FiList,\n    FiLink,\n    FiCode,\n    FiAlignLeft,\n    FiAlignCenter,\n    FiAlignRight,\n    FiImage,\n    FiVideo,\n    FiUpload,\n} from \"react-icons/fi\";\nimport { useEditor, EditorContent } from \"@tiptap/react\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport Link from \"@tiptap/extension-link\";\nimport Underline from \"@tiptap/extension-underline\";\nimport TextAlign from \"@tiptap/extension-text-align\";\nimport Image from \"@tiptap/extension-image\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport companyKnowledgeModuleConfig from \"./moduleConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport DOMPurify from \"dompurify\";\n\nconst GET_ARTICLE = gql`\n    query GetArticle($id: ID!) {\n        companyKnowledgeArticle(id: $id) {\n            id\n            title\n            content\n            category\n            tags\n            visibility\n            allowPublicAccess\n            publicSlug\n            isPinned\n            isPublished\n            metaDescription\n        }\n    }\n`;\n\nconst CREATE_ARTICLE = gql`\n    mutation CreateArticle($input: CompanyKnowledgeInput!) {\n        createCompanyKnowledgeArticle(input: $input) {\n            id\n            title\n        }\n    }\n`;\n\nconst UPDATE_ARTICLE = gql`\n    mutation UpdateArticle($id: ID!, $input: UpdateCompanyKnowledgeInput!) {\n        updateCompanyKnowledgeArticle(id: $id, input: $input) {\n            id\n            title\n        }\n    }\n`;\n\ninterface ArticleFormData {\n    title: string;\n    content: string;\n    category: string;\n    tags: string[];\n    visibility: string;\n    allowPublicAccess: boolean;\n    publicSlug: string;\n    isPinned: boolean;\n    isPublished: boolean;\n    metaDescription: string;\n}\n\nconst CompanyKnowledgeEditor: React.FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    usePageTitle(id === \"new\" ? \"Create Article\" : \"Edit Article\");\n\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const [editorMode, setEditorMode] = useState<\"visual\" | \"source\">(\"visual\");\n    const [sourceContent, setSourceContent] = useState(\"\");\n    const [activeTab, setActiveTab] = useState(0);\n    const [newTag, setNewTag] = useState(\"\");\n\n    // Color mode values\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const inputBg = useColorModeValue(\"white\", \"gray.700\");\n    const primaryBlue = useColorModeValue(\"blue.500\", \"blue.400\");\n    const primaryBlueHover = useColorModeValue(\"blue.600\", \"blue.500\");\n    const overlayBg = useColorModeValue(\"gray.100\", \"gray.700\");\n    const instructionBg = useColorModeValue(\"blue.50\", \"blue.900\");\n    const instructionBorder = useColorModeValue(\"blue.200\", \"blue.700\");\n\n    const [formData, setFormData] = useState<ArticleFormData>({\n        title: \"\",\n        content: \"\",\n        category: \"\",\n        tags: [],\n        visibility: \"PRIVATE\",\n        allowPublicAccess: false,\n        publicSlug: \"\",\n        isPinned: false,\n        isPublished: false,\n        metaDescription: \"\",\n    });\n\n    const isEditMode = id && id !== \"new\";\n\n    const { data, loading } = useQuery(GET_ARTICLE, {\n        variables: { id: id as string },\n        skip: !isEditMode,\n        onCompleted: (data) => {\n            if (data?.companyKnowledgeArticle) {\n                const article = data.companyKnowledgeArticle;\n                setFormData({\n                    title: article.title || \"\",\n                    content: article.content || \"\",\n                    category: article.category || \"\",\n                    tags: article.tags || [],\n                    visibility: article.visibility || \"PRIVATE\",\n                    allowPublicAccess: article.allowPublicAccess || false,\n                    publicSlug: article.publicSlug || \"\",\n                    isPinned: article.isPinned || false,\n                    isPublished: article.isPublished || false,\n                    metaDescription: article.metaDescription || \"\",\n                });\n                setSourceContent(article.content || \"\");\n            }\n        },\n    });\n\n    const [createArticle, { loading: creating }] = useMutation(CREATE_ARTICLE, {\n        onCompleted: (data) => {\n            toast({\n                title: \"Article created\",\n                status: \"success\",\n                duration: 3000,\n            });\n            navigate(`/companyknowledge/${data.createCompanyKnowledgeArticle.id}`);\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error creating article\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n            });\n        },\n    });\n\n    const [updateArticle, { loading: updating }] = useMutation(UPDATE_ARTICLE, {\n        onCompleted: (data) => {\n            toast({\n                title: \"Article updated\",\n                status: \"success\",\n                duration: 3000,\n            });\n            navigate(`/companyknowledge/${data.updateCompanyKnowledgeArticle.id}`);\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error updating article\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n            });\n        },\n    });\n\n    // Initialize TipTap editor\n    const editor = useEditor({\n        extensions: [\n            StarterKit,\n            Underline,\n            Link.configure({\n                openOnClick: false,\n                HTMLAttributes: {\n                    style: \"color: #3434ef; text-decoration: underline;\",\n                },\n                autolink: true,\n                linkOnPaste: true,\n            }),\n            TextAlign.configure({\n                types: [\"heading\", \"paragraph\"],\n            }),\n            Image.configure({\n                HTMLAttributes: {\n                    class: \"article-image\",\n                },\n            }),\n        ],\n        content: formData.content,\n        onUpdate: ({ editor }) => {\n            if (editorMode === \"visual\") {\n                const html = editor.getHTML();\n                setFormData({ ...formData, content: html });\n                setSourceContent(html);\n            }\n        },\n    });\n\n    // Update editor when content changes externally\n    useEffect(() => {\n        if (editor && formData.content !== editor.getHTML() && editorMode === \"visual\") {\n            editor.commands.setContent(formData.content);\n        }\n    }, [formData.content, editor, editorMode]);\n\n    const handleSourceChange = (value: string) => {\n        setSourceContent(value);\n        setFormData({ ...formData, content: value });\n        if (editor) {\n            editor.commands.setContent(value);\n        }\n    };\n\n    const addLink = () => {\n        const url = window.prompt(\"Enter URL:\");\n        if (url && editor) {\n            editor.chain().focus().setLink({ href: url }).run();\n        }\n    };\n\n    const addImage = () => {\n        const url = window.prompt(\"Enter image URL (or upload via IPFS):\");\n        if (url && editor) {\n            editor.chain().focus().setImage({ src: url }).run();\n        }\n    };\n\n    const embedVideo = () => {\n        const url = window.prompt(\"Enter video URL (YouTube, Rumble, or IPFS):\");\n        if (url && editor) {\n            // Create an iframe embed for the video\n            let embedHtml = \"\";\n            if (url.includes(\"youtube.com\") || url.includes(\"youtu.be\")) {\n                const videoId = url.includes(\"youtu.be\")\n                    ? url.split(\"/\").pop()\n                    : new URL(url).searchParams.get(\"v\");\n                embedHtml = `<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/${videoId}\" frameborder=\"0\" allowfullscreen></iframe>`;\n            } else if (url.includes(\"rumble.com\")) {\n                embedHtml = `<iframe width=\"560\" height=\"315\" src=\"${url}\" frameborder=\"0\" allowfullscreen></iframe>`;\n            } else {\n                // Assume IPFS video\n                embedHtml = `<video width=\"560\" height=\"315\" controls><source src=\"${url}\" type=\"video/mp4\"></video>`;\n            }\n\n            editor.chain().focus().insertContent(embedHtml).run();\n        }\n    };\n\n    const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const content = e.target?.result as string;\n                if (file.name.endsWith(\".md\")) {\n                    // Import markdown - convert to HTML or set as source\n                    setSourceContent(content);\n                    setFormData({ ...formData, content });\n                } else {\n                    // Assume HTML\n                    setFormData({ ...formData, content });\n                    setSourceContent(content);\n                    if (editor) {\n                        editor.commands.setContent(content);\n                    }\n                }\n                toast({\n                    title: \"File imported\",\n                    status: \"success\",\n                    duration: 2000,\n                });\n            };\n            reader.readAsText(file);\n        }\n    };\n\n    const handleAddTag = () => {\n        if (newTag && !formData.tags.includes(newTag)) {\n            setFormData({ ...formData, tags: [...formData.tags, newTag] });\n            setNewTag(\"\");\n        }\n    };\n\n    const handleRemoveTag = (tag: string) => {\n        setFormData({ ...formData, tags: formData.tags.filter((t) => t !== tag) });\n    };\n\n    const handleSubmit = () => {\n        const input = {\n            title: formData.title,\n            content: formData.content,\n            category: formData.category || undefined,\n            tags: formData.tags.length > 0 ? formData.tags : undefined,\n            visibility: formData.visibility,\n            allowPublicAccess: formData.allowPublicAccess,\n            publicSlug: formData.publicSlug || undefined,\n            isPinned: formData.isPinned,\n            isPublished: formData.isPublished,\n            metaDescription: formData.metaDescription || undefined,\n        };\n\n        if (isEditMode) {\n            updateArticle({ variables: { id, input } });\n        } else {\n            createArticle({ variables: { input } });\n        }\n    };\n\n    const ToolbarButton: React.FC<{\n        icon: React.ReactElement;\n        onClick: () => void;\n        isActive?: boolean;\n        tooltip: string;\n    }> = ({ icon, onClick, isActive = false, tooltip }) => (\n        <Tooltip label={tooltip} placement=\"top\">\n            <IconButton\n                aria-label={tooltip}\n                icon={icon}\n                size=\"sm\"\n                variant={isActive ? \"solid\" : \"ghost\"}\n                bg={isActive ? primaryBlue : \"transparent\"}\n                color={isActive ? \"white\" : textSecondary}\n                _hover={{\n                    bg: isActive ? primaryBlueHover : overlayBg,\n                    color: isActive ? \"white\" : textPrimary,\n                }}\n                onClick={onClick}\n            />\n        </Tooltip>\n    );\n\n    if (loading) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Flex justify=\"center\" align=\"center\" minH=\"400px\">\n                        <Spinner size=\"xl\" />\n                    </Flex>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n\n            <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                <VStack align=\"stretch\" spacing={6}>\n                    {/* Header */}\n                    <Flex justify=\"space-between\" align=\"center\">\n                        <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                            {id === \"new\" ? \"Create Article\" : \"Edit Article\"}\n                        </Heading>\n                        <HStack>\n                            <Button variant=\"outline\" onClick={() => navigate(\"/companyknowledge\")}>\n                                Cancel\n                            </Button>\n                            <Button\n                                colorScheme=\"blue\"\n                                onClick={handleSubmit}\n                                isLoading={creating || updating}\n                                loadingText={id === \"new\" ? \"Creating...\" : \"Saving...\"}\n                            >\n                                {id === \"new\" ? \"Create Article\" : \"Save Changes\"}\n                            </Button>\n                        </HStack>\n                    </Flex>\n\n                    {/* Basic Info */}\n                    <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                        <CardBody>\n                            <VStack spacing={4} align=\"stretch\">\n                                <FormControl isRequired>\n                                    <FormLabel color={textPrimary}>Title</FormLabel>\n                                    <Input\n                                        value={formData.title}\n                                        onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                                        placeholder=\"Article title\"\n                                        size=\"lg\"\n                                        bg={inputBg}\n                                        color={textPrimary}\n                                    />\n                                </FormControl>\n\n                                <FormControl>\n                                    <FormLabel color={textPrimary}>Meta Description (SEO)</FormLabel>\n                                    <Textarea\n                                        value={formData.metaDescription}\n                                        onChange={(e) => setFormData({ ...formData, metaDescription: e.target.value })}\n                                        placeholder=\"Brief description for search engines\"\n                                        bg={inputBg}\n                                        color={textPrimary}\n                                        rows={2}\n                                    />\n                                </FormControl>\n\n                                <HStack spacing={4}>\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Category</FormLabel>\n                                        <Input\n                                            value={formData.category}\n                                            onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                                            placeholder=\"e.g. Training, Process, Guidelines\"\n                                            bg={inputBg}\n                                            color={textPrimary}\n                                        />\n                                    </FormControl>\n\n                                    <FormControl>\n                                        <FormLabel color={textPrimary}>Visibility</FormLabel>\n                                        <Select\n                                            value={formData.visibility}\n                                            onChange={(e) => setFormData({ ...formData, visibility: e.target.value })}\n                                            bg={inputBg}\n                                            color={textPrimary}\n                                        >\n                                            <option value=\"PRIVATE\">Private (Permission Required)</option>\n                                            <option value=\"SHARED\">Shared (Login Required)</option>\n                                            <option value=\"PUBLIC\">Public (No Login)</option>\n                                        </Select>\n                                    </FormControl>\n                                </HStack>\n\n                                {/* Tags */}\n                                <FormControl>\n                                    <FormLabel color={textPrimary}>Tags</FormLabel>\n                                    <HStack>\n                                        <Input\n                                            value={newTag}\n                                            onChange={(e) => setNewTag(e.target.value)}\n                                            placeholder=\"Add a tag\"\n                                            onKeyPress={(e) => {\n                                                if (e.key === \"Enter\") {\n                                                    e.preventDefault();\n                                                    handleAddTag();\n                                                }\n                                            }}\n                                            bg={inputBg}\n                                            color={textPrimary}\n                                        />\n                                        <Button onClick={handleAddTag} size=\"sm\">\n                                            Add\n                                        </Button>\n                                    </HStack>\n                                    {formData.tags.length > 0 && (\n                                        <HStack wrap=\"wrap\" spacing={2} mt={2}>\n                                            {formData.tags.map((tag) => (\n                                                <Tag key={tag} colorScheme=\"blue\">\n                                                    <TagLabel>{tag}</TagLabel>\n                                                    <TagCloseButton onClick={() => handleRemoveTag(tag)} />\n                                                </Tag>\n                                            ))}\n                                        </HStack>\n                                    )}\n                                </FormControl>\n\n                                {/* Public Access */}\n                                {formData.visibility === \"PUBLIC\" && (\n                                    <FormControl>\n                                        <HStack justify=\"space-between\">\n                                            <FormLabel color={textPrimary} mb={0}>\n                                                Allow Public Access\n                                            </FormLabel>\n                                            <Switch\n                                                isChecked={formData.allowPublicAccess}\n                                                onChange={(e) =>\n                                                    setFormData({ ...formData, allowPublicAccess: e.target.checked })\n                                                }\n                                                colorScheme=\"green\"\n                                            />\n                                        </HStack>\n                                        {formData.allowPublicAccess && (\n                                            <Input\n                                                value={formData.publicSlug}\n                                                onChange={(e) => setFormData({ ...formData, publicSlug: e.target.value })}\n                                                placeholder=\"custom-url-slug\"\n                                                mt={2}\n                                                bg={inputBg}\n                                                color={textPrimary}\n                                            />\n                                        )}\n                                    </FormControl>\n                                )}\n\n                                {/* Publishing Options */}\n                                <HStack spacing={8}>\n                                    <FormControl display=\"flex\" alignItems=\"center\">\n                                        <FormLabel color={textPrimary} mb={0}>\n                                            Pin Article\n                                        </FormLabel>\n                                        <Switch\n                                            isChecked={formData.isPinned}\n                                            onChange={(e) => setFormData({ ...formData, isPinned: e.target.checked })}\n                                            colorScheme=\"yellow\"\n                                        />\n                                    </FormControl>\n\n                                    <FormControl display=\"flex\" alignItems=\"center\">\n                                        <FormLabel color={textPrimary} mb={0}>\n                                            Publish\n                                        </FormLabel>\n                                        <Switch\n                                            isChecked={formData.isPublished}\n                                            onChange={(e) => setFormData({ ...formData, isPublished: e.target.checked })}\n                                            colorScheme=\"green\"\n                                        />\n                                    </FormControl>\n                                </HStack>\n                            </VStack>\n                        </CardBody>\n                    </Card>\n\n                    {/* Content Editor */}\n                    <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                        <CardBody>\n                            <VStack spacing={4} align=\"stretch\">\n                                {/* Instructions */}\n                                <Card bg={instructionBg} borderColor={instructionBorder} border=\"1px\">\n                                    <CardBody>\n                                        <VStack align=\"stretch\" spacing={2}>\n                                            <Text fontWeight=\"bold\" color={textPrimary} fontSize=\"sm\">\n                                                📝 Editor Instructions\n                                            </Text>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                <strong>Toolbar Buttons:</strong> Use Bold, Italic, Underline, Lists, Links, Code blocks, and Text alignment\n                                            </Text>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                <strong>📷 Image Button:</strong> Click to add images - enter an image URL or IPFS link (e.g., https://ipfs.io/ipfs/QmHash)\n                                            </Text>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                <strong>🎬 Video Button:</strong> Click to embed videos - supports YouTube, Rumble, and IPFS video URLs\n                                            </Text>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                <strong>📤 Import File:</strong> Click to import .md or .html files directly into the editor\n                                            </Text>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                <strong>Visual/Source:</strong> Switch between WYSIWYG editor and HTML source code editing\n                                            </Text>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                <strong>Preview Tab:</strong> Click \"Preview\" to see how your article will look when published\n                                            </Text>\n                                        </VStack>\n                                    </CardBody>\n                                </Card>\n\n                                <HStack justify=\"space-between\">\n                                    <FormLabel color={textPrimary} mb={0}>\n                                        Article Content\n                                    </FormLabel>\n                                    <HStack>\n                                        <input\n                                            type=\"file\"\n                                            ref={fileInputRef}\n                                            onChange={handleFileImport}\n                                            accept=\".md,.html\"\n                                            style={{ display: \"none\" }}\n                                        />\n                                        <Button\n                                            size=\"sm\"\n                                            leftIcon={<FiUpload />}\n                                            onClick={() => fileInputRef.current?.click()}\n                                            variant=\"outline\"\n                                        >\n                                            Import File\n                                        </Button>\n                                        <Button\n                                            size=\"sm\"\n                                            onClick={() => setEditorMode(\"visual\")}\n                                            variant={editorMode === \"visual\" ? \"solid\" : \"outline\"}\n                                            colorScheme={editorMode === \"visual\" ? \"blue\" : undefined}\n                                        >\n                                            Visual\n                                        </Button>\n                                        <Button\n                                            size=\"sm\"\n                                            onClick={() => setEditorMode(\"source\")}\n                                            variant={editorMode === \"source\" ? \"solid\" : \"outline\"}\n                                            colorScheme={editorMode === \"source\" ? \"blue\" : undefined}\n                                        >\n                                            Source\n                                        </Button>\n                                    </HStack>\n                                </HStack>\n\n                                <Tabs variant=\"soft-rounded\" colorScheme=\"blue\" index={activeTab} onChange={setActiveTab}>\n                                    <TabList>\n                                        <Tab>Compose</Tab>\n                                        <Tab>Preview</Tab>\n                                    </TabList>\n\n                                    <TabPanels>\n                                        <TabPanel px={0}>\n                                            {editorMode === \"visual\" ? (\n                                                <Box>\n                                                    {/* Toolbar */}\n                                                    <HStack p={2} mb={2} bg={inputBg} border=\"1px\" borderColor={cardBorder} borderRadius=\"md\" spacing={1} flexWrap=\"wrap\">\n                                                        <ToolbarButton\n                                                            icon={<FiBold />}\n                                                            onClick={() => editor?.chain().focus().toggleBold().run()}\n                                                            isActive={editor?.isActive(\"bold\")}\n                                                            tooltip=\"Bold\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiItalic />}\n                                                            onClick={() => editor?.chain().focus().toggleItalic().run()}\n                                                            isActive={editor?.isActive(\"italic\")}\n                                                            tooltip=\"Italic\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiUnderline />}\n                                                            onClick={() => editor?.chain().focus().toggleUnderline().run()}\n                                                            isActive={editor?.isActive(\"underline\")}\n                                                            tooltip=\"Underline\"\n                                                        />\n                                                        <Divider orientation=\"vertical\" h={6} />\n                                                        <ToolbarButton\n                                                            icon={<FiList />}\n                                                            onClick={() => editor?.chain().focus().toggleBulletList().run()}\n                                                            isActive={editor?.isActive(\"bulletList\")}\n                                                            tooltip=\"Bullet List\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiLink />}\n                                                            onClick={addLink}\n                                                            isActive={editor?.isActive(\"link\")}\n                                                            tooltip=\"Add Link\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiImage />}\n                                                            onClick={addImage}\n                                                            tooltip=\"Add Image\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiVideo />}\n                                                            onClick={embedVideo}\n                                                            tooltip=\"Embed Video\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiCode />}\n                                                            onClick={() => editor?.chain().focus().toggleCodeBlock().run()}\n                                                            isActive={editor?.isActive(\"codeBlock\")}\n                                                            tooltip=\"Code Block\"\n                                                        />\n                                                        <Divider orientation=\"vertical\" h={6} />\n                                                        <ToolbarButton\n                                                            icon={<FiAlignLeft />}\n                                                            onClick={() => editor?.chain().focus().setTextAlign(\"left\").run()}\n                                                            isActive={editor?.isActive({ textAlign: \"left\" })}\n                                                            tooltip=\"Align Left\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiAlignCenter />}\n                                                            onClick={() => editor?.chain().focus().setTextAlign(\"center\").run()}\n                                                            isActive={editor?.isActive({ textAlign: \"center\" })}\n                                                            tooltip=\"Align Center\"\n                                                        />\n                                                        <ToolbarButton\n                                                            icon={<FiAlignRight />}\n                                                            onClick={() => editor?.chain().focus().setTextAlign(\"right\").run()}\n                                                            isActive={editor?.isActive({ textAlign: \"right\" })}\n                                                            tooltip=\"Align Right\"\n                                                        />\n                                                    </HStack>\n\n                                                    {/* Editor */}\n                                                    <Box\n                                                        bg={inputBg}\n                                                        border=\"1px\"\n                                                        borderColor={cardBorder}\n                                                        borderRadius=\"md\"\n                                                        minH=\"500px\"\n                                                        p={4}\n                                                        sx={{\n                                                            \".ProseMirror\": {\n                                                                minHeight: \"480px\",\n                                                                outline: \"none\",\n                                                                color: textPrimary,\n                                                                \"& p\": { marginBottom: \"1em\" },\n                                                                \"& h1, & h2, & h3\": {\n                                                                    fontWeight: \"bold\",\n                                                                    marginBottom: \"0.5em\",\n                                                                    marginTop: \"1em\",\n                                                                },\n                                                                \"& h1\": { fontSize: \"2em\" },\n                                                                \"& h2\": { fontSize: \"1.5em\" },\n                                                                \"& h3\": { fontSize: \"1.2em\" },\n                                                                \"& ul, & ol\": {\n                                                                    paddingLeft: \"2em\",\n                                                                    marginBottom: \"1em\",\n                                                                },\n                                                                \"& li\": { marginBottom: \"0.5em\" },\n                                                                \"& code\": {\n                                                                    backgroundColor: cardGradientBg,\n                                                                    padding: \"0.2em 0.4em\",\n                                                                    borderRadius: \"3px\",\n                                                                    fontFamily: \"monospace\",\n                                                                },\n                                                                \"& pre\": {\n                                                                    backgroundColor: cardGradientBg,\n                                                                    padding: \"1em\",\n                                                                    borderRadius: \"5px\",\n                                                                    overflow: \"auto\",\n                                                                    marginBottom: \"1em\",\n                                                                },\n                                                                \"& img\": {\n                                                                    maxWidth: \"100%\",\n                                                                    borderRadius: \"md\",\n                                                                    marginTop: \"1em\",\n                                                                    marginBottom: \"1em\",\n                                                                },\n                                                                \"& iframe, & video\": {\n                                                                    maxWidth: \"100%\",\n                                                                    marginTop: \"1em\",\n                                                                    marginBottom: \"1em\",\n                                                                },\n                                                            },\n                                                        }}\n                                                    >\n                                                        <EditorContent editor={editor} />\n                                                    </Box>\n                                                </Box>\n                                            ) : (\n                                                <Textarea\n                                                    value={sourceContent}\n                                                    onChange={(e) => handleSourceChange(e.target.value)}\n                                                    placeholder=\"Edit HTML source...\"\n                                                    minHeight=\"550px\"\n                                                    fontFamily=\"mono\"\n                                                    fontSize=\"sm\"\n                                                    bg={inputBg}\n                                                    color={textPrimary}\n                                                />\n                                            )}\n                                        </TabPanel>\n\n                                        <TabPanel px={0}>\n                                            <Box\n                                                bg={inputBg}\n                                                p={6}\n                                                borderRadius=\"md\"\n                                                minHeight=\"500px\"\n                                                border=\"1px\"\n                                                borderColor={cardBorder}\n                                                dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(formData.content) }}\n                                                sx={{\n                                                    \"& h1, & h2, & h3\": { fontWeight: \"bold\", marginBottom: \"0.5em\", color: textPrimary },\n                                                    \"& p\": { marginBottom: \"1em\", color: textPrimary },\n                                                    \"& ul, & ol\": { paddingLeft: \"2em\", marginBottom: \"1em\", color: textPrimary },\n                                                    \"& img\": { maxWidth: \"100%\", borderRadius: \"md\", marginTop: \"1em\", marginBottom: \"1em\" },\n                                                    \"& code\": { backgroundColor: cardGradientBg, padding: \"0.2em 0.4em\", borderRadius: \"3px\" },\n                                                    \"& pre\": { backgroundColor: cardGradientBg, padding: \"1em\", borderRadius: \"5px\", overflow: \"auto\" },\n                                                }}\n                                            />\n                                        </TabPanel>\n                                    </TabPanels>\n                                </Tabs>\n                            </VStack>\n                        </CardBody>\n                    </Card>\n\n                    {/* Save Button */}\n                    <Flex justify=\"flex-end\">\n                        <HStack>\n                            <Button variant=\"outline\" onClick={() => navigate(\"/companyknowledge\")}>\n                                Cancel\n                            </Button>\n                            <Button\n                                colorScheme=\"blue\"\n                                size=\"lg\"\n                                onClick={handleSubmit}\n                                isLoading={creating || updating}\n                                loadingText={id === \"new\" ? \"Creating...\" : \"Saving...\"}\n                            >\n                                {id === \"new\" ? \"Create Article\" : \"Save Changes\"}\n                            </Button>\n                        </HStack>\n                    </Flex>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default CompanyKnowledgeEditor;\n"],"names":["inputRegex","index_default","Node","create","name","addOptions","inline","allowBase64","HTMLAttributes","this","options","group","draggable","addAttributes","src","default","alt","title","width","height","parseHTML","tag","renderHTML","_ref","mergeAttributes","parseMarkdown","token","helpers","createNode","href","text","renderMarkdown","node","_a","_b","_c","_d","_e","_f","attrs","concat","addCommands","setImage","_ref2","commands","insertContent","type","addInputRules","nodeInputRule","find","getAttributes","match","GET_ARTICLE","gql","_templateObject","_taggedTemplateLiteral","CREATE_ARTICLE","_templateObject2","UPDATE_ARTICLE","_templateObject3","CompanyKnowledgeEditor","id","useParams","navigate","useNavigate","toast","useToast","colorMode","useColorMode","usePageTitle","fileInputRef","useRef","editorMode","setEditorMode","useState","sourceContent","setSourceContent","activeTab","setActiveTab","newTag","setNewTag","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","inputBg","useColorModeValue","primaryBlue","primaryBlueHover","overlayBg","instructionBg","instructionBorder","formData","setFormData","content","category","tags","visibility","allowPublicAccess","publicSlug","isPinned","isPublished","metaDescription","isEditMode","data","loading","useQuery","variables","skip","onCompleted","companyKnowledgeArticle","article","createArticle","creating","useMutation","status","duration","createCompanyKnowledgeArticle","onError","error","description","message","updateArticle","updating","updateCompanyKnowledgeArticle","editor","useEditor","extensions","StarterKit","Underline","Link","configure","openOnClick","style","autolink","linkOnPaste","TextAlign","types","Image","class","onUpdate","html","getHTML","_objectSpread","useEffect","setContent","handleAddTag","includes","handleSubmit","input","undefined","length","ToolbarButton","icon","onClick","isActive","tooltip","_jsx","Tooltip","label","placement","children","IconButton","size","variant","bg","color","_hover","_jsxs","Box","minH","display","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","companyKnowledgeModuleConfig","Container","maxW","py","flex","Flex","justify","align","Spinner","FooterWithFourColumns","VStack","spacing","Heading","fontFamily","brandConfig","fonts","heading","HStack","Button","colorScheme","isLoading","loadingText","Card","border","borderColor","CardBody","FormControl","isRequired","FormLabel","Input","value","onChange","e","target","placeholder","Textarea","rows","Select","onKeyPress","key","preventDefault","wrap","mt","map","Tag","TagLabel","TagCloseButton","filter","t","handleRemoveTag","mb","Switch","isChecked","checked","alignItems","Text","fontWeight","fontSize","ref","event","_event$target$files","file","files","reader","FileReader","onload","_e$target","result","endsWith","readAsText","accept","leftIcon","FiUpload","_fileInputRef$current","current","click","Tabs","index","TabList","Tab","TabPanels","TabPanel","px","p","borderRadius","flexWrap","FiBold","chain","focus","toggleBold","run","FiItalic","toggleItalic","FiUnderline","toggleUnderline","Divider","orientation","h","FiList","toggleBulletList","FiLink","addLink","url","window","prompt","setLink","FiImage","addImage","FiVideo","embedVideo","embedHtml","videoId","split","pop","URL","searchParams","get","FiCode","toggleCodeBlock","FiAlignLeft","setTextAlign","textAlign","FiAlignCenter","FiAlignRight","sx","minHeight","outline","marginBottom","marginTop","paddingLeft","backgroundColor","padding","overflow","maxWidth","EditorContent","handleSourceChange","dangerouslySetInnerHTML","__html","DOMPurify","sanitize"],"sourceRoot":""}