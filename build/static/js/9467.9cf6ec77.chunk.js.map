{"version":3,"file":"static/js/9467.9cf6ec77.chunk.js","mappings":"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","sources":["pages/youtubetoipfs/VideoViewer.tsx","pages/youtubetoipfs/config.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Badge,\n  Card,\n  CardBody,\n  useToast,\n  IconButton,\n  Link as ChakraLink,\n  Divider,\n  Wrap,\n  WrapItem,\n  Tag,\n  Stat,\n  StatLabel,\n  StatNumber,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Center,\n  Spinner,\n  useColorMode,\n  useColorModeValue\n} from '@chakra-ui/react';\nimport {\n  FiArrowLeft,\n  FiExternalLink,\n  FiCopy,\n  FiShare2,\n  FiEye,\n  FiCalendar,\n  FiHardDrive,\n  FiGlobe,\n  FiLock,\n  FiEdit,\n  FiMaximize,\n  FiMinimize,\n  FiPlay,\n  FiDownload\n} from 'react-icons/fi';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport youtubeToIPFSModuleConfig from \"./moduleConfig\";\nimport { IPFS_CONFIG } from \"./config\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst GET_VIDEO = gql`\n  query IPFSVideo($id: String!) {\n    ipfsVideo(id: $id) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      source\n      fileSize\n      mimeType\n      uploadedBy\n      uploadedByName\n      tags\n      viewCount\n      isPublic\n      isPrivateFile\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_VIDEO_BY_HASH = gql`\n  query IPFSVideoByHash($ipfsHash: String!) {\n    ipfsVideoByHash(ipfsHash: $ipfsHash) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      thumbnailUrl\n      source\n      fileSize\n      mimeType\n      uploadedBy\n      uploadedByName\n      tags\n      viewCount\n      isPublic\n      isPrivateFile\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst VideoViewer: React.FC = () => {\n  usePageTitle(\"Video Viewer\");\n  const navigate = useNavigate();\n  const { id } = useParams<{ id: string }>();\n  const toast = useToast();\n  const { colorMode, setColorMode } = useColorMode();\n\n  // Use proper color mode values\n  const bg = useColorModeValue('gray.50', 'gray.900');\n  const cardBg = useColorModeValue('white', 'gray.800');\n  const cardBorder = useColorModeValue('gray.200', 'gray.700');\n  const textColor = useColorModeValue('gray.800', 'white');\n  const mutedTextColor = useColorModeValue('gray.600', 'gray.400');\n  const inputBg = useColorModeValue('gray.100', 'whiteAlpha.100');\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [shareUrl, setShareUrl] = useState('');\n  const [isTheaterMode, setIsTheaterMode] = useState(true); // Default to theater mode\n\n  // Check if user is logged in\n  const isLoggedIn = !!localStorage.getItem('auth_token');\n\n  // Set dark mode by default for non-logged in users\n  useEffect(() => {\n    if (!isLoggedIn && colorMode !== 'dark') {\n      setColorMode('dark');\n    }\n  }, [isLoggedIn, colorMode, setColorMode]);\n\n  // Check if id is IPFS hash (starts with Qm) or database ID\n  const isIPFSHash = id?.startsWith('Qm');\n\n  const { data, loading, error } = useQuery(\n    isIPFSHash ? GET_VIDEO_BY_HASH : GET_VIDEO,\n    {\n      variables: isIPFSHash ? { ipfsHash: id } : { id },\n      skip: !id\n    }\n  );\n\n  const video = data?.ipfsVideo || data?.ipfsVideoByHash;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: `${label} copied to clipboard`,\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown';\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(2)} MB`;\n  };\n\n  const handleShare = () => {\n    const url = `${window.location.origin}/youtubetoipfs/video/${video.ipfsHash}`;\n    setShareUrl(url);\n    onOpen();\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <Box flex=\"1\">\n          <Container maxW=\"6xl\" py={8}>\n            <Center>\n              <Spinner size=\"xl\" color={textColor} />\n            </Center>\n          </Container>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (error || !video) {\n    return (\n      <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <Box flex=\"1\">\n          <Container maxW=\"6xl\" py={8}>\n            <Center>\n              <VStack spacing={4}>\n                <Text fontSize=\"xl\" color={mutedTextColor}>\n                  {error ? 'Error loading video' : 'Video not found'}\n                </Text>\n                {!video?.isPublic && !isLoggedIn && (\n                  <Text fontSize=\"md\" color={mutedTextColor}>\n                    This video is private. Please log in to view it.\n                  </Text>\n                )}\n                {isLoggedIn ? (\n                  <Button onClick={() => navigate('/youtubetoipfs')}>\n                    Back to Gallery\n                  </Button>\n                ) : (\n                  <Button onClick={() => navigate('/login')}>\n                    Log In\n                  </Button>\n                )}\n              </VStack>\n            </Center>\n          </Container>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  // Check if video is private and user is not logged in\n  if (!video.isPublic && !isLoggedIn) {\n    return (\n      <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <Box flex=\"1\">\n          <Container maxW=\"6xl\" py={8}>\n            <Center>\n              <VStack spacing={4}>\n                <Text fontSize=\"xl\" color={mutedTextColor}>\n                  This video is private\n                </Text>\n                <Text fontSize=\"md\" color={mutedTextColor}>\n                  Please log in to view this content.\n                </Text>\n                <Button onClick={() => navigate('/login')}>\n                  Log In\n                </Button>\n              </VStack>\n            </Center>\n          </Container>\n        </Box>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const isOwner = video.uploadedBy === localStorage.getItem('userId'); // Assuming userId is stored\n\n  return (\n    <Box bg={bg} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      {isLoggedIn && <ModuleBreadcrumb moduleConfig={youtubeToIPFSModuleConfig} />}\n\n      <Box flex=\"1\">\n        <Container maxW={isTheaterMode ? \"100%\" : \"6xl\"} px={isTheaterMode ? 0 : 6} py={isTheaterMode ? 0 : 8}>\n          {/* Theater Mode Video Player */}\n          {isTheaterMode && (\n            <Box bg=\"black\" position=\"relative\" mb={4}>\n              <Box maxW=\"1920px\" mx=\"auto\" position=\"relative\">\n                <Box\n                  position=\"relative\"\n                  paddingTop=\"56.25%\" // 16:9 aspect ratio\n                  bg=\"black\"\n                >\n                  <video\n                    controls\n                    autoPlay\n                    style={{\n                      position: 'absolute',\n                      top: 0,\n                      left: 0,\n                      width: '100%',\n                      height: '100%',\n                      objectFit: 'contain'\n                    }}\n                    onLoadStart={() => {\n                      console.log('🎬 [VIDEO] Load started - Theater Mode');\n                    }}\n                    onLoadedMetadata={(e) => {\n                      const videoEl = e.target as HTMLVideoElement;\n                      console.log('📊 [VIDEO] Metadata loaded:', JSON.stringify({\n                        duration: videoEl.duration,\n                        videoWidth: videoEl.videoWidth,\n                        videoHeight: videoEl.videoHeight,\n                        readyState: videoEl.readyState,\n                        networkState: videoEl.networkState\n                      }, null, 2));\n                    }}\n                    onCanPlay={() => {\n                      console.log('▶️ [VIDEO] Can play');\n                    }}\n                    onError={(e) => {\n                      const videoEl = e.target as HTMLVideoElement;\n                      console.error('❌ [VIDEO] Error occurred:', JSON.stringify({\n                        error: videoEl.error,\n                        errorCode: videoEl.error?.code,\n                        errorMessage: videoEl.error?.message,\n                        networkState: videoEl.networkState,\n                        readyState: videoEl.readyState,\n                        currentSrc: videoEl.currentSrc\n                      }, null, 2));\n                    }}\n                    onProgress={(e) => {\n                      const videoEl = e.target as HTMLVideoElement;\n                      if (videoEl.buffered.length > 0) {\n                        const bufferedEnd = videoEl.buffered.end(videoEl.buffered.length - 1);\n                        const bufferedPercent = (bufferedEnd / videoEl.duration) * 100;\n                        console.log(`⏳ [VIDEO] Buffering: ${bufferedPercent.toFixed(1)}%`);\n                      }\n                    }}\n                    onStalled={() => {\n                      console.warn('⚠️ [VIDEO] Playback stalled');\n                    }}\n                    onWaiting={() => {\n                      console.log('⏸️ [VIDEO] Waiting for data...');\n                    }}\n                  >\n                    <source\n                      src={(() => {\n                        const token = localStorage.getItem('auth_token');\n                        let videoUrl = '';\n\n                        console.log('🎥 [VIDEO] Building video URL for Theater Mode');\n                        console.log('🎥 [VIDEO] Details:', JSON.stringify({\n                          isPrivateFile: video.isPrivateFile,\n                          ipfsHash: video.ipfsHash,\n                          ipfsUrl: video.ipfsUrl,\n                          hasToken: !!token,\n                          tokenLength: token?.length || 0\n                        }, null, 2));\n\n                        if (video.isPrivateFile) {\n                          // Use proxy endpoint for private files with token in URL\n                          // Ensure token is properly encoded for URL\n                          const encodedToken = encodeURIComponent(token || '');\n\n                          // Determine the correct proxy URL based on environment\n                          const isProduction = window.location.hostname !== 'localhost';\n                          const proxyBaseUrl = isProduction\n                            ? 'https://api.tommillerservices.com'\n                            : 'http://localhost:4000';\n\n                          videoUrl = `${proxyBaseUrl}/api/ipfs/proxy/${video.ipfsHash}?token=${encodedToken}`;\n                          console.log('🔒 [VIDEO] Private file - Using proxy URL with encoded token');\n                          console.log('🌍 [VIDEO] Environment:', isProduction ? 'Production' : 'Development');\n                          console.log('🔗 [VIDEO] Full URL:', videoUrl.substring(0, 150) + '...');\n                          console.log('🔑 [VIDEO] Token present:', !!token, 'Length:', token?.length || 0);\n                        } else if (video.ipfsUrl?.startsWith('http')) {\n                          videoUrl = video.ipfsUrl;\n                          console.log('🌐 [VIDEO] Public file - Using direct URL:', videoUrl);\n                        } else {\n                          videoUrl = IPFS_CONFIG.getIPFSUrl(video.ipfsHash || video.ipfsUrl, false);\n                          console.log('📡 [VIDEO] Using IPFS gateway URL:', videoUrl);\n                        }\n\n                        return videoUrl;\n                      })()}\n                      type={video.mimeType || 'video/mp4'}\n                    />\n                    Your browser does not support the video tag.\n                  </video>\n                </Box>\n              </Box>\n            </Box>\n          )}\n\n          <Container maxW=\"6xl\" py={isTheaterMode ? 4 : 0}>\n          <VStack spacing={6} align=\"stretch\">\n          {/* Header with Controls */}\n          <HStack justify=\"space-between\" wrap=\"wrap\" spacing={2}>\n            {isLoggedIn ? (\n              <Button\n                leftIcon={<FiArrowLeft />}\n                variant=\"ghost\"\n                onClick={() => navigate('/youtubetoipfs')}\n                size=\"md\"\n              >\n                Back to Gallery\n              </Button>\n            ) : (\n              <Box />\n            )}\n\n            <HStack spacing={2}>\n              <Button\n                leftIcon={isTheaterMode ? <FiMinimize /> : <FiMaximize />}\n                variant=\"outline\"\n                onClick={() => setIsTheaterMode(!isTheaterMode)}\n                size=\"md\"\n                title={isTheaterMode ? \"Exit Theater Mode\" : \"Enter Theater Mode\"}\n              >\n                {isTheaterMode ? \"Normal View\" : \"Theater Mode\"}\n              </Button>\n              {isOwner && isLoggedIn && (\n                <Button\n                  leftIcon={<FiEdit />}\n                  variant=\"outline\"\n                  onClick={() => navigate(`/youtubetoipfs/video/${video.id}/edit`)}\n                  size=\"md\"\n                >\n                  Edit\n                </Button>\n              )}\n              <Button\n                leftIcon={<FiShare2 />}\n                onClick={handleShare}\n                colorScheme=\"blue\"\n                size=\"md\"\n              >\n                Share\n              </Button>\n            </HStack>\n          </HStack>\n\n          {/* Normal Mode Video Player */}\n          {!isTheaterMode && (\n            <Card\n              bg={cardBg}\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              boxShadow=\"xl\"\n              overflow=\"hidden\"\n            >\n              <CardBody p={0}>\n                <Box bg=\"black\" position=\"relative\">\n                  <video\n                    controls\n                    autoPlay\n                    width=\"100%\"\n                    style={{\n                      maxHeight: '600px',\n                      display: 'block'\n                    }}\n                    onLoadStart={() => {\n                      console.log('🎬 [VIDEO] Load started - Normal Mode');\n                    }}\n                    onLoadedMetadata={(e) => {\n                      const videoEl = e.target as HTMLVideoElement;\n                      console.log('📊 [VIDEO] Metadata loaded:', JSON.stringify({\n                        duration: videoEl.duration,\n                        videoWidth: videoEl.videoWidth,\n                        videoHeight: videoEl.videoHeight,\n                        readyState: videoEl.readyState,\n                        networkState: videoEl.networkState\n                      }, null, 2));\n                    }}\n                    onCanPlay={() => {\n                      console.log('▶️ [VIDEO] Can play');\n                    }}\n                    onError={(e) => {\n                      const videoEl = e.target as HTMLVideoElement;\n                      console.error('❌ [VIDEO] Error occurred:', JSON.stringify({\n                        error: videoEl.error,\n                        errorCode: videoEl.error?.code,\n                        errorMessage: videoEl.error?.message,\n                        networkState: videoEl.networkState,\n                        readyState: videoEl.readyState,\n                        currentSrc: videoEl.currentSrc\n                      }, null, 2));\n                    }}\n                    onProgress={(e) => {\n                      const videoEl = e.target as HTMLVideoElement;\n                      if (videoEl.buffered.length > 0) {\n                        const bufferedEnd = videoEl.buffered.end(videoEl.buffered.length - 1);\n                        const bufferedPercent = (bufferedEnd / videoEl.duration) * 100;\n                        console.log(`⏳ [VIDEO] Buffering: ${bufferedPercent.toFixed(1)}%`);\n                      }\n                    }}\n                    onStalled={() => {\n                      console.warn('⚠️ [VIDEO] Playback stalled');\n                    }}\n                    onWaiting={() => {\n                      console.log('⏸️ [VIDEO] Waiting for data...');\n                    }}\n                  >\n                    <source\n                      src={(() => {\n                        const token = localStorage.getItem('auth_token');\n                        let videoUrl = '';\n\n                        console.log('🎥 [VIDEO] Building video URL for Normal Mode');\n                        console.log('🎥 [VIDEO] Details:', JSON.stringify({\n                          isPrivateFile: video.isPrivateFile,\n                          ipfsHash: video.ipfsHash,\n                          ipfsUrl: video.ipfsUrl,\n                          hasToken: !!token,\n                          tokenLength: token?.length || 0\n                        }, null, 2));\n\n                        if (video.isPrivateFile) {\n                          // Use proxy endpoint for private files with token in URL\n                          // Ensure token is properly encoded for URL\n                          const encodedToken = encodeURIComponent(token || '');\n\n                          // Determine the correct proxy URL based on environment\n                          const isProduction = window.location.hostname !== 'localhost';\n                          const proxyBaseUrl = isProduction\n                            ? 'https://api.tommillerservices.com'\n                            : 'http://localhost:4000';\n\n                          videoUrl = `${proxyBaseUrl}/api/ipfs/proxy/${video.ipfsHash}?token=${encodedToken}`;\n                          console.log('🔒 [VIDEO] Private file - Using proxy URL with encoded token');\n                          console.log('🌍 [VIDEO] Environment:', isProduction ? 'Production' : 'Development');\n                          console.log('🔗 [VIDEO] Full URL:', videoUrl.substring(0, 150) + '...');\n                          console.log('🔑 [VIDEO] Token present:', !!token, 'Length:', token?.length || 0);\n                        } else if (video.ipfsUrl?.startsWith('http')) {\n                          videoUrl = video.ipfsUrl;\n                          console.log('🌐 [VIDEO] Public file - Using direct URL:', videoUrl);\n                        } else {\n                          videoUrl = IPFS_CONFIG.getIPFSUrl(video.ipfsHash || video.ipfsUrl, false);\n                          console.log('📡 [VIDEO] Using IPFS gateway URL:', videoUrl);\n                        }\n\n                        return videoUrl;\n                      })()}\n                      type={video.mimeType || 'video/mp4'}\n                    />\n                    Your browser does not support the video tag.\n                  </video>\n                </Box>\n              </CardBody>\n            </Card>\n          )}\n\n          {/* Video Info */}\n          <Card\n            bg={cardBg}\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            boxShadow=\"md\"\n            backdropFilter=\"blur(10px)\"\n          >\n            <CardBody p={6}>\n              <VStack align=\"stretch\" spacing={5}>\n                <HStack justify=\"space-between\" align=\"start\">\n                  <VStack align=\"start\" spacing={2} flex=\"1\">\n                    <Heading size=\"lg\" color={textColor}>{video.title}</Heading>\n                    <HStack spacing={4}>\n                      <Badge colorScheme={video.isPublic ? 'green' : 'gray'}>\n                        {video.isPublic ? (\n                          <HStack spacing={1}>\n                            <FiGlobe size={12} />\n                            <Text>Public</Text>\n                          </HStack>\n                        ) : (\n                          <HStack spacing={1}>\n                            <FiLock size={12} />\n                            <Text>Private</Text>\n                          </HStack>\n                        )}\n                      </Badge>\n                      <HStack color={mutedTextColor}>\n                        <FiEye />\n                        <Text fontSize=\"sm\">{video.viewCount} views</Text>\n                      </HStack>\n                      <HStack color={mutedTextColor}>\n                        <FiCalendar />\n                        <Text fontSize=\"sm\">\n                          {new Date(video.createdAt).toLocaleDateString()}\n                        </Text>\n                      </HStack>\n                    </HStack>\n                  </VStack>\n\n                  <VStack align=\"end\" spacing={2}>\n                    <Text fontSize=\"sm\" color={mutedTextColor}>\n                      Uploaded by {video.uploadedByName || 'Anonymous'}\n                    </Text>\n                  </VStack>\n                </HStack>\n\n                {video.description && (\n                  <>\n                    <Divider borderColor={cardBorder} />\n                    <Box>\n                      <Text fontWeight=\"bold\" mb={2} color={textColor}>Description</Text>\n                      <Text color={mutedTextColor}>{video.description}</Text>\n                    </Box>\n                  </>\n                )}\n\n                {video.tags && video.tags.length > 0 && (\n                  <>\n                    <Divider borderColor={cardBorder} />\n                    <Box>\n                      <Text fontWeight=\"bold\" mb={2} color={textColor}>Tags</Text>\n                      <Wrap>\n                        {video.tags.map((tag: string) => (\n                          <WrapItem key={tag}>\n                            <Tag colorScheme=\"blue\">{tag}</Tag>\n                          </WrapItem>\n                        ))}\n                      </Wrap>\n                    </Box>\n                  </>\n                )}\n\n                <Divider borderColor={cardBorder} />\n\n                {/* Technical Details */}\n                <Box>\n                  <Text fontWeight=\"bold\" mb={3} color={textColor}>Technical Details</Text>\n                  <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>\n                    <Stat>\n                      <StatLabel color={mutedTextColor}>IPFS Hash</StatLabel>\n                      <HStack>\n                        <Text fontSize=\"sm\" fontFamily=\"mono\" noOfLines={1} color={textColor}>\n                          {video.ipfsHash}\n                        </Text>\n                        <IconButton\n                          icon={<FiCopy />}\n                          aria-label=\"Copy IPFS hash\"\n                          size=\"xs\"\n                          variant=\"ghost\"\n                          onClick={() => copyToClipboard(video.ipfsHash, 'IPFS hash')}\n                        />\n                      </HStack>\n                    </Stat>\n\n                    <Stat>\n                      <StatLabel color={mutedTextColor}>File Size</StatLabel>\n                      <StatNumber fontSize=\"md\" color={textColor}>\n                        <HStack>\n                          <FiHardDrive />\n                          <Text>{formatFileSize(video.fileSize)}</Text>\n                        </HStack>\n                      </StatNumber>\n                    </Stat>\n\n                    <Stat>\n                      <StatLabel color={mutedTextColor}>MIME Type</StatLabel>\n                      <StatNumber fontSize=\"md\" color={textColor}>{video.mimeType || 'video/mp4'}</StatNumber>\n                    </Stat>\n\n                    <Stat>\n                      <StatLabel color={mutedTextColor}>Source</StatLabel>\n                      <StatNumber fontSize=\"md\" color={textColor}>{video.source}</StatNumber>\n                    </Stat>\n                  </SimpleGrid>\n                </Box>\n\n                <Divider borderColor={cardBorder} />\n\n                {/* IPFS Links */}\n                <Box>\n                  <Text fontWeight=\"bold\" mb={3} color={textColor}>IPFS Gateways</Text>\n                  <VStack align=\"stretch\" spacing={2}>\n                    {video.isPrivateFile ? (\n                      <>\n                        <HStack>\n                          <ChakraLink\n                            href={IPFS_CONFIG.getIPFSUrl(video.ipfsHash, true)}\n                            isExternal\n                            color=\"blue.500\"\n                          >\n                            Private Pinata Gateway (Authenticated) <FiExternalLink style={{ display: 'inline' }} />\n                          </ChakraLink>\n                        </HStack>\n                        <Text fontSize=\"sm\" color={mutedTextColor}>\n                          This is a private file and requires authentication to access via other gateways.\n                        </Text>\n                      </>\n                    ) : (\n                      <>\n                        <HStack>\n                          <ChakraLink\n                            href={IPFS_CONFIG.getIPFSUrl(video.ipfsHash, false)}\n                            isExternal\n                            color=\"blue.500\"\n                          >\n                            Public Pinata Gateway <FiExternalLink style={{ display: 'inline' }} />\n                          </ChakraLink>\n                        </HStack>\n                        <HStack>\n                          <ChakraLink\n                            href={`https://ipfs.io/ipfs/${video.ipfsHash}`}\n                            isExternal\n                            color=\"blue.500\"\n                          >\n                            IPFS.io Gateway <FiExternalLink style={{ display: 'inline' }} />\n                          </ChakraLink>\n                        </HStack>\n                        <HStack>\n                          <ChakraLink\n                            href={`https://gateway.ipfs.io/ipfs/${video.ipfsHash}`}\n                            isExternal\n                            color=\"blue.500\"\n                          >\n                            Gateway.ipfs.io <FiExternalLink style={{ display: 'inline' }} />\n                          </ChakraLink>\n                        </HStack>\n                      </>\n                    )}\n                  </VStack>\n                </Box>\n              </VStack>\n            </CardBody>\n          </Card>\n          </VStack>\n          </Container>\n        </Container>\n      </Box>\n\n      {/* Share Modal */}\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay bg=\"blackAlpha.300\" backdropFilter=\"blur(10px)\" />\n        <ModalContent\n          bg={cardBg}\n          border=\"1px solid\"\n          borderColor={cardBorder}\n        >\n          <ModalHeader color={textColor}>Share Video</ModalHeader>\n          <ModalCloseButton color={textColor} />\n          <ModalBody>\n            <VStack spacing={4} align=\"stretch\">\n              <Text color={textColor}>Share this video using the link below:</Text>\n              <InputGroup>\n                <Input\n                  value={shareUrl}\n                  isReadOnly\n                  bg={inputBg}\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  color={textColor}\n                />\n                <InputRightElement width=\"4.5rem\">\n                  <Button\n                    h=\"1.75rem\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(shareUrl, 'Share link')}\n                  >\n                    Copy\n                  </Button>\n                </InputRightElement>\n              </InputGroup>\n              <Text fontSize=\"sm\" color={mutedTextColor}>\n                Anyone with this link can view the video on IPFS\n              </Text>\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" onClick={onClose} color={textColor}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\n// Add missing import\nimport { SimpleGrid } from '@chakra-ui/react';\n\nexport default VideoViewer;","// IPFS Configuration\nexport const IPFS_CONFIG = {\n  // Your private Pinata gateway\n  PRIVATE_GATEWAY_URL: 'https://scarlet-professional-perch-484.mypinata.cloud/ipfs',\n\n  // Public gateway fallback (if needed)\n  PUBLIC_GATEWAY_URL: 'https://gateway.pinata.cloud/ipfs',\n\n  // Helper function to construct IPFS URL\n  getIPFSUrl: (cid: string, usePrivate: boolean = true): string => {\n    const gateway = usePrivate ? IPFS_CONFIG.PRIVATE_GATEWAY_URL : IPFS_CONFIG.PUBLIC_GATEWAY_URL;\n    return `${gateway}/${cid}`;\n  }\n};\n\nexport default IPFS_CONFIG;"],"names":["GET_VIDEO","gql","_templateObject","_taggedTemplateLiteral","GET_VIDEO_BY_HASH","_templateObject2","VideoViewer","usePageTitle","navigate","useNavigate","id","useParams","toast","useToast","colorMode","setColorMode","useColorMode","bg","useColorModeValue","cardBg","cardBorder","textColor","mutedTextColor","inputBg","isOpen","onOpen","onClose","useDisclosure","shareUrl","setShareUrl","useState","isTheaterMode","setIsTheaterMode","isLoggedIn","localStorage","getItem","useEffect","isIPFSHash","startsWith","data","loading","error","useQuery","variables","ipfsHash","skip","video","ipfsVideo","ipfsVideoByHash","copyToClipboard","text","label","navigator","clipboard","writeText","title","concat","status","duration","_jsxs","Box","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","flex","Container","maxW","py","Center","Spinner","size","color","FooterWithFourColumns","VStack","spacing","Text","fontSize","isPublic","Button","onClick","isOwner","uploadedBy","ModuleBreadcrumb","moduleConfig","youtubeToIPFSModuleConfig","px","position","mb","mx","paddingTop","controls","autoPlay","style","top","left","width","height","objectFit","onLoadStart","console","log","onLoadedMetadata","e","videoEl","target","JSON","stringify","videoWidth","videoHeight","readyState","networkState","onCanPlay","onError","_videoEl$error","_videoEl$error2","errorCode","code","errorMessage","message","currentSrc","onProgress","buffered","length","bufferedPercent","end","toFixed","onStalled","warn","onWaiting","src","_video$ipfsUrl","token","videoUrl","isPrivateFile","ipfsUrl","hasToken","tokenLength","encodedToken","encodeURIComponent","isProduction","window","location","hostname","substring","IPFS_CONFIG","getIPFSUrl","type","mimeType","align","HStack","justify","wrap","leftIcon","FiArrowLeft","variant","FiMinimize","FiMaximize","FiEdit","FiShare2","handleShare","url","origin","colorScheme","Card","border","borderColor","boxShadow","overflow","CardBody","p","maxHeight","_videoEl$error3","_videoEl$error4","_video$ipfsUrl2","backdropFilter","Heading","Badge","FiGlobe","FiLock","FiEye","viewCount","FiCalendar","Date","createdAt","toLocaleDateString","uploadedByName","description","_Fragment","Divider","fontWeight","tags","Wrap","map","tag","WrapItem","Tag","SimpleGrid","columns","base","md","Stat","StatLabel","fontFamily","noOfLines","IconButton","icon","FiCopy","StatNumber","FiHardDrive","bytes","formatFileSize","fileSize","source","ChakraLink","href","isExternal","FiExternalLink","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","InputGroup","Input","value","isReadOnly","InputRightElement","h","ModalFooter","PRIVATE_GATEWAY_URL","PUBLIC_GATEWAY_URL","cid","gateway","arguments","undefined"],"sourceRoot":""}