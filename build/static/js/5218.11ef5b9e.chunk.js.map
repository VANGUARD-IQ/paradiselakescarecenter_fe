{"version":3,"file":"static/js/5218.11ef5b9e.chunk.js","mappings":"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","sources":["pages/emails/components/ConvertToProjectModal.tsx","../node_modules/@chakra-ui/react/dist/esm/stat/stat-group.mjs","pages/emails/EmailView.tsx","pages/emails/components/EmailComposer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalCloseButton,\n    Button,\n    VStack,\n    HStack,\n    FormControl,\n    FormLabel,\n    Input,\n    Textarea,\n    NumberInput,\n    NumberInputField,\n    NumberInputStepper,\n    NumberIncrementStepper,\n    NumberDecrementStepper,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    IconButton,\n    useToast,\n    Text,\n    Box,\n    Badge,\n    Divider,\n    Spinner,\n    Alert,\n    AlertIcon,\n    Switch,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n} from '@chakra-ui/react';\nimport { useMutation, gql } from '@apollo/client';\nimport { FiPlus, FiTrash2, FiPackage, FiDollarSign, FiClock, FiCheck } from 'react-icons/fi';\nimport { getColor } from '../../../brandConfig';\n\nconst SCAN_EMAIL_FOR_PROJECT = gql`\n    mutation ScanEmailAndGenerateProjectProposal(\n        $emailContent: String!\n        $emailSubject: String\n        $senderName: String\n        $senderEmail: String\n    ) {\n        scanEmailAndGenerateProjectProposal(\n            emailContent: $emailContent\n            emailSubject: $emailSubject\n            senderName: $senderName\n            senderEmail: $senderEmail\n        ) {\n            projectName\n            projectSummary\n            clientName\n            clientEmail\n            clientPhone\n            tasks {\n                title\n                description\n                estimatedHours\n                order\n                category\n            }\n            suggestedPrice\n            upfrontPayment\n            finalPayment\n            deliveryTimeline\n            deliverables\n            specialRequirements\n        }\n    }\n`;\n\nconst CREATE_PROJECT = gql`\n    mutation CreateProject($input: ProjectInput!) {\n        createProject(input: $input) {\n            id\n            projectName\n            projectGoal\n            suggestedPrice\n            upfrontPayment\n        }\n    }\n`;\n\nconst CREATE_TASK = gql`\n    mutation CreateTask($input: TaskInput!) {\n        createTask(input: $input) {\n            id\n            name\n            description\n            status\n        }\n    }\n`;\n\nconst CREATE_BILL = gql`\n    mutation CreateBill($input: BillInput!) {\n        createBill(input: $input) {\n            id\n            status\n            totalAmount\n        }\n    }\n`;\n\ninterface Task {\n    title: string;\n    description: string;\n    estimatedHours: number;\n    order: number;\n    category: string;\n}\n\ninterface ProjectProposal {\n    projectName: string;\n    projectSummary: string;\n    clientName: string;\n    clientEmail?: string;\n    clientPhone?: string;\n    tasks: Task[];\n    suggestedPrice: number;\n    upfrontPayment: number;\n    finalPayment: number;\n    deliveryTimeline: string;\n    deliverables: string[];\n    specialRequirements?: string;\n}\n\ninterface ConvertToProjectModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    email: {\n        id: string;\n        subject: string;\n        bodyMarkdown: string;\n        from: string;\n    };\n}\n\nexport const ConvertToProjectModal: React.FC<ConvertToProjectModalProps> = ({\n    isOpen,\n    onClose,\n    email\n}) => {\n    const toast = useToast();\n    const [proposal, setProposal] = useState<ProjectProposal | null>(null);\n    const [isAnalyzing, setIsAnalyzing] = useState(false);\n    const [isCreating, setIsCreating] = useState(false);\n    const [createInvoice, setCreateInvoice] = useState(true);\n    const [activeTab, setActiveTab] = useState(0);\n\n    const [scanEmail] = useMutation(SCAN_EMAIL_FOR_PROJECT);\n    const [createProject] = useMutation(CREATE_PROJECT);\n    const [createTask] = useMutation(CREATE_TASK);\n    const [createBill] = useMutation(CREATE_BILL);\n\n    // Styling\n    const textPrimary = getColor('textPrimary');\n    const textSecondary = getColor('textSecondary');\n    const bg = getColor('background');\n    const cardBorder = getColor('cardBorder');\n\n    useEffect(() => {\n        if (isOpen && !proposal && !isAnalyzing) {\n            analyzeEmail();\n        }\n    }, [isOpen]);\n\n    const analyzeEmail = async () => {\n        setIsAnalyzing(true);\n        try {\n            const result = await scanEmail({\n                variables: {\n                    emailContent: email.bodyMarkdown || '',\n                    emailSubject: email.subject || '',\n                    senderName: email.from?.split('<')[0].trim() || '',\n                    senderEmail: email.from?.match(/<(.+)>/)?.[1] || email.from || ''\n                }\n            });\n\n            if (result.data?.scanEmailAndGenerateProjectProposal) {\n                setProposal(result.data.scanEmailAndGenerateProjectProposal);\n                toast({\n                    title: 'Analysis Complete',\n                    description: 'AI has extracted project details from the email',\n                    status: 'success',\n                    duration: 3000\n                });\n            }\n        } catch (error) {\n            console.error('Failed to analyze email:', error);\n            toast({\n                title: 'Analysis failed',\n                description: 'Could not analyze email. Please fill in details manually.',\n                status: 'error',\n                duration: 5000\n            });\n            // Set default proposal\n            setProposal({\n                projectName: email.subject || 'New Project',\n                projectSummary: '',\n                clientName: '',\n                clientEmail: '',\n                clientPhone: '',\n                tasks: [],\n                suggestedPrice: 0,\n                upfrontPayment: 0,\n                finalPayment: 0,\n                deliveryTimeline: '2 weeks',\n                deliverables: [],\n                specialRequirements: ''\n            });\n        } finally {\n            setIsAnalyzing(false);\n        }\n    };\n\n    const handleCreateProject = async () => {\n        if (!proposal) return;\n        \n        setIsCreating(true);\n        try {\n            // Create the project with proposal fields\n            const projectResult = await createProject({\n                variables: {\n                    input: {\n                        projectName: proposal.projectName,\n                        projectGoal: proposal.projectSummary,\n                        projectDescription: proposal.specialRequirements || '',\n                        billingClient: '000000000000000000000000', // Default/placeholder client\n                        // Proposal fields\n                        clientEmail: proposal.clientEmail,\n                        clientPhone: proposal.clientPhone,\n                        suggestedPrice: proposal.suggestedPrice,\n                        upfrontPayment: proposal.upfrontPayment,\n                        finalPayment: proposal.finalPayment,\n                        deliveryTimeline: proposal.deliveryTimeline,\n                        deliverables: proposal.deliverables,\n                        specialRequirements: proposal.specialRequirements,\n                        sourceEmailId: email.id,\n                        proposalStatus: 'draft'\n                    }\n                }\n            });\n\n            const projectId = projectResult.data?.createProject?.id;\n\n            if (projectId) {\n                // Create tasks for the project\n                for (const task of proposal.tasks) {\n                    await createTask({\n                        variables: {\n                            input: {\n                                projectId,\n                                name: task.title,\n                                description: task.description,\n                                estimatedHours: task.estimatedHours,\n                                order: task.order,\n                                category: task.category,\n                                status: 'TODO'\n                            }\n                        }\n                    });\n                }\n\n                // Create a draft invoice if requested\n                if (createInvoice && proposal.suggestedPrice > 0) {\n                    try {\n                        await createBill({\n                            variables: {\n                                input: {\n                                    projectId,\n                                    isPaid: false,\n                                    status: 'DRAFT',\n                                    currency: 'AUD',\n                                    showPaymentDetails: false,\n                                    lineItems: [\n                                        {\n                                            description: `${proposal.projectName} - Complete Project`,\n                                            amount: proposal.suggestedPrice\n                                        }\n                                    ],\n                                    paymentTerms: `Total project value. 50% upfront ($${proposal.upfrontPayment}), 50% on completion ($${proposal.finalPayment})`\n                                }\n                            }\n                        });\n                    } catch (billError) {\n                        console.error('Failed to create draft invoice:', billError);\n                    }\n                }\n\n                toast({\n                    title: 'Project Created! 🎉',\n                    description: `Created project with ${proposal.tasks.length} tasks${createInvoice ? ' and draft invoice' : ''}`,\n                    status: 'success',\n                    duration: 5000\n                });\n\n                // Open project in new tab\n                window.open(`/projects/${projectId}`, '_blank');\n                \n                // Close modal\n                onClose();\n            }\n        } catch (error) {\n            console.error('Failed to create project:', error);\n            toast({\n                title: 'Failed to create project',\n                description: 'Please try again',\n                status: 'error',\n                duration: 5000\n            });\n        } finally {\n            setIsCreating(false);\n        }\n    };\n\n    const addTask = () => {\n        if (!proposal) return;\n        const newTask: Task = {\n            title: 'New Task',\n            description: '',\n            estimatedHours: 1,\n            order: proposal.tasks.length + 1,\n            category: 'Development'\n        };\n        setProposal({\n            ...proposal,\n            tasks: [...proposal.tasks, newTask]\n        });\n    };\n\n    const removeTask = (index: number) => {\n        if (!proposal) return;\n        setProposal({\n            ...proposal,\n            tasks: proposal.tasks.filter((_, i) => i !== index)\n        });\n    };\n\n    const updateTask = (index: number, field: keyof Task, value: any) => {\n        if (!proposal) return;\n        const updatedTasks = [...proposal.tasks];\n        updatedTasks[index] = {\n            ...updatedTasks[index],\n            [field]: value\n        };\n        setProposal({\n            ...proposal,\n            tasks: updatedTasks\n        });\n    };\n\n    const totalHours = proposal?.tasks.reduce((sum, task) => sum + task.estimatedHours, 0) || 0;\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} size=\"6xl\">\n            <ModalOverlay />\n            <ModalContent bg={bg} borderColor={cardBorder}>\n                <ModalHeader color={textPrimary}>\n                    <HStack>\n                        <FiPackage />\n                        <Text>Convert Email to Project</Text>\n                    </HStack>\n                </ModalHeader>\n                <ModalCloseButton color={textSecondary} />\n\n                <ModalBody>\n                    {isAnalyzing ? (\n                        <VStack spacing={4} py={8}>\n                            <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                            <Text color={textSecondary}>AI is analyzing email content...</Text>\n                            <Text fontSize=\"sm\" color={textSecondary}>Extracting project details and tasks</Text>\n                        </VStack>\n                    ) : proposal ? (\n                        <Tabs index={activeTab} onChange={setActiveTab}>\n                            <TabList>\n                                <Tab color={textSecondary}>Project Details</Tab>\n                                <Tab color={textSecondary}>Tasks ({proposal.tasks.length})</Tab>\n                                <Tab color={textSecondary}>Pricing</Tab>\n                            </TabList>\n\n                            <TabPanels>\n                                {/* Project Details Tab */}\n                                <TabPanel>\n                                    <VStack spacing={4} align=\"stretch\">\n                                        <FormControl>\n                                            <FormLabel color={textSecondary}>Project Name</FormLabel>\n                                            <Input\n                                                value={proposal.projectName}\n                                                onChange={(e) => setProposal({ ...proposal, projectName: e.target.value })}\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                            />\n                                        </FormControl>\n\n                                        <FormControl>\n                                            <FormLabel color={textSecondary}>Project Summary</FormLabel>\n                                            <Textarea\n                                                value={proposal.projectSummary}\n                                                onChange={(e) => setProposal({ ...proposal, projectSummary: e.target.value })}\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                                rows={3}\n                                            />\n                                        </FormControl>\n\n                                        <HStack spacing={4}>\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>Client Name</FormLabel>\n                                                <Input\n                                                    value={proposal.clientName}\n                                                    onChange={(e) => setProposal({ ...proposal, clientName: e.target.value })}\n                                                    bg={bg}\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                />\n                                            </FormControl>\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>Client Email</FormLabel>\n                                                <Input\n                                                    value={proposal.clientEmail || ''}\n                                                    onChange={(e) => setProposal({ ...proposal, clientEmail: e.target.value })}\n                                                    bg={bg}\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                />\n                                            </FormControl>\n                                        </HStack>\n\n                                        <FormControl>\n                                            <FormLabel color={textSecondary}>\n                                                <FiClock style={{ display: 'inline', marginRight: '8px' }} />\n                                                Delivery Timeline\n                                            </FormLabel>\n                                            <Input\n                                                value={proposal.deliveryTimeline}\n                                                onChange={(e) => setProposal({ ...proposal, deliveryTimeline: e.target.value })}\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                            />\n                                        </FormControl>\n                                    </VStack>\n                                </TabPanel>\n\n                                {/* Tasks Tab */}\n                                <TabPanel>\n                                    <VStack spacing={4} align=\"stretch\">\n                                        <HStack justify=\"space-between\">\n                                            <Text color={textSecondary}>\n                                                Total Hours: <Badge colorScheme=\"blue\">{totalHours}h</Badge>\n                                            </Text>\n                                            <Button\n                                                size=\"sm\"\n                                                leftIcon={<FiPlus />}\n                                                variant=\"outline\"\n                                                onClick={addTask}\n                                            >\n                                                Add Task\n                                            </Button>\n                                        </HStack>\n\n                                        <Box maxH=\"300px\" overflowY=\"auto\">\n                                            <Table size=\"sm\">\n                                                <Thead>\n                                                    <Tr>\n                                                        <Th color={textSecondary}>Task</Th>\n                                                        <Th color={textSecondary}>Description</Th>\n                                                        <Th color={textSecondary} isNumeric>Hours</Th>\n                                                        <Th></Th>\n                                                    </Tr>\n                                                </Thead>\n                                                <Tbody>\n                                                    {proposal.tasks.map((task, index) => (\n                                                        <Tr key={index}>\n                                                            <Td>\n                                                                <Input\n                                                                    value={task.title}\n                                                                    onChange={(e) => updateTask(index, 'title', e.target.value)}\n                                                                    size=\"sm\"\n                                                                    bg={bg}\n                                                                    borderColor={cardBorder}\n                                                                    color={textPrimary}\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <Input\n                                                                    value={task.description}\n                                                                    onChange={(e) => updateTask(index, 'description', e.target.value)}\n                                                                    size=\"sm\"\n                                                                    bg={bg}\n                                                                    borderColor={cardBorder}\n                                                                    color={textPrimary}\n                                                                />\n                                                            </Td>\n                                                            <Td>\n                                                                <NumberInput\n                                                                    value={task.estimatedHours}\n                                                                    onChange={(_, value) => updateTask(index, 'estimatedHours', value)}\n                                                                    min={0.5}\n                                                                    step={0.5}\n                                                                    size=\"sm\"\n                                                                    width=\"80px\"\n                                                                >\n                                                                    <NumberInputField \n                                                                        bg={bg}\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                    />\n                                                                    <NumberInputStepper>\n                                                                        <NumberIncrementStepper />\n                                                                        <NumberDecrementStepper />\n                                                                    </NumberInputStepper>\n                                                                </NumberInput>\n                                                            </Td>\n                                                            <Td>\n                                                                <IconButton\n                                                                    aria-label=\"Remove task\"\n                                                                    icon={<FiTrash2 />}\n                                                                    size=\"sm\"\n                                                                    variant=\"ghost\"\n                                                                    colorScheme=\"red\"\n                                                                    onClick={() => removeTask(index)}\n                                                                />\n                                                            </Td>\n                                                        </Tr>\n                                                    ))}\n                                                </Tbody>\n                                            </Table>\n                                        </Box>\n                                    </VStack>\n                                </TabPanel>\n\n                                {/* Pricing Tab */}\n                                <TabPanel>\n                                    <VStack spacing={4} align=\"stretch\">\n                                        <Alert status=\"info\" variant=\"subtle\">\n                                            <AlertIcon />\n                                            <Box>\n                                                <Text fontWeight=\"bold\">AI Pricing Recommendation</Text>\n                                                <Text fontSize=\"sm\">Based on {totalHours} hours of work</Text>\n                                            </Box>\n                                        </Alert>\n\n                                        <HStack spacing={4}>\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>\n                                                    <FiDollarSign style={{ display: 'inline' }} /> Total Price\n                                                </FormLabel>\n                                                <NumberInput\n                                                    value={proposal.suggestedPrice}\n                                                    onChange={(_, value) => setProposal({ \n                                                        ...proposal, \n                                                        suggestedPrice: value,\n                                                        upfrontPayment: Math.round(value * 0.5),\n                                                        finalPayment: Math.round(value * 0.5)\n                                                    })}\n                                                    min={0}\n                                                    step={100}\n                                                >\n                                                    <NumberInputField \n                                                        bg={bg}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                    />\n                                                    <NumberInputStepper>\n                                                        <NumberIncrementStepper />\n                                                        <NumberDecrementStepper />\n                                                    </NumberInputStepper>\n                                                </NumberInput>\n                                            </FormControl>\n\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>50% Upfront</FormLabel>\n                                                <NumberInput\n                                                    value={proposal.upfrontPayment}\n                                                    onChange={(_, value) => setProposal({ ...proposal, upfrontPayment: value })}\n                                                    min={0}\n                                                    step={100}\n                                                >\n                                                    <NumberInputField \n                                                        bg={bg}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                    />\n                                                    <NumberInputStepper>\n                                                        <NumberIncrementStepper />\n                                                        <NumberDecrementStepper />\n                                                    </NumberInputStepper>\n                                                </NumberInput>\n                                            </FormControl>\n\n                                            <FormControl>\n                                                <FormLabel color={textSecondary}>50% Final</FormLabel>\n                                                <NumberInput\n                                                    value={proposal.finalPayment}\n                                                    onChange={(_, value) => setProposal({ ...proposal, finalPayment: value })}\n                                                    min={0}\n                                                    step={100}\n                                                >\n                                                    <NumberInputField \n                                                        bg={bg}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                    />\n                                                    <NumberInputStepper>\n                                                        <NumberIncrementStepper />\n                                                        <NumberDecrementStepper />\n                                                    </NumberInputStepper>\n                                                </NumberInput>\n                                            </FormControl>\n                                        </HStack>\n\n                                        <Divider />\n\n                                        <FormControl display=\"flex\" alignItems=\"center\">\n                                            <FormLabel mb={0} color={textSecondary}>\n                                                Create draft invoice for full amount\n                                            </FormLabel>\n                                            <Switch\n                                                isChecked={createInvoice}\n                                                onChange={(e) => setCreateInvoice(e.target.checked)}\n                                                colorScheme=\"green\"\n                                            />\n                                        </FormControl>\n\n                                        {createInvoice && (\n                                            <Alert status=\"success\" variant=\"subtle\">\n                                                <AlertIcon />\n                                                <Text fontSize=\"sm\">\n                                                    A draft invoice for ${proposal.suggestedPrice} will be created. \n                                                    You can then generate a 50% upfront invoice from it.\n                                                </Text>\n                                            </Alert>\n                                        )}\n                                    </VStack>\n                                </TabPanel>\n                            </TabPanels>\n                        </Tabs>\n                    ) : null}\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button variant=\"ghost\" mr={3} onClick={onClose} isDisabled={isCreating}>\n                        Cancel\n                    </Button>\n                    <Button\n                        leftIcon={<FiPackage />}\n                        colorScheme=\"green\"\n                        onClick={handleCreateProject}\n                        isLoading={isCreating}\n                        isDisabled={!proposal || !proposal.projectName || isAnalyzing}\n                    >\n                        Create Project & Open\n                    </Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst StatGroup = forwardRef(\n  function StatGroup2(props, ref) {\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...props,\n        ref,\n        role: \"group\",\n        className: cx(\"chakra-stat__group\", props.className),\n        __css: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-around\",\n          alignItems: \"flex-start\"\n        }\n      }\n    );\n  }\n);\nStatGroup.displayName = \"StatGroup\";\n\nexport { StatGroup };\n","import React, { useState } from 'react';\nimport {\n    Box,\n    Container,\n    Heading,\n    FormControl,\n    FormLabel,\n    Input,\n    Button,\n    VStack,\n    HStack,\n    Select,\n    useToast,\n    Text,\n    Badge,\n    Spinner,\n    FormHelperText,\n    Divider,\n    Stat,\n    StatLabel,\n    StatNumber,\n    StatGroup,\n    Card,\n    CardBody,\n    Center,\n    InputGroup,\n    InputRightElement,\n    IconButton,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalCloseButton,\n    useDisclosure,\n    Checkbox,\n    CheckboxGroup,\n    List,\n    ListItem\n} from '@chakra-ui/react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { FiSend, FiSave, FiArrowLeft, FiCopy, FiFile, FiDownload, FiUsers, FiSearch, FiPackage } from 'react-icons/fi';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport emailsModuleConfig from './moduleConfig';\nimport EmailComposer from \"./components/EmailComposer\";\nimport { format } from 'date-fns';\nimport { ConvertToProjectModal } from './components/ConvertToProjectModal';\n\nconst EMAIL_QUERY = gql`\n    query GetEmail($id: ID!) {\n        email(id: $id) {\n            id\n            subject\n            bodyMarkdown\n            bodyHtml\n            from\n            to\n            cc\n            bcc\n            replyTo\n            status\n            createdAt\n            sentAt\n            opens\n            clicks\n            messageId\n            errorMessage\n            attachments {\n                name\n                contentType\n                contentLength\n                content\n            }\n        }\n    }\n`;\n\nconst UPDATE_EMAIL_MUTATION = gql`\n    mutation UpdateEmail($id: ID!, $input: EmailUpdateInput!) {\n        updateEmail(id: $id, input: $input) {\n            id\n            subject\n            status\n        }\n    }\n`;\n\nconst SEND_EMAIL_MUTATION = gql`\n    mutation SendEmail($id: ID!) {\n        sendEmail(id: $id) {\n            id\n            status\n            sentAt\n        }\n    }\n`;\n\nconst DUPLICATE_EMAIL_MUTATION = gql`\n    mutation DuplicateEmail($id: ID!) {\n        duplicateEmail(id: $id) {\n            id\n        }\n    }\n`;\n\nconst EMAIL_SENDERS_QUERY = gql`\n    query GetEmailSenders {\n        emailSenders\n    }\n`;\n\nconst ADDRESS_BOOK_QUERY = gql`\n    query GetEmailAddresses($search: String) {\n        emailAddresses(search: $search) {\n            id\n            email\n            name\n            type\n            emailsSent\n            emailsReceived\n        }\n    }\n`;\n\nconst EmailView: React.FC = () => {\n    usePageTitle(\"Email View\");\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n    const toast = useToast();\n    \n    // Consistent styling from brandConfig\n    const bg = getColor(\"background.main\");\n    const cardGradientBg = getColor(\"background.cardGradient\");\n    const cardBorder = getColor(\"border.darkCard\");\n    const textPrimary = getColor(\"text.primaryDark\");\n    const textSecondary = getColor(\"text.secondaryDark\");\n    const textMuted = getColor(\"text.mutedDark\");\n    const previewBg = bg; // Use main background for better contrast\n    const inputBg = bg; // Consistent input background\n\n    const [isEditing, setIsEditing] = useState(false);\n    const [subject, setSubject] = useState('');\n    const [from, setFrom] = useState('');\n    const [to, setTo] = useState('');\n    const [cc, setCc] = useState('');\n    const [bcc, setBcc] = useState('');\n    const [replyTo, setReplyTo] = useState('');\n    const [bodyMarkdown, setBodyMarkdown] = useState('');\n    \n    // Address book states\n    const [searchTerm, setSearchTerm] = useState('');\n    const [modalSearchTerm, setModalSearchTerm] = useState('');\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const [selectedEmails, setSelectedEmails] = useState<string[]>([]);\n    const [currentField, setCurrentField] = useState<'to' | 'cc' | 'bcc'>('to');\n    const { isOpen: isAddressBookOpen, onOpen: onAddressBookOpen, onClose: onAddressBookClose } = useDisclosure();\n    const { isOpen: isConvertModalOpen, onOpen: onConvertModalOpen, onClose: onConvertModalClose } = useDisclosure();\n\n    const { data, loading, refetch } = useQuery(EMAIL_QUERY, {\n        variables: { id },\n        onCompleted: (data) => {\n            if (data?.email) {\n                setSubject(data.email.subject);\n                setFrom(data.email.from);\n                setTo(data.email.to);\n                setCc(data.email.cc || '');\n                setBcc(data.email.bcc || '');\n                setReplyTo(data.email.replyTo || '');\n                setBodyMarkdown(data.email.bodyMarkdown);\n                // Debug attachments\n                console.log('Email attachments:', data.email.attachments);\n            }\n        }\n    });\n\n    const { data: sendersData } = useQuery(EMAIL_SENDERS_QUERY);\n    \n    // Query for autocomplete suggestions\n    const { data: addressBookData } = useQuery(ADDRESS_BOOK_QUERY, {\n        variables: { search: searchTerm },\n        skip: !searchTerm || searchTerm.length < 2\n    });\n    \n    // Query for modal - fetches all addresses or filtered by modal search\n    const { data: allAddressesData } = useQuery(ADDRESS_BOOK_QUERY, {\n        variables: { search: modalSearchTerm || undefined },\n        skip: !isAddressBookOpen\n    });\n\n    // Address book handlers\n    const handleToChange = (value: string) => {\n        setTo(value);\n        setSearchTerm(value);\n        setShowSuggestions(value.length >= 2);\n    };\n\n    const selectEmail = (email: string) => {\n        setTo(email);\n        setShowSuggestions(false);\n        setSearchTerm('');\n    };\n\n    const openAddressBookFor = (field: 'to' | 'cc' | 'bcc') => {\n        setCurrentField(field);\n        onAddressBookOpen();\n    };\n\n    const handleAddressBookSelect = () => {\n        if (selectedEmails.length > 0) {\n            const emailsString = selectedEmails.join(', ');\n            if (currentField === 'to') {\n                setTo(emailsString);\n            } else if (currentField === 'cc') {\n                setCc(emailsString);\n            } else if (currentField === 'bcc') {\n                setBcc(emailsString);\n            }\n            setSelectedEmails([]);\n            setModalSearchTerm('');\n            onAddressBookClose();\n        }\n    };\n    \n    const handleAddressBookClose = () => {\n        setModalSearchTerm('');\n        setSelectedEmails([]);\n        onAddressBookClose();\n    };\n\n    const [updateEmail] = useMutation(UPDATE_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email updated',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            setIsEditing(false);\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error updating email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [sendEmail] = useMutation(SEND_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email sent successfully',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error sending email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [duplicateEmail] = useMutation(DUPLICATE_EMAIL_MUTATION, {\n        onCompleted: (data) => {\n            toast({\n                title: 'Email duplicated',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            navigate(`/email/${data.duplicateEmail.id}`);\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error duplicating email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const handleSave = async () => {\n        await updateEmail({\n            variables: {\n                id,\n                input: {\n                    subject,\n                    from,\n                    to,\n                    cc: cc || undefined,\n                    bcc: bcc || undefined,\n                    replyTo: replyTo || undefined,\n                    bodyMarkdown\n                }\n            }\n        });\n    };\n\n    const handleSend = async () => {\n        await sendEmail({\n            variables: { id }\n        });\n    };\n\n    const handleDuplicate = async () => {\n        await duplicateEmail({\n            variables: { id }\n        });\n    };\n\n    const formatFileSize = (bytes?: number) => {\n        if (!bytes) return '0 B';\n        if (bytes < 1024) return bytes + ' B';\n        if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n        return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n    };\n\n    const handleDownloadAttachment = (attachment: any) => {\n        // Create a blob from the base64 content\n        const byteCharacters = atob(attachment.content);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], { type: attachment.contentType });\n        \n        // Create download link\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = attachment.name;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        window.URL.revokeObjectURL(url);\n    };\n\n    if (loading) {\n        return (\n            <Box minH=\"100vh\" bg={bg} display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Center py={20}>\n                        <Spinner size=\"xl\" color={getColor(\"primaryBlue\")} />\n                    </Center>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const email = data?.email;\n    const isDraft = email?.status === 'DRAFT';\n    const isSent = email?.status === 'SENT';\n\n    const getStatusColor = (status: string) => {\n        const colors: Record<string, string> = {\n            DRAFT: 'gray',\n            SENT: 'green',\n            FAILED: 'red',\n            SCHEDULED: 'blue'\n        };\n        return colors[status] || 'gray';\n    };\n\n    return (\n        <Box minH=\"100vh\" bg={bg} display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n            <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                <VStack spacing={6} align=\"stretch\">\n                <HStack justify=\"space-between\">\n                    <HStack>\n                        <Button\n                            leftIcon={<FiArrowLeft />}\n                            variant=\"outline\"\n                            borderColor={cardBorder}\n                            color={textPrimary}\n                            _hover={{ bg: cardGradientBg }}\n                            onClick={() => navigate('/emails')}\n                        >\n                            Back to Emails\n                        </Button>\n                        <Button \n                            leftIcon={<FiPackage />}\n                            size=\"lg\"\n                            variant=\"solid\"\n                            bg=\"green.500\"\n                            color=\"white\"\n                            _hover={{ bg: \"green.600\", transform: \"scale(1.05)\" }}\n                            _active={{ bg: \"green.700\" }}\n                            onClick={onConvertModalOpen}\n                            px={8}\n                            fontSize=\"lg\"\n                            fontWeight=\"bold\"\n                            boxShadow=\"lg\"\n                        >\n                            Convert to Project\n                        </Button>\n                        <Heading size=\"lg\" color={textPrimary}>\n                            {isEditing ? 'Edit Email' : 'View Email'}\n                        </Heading>\n                        <Badge colorScheme={getStatusColor(email?.status)} variant=\"solid\">\n                            {email?.status}\n                        </Badge>\n                    </HStack>\n                    <HStack>\n                        {isDraft && !isEditing && (\n                            <>\n                                <Button \n                                    onClick={() => setIsEditing(true)}\n                                    variant=\"outline\"\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _hover={{ bg: cardGradientBg }}\n                                >\n                                    Edit\n                                </Button>\n                                <Button \n                                    leftIcon={<FiSend />} \n                                    bg={getColor('primaryBlue')}\n                                    color=\"white\"\n                                    _hover={{ bg: getColor('primaryBlueHover') }}\n                                    onClick={handleSend}\n                                >\n                                    Send Now\n                                </Button>\n                            </>\n                        )}\n                        {isEditing && (\n                            <>\n                                <Button \n                                    variant=\"outline\" \n                                    onClick={() => setIsEditing(false)}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _hover={{ bg: cardGradientBg }}\n                                >\n                                    Cancel\n                                </Button>\n                                <Button \n                                    leftIcon={<FiSave />} \n                                    bg={getColor('primaryBlue')}\n                                    color=\"white\"\n                                    _hover={{ bg: getColor('primaryBlueHover') }}\n                                    onClick={handleSave}\n                                >\n                                    Save Changes\n                                </Button>\n                            </>\n                        )}\n                        {!isEditing && (\n                            <>\n                                <Button \n                                    leftIcon={<FiCopy />} \n                                    variant=\"outline\" \n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _hover={{ bg: cardGradientBg }}\n                                    onClick={handleDuplicate}\n                                >\n                                    Duplicate\n                                </Button>\n                                {isSent && (\n                                    <Button \n                                        leftIcon={<FiSend />} \n                                        variant=\"outline\" \n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _hover={{ bg: cardGradientBg }}\n                                        onClick={() => {\n                                            // Format the original email for quoting\n                                            const sentDate = email.sentAt ? format(new Date(email.sentAt), 'PPpp') : 'Unknown date';\n                                            const originalBody = email.bodyMarkdown || email.bodyHtml?.replace(/<[^>]*>/g, '') || '';\n                                            const quotedBody = `\\n\\n---\\n\\nOn ${sentDate}, ${email.from} wrote:\\n\\n${originalBody.split('\\n').map((line: string) => `> ${line}`).join('\\n')}`;\n                                            \n                                            // Extract just email address from \"Name <email>\" format\n                                            const fromEmailMatch = email.from.match(/<(.+?)>/) || email.from.match(/([^\\s]+@[^\\s]+)/);\n                                            const replyToEmail = fromEmailMatch ? fromEmailMatch[1] : email.from;\n                                            \n                                            // Create a new draft with same recipients and quoted content\n                                            navigate('/emails/new', {\n                                                state: {\n                                                    to: email.to,\n                                                    cc: email.cc,\n                                                    subject: `Re: ${email.subject}`,\n                                                    replyTo: replyToEmail,\n                                                    bodyMarkdown: quotedBody\n                                                }\n                                            });\n                                        }}\n                                    >\n                                        Reply All\n                                    </Button>\n                                )}\n                            </>\n                        )}\n                    </HStack>\n                </HStack>\n\n                {isSent && (\n                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                        <CardBody>\n                        <StatGroup>\n                            <Stat>\n                                <StatLabel color={textMuted}>Sent At</StatLabel>\n                                <StatNumber fontSize=\"md\" color={textPrimary}>\n                                    {email.sentAt && format(new Date(email.sentAt), 'PPpp')}\n                                </StatNumber>\n                            </Stat>\n                            <Stat>\n                                <StatLabel color={textMuted}>Opens</StatLabel>\n                                <StatNumber color={textPrimary}>{email.opens || 0}</StatNumber>\n                            </Stat>\n                            <Stat>\n                                <StatLabel color={textMuted}>Clicks</StatLabel>\n                                <StatNumber color={textPrimary}>{email.clicks || 0}</StatNumber>\n                            </Stat>\n                            {email.messageId && (\n                                <Stat>\n                                    <StatLabel color={textMuted}>Message ID</StatLabel>\n                                    <StatNumber fontSize=\"sm\" color={textPrimary} wordBreak=\"break-all\">{email.messageId}</StatNumber>\n                                </Stat>\n                            )}\n                        </StatGroup>\n                        </CardBody>\n                    </Card>\n                )}\n\n                {email?.status === 'FAILED' && email?.errorMessage && (\n                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor=\"red.500\">\n                        <CardBody>\n                            <Text color=\"red.400\" fontWeight=\"bold\">Error:</Text>\n                            <Text color=\"red.300\">{email.errorMessage}</Text>\n                        </CardBody>\n                    </Card>\n                )}\n\n                <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                    <CardBody>\n                        <VStack spacing={4} align=\"stretch\">\n                        <FormControl>\n                            <FormLabel color={textMuted}>From</FormLabel>\n                            {isEditing ? (\n                                <Select\n                                    value={from}\n                                    onChange={(e) => setFrom(e.target.value)}\n                                    bg={inputBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                >\n                                    {sendersData?.emailSenders?.map((sender: string) => (\n                                        <option key={sender} value={sender} style={{ backgroundColor: '#1a1a1a' }}>\n                                            {sender}\n                                        </option>\n                                    ))}\n                                </Select>\n                            ) : (\n                                <Text color={textPrimary}>{from}</Text>\n                            )}\n                        </FormControl>\n\n                        <FormControl>\n                            <FormLabel color={textMuted}>To</FormLabel>\n                            {isEditing ? (\n                                <>\n                                    <InputGroup>\n                                        <Input\n                                            type=\"text\"\n                                            value={to}\n                                            onChange={(e) => handleToChange(e.target.value)}\n                                            placeholder=\"recipient@example.com or multiple emails separated by commas\"\n                                            bg={inputBg}\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            _placeholder={{ color: textMuted }}\n                                            onFocus={() => to.length >= 2 && setShowSuggestions(true)}\n                                            onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n                                        />\n                                        <InputRightElement>\n                                            <IconButton\n                                                aria-label=\"Open address book\"\n                                                icon={<FiUsers />}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                color={textSecondary}\n                                                onClick={() => openAddressBookFor('to')}\n                                                _hover={{ color: getColor('primaryBlue') }}\n                                            />\n                                        </InputRightElement>\n                                    </InputGroup>\n                                    {showSuggestions && addressBookData?.emailAddresses && addressBookData.emailAddresses.length > 0 && (\n                                        <Box \n                                            position=\"absolute\" \n                                            zIndex={10} \n                                            w=\"full\" \n                                            mt={1} \n                                            bg={cardGradientBg} \n                                            border=\"1px solid\" \n                                            borderColor={cardBorder}\n                                            borderRadius=\"md\"\n                                            boxShadow=\"lg\"\n                                            maxH=\"200px\"\n                                            overflowY=\"auto\"\n                                        >\n                                            <List p={2}>\n                                                {addressBookData.emailAddresses.map((address: any) => (\n                                                    <ListItem\n                                                        key={address.id}\n                                                        p={2}\n                                                        cursor=\"pointer\"\n                                                        _hover={{ bg: getColor('background.overlay') }}\n                                                        borderRadius=\"md\"\n                                                        onClick={() => selectEmail(address.email)}\n                                                    >\n                                                        <HStack justify=\"space-between\">\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                <Text fontSize=\"sm\" color={textPrimary}>\n                                                                    {address.name || address.email}\n                                                                </Text>\n                                                                {address.name && (\n                                                                    <Text fontSize=\"xs\" color={textMuted}>\n                                                                        {address.email}\n                                                                    </Text>\n                                                                )}\n                                                            </VStack>\n                                                            <Badge \n                                                                colorScheme={\n                                                                    address.type === 'PERSONAL' ? 'blue' :\n                                                                    address.type === 'BUSINESS' ? 'green' :\n                                                                    'gray'\n                                                                }\n                                                                size=\"sm\"\n                                                            >\n                                                                {address.type}\n                                                            </Badge>\n                                                        </HStack>\n                                                    </ListItem>\n                                                ))}\n                                            </List>\n                                        </Box>\n                                    )}\n                                </>\n                            ) : (\n                                <Text color={textPrimary}>{to}</Text>\n                            )}\n                        </FormControl>\n\n                        {(cc || isEditing) && (\n                            <FormControl>\n                                <FormLabel color={textMuted}>CC</FormLabel>\n                                {isEditing ? (\n                                    <InputGroup>\n                                        <Input\n                                            type=\"text\"\n                                            value={cc}\n                                            onChange={(e) => setCc(e.target.value)}\n                                            placeholder=\"Optional: Add CC recipients\"\n                                            bg={inputBg}\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            _placeholder={{ color: textMuted }}\n                                        />\n                                        <InputRightElement>\n                                            <IconButton\n                                                aria-label=\"Open address book for CC\"\n                                                icon={<FiUsers />}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                color={textSecondary}\n                                                onClick={() => openAddressBookFor('cc')}\n                                                _hover={{ color: getColor('primaryBlue') }}\n                                            />\n                                        </InputRightElement>\n                                    </InputGroup>\n                                ) : (\n                                    <Text color={textPrimary}>{cc}</Text>\n                                )}\n                            </FormControl>\n                        )}\n\n                        {(bcc || isEditing) && (\n                            <FormControl>\n                                <FormLabel color={textMuted}>BCC</FormLabel>\n                                {isEditing ? (\n                                    <InputGroup>\n                                        <Input\n                                            type=\"text\"\n                                            value={bcc}\n                                            onChange={(e) => setBcc(e.target.value)}\n                                            placeholder=\"Optional: Add BCC recipients\"\n                                            bg={inputBg}\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            _placeholder={{ color: textMuted }}\n                                        />\n                                        <InputRightElement>\n                                            <IconButton\n                                                aria-label=\"Open address book for BCC\"\n                                                icon={<FiUsers />}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                color={textSecondary}\n                                                onClick={() => openAddressBookFor('bcc')}\n                                                _hover={{ color: getColor('primaryBlue') }}\n                                            />\n                                        </InputRightElement>\n                                    </InputGroup>\n                                ) : (\n                                    <Text color={textPrimary}>{bcc}</Text>\n                                )}\n                            </FormControl>\n                        )}\n\n                        {(replyTo || isEditing) && (\n                            <FormControl>\n                                <FormLabel color={textMuted}>Reply To</FormLabel>\n                                {isEditing ? (\n                                    <Input\n                                        type=\"email\"\n                                        value={replyTo}\n                                        onChange={(e) => setReplyTo(e.target.value)}\n                                        placeholder=\"Optional: Different reply address\"\n                                        bg={inputBg}\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _placeholder={{ color: textMuted }}\n                                    />\n                                ) : (\n                                    <Text color={textPrimary}>{replyTo}</Text>\n                                )}\n                            </FormControl>\n                        )}\n\n                        {(email?.attachments && email.attachments.length > 0) && (\n                            <FormControl>\n                                <FormLabel color={textMuted}>\n                                    <HStack>\n                                        <Text>Attachments</Text>\n                                        <Badge colorScheme=\"blue\">{email.attachments.length}</Badge>\n                                    </HStack>\n                                </FormLabel>\n                                <VStack align=\"stretch\" spacing={2}>\n                                    {email.attachments.map((attachment: any, index: number) => (\n                                        <HStack\n                                            key={index}\n                                            p={3}\n                                            bg={inputBg}\n                                            borderRadius=\"md\"\n                                            border=\"1px solid\"\n                                            borderColor={cardBorder}\n                                            justify=\"space-between\"\n                                            _hover={{ borderColor: getColor('primaryBlue') }}\n                                        >\n                                            <HStack flex={1}>\n                                                <Box color=\"green.500\">\n                                                    <FiFile size=\"20px\" />\n                                                </Box>\n                                                <VStack align=\"start\" spacing={0}>\n                                                    <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\">\n                                                        {attachment.name}\n                                                    </Text>\n                                                    <HStack spacing={2}>\n                                                        <Badge colorScheme=\"green\" fontSize=\"xs\">\n                                                            Attached\n                                                        </Badge>\n                                                        <Text fontSize=\"xs\" color={textMuted}>\n                                                            {formatFileSize(attachment.contentLength)}\n                                                        </Text>\n                                                    </HStack>\n                                                </VStack>\n                                            </HStack>\n                                            <Button\n                                                size=\"sm\"\n                                                leftIcon={<FiDownload />}\n                                                variant=\"ghost\"\n                                                color={getColor('primaryBlue')}\n                                                onClick={() => handleDownloadAttachment(attachment)}\n                                            >\n                                                Download\n                                            </Button>\n                                        </HStack>\n                                    ))}\n                                </VStack>\n                            </FormControl>\n                        )}\n\n                        <Divider />\n\n                        {isEditing ? (\n                            <EmailComposer\n                                subject={subject}\n                                onSubjectChange={setSubject}\n                                content={bodyMarkdown}\n                                onContentChange={setBodyMarkdown}\n                                contentType=\"html\"\n                                placeholder=\"Write your email content...\"\n                                subjectPlaceholder=\"Enter email subject\"\n                                showSubject={true}\n                            />\n                        ) : (\n                            <>\n                                <FormControl>\n                                    <FormLabel color={textMuted}>Subject</FormLabel>\n                                    <Heading size=\"md\" color={textPrimary}>{subject}</Heading>\n                                </FormControl>\n                                <FormControl>\n                                    <FormLabel color={textMuted}>Email Body</FormLabel>\n                                    <EmailComposer\n                                        subject={subject}\n                                        onSubjectChange={() => {}}\n                                        content={bodyMarkdown}\n                                        onContentChange={() => {}}\n                                        contentType=\"html\"\n                                        isReadOnly={true}\n                                        showSubject={false}\n                                    />\n                                </FormControl>\n                            </>\n                        )}\n                        </VStack>\n                    </CardBody>\n                </Card>\n            </VStack>\n        </Container>\n        <FooterWithFourColumns />\n\n        {/* Address Book Modal */}\n        <Modal isOpen={isAddressBookOpen} onClose={handleAddressBookClose} size=\"xl\">\n            <ModalOverlay />\n            <ModalContent bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                <ModalHeader color={textPrimary}>\n                    Select Recipients for {currentField.toUpperCase()} from Address Book\n                </ModalHeader>\n                <ModalCloseButton color={textSecondary} />\n                <ModalBody pb={6}>\n                    <VStack align=\"stretch\" spacing={4}>\n                        <InputGroup>\n                            <Input\n                                placeholder=\"Search address book...\"\n                                bg={bg}\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                _placeholder={{ color: textMuted }}\n                                value={modalSearchTerm}\n                                onChange={(e) => setModalSearchTerm(e.target.value)}\n                            />\n                            <InputRightElement>\n                                <FiSearch color={textMuted} />\n                            </InputRightElement>\n                        </InputGroup>\n                        \n                        <Text fontSize=\"sm\" color={textMuted}>\n                            {allAddressesData?.emailAddresses?.length || 0} contacts in address book\n                        </Text>\n                        \n                        <CheckboxGroup value={selectedEmails} onChange={(values) => setSelectedEmails(values as string[])}>\n                            <VStack align=\"stretch\" spacing={2} maxH=\"400px\" overflowY=\"auto\">\n                                {allAddressesData?.emailAddresses?.map((address: any) => (\n                                    <Box\n                                        key={address.id}\n                                        p={3}\n                                        border=\"1px solid\"\n                                        borderColor={cardBorder}\n                                        borderRadius=\"md\"\n                                        _hover={{ bg: getColor('background.overlay') }}\n                                    >\n                                        <Checkbox value={address.email} colorScheme=\"blue\">\n                                            <HStack spacing={3} ml={2}>\n                                                <VStack align=\"start\" spacing={0}>\n                                                    <Text fontSize=\"sm\" color={textPrimary}>\n                                                        {address.name || address.email}\n                                                    </Text>\n                                                    {address.name && (\n                                                        <Text fontSize=\"xs\" color={textMuted}>\n                                                            {address.email}\n                                                        </Text>\n                                                    )}\n                                                </VStack>\n                                            </HStack>\n                                        </Checkbox>\n                                    </Box>\n                                ))}\n                            </VStack>\n                        </CheckboxGroup>\n                        \n                        <HStack justify=\"space-between\">\n                            <Text fontSize=\"sm\" color={textMuted}>\n                                {selectedEmails.length} recipient(s) selected\n                            </Text>\n                            <HStack>\n                                <Button variant=\"outline\" onClick={handleAddressBookClose} borderColor={cardBorder}>\n                                    Cancel\n                                </Button>\n                                <Button \n                                    colorScheme=\"blue\" \n                                    onClick={handleAddressBookSelect}\n                                    isDisabled={selectedEmails.length === 0}\n                                >\n                                    Add Recipients\n                                </Button>\n                            </HStack>\n                        </HStack>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n\n        {/* Convert to Project Modal */}\n        <ConvertToProjectModal \n            isOpen={isConvertModalOpen}\n            onClose={onConvertModalClose}\n            email={{\n                id: id || '',\n                subject: subject,\n                bodyMarkdown: bodyMarkdown,\n                from: from\n            }}\n        />\n    </Box>\n    );\n};\n\nexport default EmailView;","import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    VStack,\n    HStack,\n    FormControl,\n    FormLabel,\n    Input,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n    Button,\n    Textarea,\n    Text,\n    IconButton,\n    ButtonGroup,\n    Tooltip,\n    Divider,\n    useColorModeValue\n} from '@chakra-ui/react';\nimport {\n    FiBold,\n    FiItalic,\n    FiUnderline,\n    FiList,\n    FiLink,\n    FiCode,\n    FiAlignLeft,\n    FiAlignCenter,\n    FiAlignRight\n} from 'react-icons/fi';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Link from '@tiptap/extension-link';\nimport Underline from '@tiptap/extension-underline';\nimport TextAlign from '@tiptap/extension-text-align';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\ninterface EmailComposerProps {\n    subject: string;\n    onSubjectChange: (value: string) => void;\n    content: string;\n    onContentChange: (value: string) => void;\n    contentType?: 'html' | 'markdown';\n    placeholder?: string;\n    subjectPlaceholder?: string;\n    isReadOnly?: boolean;\n    onImprove?: () => void;\n    isImproving?: boolean;\n    showSubject?: boolean;\n}\n\nconst EmailComposer: React.FC<EmailComposerProps> = ({\n    subject,\n    onSubjectChange,\n    content,\n    onContentChange,\n    contentType = 'html',\n    subjectPlaceholder = 'Enter email subject',\n    isReadOnly = false,\n    onImprove,\n    isImproving = false,\n    showSubject = true\n}) => {\n    const [editorMode, setEditorMode] = useState<'visual' | 'source'>('visual');\n    const [sourceContent, setSourceContent] = useState(content);\n    const [activeTab, setActiveTab] = useState(0);\n\n    // Use proper color mode values\n    const bg = useColorModeValue('white', 'gray.800');\n    const inputBg = useColorModeValue('white', 'gray.700');\n    const cardBorder = useColorModeValue('gray.200', 'gray.600');\n    const textPrimary = useColorModeValue('gray.800', 'white');\n    const textSecondary = useColorModeValue('gray.600', 'gray.300');\n    const textMuted = useColorModeValue('gray.500', 'gray.400');\n    const cardGradientBg = useColorModeValue('gray.50', 'gray.700');\n    const hoverBorderColor = useColorModeValue('gray.300', 'gray.500');\n    const readOnlyBg = useColorModeValue('white', 'gray.700');\n    const readOnlyBorder = useColorModeValue('gray.200', 'gray.600');\n    const readOnlyColor = useColorModeValue('gray.800', 'white');\n    const primaryBlue = useColorModeValue('blue.500', 'blue.400');\n    const primaryBlueHover = useColorModeValue('blue.600', 'blue.500');\n    const overlayBg = useColorModeValue('gray.100', 'gray.700');\n\n    // Initialize TipTap editor\n    const editor = useEditor({\n        extensions: [\n            StarterKit,\n            Underline,\n            Link.configure({\n                openOnClick: false,\n                HTMLAttributes: {\n                    style: 'color: #3434ef; text-decoration: underline;'\n                },\n                // Add autolink functionality but with better cursor handling\n                autolink: true,\n                linkOnPaste: true,\n            }),\n            TextAlign.configure({\n                types: ['heading', 'paragraph'],\n            }),\n        ],\n        content: contentType === 'html' ? content : '',\n        onUpdate: ({ editor }) => {\n            if (editorMode === 'visual') {\n                const html = editor.getHTML();\n                onContentChange(html);\n                setSourceContent(html);\n            }\n        },\n        editable: !isReadOnly,\n        // Add event handler for paste to handle link pasting better\n        editorProps: {\n            handlePaste: (_view, event) => {\n                const text = event.clipboardData?.getData('text/plain');\n                // Check if the pasted text is a URL\n                if (text && /^https?:\\/\\//.test(text)) {\n                    // Let TipTap handle the paste normally\n                    // but add a small delay to move cursor after the link\n                    setTimeout(() => {\n                        if (editor) {\n                            // Insert a space after the link and move cursor there\n                            editor.chain()\n                                .focus()\n                                .insertContent(' ')\n                                .run();\n                        }\n                    }, 10);\n                }\n                return false; // Let TipTap handle the paste\n            }\n        }\n    });\n\n    // Update editor when content changes externally\n    useEffect(() => {\n        if (editor && content !== editor.getHTML() && editorMode === 'visual') {\n            editor.commands.setContent(content);\n        }\n    }, [content, editor, editorMode]);\n\n    // Handle source mode changes\n    const handleSourceChange = (value: string) => {\n        setSourceContent(value);\n        if (contentType === 'markdown') {\n            onContentChange(value);\n        } else {\n            // For HTML mode, update the content\n            onContentChange(value);\n            if (editor) {\n                editor.commands.setContent(value);\n            }\n        }\n    };\n\n    // Convert HTML to plain text for preview\n    const htmlToPlainText = (html: string) => {\n        const temp = document.createElement('div');\n        temp.innerHTML = html;\n        return temp.textContent || temp.innerText || '';\n    };\n\n    // Toolbar button component\n    const ToolbarButton: React.FC<{\n        icon: React.ReactElement;\n        onClick: () => void;\n        isActive?: boolean;\n        tooltip: string;\n    }> = ({ icon, onClick, isActive = false, tooltip }) => (\n        <Tooltip label={tooltip} placement=\"top\">\n            <IconButton\n                aria-label={tooltip}\n                icon={icon}\n                size=\"sm\"\n                variant={isActive ? \"solid\" : \"ghost\"}\n                bg={isActive ? primaryBlue : 'transparent'}\n                color={isActive ? 'white' : textSecondary}\n                _hover={{\n                    bg: isActive ? primaryBlueHover : overlayBg,\n                    color: isActive ? 'white' : textPrimary\n                }}\n                onClick={onClick}\n                isDisabled={isReadOnly}\n            />\n        </Tooltip>\n    );\n\n    const addLink = () => {\n        const url = window.prompt('Enter URL:');\n        if (url && editor) {\n            editor.chain().focus().setLink({ href: url }).run();\n        }\n    };\n\n    return (\n        <VStack align=\"stretch\" spacing={6}>\n            {showSubject && (\n                <FormControl>\n                    <FormLabel color={textPrimary}>Subject</FormLabel>\n                    <Input\n                        value={subject}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onSubjectChange(e.target.value)}\n                        placeholder={subjectPlaceholder}\n                        size=\"lg\"\n                        bg={inputBg}\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: hoverBorderColor }}\n                        _focus={{ borderColor: 'blue.500', boxShadow: '0 0 0 1px rgba(66, 153, 225, 0.6)' }}\n                        fontWeight=\"medium\"\n                        isReadOnly={isReadOnly}\n                    />\n                </FormControl>\n            )}\n\n            <FormControl>\n                <HStack justify=\"space-between\" mb={3}>\n                    <FormLabel color={textPrimary} mb={0}>Email Body</FormLabel>\n                    <HStack>\n                        {onImprove && (\n                            <Button\n                                size=\"sm\"\n                                leftIcon={<Text>✨</Text>}\n                                onClick={onImprove}\n                                isLoading={isImproving}\n                                loadingText=\"Improving...\"\n                                colorScheme=\"purple\"\n                                variant=\"outline\"\n                                _hover={{ bg: 'purple.50', borderColor: 'purple.500' }}\n                            >\n                                Improve with AI\n                            </Button>\n                        )}\n                        <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n                            <Tooltip \n                                label=\"Rich text editor with formatting toolbar - edit visually like a word processor\" \n                                placement=\"top\"\n                            >\n                                <Button\n                                    onClick={() => setEditorMode('visual')}\n                                    variant={editorMode === 'visual' ? 'solid' : 'outline'}\n                                    bg={editorMode === 'visual' ? primaryBlue : 'transparent'}\n                                    color={editorMode === 'visual' ? 'white' : textSecondary}\n                                    borderColor={cardBorder}\n                                >\n                                    Visual\n                                </Button>\n                            </Tooltip>\n                            <Tooltip \n                                label=\"Edit raw HTML code directly - for advanced users who want precise control\" \n                                placement=\"top\"\n                            >\n                                <Button\n                                    onClick={() => setEditorMode('source')}\n                                    variant={editorMode === 'source' ? 'solid' : 'outline'}\n                                    bg={editorMode === 'source' ? primaryBlue : 'transparent'}\n                                    color={editorMode === 'source' ? 'white' : textSecondary}\n                                    borderColor={cardBorder}\n                                >\n                                    Source\n                                </Button>\n                            </Tooltip>\n                        </ButtonGroup>\n                    </HStack>\n                </HStack>\n\n                <Tabs \n                    variant=\"soft-rounded\" \n                    colorScheme=\"blue\"\n                    index={activeTab}\n                    onChange={setActiveTab}\n                >\n                    <TabList bg={bg} p={2} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                        <Tooltip \n                            label={editorMode === 'visual' \n                                ? \"Write and format your email content here\" \n                                : \"Edit the raw HTML source code directly\"} \n                            placement=\"top\"\n                        >\n                            <Tab color={textMuted} _selected={{ bg: primaryBlue, color: \"white\" }}>\n                                {editorMode === 'visual' ? 'Compose' : 'Edit'}\n                            </Tab>\n                        </Tooltip>\n                        <Tooltip \n                            label=\"Preview how your email will look with all formatting applied\" \n                            placement=\"top\"\n                        >\n                            <Tab color={textMuted} _selected={{ bg: primaryBlue, color: \"white\" }}>\n                                HTML Preview\n                            </Tab>\n                        </Tooltip>\n                        <Tooltip \n                            label=\"See how your email appears in plain text for email clients that don't support HTML\" \n                            placement=\"top\"\n                        >\n                            <Tab color={textMuted} _selected={{ bg: primaryBlue, color: \"white\" }}>\n                                Plain Text\n                            </Tab>\n                        </Tooltip>\n                    </TabList>\n\n                    <TabPanels>\n                        <TabPanel px={0}>\n                            {editorMode === 'visual' ? (\n                                <Box>\n                                    {/* Toolbar */}\n                                    {!isReadOnly && (\n                                        <HStack\n                                            p={2}\n                                            mb={2}\n                                            bg={bg}\n                                            border=\"1px solid\"\n                                            borderColor={cardBorder}\n                                            borderRadius=\"md\"\n                                            spacing={1}\n                                        >\n                                            <ToolbarButton\n                                                icon={<FiBold />}\n                                                onClick={() => editor?.chain().focus().toggleBold().run()}\n                                                isActive={editor?.isActive('bold')}\n                                                tooltip=\"Bold\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiItalic />}\n                                                onClick={() => editor?.chain().focus().toggleItalic().run()}\n                                                isActive={editor?.isActive('italic')}\n                                                tooltip=\"Italic\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiUnderline />}\n                                                onClick={() => editor?.chain().focus().toggleUnderline().run()}\n                                                isActive={editor?.isActive('underline')}\n                                                tooltip=\"Underline\"\n                                            />\n                                            <Divider orientation=\"vertical\" h={6} borderColor={cardBorder} />\n                                            <ToolbarButton\n                                                icon={<FiList />}\n                                                onClick={() => editor?.chain().focus().toggleBulletList().run()}\n                                                isActive={editor?.isActive('bulletList')}\n                                                tooltip=\"Bullet List\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiLink />}\n                                                onClick={addLink}\n                                                isActive={editor?.isActive('link')}\n                                                tooltip=\"Add Link\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiCode />}\n                                                onClick={() => editor?.chain().focus().toggleCodeBlock().run()}\n                                                isActive={editor?.isActive('codeBlock')}\n                                                tooltip=\"Code Block\"\n                                            />\n                                            <Divider orientation=\"vertical\" h={6} borderColor={cardBorder} />\n                                            <ToolbarButton\n                                                icon={<FiAlignLeft />}\n                                                onClick={() => editor?.chain().focus().setTextAlign('left').run()}\n                                                isActive={editor?.isActive({ textAlign: 'left' })}\n                                                tooltip=\"Align Left\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiAlignCenter />}\n                                                onClick={() => editor?.chain().focus().setTextAlign('center').run()}\n                                                isActive={editor?.isActive({ textAlign: 'center' })}\n                                                tooltip=\"Align Center\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiAlignRight />}\n                                                onClick={() => editor?.chain().focus().setTextAlign('right').run()}\n                                                isActive={editor?.isActive({ textAlign: 'right' })}\n                                                tooltip=\"Align Right\"\n                                            />\n                                        </HStack>\n                                    )}\n                                    \n                                    {/* Editor */}\n                                    <Box\n                                        bg={isReadOnly ? readOnlyBg : inputBg}\n                                        border=\"1px solid\"\n                                        borderColor={isReadOnly ? readOnlyBorder : cardBorder}\n                                        borderRadius=\"md\"\n                                        minH=\"400px\"\n                                        p={4}\n                                        sx={{\n                                            '.ProseMirror': {\n                                                minHeight: '380px',\n                                                outline: 'none',\n                                                color: isReadOnly ? readOnlyColor : textPrimary,\n                                                '& p': { marginBottom: '1em' },\n                                                '& h1, & h2, & h3': { \n                                                    fontWeight: 'bold', \n                                                    marginBottom: '0.5em',\n                                                    marginTop: '1em'\n                                                },\n                                                '& h1': { fontSize: '2em' },\n                                                '& h2': { fontSize: '1.5em' },\n                                                '& h3': { fontSize: '1.2em' },\n                                                '& ul, & ol': { \n                                                    paddingLeft: '2em',\n                                                    marginBottom: '1em'\n                                                },\n                                                '& li': { marginBottom: '0.5em' },\n                                                '& blockquote': {\n                                                    borderLeft: '3px solid',\n                                                    borderColor: cardBorder,\n                                                    paddingLeft: '1em',\n                                                    marginLeft: '0',\n                                                    fontStyle: 'italic',\n                                                    color: textSecondary\n                                                },\n                                                '& code': {\n                                                    backgroundColor: cardGradientBg,\n                                                    padding: '0.2em 0.4em',\n                                                    borderRadius: '3px',\n                                                    fontSize: '0.9em',\n                                                    fontFamily: 'monospace'\n                                                },\n                                                '& pre': {\n                                                    backgroundColor: cardGradientBg,\n                                                    padding: '1em',\n                                                    borderRadius: '5px',\n                                                    overflow: 'auto',\n                                                    marginBottom: '1em'\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <EditorContent editor={editor} />\n                                    </Box>\n                                </Box>\n                            ) : (\n                                <Textarea\n                                    value={sourceContent}\n                                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleSourceChange(e.target.value)}\n                                    placeholder={contentType === 'markdown'\n                                        ? \"Write in Markdown format...\"\n                                        : \"Edit HTML source...\"}\n                                    minHeight=\"450px\"\n                                    fontFamily=\"mono\"\n                                    fontSize=\"sm\"\n                                    bg={inputBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _placeholder={{ color: textMuted }}\n                                    _hover={{ borderColor: hoverBorderColor }}\n                                    _focus={{ borderColor: 'blue.500', boxShadow: '0 0 0 1px rgba(66, 153, 225, 0.6)' }}\n                                    isReadOnly={isReadOnly}\n                                />\n                            )}\n                        </TabPanel>\n\n                        <TabPanel px={0}>\n                            <Box\n                                bg={bg}\n                                p={6}\n                                borderRadius=\"md\"\n                                minHeight=\"400px\"\n                                border=\"1px solid\"\n                                borderColor={cardBorder}\n                            >\n                                {contentType === 'markdown' ? (\n                                    <Box\n                                        sx={{\n                                            '& h1, & h2, & h3, & h4, & h5, & h6': { \n                                                fontWeight: 'bold', \n                                                marginBottom: '0.5em',\n                                                color: textPrimary\n                                            },\n                                            '& p': { \n                                                marginBottom: '1em', \n                                                color: textPrimary,\n                                                lineHeight: '1.6'\n                                            },\n                                            '& a': { \n                                                color: primaryBlue, \n                                                textDecoration: 'underline',\n                                                '&:hover': {\n                                                    color: primaryBlueHover\n                                                }\n                                            },\n                                            '& ul, & ol': { \n                                                paddingLeft: '2em', \n                                                marginBottom: '1em',\n                                                '& li': {\n                                                    color: textPrimary\n                                                }\n                                            },\n                                            '& li': { \n                                                marginBottom: '0.5em', \n                                                color: textPrimary \n                                            },\n                                            '& blockquote': {\n                                                borderLeft: '3px solid',\n                                                borderColor: cardBorder,\n                                                paddingLeft: '1em',\n                                                marginLeft: '0',\n                                                fontStyle: 'italic',\n                                                color: textSecondary\n                                            },\n                                            '& code': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '0.2em 0.4em',\n                                                borderRadius: '3px',\n                                                fontSize: '0.9em',\n                                                fontFamily: 'monospace',\n                                                color: primaryBlue\n                                            },\n                                            '& pre': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '1em',\n                                                borderRadius: '5px',\n                                                overflow: 'auto',\n                                                marginBottom: '1em',\n                                                '& code': {\n                                                    backgroundColor: 'transparent',\n                                                    padding: '0',\n                                                    color: textPrimary\n                                                }\n                                            },\n                                            '& strong': { \n                                                fontWeight: 'bold',\n                                                color: textPrimary\n                                            },\n                                            '& em': { \n                                                fontStyle: 'italic',\n                                                color: textPrimary\n                                            },\n                                            '& hr': {\n                                                border: 'none',\n                                                borderTop: '1px solid',\n                                                borderColor: cardBorder,\n                                                marginTop: '1em',\n                                                marginBottom: '1em'\n                                            },\n                                            '& table': {\n                                                width: '100%',\n                                                marginBottom: '1em',\n                                                borderCollapse: 'collapse',\n                                                '& th, & td': {\n                                                    padding: '0.5em',\n                                                    border: '1px solid',\n                                                    borderColor: cardBorder,\n                                                    color: textPrimary\n                                                },\n                                                '& th': {\n                                                    fontWeight: 'bold',\n                                                    backgroundColor: cardGradientBg\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                                            {sourceContent}\n                                        </ReactMarkdown>\n                                    </Box>\n                                ) : (\n                                    <Box\n                                        dangerouslySetInnerHTML={{ __html: sourceContent }}\n                                        sx={{\n                                            // Apply comprehensive HTML email styling\n                                            '& *': {\n                                                color: textPrimary // Default text color for all elements\n                                            },\n                                            '& h1, & h2, & h3, & h4, & h5, & h6': { \n                                                fontWeight: 'bold', \n                                                marginBottom: '0.5em',\n                                                marginTop: '0.5em',\n                                                color: textPrimary\n                                            },\n                                            '& h1': { fontSize: '2em' },\n                                            '& h2': { fontSize: '1.5em' },\n                                            '& h3': { fontSize: '1.2em' },\n                                            '& h4': { fontSize: '1em' },\n                                            '& p': { \n                                                marginBottom: '1em',\n                                                color: textPrimary,\n                                                lineHeight: '1.6'\n                                            },\n                                            '& a': { \n                                                color: primaryBlue, \n                                                textDecoration: 'underline',\n                                                '&:hover': {\n                                                    color: primaryBlueHover\n                                                }\n                                            },\n                                            '& ul, & ol': { \n                                                paddingLeft: '2em', \n                                                marginBottom: '1em',\n                                                '& li': {\n                                                    color: textPrimary,\n                                                    marginBottom: '0.5em'\n                                                }\n                                            },\n                                            '& blockquote': {\n                                                borderLeft: '3px solid',\n                                                borderColor: cardBorder,\n                                                paddingLeft: '1em',\n                                                marginLeft: '0',\n                                                fontStyle: 'italic',\n                                                color: textSecondary\n                                            },\n                                            '& code': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '0.2em 0.4em',\n                                                borderRadius: '3px',\n                                                fontSize: '0.9em',\n                                                fontFamily: 'monospace',\n                                                color: primaryBlue\n                                            },\n                                            '& pre': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '1em',\n                                                borderRadius: '5px',\n                                                overflow: 'auto',\n                                                marginBottom: '1em',\n                                                '& code': {\n                                                    backgroundColor: 'transparent',\n                                                    padding: '0',\n                                                    color: textPrimary\n                                                }\n                                            },\n                                            '& strong, & b': { \n                                                fontWeight: 'bold',\n                                                color: textPrimary\n                                            },\n                                            '& em, & i': { \n                                                fontStyle: 'italic',\n                                                color: textPrimary\n                                            },\n                                            '& u': {\n                                                textDecoration: 'underline',\n                                                color: textPrimary\n                                            },\n                                            '& hr': {\n                                                border: 'none',\n                                                borderTop: '1px solid',\n                                                borderColor: cardBorder,\n                                                marginTop: '1em',\n                                                marginBottom: '1em'\n                                            },\n                                            '& table': {\n                                                width: '100%',\n                                                marginBottom: '1em',\n                                                borderCollapse: 'collapse',\n                                                '& th, & td': {\n                                                    padding: '0.5em',\n                                                    border: '1px solid',\n                                                    borderColor: cardBorder,\n                                                    color: textPrimary\n                                                },\n                                                '& th': {\n                                                    fontWeight: 'bold',\n                                                    backgroundColor: cardGradientBg\n                                                }\n                                            },\n                                            '& img': {\n                                                maxWidth: '100%',\n                                                height: 'auto',\n                                                marginBottom: '1em'\n                                            },\n                                            // Common email client specific elements\n                                            '& span': {\n                                                color: 'inherit' // Let spans inherit parent color\n                                            },\n                                            '& div': {\n                                                color: textPrimary\n                                            }\n                                        }}\n                                    />\n                                )}\n                            </Box>\n                        </TabPanel>\n\n                        <TabPanel px={0}>\n                            <Box\n                                bg={bg}\n                                p={6}\n                                borderRadius=\"md\"\n                                minHeight=\"400px\"\n                                border=\"1px solid\"\n                                borderColor={cardBorder}\n                            >\n                                <Text\n                                    whiteSpace=\"pre-wrap\"\n                                    color={textSecondary}\n                                    fontFamily=\"system-ui, -apple-system, sans-serif\"\n                                    fontSize=\"14px\"\n                                    lineHeight=\"1.6\"\n                                >\n                                    {htmlToPlainText(sourceContent)}\n                                </Text>\n                            </Box>\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </FormControl>\n        </VStack>\n    );\n};\n\nexport default EmailComposer;"],"names":["SCAN_EMAIL_FOR_PROJECT","gql","_templateObject","_taggedTemplateLiteral","CREATE_PROJECT","_templateObject2","CREATE_TASK","_templateObject3","CREATE_BILL","_templateObject4","ConvertToProjectModal","_ref","isOpen","onClose","email","toast","useToast","proposal","setProposal","useState","isAnalyzing","setIsAnalyzing","isCreating","setIsCreating","createInvoice","setCreateInvoice","activeTab","setActiveTab","scanEmail","useMutation","createProject","createTask","createBill","textPrimary","getColor","textSecondary","bg","cardBorder","useEffect","analyzeEmail","async","_email$from","_email$from2","_email$from2$match","_result$data","result","variables","emailContent","bodyMarkdown","emailSubject","subject","senderName","from","split","trim","senderEmail","match","data","scanEmailAndGenerateProjectProposal","title","description","status","duration","error","console","projectName","projectSummary","clientName","clientEmail","clientPhone","tasks","suggestedPrice","upfrontPayment","finalPayment","deliveryTimeline","deliverables","specialRequirements","updateTask","index","field","value","updatedTasks","_objectSpread","totalHours","reduce","sum","task","estimatedHours","_jsxs","Modal","size","children","_jsx","ModalOverlay","ModalContent","borderColor","ModalHeader","color","HStack","FiPackage","Text","ModalCloseButton","ModalBody","VStack","spacing","py","Spinner","fontSize","Tabs","onChange","TabList","Tab","length","TabPanels","TabPanel","align","FormControl","FormLabel","Input","e","target","Textarea","rows","FiClock","style","display","marginRight","justify","Badge","colorScheme","Button","leftIcon","FiPlus","variant","onClick","addTask","newTask","order","category","Box","maxH","overflowY","Table","Thead","Tr","Th","isNumeric","Tbody","map","Td","NumberInput","_","min","step","width","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","IconButton","icon","FiTrash2","filter","i","removeTask","Alert","AlertIcon","fontWeight","FiDollarSign","Math","round","Divider","alignItems","mb","Switch","isChecked","checked","ModalFooter","mr","isDisabled","_projectResult$data","_projectResult$data$c","projectId","input","projectGoal","projectDescription","billingClient","sourceEmailId","id","proposalStatus","name","isPaid","currency","showPaymentDetails","lineItems","concat","amount","paymentTerms","billError","window","open","isLoading","StatGroup","forwardRef","props","ref","jsx","chakra","div","role","className","cx","__css","flexWrap","justifyContent","displayName","EMAIL_QUERY","UPDATE_EMAIL_MUTATION","SEND_EMAIL_MUTATION","DUPLICATE_EMAIL_MUTATION","EMAIL_SENDERS_QUERY","_templateObject5","ADDRESS_BOOK_QUERY","_templateObject6","EmailView","_sendersData$emailSen","_allAddressesData$ema","_allAddressesData$ema2","usePageTitle","useParams","navigate","useNavigate","cardGradientBg","textMuted","inputBg","isEditing","setIsEditing","setSubject","setFrom","to","setTo","cc","setCc","bcc","setBcc","replyTo","setReplyTo","setBodyMarkdown","searchTerm","setSearchTerm","modalSearchTerm","setModalSearchTerm","showSuggestions","setShowSuggestions","selectedEmails","setSelectedEmails","currentField","setCurrentField","isAddressBookOpen","onOpen","onAddressBookOpen","onAddressBookClose","useDisclosure","isConvertModalOpen","onConvertModalOpen","onConvertModalClose","loading","refetch","useQuery","onCompleted","log","attachments","sendersData","addressBookData","search","skip","allAddressesData","undefined","openAddressBookFor","handleAddressBookClose","updateEmail","isClosable","onError","message","sendEmail","duplicateEmail","minH","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","emailsModuleConfig","Container","maxW","flex","Center","FooterWithFourColumns","isDraft","isSent","FiArrowLeft","_hover","transform","_active","px","boxShadow","Heading","DRAFT","SENT","FAILED","SCHEDULED","_Fragment","FiSend","FiSave","FiCopy","_email$bodyHtml","sentDate","sentAt","format","Date","originalBody","bodyHtml","replace","quotedBody","line","join","fromEmailMatch","replyToEmail","state","Card","border","CardBody","Stat","StatLabel","StatNumber","opens","clicks","messageId","wordBreak","errorMessage","Select","emailSenders","sender","backgroundColor","InputGroup","type","handleToChange","placeholder","_placeholder","onFocus","onBlur","setTimeout","InputRightElement","FiUsers","emailAddresses","position","zIndex","w","mt","borderRadius","List","p","address","ListItem","cursor","selectEmail","attachment","FiFile","bytes","contentLength","toFixed","FiDownload","byteCharacters","atob","content","byteNumbers","Array","charCodeAt","byteArray","Uint8Array","blob","Blob","contentType","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleDownloadAttachment","EmailComposer","onSubjectChange","onContentChange","subjectPlaceholder","showSubject","isReadOnly","toUpperCase","pb","FiSearch","CheckboxGroup","values","Checkbox","ml","handleAddressBookSelect","emailsString","onImprove","isImproving","editorMode","setEditorMode","sourceContent","setSourceContent","useColorModeValue","hoverBorderColor","readOnlyBg","readOnlyBorder","readOnlyColor","primaryBlue","primaryBlueHover","overlayBg","editor","useEditor","extensions","StarterKit","Underline","Link","configure","openOnClick","HTMLAttributes","autolink","linkOnPaste","TextAlign","types","onUpdate","_ref2","html","getHTML","editable","editorProps","handlePaste","_view","event","_event$clipboardData","text","clipboardData","getData","test","chain","focus","insertContent","run","commands","setContent","ToolbarButton","_ref3","isActive","tooltip","Tooltip","label","placement","_focus","loadingText","ButtonGroup","isAttached","_selected","FiBold","toggleBold","FiItalic","toggleItalic","FiUnderline","toggleUnderline","orientation","h","FiList","toggleBulletList","FiLink","addLink","prompt","setLink","FiCode","toggleCodeBlock","FiAlignLeft","setTextAlign","textAlign","FiAlignCenter","FiAlignRight","sx","minHeight","outline","marginBottom","marginTop","paddingLeft","borderLeft","marginLeft","fontStyle","padding","fontFamily","overflow","EditorContent","handleSourceChange","lineHeight","textDecoration","borderTop","borderCollapse","ReactMarkdown","remarkPlugins","remarkGfm","dangerouslySetInnerHTML","__html","maxWidth","height","whiteSpace","temp","innerHTML","textContent","innerText","htmlToPlainText"],"sourceRoot":""}