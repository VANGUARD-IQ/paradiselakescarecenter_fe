{"version":3,"file":"static/js/1414.af7f2a16.chunk.js","mappings":"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","sources":["pages/companyknowledge/CompanyKnowledgeList.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    Button,\n    Input,\n    InputGroup,\n    InputLeftElement,\n    HStack,\n    VStack,\n    Card,\n    CardBody,\n    CardHeader,\n    Badge,\n    IconButton,\n    useColorMode,\n    useToast,\n    Spinner,\n    Alert,\n    AlertIcon,\n    SimpleGrid,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    Tooltip,\n    Flex,\n    Tag,\n    TagLabel,\n    TagCloseButton,\n} from \"@chakra-ui/react\";\nimport { SearchIcon, AddIcon, ViewIcon, EditIcon, DeleteIcon, StarIcon } from \"@chakra-ui/icons\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport companyKnowledgeModuleConfig from \"./moduleConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { format } from \"date-fns\";\n\nconst GET_ARTICLES = gql`\n    query GetArticles($category: String, $tags: [String!], $search: String, $onlyPublished: Boolean, $onlyPinned: Boolean) {\n        companyKnowledgeArticles(\n            category: $category\n            tags: $tags\n            search: $search\n            onlyPublished: $onlyPublished\n            onlyPinned: $onlyPinned\n        ) {\n            id\n            title\n            category\n            tags\n            visibility\n            allowPublicAccess\n            publicSlug\n            isPinned\n            isPublished\n            viewCount\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\nconst DELETE_ARTICLE = gql`\n    mutation DeleteArticle($id: ID!) {\n        deleteCompanyKnowledgeArticle(id: $id)\n    }\n`;\n\nconst TOGGLE_PIN = gql`\n    mutation TogglePin($id: ID!) {\n        togglePinCompanyKnowledgeArticle(id: $id) {\n            id\n            isPinned\n        }\n    }\n`;\n\nconst CompanyKnowledgeList: React.FC = () => {\n    usePageTitle(\"Company Knowledge\");\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [selectedCategory, setSelectedCategory] = useState<string | undefined>(undefined);\n    const [selectedTags, setSelectedTags] = useState<string[]>([]);\n    const [showOnlyPublished, setShowOnlyPublished] = useState(false);\n    const [showOnlyPinned, setShowOnlyPinned] = useState(false);\n\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n\n    const { data, loading, error, refetch } = useQuery(GET_ARTICLES, {\n        variables: {\n            category: selectedCategory,\n            tags: selectedTags.length > 0 ? selectedTags : undefined,\n            search: searchTerm || undefined,\n            onlyPublished: showOnlyPublished || undefined,\n            onlyPinned: showOnlyPinned || undefined,\n        },\n    });\n\n    const [deleteArticle] = useMutation(DELETE_ARTICLE, {\n        onCompleted: () => {\n            toast({\n                title: \"Article deleted\",\n                status: \"success\",\n                duration: 3000,\n            });\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error deleting article\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n            });\n        },\n    });\n\n    const [togglePin] = useMutation(TOGGLE_PIN, {\n        onCompleted: () => {\n            toast({\n                title: \"Pin status updated\",\n                status: \"success\",\n                duration: 2000,\n            });\n            refetch();\n        },\n    });\n\n    const handleDelete = (id: string, title: string) => {\n        if (window.confirm(`Are you sure you want to delete \"${title}\"?`)) {\n            deleteArticle({ variables: { id } });\n        }\n    };\n\n    const getVisibilityBadge = (visibility: string, allowPublicAccess: boolean) => {\n        if (allowPublicAccess) {\n            return <Badge colorScheme=\"green\">PUBLIC</Badge>;\n        }\n        if (visibility === \"SHARED\") {\n            return <Badge colorScheme=\"blue\">SHARED</Badge>;\n        }\n        return <Badge colorScheme=\"purple\">PRIVATE</Badge>;\n    };\n\n    if (loading) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Flex justify=\"center\" align=\"center\" minH=\"400px\">\n                        <Spinner size=\"xl\" color={primaryColor} />\n                    </Flex>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Alert status=\"error\">\n                        <AlertIcon />\n                        {error.message}\n                    </Alert>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const articles = data?.companyKnowledgeArticles || [];\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n\n            <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                {/* Header */}\n                <Flex justify=\"space-between\" align=\"center\" mb={6}>\n                    <VStack align=\"start\" spacing={1}>\n                        <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                            Company Knowledge\n                        </Heading>\n                        <Text color={textSecondary} fontSize=\"sm\">\n                            {articles.length} {articles.length === 1 ? 'article' : 'articles'} found\n                        </Text>\n                    </VStack>\n                    <Button\n                        leftIcon={<AddIcon />}\n                        colorScheme=\"blue\"\n                        onClick={() => navigate(\"/companyknowledge/new\")}\n                    >\n                        New Article\n                    </Button>\n                </Flex>\n\n                {/* Filters */}\n                <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder} mb={6}>\n                    <CardBody>\n                        <VStack spacing={4} align=\"stretch\">\n                            {/* Search */}\n                            <InputGroup>\n                                <InputLeftElement pointerEvents=\"none\">\n                                    <SearchIcon color=\"gray.400\" />\n                                </InputLeftElement>\n                                <Input\n                                    placeholder=\"Search articles...\"\n                                    value={searchTerm}\n                                    onChange={(e) => setSearchTerm(e.target.value)}\n                                    bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                    color={textPrimary}\n                                />\n                            </InputGroup>\n\n                            {/* Filter Toggles */}\n                            <HStack spacing={4}>\n                                <Button\n                                    size=\"sm\"\n                                    variant={showOnlyPublished ? \"solid\" : \"outline\"}\n                                    colorScheme=\"green\"\n                                    onClick={() => setShowOnlyPublished(!showOnlyPublished)}\n                                >\n                                    Published Only\n                                </Button>\n                                <Button\n                                    size=\"sm\"\n                                    variant={showOnlyPinned ? \"solid\" : \"outline\"}\n                                    colorScheme=\"yellow\"\n                                    onClick={() => setShowOnlyPinned(!showOnlyPinned)}\n                                    leftIcon={<StarIcon />}\n                                >\n                                    Pinned Only\n                                </Button>\n                            </HStack>\n                        </VStack>\n                    </CardBody>\n                </Card>\n\n                {/* Articles Grid */}\n                {articles.length === 0 ? (\n                    <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                        <CardBody>\n                            <VStack py={8} spacing={4}>\n                                <Text fontSize=\"xl\" color={textSecondary}>\n                                    No articles found\n                                </Text>\n                                <Button\n                                    leftIcon={<AddIcon />}\n                                    colorScheme=\"blue\"\n                                    onClick={() => navigate(\"/companyknowledge/new\")}\n                                >\n                                    Create Your First Article\n                                </Button>\n                            </VStack>\n                        </CardBody>\n                    </Card>\n                ) : (\n                    <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>\n                        {articles.map((article: any) => (\n                            <Card\n                                key={article.id}\n                                bg={cardGradientBg}\n                                border=\"1px\"\n                                borderColor={cardBorder}\n                                _hover={{ transform: \"translateY(-4px)\", shadow: \"lg\" }}\n                                transition=\"all 0.2s\"\n                                cursor=\"pointer\"\n                                onClick={() => navigate(`/companyknowledge/${article.id}`)}\n                            >\n                                <CardHeader pb={2}>\n                                    <HStack justify=\"space-between\" align=\"start\">\n                                        <VStack align=\"start\" spacing={1} flex={1}>\n                                            <HStack>\n                                                {article.isPinned && (\n                                                    <StarIcon color=\"yellow.400\" boxSize={4} />\n                                                )}\n                                                <Heading size=\"md\" color={textPrimary} noOfLines={2}>\n                                                    {article.title}\n                                                </Heading>\n                                            </HStack>\n                                            <HStack spacing={2}>\n                                                {getVisibilityBadge(article.visibility, article.allowPublicAccess)}\n                                                {!article.isPublished && (\n                                                    <Badge colorScheme=\"gray\">DRAFT</Badge>\n                                                )}\n                                            </HStack>\n                                        </VStack>\n                                        <Menu>\n                                            <MenuButton\n                                                as={IconButton}\n                                                icon={<ViewIcon />}\n                                                variant=\"ghost\"\n                                                size=\"sm\"\n                                                onClick={(e) => e.stopPropagation()}\n                                            />\n                                            <MenuList>\n                                                <MenuItem\n                                                    icon={<ViewIcon />}\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        navigate(`/companyknowledge/${article.id}`);\n                                                    }}\n                                                >\n                                                    View\n                                                </MenuItem>\n                                                <MenuItem\n                                                    icon={<EditIcon />}\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        navigate(`/companyknowledge/${article.id}/edit`);\n                                                    }}\n                                                >\n                                                    Edit\n                                                </MenuItem>\n                                                <MenuItem\n                                                    icon={<StarIcon />}\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        togglePin({ variables: { id: article.id } });\n                                                    }}\n                                                >\n                                                    {article.isPinned ? 'Unpin' : 'Pin'}\n                                                </MenuItem>\n                                                <MenuItem\n                                                    icon={<DeleteIcon />}\n                                                    color=\"red.500\"\n                                                    onClick={(e) => {\n                                                        e.stopPropagation();\n                                                        handleDelete(article.id, article.title);\n                                                    }}\n                                                >\n                                                    Delete\n                                                </MenuItem>\n                                            </MenuList>\n                                        </Menu>\n                                    </HStack>\n                                </CardHeader>\n                                <CardBody pt={2}>\n                                    <VStack align=\"stretch\" spacing={3}>\n                                        {/* Category */}\n                                        {article.category && (\n                                            <HStack>\n                                                <Text fontSize=\"sm\" color={textSecondary}>\n                                                    📁 {article.category}\n                                                </Text>\n                                            </HStack>\n                                        )}\n\n                                        {/* Tags */}\n                                        {article.tags && article.tags.length > 0 && (\n                                            <HStack wrap=\"wrap\" spacing={2}>\n                                                {article.tags.slice(0, 3).map((tag: string) => (\n                                                    <Tag key={tag} size=\"sm\" colorScheme=\"blue\">\n                                                        <TagLabel>{tag}</TagLabel>\n                                                    </Tag>\n                                                ))}\n                                                {article.tags.length > 3 && (\n                                                    <Text fontSize=\"xs\" color={textSecondary}>\n                                                        +{article.tags.length - 3} more\n                                                    </Text>\n                                                )}\n                                            </HStack>\n                                        )}\n\n                                        {/* Stats */}\n                                        <HStack justify=\"space-between\" pt={2}>\n                                            <Tooltip label=\"View count\">\n                                                <Text fontSize=\"sm\" color={textSecondary}>\n                                                    👁️ {article.viewCount || 0} views\n                                                </Text>\n                                            </Tooltip>\n                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                {format(new Date(article.updatedAt), 'MMM dd, yyyy')}\n                                            </Text>\n                                        </HStack>\n\n                                        {/* Public Slug */}\n                                        {article.publicSlug && (\n                                            <Text fontSize=\"xs\" color=\"green.500\" fontFamily=\"mono\">\n                                                /kb/{article.publicSlug}\n                                            </Text>\n                                        )}\n                                    </VStack>\n                                </CardBody>\n                            </Card>\n                        ))}\n                    </SimpleGrid>\n                )}\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default CompanyKnowledgeList;\n"],"names":["GET_ARTICLES","gql","_templateObject","_taggedTemplateLiteral","DELETE_ARTICLE","_templateObject2","TOGGLE_PIN","_templateObject3","CompanyKnowledgeList","usePageTitle","navigate","useNavigate","toast","useToast","colorMode","useColorMode","searchTerm","setSearchTerm","useState","selectedCategory","setSelectedCategory","undefined","selectedTags","setSelectedTags","showOnlyPublished","setShowOnlyPublished","showOnlyPinned","setShowOnlyPinned","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","primaryColor","data","loading","error","refetch","useQuery","variables","category","tags","length","search","onlyPublished","onlyPinned","deleteArticle","useMutation","onCompleted","title","status","duration","onError","description","message","togglePin","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","companyKnowledgeModuleConfig","Container","maxW","py","flex","Flex","justify","align","Spinner","size","color","FooterWithFourColumns","Alert","AlertIcon","articles","companyKnowledgeArticles","mb","VStack","spacing","Heading","fontFamily","brandConfig","fonts","heading","Text","fontSize","Button","leftIcon","AddIcon","colorScheme","onClick","Card","border","borderColor","CardBody","InputGroup","InputLeftElement","pointerEvents","SearchIcon","Input","placeholder","value","onChange","e","target","HStack","variant","StarIcon","SimpleGrid","columns","base","md","lg","map","article","_hover","transform","shadow","transition","cursor","concat","id","CardHeader","pb","isPinned","boxSize","noOfLines","visibility","allowPublicAccess","Badge","isPublished","Menu","MenuButton","as","IconButton","icon","ViewIcon","stopPropagation","MenuList","MenuItem","EditIcon","DeleteIcon","handleDelete","window","confirm","pt","wrap","slice","tag","Tag","TagLabel","Tooltip","label","viewCount","format","Date","updatedAt","publicSlug","getVisibilityBadge"],"sourceRoot":""}