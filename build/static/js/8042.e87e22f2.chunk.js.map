{"version":3,"file":"static/js/8042.e87e22f2.chunk.js","mappings":"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","sources":["pages/employees/EmployeesList.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Button,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    TableContainer,\n    Badge,\n    IconButton,\n    HStack,\n    VStack,\n    Text,\n    useToast,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    InputGroup,\n    InputLeftElement,\n    Input,\n    Select,\n    Card,\n    CardBody,\n    Stat,\n    StatLabel,\n    StatNumber,\n    StatGroup,\n    Divider,\n    Flex,\n    SimpleGrid,\n    useBreakpointValue,\n    Skeleton,\n    SkeletonText,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport {\n    AddIcon,\n    EditIcon,\n    DeleteIcon,\n    ViewIcon,\n    SearchIcon,\n    ChevronDownIcon,\n    PhoneIcon,\n    EmailIcon,\n    CalendarIcon,\n} from \"@chakra-ui/icons\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport employeesModuleConfig from \"./moduleConfig\";\nimport { Employee, EmployeeStatus } from \"../../generated/graphql\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst GET_EMPLOYEES = gql`\n    query GetEmployees {\n        employees {\n            id\n            employeeNumber\n            fName\n            lName\n            email\n            phoneNumber\n            mobileNumber\n            role\n            department\n            position\n            status\n            startDate\n            contractType\n            hourlyRate\n            annualSalary\n            company {\n                id\n                name\n            }\n        }\n        employeeStats\n    }\n`;\n\nconst DELETE_EMPLOYEE = gql`\n    mutation DeleteEmployee($id: ID!) {\n        deleteEmployee(id: $id)\n    }\n`;\n\n\nconst EmployeesList: React.FC = () => {\n    usePageTitle(\"Employees\");\n\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n    const primaryHover = getColor(\"primaryHover\", colorMode);\n    const successGreen = getColor(\"successGreen\", colorMode);\n    const errorRed = getColor(\"status.error\", colorMode);\n    const warningColor = getColor(\"status.warning\", colorMode);\n\n    // State\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [statusFilter, setStatusFilter] = useState(\"ALL\");\n    const [departmentFilter, setDepartmentFilter] = useState(\"ALL\");\n\n    // Responsive values\n    const isMobile = useBreakpointValue({ base: true, md: false });\n    const tableSize = useBreakpointValue({ base: \"sm\", md: \"md\" });\n\n    // Queries and mutations\n    const { data, loading, error, refetch } = useQuery(GET_EMPLOYEES);\n    const [deleteEmployee] = useMutation(DELETE_EMPLOYEE, {\n        onCompleted: () => {\n            toast({\n                title: \"Employee deleted\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error deleting employee\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        },\n    });\n\n    // Filter employees\n    const filteredEmployees = data?.employees?.filter((employee: Employee) => {\n        const matchesSearch = searchTerm === \"\" || \n            `${employee.fName} ${employee.lName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            employee.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            employee.employeeNumber?.toLowerCase().includes(searchTerm.toLowerCase());\n        \n        const matchesStatus = statusFilter === \"ALL\" || employee.status === statusFilter;\n        const matchesDepartment = departmentFilter === \"ALL\" || employee.department === departmentFilter;\n        \n        return matchesSearch && matchesStatus && matchesDepartment;\n    }) || [];\n\n    // Get unique departments\n    const departments: string[] = Array.from(new Set(data?.employees?.map((e: Employee) => e.department).filter(Boolean))) as string[] || [];\n\n    // Handle delete\n    const handleDelete = async (id: string, name: string) => {\n        if (window.confirm(`Are you sure you want to delete ${name}?`)) {\n            await deleteEmployee({ variables: { id } });\n        }\n    };\n\n    // Get status color\n    const getStatusColor = (status?: string) => {\n        switch (status) {\n            case \"ACTIVE\": return \"green\";\n            case \"INACTIVE\": return \"gray\";\n            case \"ON_LEAVE\": return \"orange\";\n            case \"TERMINATED\": return \"red\";\n            default: return \"gray\";\n        }\n    };\n\n    // Format currency\n    const formatCurrency = (amount?: number) => {\n        if (!amount) return \"-\";\n        return new Intl.NumberFormat('en-AU', {\n            style: 'currency',\n            currency: 'AUD',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0,\n        }).format(amount);\n    };\n\n    // Format date\n    const formatDate = (date?: string) => {\n        if (!date) return \"-\";\n        return new Date(date).toLocaleDateString('en-AU');\n    };\n\n    if (error) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={employeesModuleConfig} />\n                <Text color={errorRed}>Error loading employees: {error.message}</Text>\n            </Box>\n        );\n    }\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={employeesModuleConfig} />\n\n            <Container maxW=\"container.xl\" px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                    {/* Header */}\n                    <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\" gap={4}>\n                        <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading} size={{ base: \"md\", md: \"lg\" }}>\n                            Employee Management\n                        </Heading>\n                        <Button\n                            leftIcon={<AddIcon />}\n                            bg={primaryColor}\n                            color=\"white\"\n                            _hover={{ bg: primaryHover }}\n                            onClick={() => navigate(\"/employees/new\")}\n                            size={{ base: \"sm\", md: \"md\" }}\n                        >\n                            Add Employee\n                        </Button>\n                    </Flex>\n\n                    {/* Stats Cards */}\n                    {data?.employeeStats && (\n                        <SimpleGrid columns={{ base: 2, md: 4 }} spacing={{ base: 3, md: 4 }}>\n                            <Card\n                                bg={cardGradientBg}\n                                backdropFilter=\"blur(10px)\"\n                                boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                                border=\"1px\"\n                                borderColor={cardBorder}\n                                borderRadius=\"lg\"\n                            >\n                                <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                    <Stat>\n                                        <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>Total Employees</StatLabel>\n                                        <StatNumber color={textPrimary} fontSize={{ base: \"xl\", md: \"2xl\" }}>\n                                            {data.employeeStats[0] || 0}\n                                        </StatNumber>\n                                    </Stat>\n                                </CardBody>\n                            </Card>\n                            <Card\n                                bg={cardGradientBg}\n                                backdropFilter=\"blur(10px)\"\n                                boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                                border=\"1px\"\n                                borderColor={cardBorder}\n                                borderRadius=\"lg\"\n                            >\n                                <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                    <Stat>\n                                        <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>New (24h)</StatLabel>\n                                        <StatNumber color={successGreen} fontSize={{ base: \"xl\", md: \"2xl\" }}>\n                                            {data.employeeStats[1] || 0}\n                                        </StatNumber>\n                                    </Stat>\n                                </CardBody>\n                            </Card>\n                            <Card\n                                bg={cardGradientBg}\n                                backdropFilter=\"blur(10px)\"\n                                boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                                border=\"1px\"\n                                borderColor={cardBorder}\n                                borderRadius=\"lg\"\n                            >\n                                <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                    <Stat>\n                                        <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>This Week</StatLabel>\n                                        <StatNumber color={textPrimary} fontSize={{ base: \"xl\", md: \"2xl\" }}>\n                                            {data.employeeStats[2] || 0}\n                                        </StatNumber>\n                                    </Stat>\n                                </CardBody>\n                            </Card>\n                            <Card\n                                bg={cardGradientBg}\n                                backdropFilter=\"blur(10px)\"\n                                boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                                border=\"1px\"\n                                borderColor={cardBorder}\n                                borderRadius=\"lg\"\n                            >\n                                <CardBody py={{ base: 3, md: 4 }} px={{ base: 3, md: 5 }}>\n                                    <Stat>\n                                        <StatLabel color={textMuted} fontSize={{ base: \"xs\", md: \"sm\" }}>This Month</StatLabel>\n                                        <StatNumber color={textPrimary} fontSize={{ base: \"xl\", md: \"2xl\" }}>\n                                            {data.employeeStats[3] || 0}\n                                        </StatNumber>\n                                    </Stat>\n                                </CardBody>\n                            </Card>\n                        </SimpleGrid>\n                    )}\n\n                    {/* Filters */}\n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 4px 6px 0 rgba(0, 0, 0, 0.2)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                    >\n                        <CardBody>\n                            <Flex gap={{ base: 3, md: 4 }} wrap=\"wrap\">\n                                <InputGroup flex={{ base: \"1 1 100%\", md: \"1\" }} size={{ base: \"sm\", md: \"md\" }}>\n                                    <InputLeftElement pointerEvents=\"none\">\n                                        <SearchIcon color={textMuted} />\n                                    </InputLeftElement>\n                                    <Input\n                                        placeholder=\"Search employees...\"\n                                        bg=\"rgba(255, 255, 255, 0.05)\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _placeholder={{ color: textMuted }}\n                                        value={searchTerm}\n                                        onChange={(e) => setSearchTerm(e.target.value)}\n                                    />\n                                </InputGroup>\n                                \n                                <Select\n                                    bg=\"rgba(255, 255, 255, 0.05)\"\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    value={statusFilter}\n                                    onChange={(e) => setStatusFilter(e.target.value)}\n                                    width={{ base: \"100%\", md: \"200px\" }}\n                                    size={{ base: \"sm\", md: \"md\" }}\n                                >\n                                    <option value=\"ALL\">All Status</option>\n                                    <option value=\"ACTIVE\">Active</option>\n                                    <option value=\"INACTIVE\">Inactive</option>\n                                    <option value=\"ON_LEAVE\">On Leave</option>\n                                    <option value=\"TERMINATED\">Terminated</option>\n                                </Select>\n                                \n                                <Select\n                                    bg=\"rgba(255, 255, 255, 0.05)\"\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    value={departmentFilter}\n                                    onChange={(e) => setDepartmentFilter(e.target.value)}\n                                    width={{ base: \"100%\", md: \"200px\" }}\n                                    size={{ base: \"sm\", md: \"md\" }}\n                                >\n                                    <option value=\"ALL\">All Departments</option>\n                                    {departments.map((dept) => (\n                                        <option key={dept} value={dept}>{dept}</option>\n                                    ))}\n                                </Select>\n                            </Flex>\n                        </CardBody>\n                    </Card>\n\n                    {/* Employees Table/Cards */}\n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                    >\n                        <CardBody p={{ base: 0, md: 6 }}>\n                            {loading ? (\n                                <VStack spacing={4} p={4}>\n                                    <Skeleton height=\"60px\" />\n                                    <Skeleton height=\"60px\" />\n                                    <Skeleton height=\"60px\" />\n                                </VStack>\n                            ) : isMobile ? (\n                                // Mobile view - Cards\n                                <VStack spacing={4} p={4}>\n                                    {filteredEmployees.length === 0 ? (\n                                        <Text color={textMuted} textAlign=\"center\" py={8}>\n                                            No employees found\n                                        </Text>\n                                    ) : (\n                                        filteredEmployees.map((employee: Employee) => (\n                                            <Card\n                                                key={employee.id}\n                                                bg=\"rgba(255, 255, 255, 0.03)\"\n                                                borderColor={cardBorder}\n                                                borderWidth=\"1px\"\n                                                borderRadius=\"md\"\n                                                w=\"100%\"\n                                            >\n                                                <CardBody p={4}>\n                                                    <VStack align=\"stretch\" spacing={3}>\n                                                        <HStack justify=\"space-between\">\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                <Text\n                                                                    color={textPrimary}\n                                                                    fontWeight=\"bold\"\n                                                                    fontSize=\"md\"\n                                                                    cursor=\"pointer\"\n                                                                    _hover={{ color: primaryColor, textDecoration: \"underline\" }}\n                                                                    onClick={(e) => {\n                                                                        e.preventDefault();\n                                                                        window.open(`/employees/${employee.id}`, '_blank');\n                                                                    }}\n                                                                >\n                                                                    {employee.fName} {employee.lName}\n                                                                </Text>\n                                                                {employee.position && (\n                                                                    <Text color={textSecondary} fontSize=\"sm\">\n                                                                        {employee.position}\n                                                                    </Text>\n                                                                )}\n                                                            </VStack>\n                                                            <Badge colorScheme={getStatusColor(employee.status || '')}>\n                                                                {employee.status || \"Unknown\"}\n                                                            </Badge>\n                                                        </HStack>\n\n                                                        {(employee as any).company?.name && (\n                                                            <Text color={textSecondary} fontSize=\"sm\">\n                                                                <Text as=\"span\" color={textMuted}>Company:</Text> {(employee as any).company.name}\n                                                            </Text>\n                                                        )}\n\n                                                        {employee.department && (\n                                                            <Text color={textMuted} fontSize=\"sm\">\n                                                                {employee.department}\n                                                            </Text>\n                                                        )}\n                                                        \n                                                        <HStack spacing={4} fontSize=\"sm\">\n                                                            {employee.email && (\n                                                                <HStack spacing={1}>\n                                                                    <EmailIcon color={textMuted} />\n                                                                    <Text color={textSecondary} noOfLines={1}>\n                                                                        {employee.email}\n                                                                    </Text>\n                                                                </HStack>\n                                                            )}\n                                                            {employee.mobileNumber && (\n                                                                <HStack spacing={1}>\n                                                                    <PhoneIcon color={textMuted} />\n                                                                    <Text color={textSecondary}>\n                                                                        {employee.mobileNumber}\n                                                                    </Text>\n                                                                </HStack>\n                                                            )}\n                                                        </HStack>\n                                                        \n                                                        <Divider borderColor={cardBorder} />\n                                                        \n                                                        <HStack justify=\"space-between\">\n                                                            <HStack spacing={2}>\n                                                                <IconButton\n                                                                    aria-label=\"View\"\n                                                                    icon={<ViewIcon />}\n                                                                    size=\"sm\"\n                                                                    variant=\"ghost\"\n                                                                    color={textPrimary}\n                                                                    onClick={() => navigate(`/employees/${employee.id}`)}\n                                                                />\n                                                                <IconButton\n                                                                    aria-label=\"Edit\"\n                                                                    icon={<EditIcon />}\n                                                                    size=\"sm\"\n                                                                    variant=\"ghost\"\n                                                                    color={textPrimary}\n                                                                    onClick={() => navigate(`/employees/edit/${employee.id}`)}\n                                                                />\n                                                                <IconButton\n                                                                    aria-label=\"Delete\"\n                                                                    icon={<DeleteIcon />}\n                                                                    size=\"sm\"\n                                                                    variant=\"ghost\"\n                                                                    color={errorRed}\n                                                                    onClick={() => handleDelete(employee.id, `${employee.fName} ${employee.lName}`)}\n                                                                />\n                                                            </HStack>\n                                                            {employee.employeeNumber && (\n                                                                <Text color={textMuted} fontSize=\"xs\">\n                                                                    #{employee.employeeNumber}\n                                                                </Text>\n                                                            )}\n                                                        </HStack>\n                                                    </VStack>\n                                                </CardBody>\n                                            </Card>\n                                        ))\n                                    )}\n                                </VStack>\n                            ) : (\n                                // Desktop view - Table\n                                <TableContainer>\n                                    <Table variant=\"simple\" size={tableSize}>\n                                        <Thead>\n                                            <Tr>\n                                                <Th color={textMuted}>Employee</Th>\n                                                <Th color={textMuted}>Company</Th>\n                                                <Th color={textMuted}>Contact</Th>\n                                                <Th color={textMuted}>Department</Th>\n                                                <Th color={textMuted}>Position</Th>\n                                                <Th color={textMuted}>Status</Th>\n                                                <Th color={textMuted}>Start Date</Th>\n                                                <Th color={textMuted}>Actions</Th>\n                                            </Tr>\n                                        </Thead>\n                                        <Tbody>\n                                            {filteredEmployees.length === 0 ? (\n                                                <Tr>\n                                                    <Td colSpan={8}>\n                                                        <Text color={textMuted} textAlign=\"center\" py={8}>\n                                                            No employees found\n                                                        </Text>\n                                                    </Td>\n                                                </Tr>\n                                            ) : (\n                                                filteredEmployees.map((employee: Employee) => (\n                                                    <Tr key={employee.id}>\n                                                        <Td>\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                <Text\n                                                                    color={textPrimary}\n                                                                    fontWeight=\"medium\"\n                                                                    cursor=\"pointer\"\n                                                                    _hover={{ color: primaryColor, textDecoration: \"underline\" }}\n                                                                    onClick={(e) => {\n                                                                        e.preventDefault();\n                                                                        window.open(`/employees/${employee.id}`, '_blank');\n                                                                    }}\n                                                                >\n                                                                    {employee.fName} {employee.lName}\n                                                                </Text>\n                                                                {employee.employeeNumber && (\n                                                                    <Text color={textMuted} fontSize=\"sm\">\n                                                                        #{employee.employeeNumber}\n                                                                    </Text>\n                                                                )}\n                                                            </VStack>\n                                                        </Td>\n                                                        <Td color={textSecondary}>\n                                                            {(employee as any).company?.name || \"-\"}\n                                                        </Td>\n                                                        <Td>\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                {employee.email && (\n                                                                    <Text color={textSecondary} fontSize=\"sm\">\n                                                                        {employee.email}\n                                                                    </Text>\n                                                                )}\n                                                                {employee.mobileNumber && (\n                                                                    <Text color={textMuted} fontSize=\"sm\">\n                                                                        {employee.mobileNumber}\n                                                                    </Text>\n                                                                )}\n                                                            </VStack>\n                                                        </Td>\n                                                        <Td color={textSecondary}>\n                                                            {employee.department || \"-\"}\n                                                        </Td>\n                                                        <Td color={textSecondary}>\n                                                            {employee.position || \"-\"}\n                                                        </Td>\n                                                        <Td>\n                                                            <Badge colorScheme={getStatusColor(employee.status || '')}>\n                                                                {employee.status || \"Unknown\"}\n                                                            </Badge>\n                                                        </Td>\n                                                        <Td color={textSecondary}>\n                                                            {formatDate(employee.startDate || '')}\n                                                        </Td>\n                                                        <Td>\n                                                            <Menu>\n                                                                <MenuButton\n                                                                    as={IconButton}\n                                                                    icon={<ChevronDownIcon />}\n                                                                    variant=\"ghost\"\n                                                                    size=\"sm\"\n                                                                    color={textPrimary}\n                                                                />\n                                                                <MenuList bg={cardGradientBg} borderColor={cardBorder}>\n                                                                    <MenuItem\n                                                                        icon={<ViewIcon />}\n                                                                        onClick={() => navigate(`/employees/${employee.id}`)}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                                                                        color={textPrimary}\n                                                                    >\n                                                                        View Details\n                                                                    </MenuItem>\n                                                                    <MenuItem\n                                                                        icon={<EditIcon />}\n                                                                        onClick={() => navigate(`/employees/edit/${employee.id}`)}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                                                                        color={textPrimary}\n                                                                    >\n                                                                        Edit\n                                                                    </MenuItem>\n                                                                    <MenuItem\n                                                                        icon={<DeleteIcon />}\n                                                                        onClick={() => handleDelete(employee.id, `${employee.fName} ${employee.lName}`)}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                                                                        color={errorRed}\n                                                                    >\n                                                                        Delete\n                                                                    </MenuItem>\n                                                                </MenuList>\n                                                            </Menu>\n                                                        </Td>\n                                                    </Tr>\n                                                ))\n                                            )}\n                                        </Tbody>\n                                    </Table>\n                                </TableContainer>\n                            )}\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default EmployeesList;"],"names":["GET_EMPLOYEES","gql","_templateObject","_taggedTemplateLiteral","DELETE_EMPLOYEE","_templateObject2","EmployeesList","_data$employees","_data$employees2","usePageTitle","navigate","useNavigate","toast","useToast","colorMode","useColorMode","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","successGreen","errorRed","searchTerm","setSearchTerm","useState","statusFilter","setStatusFilter","departmentFilter","setDepartmentFilter","isMobile","useBreakpointValue","base","md","tableSize","data","loading","error","refetch","useQuery","deleteEmployee","useMutation","onCompleted","title","status","duration","isClosable","onError","description","message","filteredEmployees","employees","filter","employee","_employee$email","_employee$employeeNum","matchesSearch","concat","fName","lName","toLowerCase","includes","email","employeeNumber","matchesStatus","matchesDepartment","department","departments","Array","from","Set","map","e","Boolean","handleDelete","async","id","name","window","confirm","variables","getStatusColor","_jsxs","Box","bg","minH","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","employeesModuleConfig","Text","color","display","flexDirection","Container","maxW","px","py","flex","VStack","spacing","align","Flex","justify","wrap","gap","Heading","fontFamily","brandConfig","fonts","heading","size","Button","leftIcon","AddIcon","_hover","onClick","employeeStats","SimpleGrid","columns","Card","backdropFilter","boxShadow","border","borderColor","borderRadius","CardBody","Stat","StatLabel","fontSize","StatNumber","InputGroup","InputLeftElement","pointerEvents","SearchIcon","Input","placeholder","_placeholder","value","onChange","target","Select","width","dept","p","Skeleton","height","length","textAlign","_company","borderWidth","w","HStack","fontWeight","cursor","textDecoration","preventDefault","open","position","Badge","colorScheme","company","as","EmailIcon","noOfLines","mobileNumber","PhoneIcon","Divider","IconButton","icon","ViewIcon","variant","EditIcon","DeleteIcon","TableContainer","Table","Thead","Tr","Th","Tbody","Td","colSpan","_company2","date","startDate","Date","toLocaleDateString","Menu","MenuButton","ChevronDownIcon","MenuList","MenuItem","FooterWithFourColumns"],"sourceRoot":""}