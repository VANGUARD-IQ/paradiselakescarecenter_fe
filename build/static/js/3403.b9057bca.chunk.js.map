{"version":3,"file":"static/js/3403.b9057bca.chunk.js","mappings":"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","sources":["pages/meeting-summarizer/MeetingsList.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Button,\n  Text,\n  Card,\n  CardBody,\n  Heading,\n  useToast,\n  Badge,\n  SimpleGrid,\n  IconButton,\n  Spinner,\n  Alert,\n  AlertIcon,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { FiPlus, FiMic, FiCalendar, FiMapPin, FiRefreshCw } from 'react-icons/fi';\nimport { gql, useQuery } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { getColor, getComponent, brandConfig } from '../../brandConfig';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport meetingSummarizerModule from './moduleConfig';\nimport { usePageTitle } from '../../hooks/useDocumentTitle';\n\nconst GET_MY_MEETINGS = gql`\n  query GetMyMeetings {\n    myMeetings {\n      id\n      title\n      description\n      date\n      location\n      attendees\n      audioUrl\n      status\n      transcription\n      summary\n      createdAt\n    }\n  }\n`;\n\nconst MeetingsList: React.FC = () => {\n  usePageTitle('Meetings');\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n\n  // Theme-aware styling from brandConfig\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(colorMode === 'light' ? \"border.lightCard\" : \"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const buttonBg = getColor(\"primary\", colorMode);\n  const buttonHoverBg = getColor(\"secondary\", colorMode);\n\n  const { data, loading, error, refetch } = useQuery(GET_MY_MEETINGS, {\n    fetchPolicy: 'cache-and-network',\n    pollInterval: 5000, // Poll every 5 seconds to get status updates\n  });\n\n  // Refetch on mount to ensure fresh data\n  useEffect(() => {\n    refetch();\n  }, [refetch]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'green';\n      case 'processing': return 'blue';\n      case 'failed': return 'red';\n      case 'pending': return 'yellow';\n      default: return 'gray';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'completed': return 'Transcribed';\n      case 'processing': return 'Processing';\n      case 'failed': return 'Failed';\n      case 'pending': return 'Pending';\n      default: return status;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={meetingSummarizerModule} />\n        <Container maxW=\"container.xl\" py={12} flex=\"1\">\n          <VStack spacing={4}>\n            <Spinner size=\"xl\" color={textPrimary} />\n            <Text color={textPrimary}>Loading meetings...</Text>\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={meetingSummarizerModule} />\n        <Container maxW=\"container.xl\" py={12} flex=\"1\">\n          <Alert status=\"error\">\n            <AlertIcon />\n            Error loading meetings: {error.message}\n          </Alert>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  const meetings = data?.myMeetings || [];\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={meetingSummarizerModule} />\n\n      <Container maxW=\"container.xl\" py={12} flex=\"1\">\n        <VStack spacing={8} align=\"stretch\">\n          <HStack justify=\"space-between\">\n            <VStack align=\"start\" spacing={1}>\n              <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                Meeting Summaries\n              </Heading>\n              <Text color={textMuted}>\n                Record, transcribe, and summarize your meetings\n              </Text>\n            </VStack>\n            <HStack spacing={2}>\n              <Button\n                variant=\"outline\"\n                leftIcon={<FiRefreshCw />}\n                onClick={() => refetch()}\n                color={textPrimary}\n                borderColor={cardBorder}\n                _hover={{ bg: cardGradientBg }}\n                borderRadius=\"xl\"\n              >\n                Refresh\n              </Button>\n              <Button\n                bg={buttonBg}\n                color=\"white\"\n                _hover={{ bg: buttonHoverBg }}\n                leftIcon={<FiPlus />}\n                onClick={() => navigate('/meeting-summarizer/new')}\n                borderRadius=\"xl\"\n              >\n                New Meeting\n              </Button>\n            </HStack>\n          </HStack>\n\n          {meetings.length === 0 ? (\n            <Card\n              bg={colorMode === 'light' ? 'white' : cardGradientBg}\n              border=\"1px solid\"\n              borderColor={cardBorder}\n              borderRadius=\"xl\"\n            >\n              <CardBody>\n                <VStack spacing={4} py={8}>\n                  <FiMic size={48} color={textMuted} />\n                  <Text color={textPrimary} fontSize=\"lg\">No meetings yet</Text>\n                  <Text color={textMuted}>Create your first meeting summary</Text>\n                  <Button\n                    bg={buttonBg}\n                    color=\"white\"\n                    _hover={{ bg: buttonHoverBg }}\n                    leftIcon={<FiPlus />}\n                    onClick={() => navigate('/meeting-summarizer/new')}\n                    borderRadius=\"xl\"\n                  >\n                    Create Meeting\n                  </Button>\n                </VStack>\n              </CardBody>\n            </Card>\n          ) : (\n            <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>\n              {meetings.map((meeting: any) => (\n                <Card\n                  key={meeting.id}\n                  bg={colorMode === 'light' ? 'white' : cardGradientBg}\n                  border=\"1px solid\"\n                  borderColor={cardBorder}\n                  borderRadius=\"xl\"\n                  cursor=\"pointer\"\n                  _hover={{ \n                    transform: 'translateY(-2px)', \n                    boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\n                    borderColor: buttonBg\n                  }}\n                  transition=\"all 0.2s\"\n                  onClick={() => navigate(`/meeting-summarizer/${meeting.id}`)}\n                >\n                  <CardBody>\n                    <VStack align=\"stretch\" spacing={3}>\n                      <HStack justify=\"space-between\">\n                        <Heading size=\"sm\" color={textPrimary} noOfLines={1}>\n                          {meeting.title}\n                        </Heading>\n                        <Badge colorScheme={getStatusColor(meeting.status)}>\n                          {getStatusText(meeting.status)}\n                        </Badge>\n                      </HStack>\n                      \n                      {meeting.description && (\n                        <Text color={textMuted} fontSize=\"sm\" noOfLines={2}>\n                          {meeting.description}\n                        </Text>\n                      )}\n\n                      <VStack align=\"start\" spacing={1}>\n                        {meeting.date && (\n                          <HStack spacing={2}>\n                            <FiCalendar size={14} color={textMuted} />\n                            <Text color={textMuted} fontSize=\"xs\">\n                              {formatDate(meeting.date)}\n                            </Text>\n                          </HStack>\n                        )}\n                        \n                        {meeting.location && (\n                          <HStack spacing={2}>\n                            <FiMapPin size={14} color={textMuted} />\n                            <Text color={textMuted} fontSize=\"xs\" noOfLines={1}>\n                              {meeting.location}\n                            </Text>\n                          </HStack>\n                        )}\n                      </VStack>\n\n                      {meeting.attendees && meeting.attendees.length > 0 && (\n                        <Text color={textMuted} fontSize=\"xs\">\n                          {meeting.attendees.length} attendee{meeting.attendees.length !== 1 ? 's' : ''}\n                        </Text>\n                      )}\n\n                      {meeting.summary && (\n                        <Box>\n                          <Text color={textPrimary} fontSize=\"xs\" fontWeight=\"semibold\" mb={1}>\n                            Summary:\n                          </Text>\n                          <Text color={textMuted} fontSize=\"xs\" noOfLines={3}>\n                            {meeting.summary}\n                          </Text>\n                        </Box>\n                      )}\n\n                      <HStack justify=\"space-between\" pt={2}>\n                        <Text color={textMuted} fontSize=\"xs\">\n                          {formatDate(meeting.createdAt)}\n                        </Text>\n                        {meeting.audioUrl && (\n                          <FiMic size={14} color={buttonBg} />\n                        )}\n                      </HStack>\n                    </VStack>\n                  </CardBody>\n                </Card>\n              ))}\n            </SimpleGrid>\n          )}\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default MeetingsList;"],"names":["GET_MY_MEETINGS","gql","_templateObject","_taggedTemplateLiteral","MeetingsList","usePageTitle","navigate","useNavigate","colorMode","useToast","useColorMode","bg","getColor","cardGradientBg","cardBorder","textPrimary","textMuted","buttonBg","buttonHoverBg","data","loading","error","refetch","useQuery","fetchPolicy","pollInterval","useEffect","getStatusColor","status","getStatusText","formatDate","dateString","Date","toLocaleDateString","year","month","day","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","meetingSummarizerModule","Container","maxW","py","flex","VStack","spacing","Spinner","size","color","Text","FooterWithFourColumns","Alert","AlertIcon","message","meetings","myMeetings","align","HStack","justify","Heading","fontFamily","brandConfig","fonts","heading","Button","variant","leftIcon","FiRefreshCw","onClick","borderColor","_hover","borderRadius","FiPlus","length","Card","border","CardBody","FiMic","fontSize","SimpleGrid","columns","base","md","lg","map","meeting","cursor","transform","boxShadow","transition","concat","id","noOfLines","title","Badge","colorScheme","description","date","FiCalendar","location","FiMapPin","attendees","summary","fontWeight","mb","pt","createdAt","audioUrl"],"sourceRoot":""}