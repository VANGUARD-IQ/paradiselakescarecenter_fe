{"version":3,"file":"static/js/8228.4a79b438.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/ViewOff.mjs","../node_modules/@chakra-ui/react/dist/esm/avatar/avatar-group.mjs","pages/passwords/PasswordsList.tsx"],"sourcesContent":["import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" })\n  ] })\n});\n\nexport { ViewOffIcon };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { getValidChildren, compact, cx } from '@chakra-ui/utils';\nimport { cloneElement } from 'react';\nimport { baseStyle } from './avatar.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst AvatarGroup = forwardRef(\n  function AvatarGroup2(props, ref) {\n    const styles = useMultiStyleConfig(\"Avatar\", props);\n    const {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      borderRadius = \"full\",\n      ...rest\n    } = omitThemingProps(props);\n    const validChildren = getValidChildren(children);\n    const childrenWithinMax = max != null ? validChildren.slice(0, max) : validChildren;\n    const excess = max != null ? validChildren.length - max : 0;\n    const reversedChildren = childrenWithinMax.reverse();\n    const clones = reversedChildren.map((child, index) => {\n      const isFirstAvatar = index === 0;\n      const childProps = {\n        marginEnd: isFirstAvatar ? 0 : spacing,\n        size: props.size,\n        borderColor: child.props.borderColor ?? borderColor,\n        showBorder: true\n      };\n      return cloneElement(child, compact(childProps));\n    });\n    const groupStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flexDirection: \"row-reverse\",\n      ...styles.group\n    };\n    const excessStyles = {\n      borderRadius,\n      marginStart: spacing,\n      ...baseStyle,\n      ...styles.excessLabel\n    };\n    return /* @__PURE__ */ jsxs(\n      chakra.div,\n      {\n        ref,\n        role: \"group\",\n        __css: groupStyles,\n        ...rest,\n        className: cx(\"chakra-avatar__group\", props.className),\n        children: [\n          excess > 0 && /* @__PURE__ */ jsx(chakra.span, { className: \"chakra-avatar__excess\", __css: excessStyles, children: `+${excess}` }),\n          clones\n        ]\n      }\n    );\n  }\n);\nAvatarGroup.displayName = \"AvatarGroup\";\n\nexport { AvatarGroup };\n","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Text,\n    Card,\n    CardBody,\n    Spinner,\n    Alert,\n    AlertIcon,\n    Button,\n    Input,\n    InputGroup,\n    InputLeftElement,\n    HStack,\n    VStack,\n    Badge,\n    IconButton,\n    useToast,\n    useDisclosure,\n    useColorMode,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalCloseButton,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    MenuDivider,\n    Select,\n    Tooltip,\n    Avatar,\n    AvatarGroup,\n    Divider,\n    Stat,\n    StatLabel,\n    StatNumber,\n    StatHelpText,\n    SimpleGrid,\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogContent,\n    AlertDialogOverlay,\n    Icon,\n} from \"@chakra-ui/react\";\nimport { \n    SearchIcon, \n    ViewIcon, \n    ViewOffIcon, \n    CopyIcon, \n    ExternalLinkIcon, \n    LockIcon,\n    ChevronDownIcon,\n    EditIcon,\n    DeleteIcon,\n    TimeIcon,\n    WarningIcon,\n    AddIcon,\n    RepeatIcon,\n    InfoOutlineIcon\n} from \"@chakra-ui/icons\";\nimport { FaShare } from \"react-icons/fa\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport passwordsModuleConfig from \"./moduleConfig\";\nimport { format } from \"date-fns\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { Password } from \"../../generated/graphql\";\n\nconst GET_ALL_PASSWORDS = gql`\n    query GetAllPasswords {\n        passwords {\n            id\n            serviceName\n            loginUrl\n            dashboardUrl\n            username\n            email\n            password\n            twoFactorSecret\n            twoFactorBackupCodes\n            notes\n            isActive\n            expiresAt\n            createdAt\n            updatedAt\n            createdBy {\n                id\n                fName\n                lName\n                email\n            }\n            company {\n                id\n                name\n            }\n            sharedWithEmployees\n            sharedWithExternal\n        }\n    }\n`;\n\nconst GET_PASSWORD_ACCESS_LOGS = gql`\n    query GetPasswordAccessLogs($passwordId: ID!) {\n        passwordAccessLogs(passwordId: $passwordId) {\n            id\n            passwordId\n            accessedBy {\n                id\n                fName\n                lName\n                email\n            }\n            accessedAt\n            ipAddress\n            userAgent\n        }\n    }\n`;\n\nconst DEACTIVATE_PASSWORD = gql`\n    mutation DeactivatePassword($id: ID!) {\n        deactivatePassword(id: $id)\n    }\n`;\n\nconst SHARE_PASSWORD = gql`\n    mutation SharePassword($id: ID!, $clientIds: [ID!]!) {\n        sharePassword(id: $id, clientIds: $clientIds) {\n            id\n            sharedWithEmployees\n            sharedWithExternal\n        }\n    }\n`;\n\nconst GENERATE_PASSWORD_LINK = gql`\n    mutation GeneratePasswordLink($passwordId: ID!, $expiresInHours: Float!) {\n        generatePasswordLink(passwordId: $passwordId, expiresInHours: $expiresInHours)\n    }\n`;\n\nconst UPDATE_PASSWORD = gql`\n    mutation UpdatePassword($id: ID!, $input: PasswordUpdateInput!) {\n        updatePassword(id: $id, input: $input) {\n            id\n            company {\n                id\n                name\n            }\n        }\n    }\n`;\n\nconst GET_CLIENTS = gql`\n    query GetClients {\n        clients {\n            id\n            fName\n            lName\n            email\n            phoneNumber\n        }\n    }\n`;\n\nconst GET_COMPANIES = gql`\n    query GetCompanies {\n        companies {\n            id\n            name\n            tradingName\n            abn\n        }\n    }\n`;\n\n\ninterface AccessLog {\n    id: string;\n    passwordId: string;\n    accessedBy: {\n        id: string;\n        fName?: string;\n        lName?: string;\n        email: string;\n    };\n    accessedAt: string;\n    ipAddress?: string;\n    userAgent?: string;\n}\n\nconst PasswordsList: React.FC = () => {\n    usePageTitle(\"Passwords\");\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    const { isOpen: isDetailsOpen, onOpen: onDetailsOpen, onClose: onDetailsClose } = useDisclosure();\n    const { isOpen: isShareOpen, onOpen: onShareOpen, onClose: onShareClose } = useDisclosure();\n    const { isOpen: isLogsOpen, onOpen: onLogsOpen, onClose: onLogsClose } = useDisclosure();\n    const { isOpen: isDeleteOpen, onOpen: onDeleteOpen, onClose: onDeleteClose } = useDisclosure();\n    const cancelRef = React.useRef<any>();\n    \n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [filterStatus, setFilterStatus] = useState<\"all\" | \"active\" | \"expired\">(\"all\");\n    const [selectedPassword, setSelectedPassword] = useState<Password | null>(null);\n    const [showPasswords, setShowPasswords] = useState<{ [key: string]: boolean }>({});\n    const [selectedClients, setSelectedClients] = useState<string[]>([]);\n    const [linkExpiryHours, setLinkExpiryHours] = useState(24);\n    const [editingCompany, setEditingCompany] = useState<{ [key: string]: boolean }>({});\n    const [tempCompanyId, setTempCompanyId] = useState<{ [key: string]: string }>({});\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n    const primaryHover = getColor(\"primaryHover\", colorMode);\n    const successGreen = getColor(\"successGreen\", colorMode);\n    const errorRed = getColor(\"status.error\", colorMode);\n    const warningColor = getColor(\"status.warning\", colorMode);\n    const infoBlue = getColor(\"status.info\", colorMode);\n\n    // Queries and Mutations\n    const { data, loading, error, refetch } = useQuery(GET_ALL_PASSWORDS);\n    const { data: clientsData } = useQuery(GET_CLIENTS);\n    const { data: companiesData } = useQuery(GET_COMPANIES);\n    const { data: logsData, loading: logsLoading, refetch: refetchLogs } = useQuery(GET_PASSWORD_ACCESS_LOGS, {\n        variables: { passwordId: selectedPassword?.id || \"\" },\n        skip: !selectedPassword?.id\n    });\n    \n    const [deactivatePassword] = useMutation(DEACTIVATE_PASSWORD, {\n        onCompleted: () => {\n            toast({\n                title: \"Password deactivated\",\n                status: \"success\",\n                duration: 3000,\n            });\n            refetch();\n            onDeleteClose();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error deactivating password\",\n                description: error.message,\n                status: \"error\",\n                duration: 3000,\n            });\n        }\n    });\n\n    const [sharePassword] = useMutation(SHARE_PASSWORD, {\n        onCompleted: () => {\n            toast({\n                title: \"Password shared successfully\",\n                status: \"success\",\n                duration: 3000,\n            });\n            refetch();\n            onShareClose();\n            setSelectedClients([]);\n        }\n    });\n\n    const [updatePassword] = useMutation(UPDATE_PASSWORD, {\n        onCompleted: () => {\n            toast({\n                title: \"Password updated\",\n                status: \"success\",\n                duration: 3000,\n            });\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error updating password\",\n                description: error.message,\n                status: \"error\",\n                duration: 3000,\n            });\n        }\n    });\n\n    const [generatePasswordLink] = useMutation(GENERATE_PASSWORD_LINK, {\n        onCompleted: (data) => {\n            navigator.clipboard.writeText(data.generatePasswordLink);\n            toast({\n                title: \"Secure link generated and copied\",\n                description: `Link expires in ${linkExpiryHours} hours`,\n                status: \"success\",\n                duration: 5000,\n            });\n        }\n    });\n\n    // Filter passwords\n    const filteredPasswords = data?.passwords?.filter((password: Password) => {\n        const matchesSearch = password.serviceName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            password.company?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            `${password.createdBy?.fName || ''} ${password.createdBy?.lName || ''}`.trim().toLowerCase().includes(searchTerm.toLowerCase());\n        \n        const isExpired = password.expiresAt ? new Date(password.expiresAt) < new Date() : false;\n        const matchesStatus = \n            filterStatus === \"all\" ||\n            (filterStatus === \"active\" && password.isActive && !isExpired) ||\n            (filterStatus === \"expired\" && (isExpired || !password.isActive));\n        \n        return matchesSearch && matchesStatus;\n    });\n\n    // Stats\n    const totalPasswords = data?.passwords?.length || 0;\n    const activePasswords = data?.passwords?.filter((p: Password) => \n        p.isActive && (!p.expiresAt || new Date(p.expiresAt) > new Date())\n    ).length || 0;\n    const expiredPasswords = data?.passwords?.filter((p: Password) => \n        p.expiresAt && new Date(p.expiresAt) < new Date()\n    ).length || 0;\n    const sharedPasswords = data?.passwords?.filter((p: Password) =>\n        (p.sharedWithEmployees && p.sharedWithEmployees.length > 0) ||\n        (p.sharedWithExternal && p.sharedWithExternal.length > 0)\n    ).length || 0;\n\n    // Helper functions\n    const togglePasswordVisibility = (passwordId: string) => {\n        setShowPasswords(prev => ({\n            ...prev,\n            [passwordId]: !prev[passwordId]\n        }));\n    };\n\n    const copyToClipboard = (text: string, label: string) => {\n        navigator.clipboard.writeText(text);\n        toast({\n            title: `${label} copied`,\n            status: \"success\",\n            duration: 2000,\n        });\n    };\n\n    const openPasswordDetails = (password: Password) => {\n        setSelectedPassword(password);\n        onDetailsOpen();\n    };\n\n    const openShareModal = (password: Password) => {\n        setSelectedPassword(password);\n        // Combine both employee and external shares\n        const allShared = [\n            ...(password.sharedWithEmployees || []),\n            ...(password.sharedWithExternal || [])\n        ];\n        setSelectedClients(allShared);\n        onShareOpen();\n    };\n\n    const openAccessLogs = (password: Password) => {\n        setSelectedPassword(password);\n        refetchLogs();\n        onLogsOpen();\n    };\n\n    const confirmDelete = (password: Password) => {\n        setSelectedPassword(password);\n        onDeleteOpen();\n    };\n\n    const handleDeactivate = async () => {\n        if (selectedPassword) {\n            await deactivatePassword({ variables: { id: selectedPassword.id } });\n        }\n    };\n\n    const handleShare = async () => {\n        if (selectedPassword && selectedClients.length > 0) {\n            await sharePassword({ \n                variables: { \n                    id: selectedPassword.id, \n                    clientIds: selectedClients \n                } \n            });\n        }\n    };\n\n    const generateLink = async (password: Password) => {\n        await generatePasswordLink({ \n            variables: { \n                passwordId: password.id, \n                expiresInHours: linkExpiryHours \n            } \n        });\n    };\n\n    const isExpired = (expiresAt?: string) => {\n        if (!expiresAt) return false;\n        return new Date(expiresAt) < new Date();\n    };\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n\n            <Container maxW={{ base: \"container.sm\", lg: \"container.xl\" }} px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                    {/* Header */}\n                    <VStack spacing={4} align=\"stretch\">\n                        <VStack align=\"start\" spacing={2}>\n                            <Heading \n                                color={textPrimary} \n                                fontFamily={brandConfig.fonts.heading}\n                                size={{ base: \"md\", md: \"lg\" }}\n                            >\n                                Password Management (Admin)\n                            </Heading>\n                        </VStack>\n                        <Box display=\"flex\" justifyContent={{ base: \"stretch\", md: \"flex-end\" }}>\n                            <Button\n                                bg={primaryColor}\n                                color=\"white\"\n                                _hover={{ bg: primaryHover }}\n                                leftIcon={<AddIcon />}\n                                onClick={() => navigate(\"/passwords/new\")}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                                minW={{ md: \"180px\" }}\n                            >\n                                Issue New Password\n                            </Button>\n                        </Box>\n                    </VStack>\n\n                    {/* Stats Cards */}\n                    <SimpleGrid columns={{ base: 2, md: 4 }} spacing={{ base: 4, md: 6 }}>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} border=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Total Passwords</StatLabel>\n                                    <StatNumber color={textPrimary} fontSize={{ base: \"lg\", md: \"2xl\" }}>{totalPasswords}</StatNumber>\n                                    <StatHelpText color={textMuted}>All issued passwords</StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} border=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Active</StatLabel>\n                                    <StatNumber color={successGreen} fontSize={{ base: \"lg\", md: \"2xl\" }}>{activePasswords}</StatNumber>\n                                    <StatHelpText color={textMuted}>Currently valid</StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} border=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Expired</StatLabel>\n                                    <StatNumber color={errorRed} fontSize={{ base: \"lg\", md: \"2xl\" }}>{expiredPasswords}</StatNumber>\n                                    <StatHelpText color={textMuted}>Need renewal</StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                        <Card bg={cardGradientBg} borderColor={cardBorder} border=\"1px\">\n                            <CardBody>\n                                <Stat>\n                                    <StatLabel color={textMuted}>Shared</StatLabel>\n                                    <StatNumber color={infoBlue} fontSize={{ base: \"lg\", md: \"2xl\" }}>{sharedPasswords}</StatNumber>\n                                    <StatHelpText color={textMuted}>Team access</StatHelpText>\n                                </Stat>\n                            </CardBody>\n                        </Card>\n                    </SimpleGrid>\n\n                    {/* Filters */}\n                    <VStack spacing={4} align=\"stretch\">\n                        <InputGroup maxW={{ base: \"100%\", md: \"400px\" }}>\n                            <InputLeftElement pointerEvents=\"none\">\n                                <SearchIcon color={textMuted} />\n                            </InputLeftElement>\n                            <Input\n                                placeholder=\"Search passwords...\"\n                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                _placeholder={{ color: textMuted }}\n                                value={searchTerm}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                            />\n                        </InputGroup>\n                        <HStack spacing={4} direction={{ base: \"column\", md: \"row\" }} width={{ base: \"100%\", md: \"auto\" }}>\n                            <Select\n                                maxW={{ base: \"100%\", md: \"200px\" }}\n                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                value={filterStatus}\n                                onChange={(e) => setFilterStatus(e.target.value as any)}\n                            >\n                                <option value=\"all\">All Status</option>\n                                <option value=\"active\">Active Only</option>\n                                <option value=\"expired\">Expired/Inactive</option>\n                            </Select>\n                            <Button\n                                variant=\"outline\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                leftIcon={<RepeatIcon />}\n                                onClick={() => refetch()}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Refresh\n                            </Button>\n                        </HStack>\n                    </VStack>\n\n                    {loading && (\n                        <Box textAlign=\"center\" py={8}>\n                            <Spinner size=\"xl\" color={primaryColor} />\n                        </Box>\n                    )}\n\n                    {error && (\n                        <Alert status=\"error\" borderRadius=\"md\">\n                            <AlertIcon />\n                            Error loading passwords: {error.message}\n                        </Alert>\n                    )}\n                    \n                    {/* Passwords Table */}\n                    {data && (\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"lg\"\n                            overflow=\"visible\"\n                        >\n                            <CardBody p={0} minH=\"400px\">\n                                <Box overflowX=\"auto\" overflowY=\"visible\" width=\"100%\">\n                                    <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\" }} minWidth=\"1000px\">\n                                        <Thead position=\"sticky\" top={0} bg={cardGradientBg}>\n                                            <Tr borderBottom=\"1px\" borderColor={cardBorder}>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"140px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Service</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"160px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", md: \"table-cell\" }}>Company</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"140px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Credentials</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"100px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Status</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"100px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", lg: \"table-cell\" }}>Sharing</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"140px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Actions</Th>\n                                            </Tr>\n                                        </Thead>\n                                        <Tbody>\n                                        {filteredPasswords?.map((password: Password) => (\n                                            <Tr\n                                                key={password.id}\n                                                borderBottom=\"1px\"\n                                                borderColor={cardBorder}\n                                            >\n                                                <Td borderColor={cardBorder} px={{ base: 2, md: 4 }}>\n                                                    <VStack align=\"start\" spacing={1}>\n                                                        <Text color={textPrimary} fontWeight=\"bold\" fontSize={{ base: \"xs\", md: \"sm\" }}>\n                                                            {password.serviceName}\n                                                        </Text>\n                                                        <Text color={textMuted} fontSize=\"xs\">\n                                                            Created {format(new Date(password.createdAt), \"MMM dd, yyyy\")}\n                                                        </Text>\n                                                        {/* Show company/shared info on mobile */}\n                                                        <Box display={{ base: \"block\", md: \"none\" }}>\n                                                            {password.company && (\n                                                                <Text color={textPrimary} fontSize=\"xs\">Company: {password.company.name}</Text>\n                                                            )}\n                                                            {((password.sharedWithEmployees?.length || 0) + (password.sharedWithExternal?.length || 0)) > 0 && (\n                                                                <Text color={textMuted} fontSize=\"xs\">\n                                                                    Shared with {(password.sharedWithEmployees?.length || 0) + (password.sharedWithExternal?.length || 0)} users\n                                                                </Text>\n                                                            )}\n                                                        </Box>\n                                                    </VStack>\n                                                </Td>\n                                                <Td borderColor={cardBorder} px={{ base: 2, md: 4 }} display={{ base: \"none\", md: \"table-cell\" }}>\n                                                    <VStack align=\"start\" spacing={1}>\n                                                        {editingCompany[password.id] ? (\n                                                            <HStack spacing={2}>\n                                                                <Select\n                                                                    size=\"sm\"\n                                                                    bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                                    borderColor={cardBorder}\n                                                                    color={textPrimary}\n                                                                    value={tempCompanyId[password.id] || password.company?.id || ''}\n                                                                    onChange={(e) => setTempCompanyId({ ...tempCompanyId, [password.id]: e.target.value })}\n                                                                    width=\"140px\"\n                                                                >\n                                                                    <option value=\"\">No company</option>\n                                                                    {companiesData?.companies?.map((company: any) => (\n                                                                        <option key={company.id} value={company.id}>\n                                                                            {company.tradingName || company.name}\n                                                                        </option>\n                                                                    ))}\n                                                                </Select>\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    colorScheme=\"green\"\n                                                                    aria-label=\"Save\"\n                                                                    icon={<Icon viewBox=\"0 0 24 24\">\n                                                                        <path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\" />\n                                                                    </Icon>}\n                                                                    onClick={async () => {\n                                                                        const newCompanyId = tempCompanyId[password.id] || '';\n                                                                        await updatePassword({\n                                                                            variables: {\n                                                                                id: password.id,\n                                                                                input: {\n                                                                                    company: newCompanyId || null\n                                                                                }\n                                                                            }\n                                                                        });\n                                                                        setEditingCompany({ ...editingCompany, [password.id]: false });\n                                                                        delete tempCompanyId[password.id];\n                                                                    }}\n                                                                />\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Cancel\"\n                                                                    icon={<Icon viewBox=\"0 0 24 24\">\n                                                                        <path fill=\"currentColor\" d=\"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\" />\n                                                                    </Icon>}\n                                                                    onClick={() => {\n                                                                        setEditingCompany({ ...editingCompany, [password.id]: false });\n                                                                        delete tempCompanyId[password.id];\n                                                                    }}\n                                                                />\n                                                            </HStack>\n                                                        ) : (\n                                                            <HStack spacing={2}>\n                                                                <Text\n                                                                    color={password.company ? textPrimary : textMuted}\n                                                                    fontSize=\"sm\"\n                                                                    cursor=\"pointer\"\n                                                                    onClick={() => {\n                                                                        setEditingCompany({ ...editingCompany, [password.id]: true });\n                                                                        setTempCompanyId({ ...tempCompanyId, [password.id]: password.company?.id || '' });\n                                                                    }}\n                                                                    _hover={{ textDecoration: 'underline' }}\n                                                                >\n                                                                    {password.company?.name || \"No company\"}\n                                                                </Text>\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Edit company\"\n                                                                    icon={<EditIcon />}\n                                                                    onClick={() => {\n                                                                        setEditingCompany({ ...editingCompany, [password.id]: true });\n                                                                        setTempCompanyId({ ...tempCompanyId, [password.id]: password.company?.id || '' });\n                                                                    }}\n                                                                />\n                                                            </HStack>\n                                                        )}\n                                                        {((password.sharedWithEmployees?.length || 0) + (password.sharedWithExternal?.length || 0)) > 0 && (\n                                                            <Badge colorScheme=\"purple\" size=\"sm\">\n                                                                {(password.sharedWithEmployees?.length || 0) + (password.sharedWithExternal?.length || 0)} users\n                                                            </Badge>\n                                                        )}\n                                                    </VStack>\n                                                </Td>\n                                                <Td borderColor={cardBorder} px={{ base: 2, md: 4 }}>\n                                                    <VStack align=\"start\" spacing={1}>\n                                                        {password.email && (\n                                                            <HStack>\n                                                                <Text color={textSecondary} fontSize={{ base: \"xs\", md: \"sm\" }} noOfLines={1}>\n                                                                    {password.email}\n                                                                </Text>\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Copy\"\n                                                                    icon={<CopyIcon />}\n                                                                    onClick={() => copyToClipboard(password.email!, \"Email\")}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                            </HStack>\n                                                        )}\n                                                        <HStack>\n                                                            <Text color={textPrimary} fontFamily=\"mono\" fontSize={{ base: \"xs\", md: \"sm\" }}>\n                                                                {showPasswords[password.id] \n                                                                    ? password.password.substring(0, 20) + \"...\"\n                                                                    : \"••••••••\"}\n                                                            </Text>\n                                                            <IconButton\n                                                                size=\"xs\"\n                                                                variant=\"ghost\"\n                                                                aria-label=\"Toggle\"\n                                                                icon={showPasswords[password.id] ? <ViewOffIcon /> : <ViewIcon />}\n                                                                onClick={() => togglePasswordVisibility(password.id)}\n                                                                minW=\"32px\"\n                                                                minH=\"32px\"\n                                                            />\n                                                        </HStack>\n                                                    </VStack>\n                                                </Td>\n                                                <Td borderColor={cardBorder} px={{ base: 2, md: 4 }}>\n                                                    <VStack align=\"start\" spacing={1}>\n                                                        {!password.isActive ? (\n                                                            <Badge colorScheme=\"red\" fontSize={{ base: \"xs\", md: \"sm\" }}>Inactive</Badge>\n                                                        ) : password.expiresAt && isExpired(password.expiresAt) ? (\n                                                            <Badge colorScheme=\"orange\" fontSize={{ base: \"xs\", md: \"sm\" }}>Expired</Badge>\n                                                        ) : (\n                                                            <Badge colorScheme=\"green\" fontSize={{ base: \"xs\", md: \"sm\" }}>Active</Badge>\n                                                        )}\n                                                        {password.expiresAt && !isExpired(password.expiresAt) && (\n                                                            <Text color={textMuted} fontSize=\"xs\">\n                                                                Expires {format(new Date(password.expiresAt), \"MMM dd\")}\n                                                            </Text>\n                                                        )}\n                                                        {password.twoFactorSecret && (\n                                                            <Badge colorScheme=\"blue\" size=\"sm\" fontSize=\"xs\">2FA</Badge>\n                                                        )}\n                                                    </VStack>\n                                                </Td>\n                                                <Td borderColor={cardBorder} px={{ base: 2, md: 4 }} display={{ base: \"none\", lg: \"table-cell\" }}>\n                                                    {(() => {\n                                                        const allShared = [\n                                                            ...(password.sharedWithEmployees || []),\n                                                            ...(password.sharedWithExternal || [])\n                                                        ];\n                                                        return allShared.length > 0 ? (\n                                                            <AvatarGroup size=\"xs\" max={3}>\n                                                                {allShared.map((clientId: string) => {\n                                                                    const client = clientsData?.clients?.find((c: any) => c.id === clientId);\n                                                                    return (\n                                                                        <Tooltip key={clientId} label={client?.name || \"Unknown\"}>\n                                                                            <Avatar name={client?.name} size=\"xs\" />\n                                                                        </Tooltip>\n                                                                    );\n                                                                })}\n                                                            </AvatarGroup>\n                                                        ) : (\n                                                            <Text color={textMuted} fontSize=\"xs\">Not shared</Text>\n                                                        );\n                                                    })()}\n                                                </Td>\n                                                <Td borderColor={cardBorder} px={{ base: 1, md: 4 }}>\n                                                    <VStack spacing={1}>\n                                                        <HStack spacing={1}>\n                                                            <Tooltip label=\"View Details\">\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Details\"\n                                                                    icon={<ViewIcon />}\n                                                                    onClick={() => openPasswordDetails(password)}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                            </Tooltip>\n                                                            <Tooltip label=\"Share\">\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Share\"\n                                                                    icon={<Icon as={FaShare} />}\n                                                                    onClick={() => openShareModal(password)}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                    display={{ base: \"none\", md: \"flex\" }}\n                                                                />\n                                                            </Tooltip>\n                                                            <Menu>\n                                                                <MenuButton\n                                                                    as={IconButton}\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    icon={<ChevronDownIcon />}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                                <MenuList bg={cardGradientBg} borderColor={cardBorder} zIndex={1000} position=\"relative\">\n                                                                    <MenuItem \n                                                                        icon={<Icon as={FaShare} />}\n                                                                        onClick={() => openShareModal(password)}\n                                                                        bg={cardGradientBg}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                                                                        color={textPrimary}\n                                                                        display={{ base: \"flex\", md: \"none\" }}\n                                                                    >\n                                                                        Share\n                                                                    </MenuItem>\n                                                                    <MenuItem\n                                                                        icon={<TimeIcon />}\n                                                                        onClick={() => openAccessLogs(password)}\n                                                                        bg={cardGradientBg}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                                                                        color={textPrimary}\n                                                                    >\n                                                                        <Box>\n                                                                            <Text>Access Logs</Text>\n                                                                            <Text fontSize=\"xs\" color={textMuted}>View who accessed this password</Text>\n                                                                        </Box>\n                                                                    </MenuItem>\n                                                                    <MenuItem\n                                                                        icon={<ExternalLinkIcon />}\n                                                                        onClick={() => generateLink(password)}\n                                                                        bg={cardGradientBg}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                                                                        color={textPrimary}\n                                                                    >\n                                                                        <Box>\n                                                                            <Text>Generate Access Link</Text>\n                                                                            <Text fontSize=\"xs\" color={textMuted}>Create a secure link for SMS sharing</Text>\n                                                                        </Box>\n                                                                    </MenuItem>\n                                                                    <MenuItem\n                                                                        icon={<EditIcon />}\n                                                                        onClick={() => navigate(`/password/${password.id}/edit`)}\n                                                                        bg={cardGradientBg}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                                                                        color={textPrimary}\n                                                                    >\n                                                                        <Box>\n                                                                            <Text>Edit</Text>\n                                                                            <Text fontSize=\"xs\" color={textMuted}>Update password details</Text>\n                                                                        </Box>\n                                                                    </MenuItem>\n                                                                    <MenuDivider borderColor={cardBorder} />\n                                                                    <MenuItem\n                                                                        icon={<DeleteIcon />}\n                                                                        onClick={() => confirmDelete(password)}\n                                                                        bg={cardGradientBg}\n                                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                                                                        color={errorRed}\n                                                                    >\n                                                                        <Box>\n                                                                            <Text color={errorRed}>Deactivate</Text>\n                                                                            <Text fontSize=\"xs\" color={textMuted}>Remove this password</Text>\n                                                                        </Box>\n                                                                    </MenuItem>\n                                                                </MenuList>\n                                                            </Menu>\n                                                        </HStack>\n                                                    </VStack>\n                                                </Td>\n                                            </Tr>\n                                        ))}\n                                        </Tbody>\n                                    </Table>\n                                </Box>\n                                {filteredPasswords?.length === 0 && (\n                                    <Box textAlign=\"center\" py={8}>\n                                        <Text color={textMuted}>No passwords found</Text>\n                                    </Box>\n                                )}\n                            </CardBody>\n                        </Card>\n                    )}\n                </VStack>\n            </Container>\n\n            {/* Password Details Modal */}\n            <Modal isOpen={isDetailsOpen} onClose={onDetailsClose} size={{ base: \"full\", md: \"xl\" }}>\n                <ModalOverlay bg=\"rgba(0, 0, 0, 0.8)\" backdropFilter=\"blur(4px)\" />\n                <ModalContent bg={cardGradientBg} borderColor={cardBorder} border=\"1px solid\">\n                    <ModalHeader color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                        {selectedPassword?.serviceName}\n                    </ModalHeader>\n                    <ModalCloseButton color={textPrimary} />\n                    <ModalBody>\n                        {selectedPassword && (\n                            <VStack spacing={4} align=\"stretch\">\n                                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\">Company</Text>\n                                        <Text color={textPrimary}>{selectedPassword.company?.name || \"No company\"}</Text>\n                                    </Box>\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\">Created By</Text>\n                                        <Text color={textPrimary}>{`${selectedPassword.createdBy?.fName || ''} ${selectedPassword.createdBy?.lName || ''}`.trim() || \"System\"}</Text>\n                                    </Box>\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\">Created</Text>\n                                        <Text color={textPrimary}>{format(new Date(selectedPassword.createdAt), \"MMM dd, yyyy HH:mm\")}</Text>\n                                    </Box>\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\">Last Updated</Text>\n                                        <Text color={textPrimary}>{format(new Date(selectedPassword.updatedAt), \"MMM dd, yyyy HH:mm\")}</Text>\n                                    </Box>\n                                </SimpleGrid>\n\n                                <Divider borderColor={cardBorder} />\n\n                                <Box>\n                                    <Text color={textMuted} fontSize=\"sm\" mb={1}>Login URL</Text>\n                                    <HStack>\n                                        <Text color={textPrimary}>{selectedPassword.loginUrl}</Text>\n                                        <IconButton\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            aria-label=\"Open\"\n                                            icon={<ExternalLinkIcon />}\n                                            onClick={() => selectedPassword.loginUrl && window.open(selectedPassword.loginUrl, '_blank')}\n                                        />\n                                    </HStack>\n                                </Box>\n\n                                {selectedPassword.dashboardUrl && (\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\" mb={1}>Dashboard URL</Text>\n                                        <HStack>\n                                            <Text color={textPrimary}>{selectedPassword.dashboardUrl}</Text>\n                                            <IconButton\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                aria-label=\"Open\"\n                                                icon={<ExternalLinkIcon />}\n                                                onClick={() => selectedPassword.dashboardUrl && window.open(selectedPassword.dashboardUrl, '_blank')}\n                                            />\n                                        </HStack>\n                                    </Box>\n                                )}\n\n                                {selectedPassword.notes && (\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\" mb={1}>Notes</Text>\n                                        <Text color={textPrimary} whiteSpace=\"pre-wrap\">{selectedPassword.notes}</Text>\n                                    </Box>\n                                )}\n\n                                {(() => {\n                                    const allShared = [\n                                        ...(selectedPassword.sharedWithEmployees || []),\n                                        ...(selectedPassword.sharedWithExternal || [])\n                                    ];\n                                    return allShared.length > 0 && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>Shared With</Text>\n                                            <HStack wrap=\"wrap\" spacing={2}>\n                                                {allShared.map((clientId: string) => {\n                                                    const client = clientsData?.clients?.find((c: any) => c.id === clientId);\n                                                    return (\n                                                        <Badge key={clientId} colorScheme=\"purple\" px={2} py={1}>\n                                                        {client?.name || \"Unknown User\"}\n                                                    </Badge>\n                                                );\n                                            })}\n                                        </HStack>\n                                    </Box>\n                                    );\n                                })()}\n                            </VStack>\n                        )}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" onClick={onDetailsClose} color={textPrimary}>\n                            Close\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Share Password Modal */}\n            <Modal isOpen={isShareOpen} onClose={onShareClose} size={{ base: \"full\", md: \"md\" }}>\n                <ModalOverlay bg=\"rgba(0, 0, 0, 0.8)\" backdropFilter=\"blur(4px)\" />\n                <ModalContent bg={cardGradientBg} borderColor={cardBorder} border=\"1px solid\">\n                    <ModalHeader color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                        Share Password: {selectedPassword?.serviceName}\n                    </ModalHeader>\n                    <ModalCloseButton color={textPrimary} />\n                    <ModalBody>\n                        <VStack spacing={4} align=\"stretch\">\n                            <Text color={textSecondary}>\n                                Select users who should have access to this password:\n                            </Text>\n                            <Select\n                                placeholder=\"Add user...\"\n                                bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                onChange={(e) => {\n                                    if (e.target.value && !selectedClients.includes(e.target.value)) {\n                                        setSelectedClients([...selectedClients, e.target.value]);\n                                    }\n                                }}\n                            >\n                                {clientsData?.clients\n                                    ?.filter((client: any) => {\n                                        const allShared = [\n                                            ...(selectedPassword?.sharedWithEmployees || []),\n                                            ...(selectedPassword?.sharedWithExternal || [])\n                                        ];\n                                        return client.id !== selectedPassword?.createdBy?.id &&\n                                            !allShared.includes(client.id) &&\n                                            !selectedClients.includes(client.id);\n                                    })\n                                    .map((client: any) => (\n                                        <option key={client.id} value={client.id}>\n                                            {client.fName} {client.lName} ({client.email})\n                                        </option>\n                                    ))}\n                            </Select>\n                            <VStack align=\"stretch\" spacing={2}>\n                                {selectedClients.map((clientId) => {\n                                    const client = clientsData?.clients?.find((c: any) => c.id === clientId);\n                                    const clientName = client ? `${client.fName} ${client.lName}` : 'Unknown User';\n                                    return (\n                                        <HStack key={clientId} justify=\"space-between\" p={2} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\">\n                                            <Text color={textPrimary}>{clientName}</Text>\n                                            <IconButton\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                aria-label=\"Remove from sharing\"\n                                                icon={<DeleteIcon />}\n                                                colorScheme=\"red\"\n                                                onClick={() => setSelectedClients(selectedClients.filter(id => id !== clientId))}\n                                            />\n                                        </HStack>\n                                    );\n                                })}\n                            </VStack>\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" mr={3} onClick={onShareClose} color={textPrimary}>\n                            Cancel\n                        </Button>\n                        <Button \n                            bg={primaryColor} \n                            color=\"white\" \n                            onClick={handleShare}\n                            isDisabled={selectedClients.length === 0}\n                            _hover={{ bg: primaryHover }}\n                        >\n                            Share Password\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Access Logs Modal */}\n            <Modal isOpen={isLogsOpen} onClose={onLogsClose} size={{ base: \"full\", md: \"xl\" }}>\n                <ModalOverlay bg=\"rgba(0, 0, 0, 0.8)\" backdropFilter=\"blur(4px)\" />\n                <ModalContent bg={cardGradientBg} borderColor={cardBorder} border=\"1px solid\">\n                    <ModalHeader color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                        Access Logs: {selectedPassword?.serviceName}\n                    </ModalHeader>\n                    <ModalCloseButton color={textPrimary} />\n                    <ModalBody>\n                        {logsLoading ? (\n                            <Spinner />\n                        ) : logsData?.passwordAccessLogs?.length > 0 ? (\n                            <Table variant=\"simple\" size=\"sm\">\n                                <Thead>\n                                    <Tr>\n                                        <Th color={textMuted}>User</Th>\n                                        <Th color={textMuted}>Accessed At</Th>\n                                        <Th color={textMuted}>IP Address</Th>\n                                    </Tr>\n                                </Thead>\n                                <Tbody>\n                                    {logsData.passwordAccessLogs.map((log: AccessLog) => (\n                                        <Tr key={log.id}>\n                                            <Td color={textPrimary}>\n                                                {log.accessedBy.fName} {log.accessedBy.lName}\n                                                <Text color={textMuted} fontSize=\"xs\">\n                                                    {log.accessedBy.email}\n                                                </Text>\n                                            </Td>\n                                            <Td color={textPrimary}>\n                                                {format(new Date(log.accessedAt), \"MMM dd, yyyy HH:mm\")}\n                                            </Td>\n                                            <Td color={textPrimary}>\n                                                {log.ipAddress || \"Unknown\"}\n                                            </Td>\n                                        </Tr>\n                                    ))}\n                                </Tbody>\n                            </Table>\n                        ) : (\n                            <Text color={textMuted}>No access logs yet</Text>\n                        )}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" onClick={onLogsClose} color={textPrimary}>\n                            Close\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            {/* Delete Confirmation Dialog */}\n            <AlertDialog\n                isOpen={isDeleteOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={onDeleteClose}\n            >\n                <AlertDialogOverlay bg=\"rgba(0, 0, 0, 0.8)\" backdropFilter=\"blur(4px)\">\n                    <AlertDialogContent bg={cardGradientBg} borderColor={cardBorder} border=\"1px solid\">\n                        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n                            Deactivate Password\n                        </AlertDialogHeader>\n                        <AlertDialogBody color={textSecondary}>\n                            Are you sure you want to deactivate the password for \"{selectedPassword?.serviceName}\"? \n                            This will prevent the user from accessing it.\n                        </AlertDialogBody>\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={onDeleteClose} variant=\"ghost\" color={textPrimary}>\n                                Cancel\n                            </Button>\n                            <Button colorScheme=\"red\" onClick={handleDeactivate} ml={3}>\n                                Deactivate\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default PasswordsList;"],"names":["ViewOffIcon","createIcon","displayName","path","jsxs","fill","children","jsx","d","_excluded","AvatarGroup","forwardRef","props","ref","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","borderColor","max","spacing","borderRadius","rest","_objectWithoutProperties","validChildren","getValidChildren","childrenWithinMax","slice","excess","length","clones","reverse","map","child","index","_child$props$borderCo","childProps","marginEnd","size","showBorder","cloneElement","compact","groupStyles","_objectSpread","display","alignItems","justifyContent","flexDirection","group","excessStyles","marginStart","baseStyle","excessLabel","chakra","div","role","__css","className","cx","span","concat","GET_ALL_PASSWORDS","gql","_templateObject","_taggedTemplateLiteral","GET_PASSWORD_ACCESS_LOGS","_templateObject2","DEACTIVATE_PASSWORD","_templateObject3","SHARE_PASSWORD","_templateObject4","GENERATE_PASSWORD_LINK","_templateObject5","UPDATE_PASSWORD","_templateObject6","GET_CLIENTS","_templateObject7","GET_COMPANIES","_templateObject8","PasswordsList","_data$passwords","_data$passwords2","_data$passwords3","_data$passwords4","_data$passwords5","_selectedPassword$com","_selectedPassword$cre","_selectedPassword$cre2","_clientsData$clients3","_logsData$passwordAcc","usePageTitle","navigate","useNavigate","toast","useToast","colorMode","useColorMode","isOpen","isDetailsOpen","onOpen","onDetailsOpen","onClose","onDetailsClose","useDisclosure","isShareOpen","onShareOpen","onShareClose","isLogsOpen","onLogsOpen","onLogsClose","isDeleteOpen","onDeleteOpen","onDeleteClose","cancelRef","React","searchTerm","setSearchTerm","useState","filterStatus","setFilterStatus","selectedPassword","setSelectedPassword","showPasswords","setShowPasswords","selectedClients","setSelectedClients","linkExpiryHours","setLinkExpiryHours","editingCompany","setEditingCompany","tempCompanyId","setTempCompanyId","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","successGreen","errorRed","infoBlue","data","loading","error","refetch","useQuery","clientsData","companiesData","logsData","logsLoading","refetchLogs","variables","passwordId","id","skip","deactivatePassword","useMutation","onCompleted","title","status","duration","onError","description","message","sharePassword","updatePassword","generatePasswordLink","navigator","clipboard","writeText","filteredPasswords","passwords","filter","password","_password$company","_password$company$nam","_password$createdBy","_password$createdBy2","matchesSearch","serviceName","toLowerCase","includes","company","name","createdBy","fName","lName","trim","isExpired","expiresAt","Date","matchesStatus","isActive","totalPasswords","activePasswords","p","expiredPasswords","sharedPasswords","sharedWithEmployees","sharedWithExternal","openShareModal","allShared","_jsxs","Box","bg","minH","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","passwordsModuleConfig","Container","maxW","base","lg","px","md","py","flex","VStack","align","Heading","color","fontFamily","brandConfig","fonts","heading","Button","_hover","leftIcon","AddIcon","onClick","width","minW","SimpleGrid","columns","Card","border","CardBody","Stat","StatLabel","StatNumber","fontSize","StatHelpText","InputGroup","InputLeftElement","pointerEvents","SearchIcon","Input","placeholder","_placeholder","value","onChange","e","target","HStack","direction","Select","variant","RepeatIcon","textAlign","Spinner","Alert","AlertIcon","backdropFilter","boxShadow","overflow","overflowX","overflowY","Table","minWidth","Thead","position","top","Tr","borderBottom","Th","Tbody","_password$sharedWithE","_password$sharedWithE2","_password$sharedWithE3","_password$sharedWithE4","_password$company2","_companiesData$compan","_password$company4","_password$sharedWithE5","_password$sharedWithE6","_password$sharedWithE7","_password$sharedWithE8","Td","Text","fontWeight","format","createdAt","companies","tradingName","IconButton","colorScheme","icon","Icon","viewBox","async","newCompanyId","input","cursor","_password$company3","textDecoration","EditIcon","_password$company5","Badge","email","noOfLines","CopyIcon","copyToClipboard","text","label","substring","ViewIcon","togglePasswordVisibility","prev","twoFactorSecret","clientId","_clientsData$clients","client","clients","find","c","Tooltip","Avatar","openPasswordDetails","as","FaShare","Menu","MenuButton","ChevronDownIcon","MenuList","zIndex","MenuItem","TimeIcon","openAccessLogs","ExternalLinkIcon","expiresInHours","generateLink","MenuDivider","DeleteIcon","confirmDelete","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","updatedAt","Divider","mb","loginUrl","window","open","dashboardUrl","notes","whiteSpace","wrap","_clientsData$clients2","ModalFooter","_selectedPassword$cre3","_clientsData$clients4","clientName","justify","mr","clientIds","isDisabled","passwordAccessLogs","log","accessedBy","accessedAt","ipAddress","AlertDialog","leastDestructiveRef","AlertDialogOverlay","AlertDialogContent","AlertDialogHeader","AlertDialogBody","AlertDialogFooter","ml","FooterWithFourColumns"],"sourceRoot":""}