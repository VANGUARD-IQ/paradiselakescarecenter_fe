{"version":3,"file":"static/js/6792.3775d2f4.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/ViewOff.mjs","pages/passwords/PublicPasswordAccess.tsx"],"sourcesContent":["import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" })\n  ] })\n});\n\nexport { ViewOffIcon };\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    Card,\n    CardBody,\n    VStack,\n    HStack,\n    Button,\n    Alert,\n    AlertIcon,\n    AlertTitle,\n    AlertDescription,\n    Badge,\n    IconButton,\n    useToast,\n    Divider,\n    Link,\n    Icon,\n    useColorMode\n} from \"@chakra-ui/react\";\nimport { ViewIcon, ViewOffIcon, CopyIcon, ExternalLinkIcon, LockIcon } from \"@chakra-ui/icons\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { UnifiedLoginModal } from \"../authentication\";\nimport { CaptureUserDetailsModal } from \"../authentication/components/CaptureUserDetailsModal\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { format } from \"date-fns\";\nimport { Password } from \"../../generated/graphql\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst PUBLIC_PASSWORD_ACCESS = gql`\n    query PublicPasswordAccess($input: PublicPasswordAccessInput!) {\n        publicPasswordAccess(input: $input) {\n            id\n            serviceName\n            loginUrl\n            dashboardUrl\n            username\n            email\n            password\n            twoFactorSecret\n            twoFactorBackupCodes\n            notes\n            expiresAt\n            issuedTo {\n                id\n                fName\n                lName\n            }\n        }\n    }\n`;\n\ninterface PublicPasswordAccessInput {\n    passwordId: string;\n    mobileNumber: string;\n    verificationCode: string;\n}\n\nconst PublicPasswordAccess: React.FC = () => {\n    usePageTitle(\"Password Access\");\n    const { id: passwordId } = useParams<{ id: string }>();\n    const toast = useToast();\n    const { user } = useAuth();\n    const { colorMode } = useColorMode();\n    const authLoading = false; // AuthContext doesn't have isLoading\n    \n    const [showLoginModal, setShowLoginModal] = useState(false);\n    const [showDetailsModal, setShowDetailsModal] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const [show2FA, setShow2FA] = useState(false);\n    const [verificationData, setVerificationData] = useState<PublicPasswordAccessInput | null>(null);\n    const [userId, setUserId] = useState<string>(\"\");\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n    const primaryHover = getColor(\"primaryHover\", colorMode);\n    const successGreen = getColor(\"successGreen\", colorMode);\n    const errorRed = getColor(\"status.error\", colorMode);\n    const infoBlue = getColor(\"status.info\", colorMode);\n\n    const [getPassword, { data, loading, error }] = useLazyQuery(PUBLIC_PASSWORD_ACCESS);\n\n    useEffect(() => {\n        // Check if user is authenticated\n        if (!authLoading && !user && !showLoginModal && !showDetailsModal) {\n            setShowLoginModal(true);\n        }\n    }, [authLoading, user, showLoginModal, showDetailsModal]);\n\n    const handleLoginSuccess = () => {\n        setShowLoginModal(false);\n        \n        // After successful login, check if user needs to provide details\n        if (user && (!user.firstName || !user.lastName)) {\n            setUserId(user.id || \"\");\n            setShowDetailsModal(true);\n        } else if (user && passwordId) {\n            // User is fully authenticated, fetch the password\n            // Note: We'll need to get the verification code from somewhere\n            // For now, just close the modal and let them access\n            if (passwordId) {\n                const input: PublicPasswordAccessInput = {\n                    passwordId,\n                    mobileNumber: user.mobileNumber || \"\",\n                    verificationCode: \"verified\" // This would come from SMS verification\n                };\n                setVerificationData(input);\n                getPassword({\n                    variables: { input }\n                });\n            }\n        }\n    };\n\n    const handleDetailsUpdateSuccess = () => {\n        setShowDetailsModal(false);\n        // Now fetch the password with the stored verification data\n        if (verificationData) {\n            getPassword({\n                variables: {\n                    input: verificationData\n                }\n            });\n        }\n    };\n\n    const fetchPassword = (mobileNumber: string, verificationCode: string) => {\n        if (!passwordId) return;\n        \n        const input: PublicPasswordAccessInput = {\n            passwordId,\n            mobileNumber,\n            verificationCode\n        };\n        \n        setVerificationData(input);\n        \n        getPassword({\n            variables: { input }\n        });\n    };\n\n    const copyToClipboard = (text: string, label: string) => {\n        navigator.clipboard.writeText(text);\n        toast({\n            title: `${label} copied to clipboard`,\n            status: \"success\",\n            duration: 2000,\n            isClosable: true,\n        });\n    };\n\n    const isExpired = (expiresAt?: string) => {\n        if (!expiresAt) return false;\n        return new Date(expiresAt) < new Date();\n    };\n\n    if (authLoading || loading) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <Text color={textPrimary}>Loading...</Text>\n            </Box>\n        );\n    }\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" py={8}>\n            <Container maxW=\"container.md\">\n                {/* Login Modal */}\n                <UnifiedLoginModal\n                    isOpen={showLoginModal}\n                    onClose={() => setShowLoginModal(false)}\n                    onLoginSuccess={handleLoginSuccess}\n                />\n\n                {/* Capture Details Modal */}\n                <CaptureUserDetailsModal\n                    isOpen={showDetailsModal}\n                    onClose={() => setShowDetailsModal(false)}\n                    userId={userId}\n                    onUpdateSuccess={handleDetailsUpdateSuccess}\n                />\n\n                {/* Error State */}\n                {error && (\n                    <Alert \n                        status=\"error\" \n                        borderRadius=\"lg\"\n                        bg={errorRed}\n                        color=\"white\"\n                    >\n                        <AlertIcon />\n                        <Box>\n                            <AlertTitle>Access Denied</AlertTitle>\n                            <AlertDescription>\n                                {error.message}\n                            </AlertDescription>\n                        </Box>\n                    </Alert>\n                )}\n\n                {/* Success State - Password Display */}\n                {data?.publicPasswordAccess && (\n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                    >\n                        <CardBody>\n                            <VStack spacing={6} align=\"stretch\">\n                                {/* Header */}\n                                <Box>\n                                    <HStack justify=\"space-between\" mb={2}>\n                                        <Heading \n                                            size=\"lg\" \n                                            color={textPrimary}\n                                            fontFamily={brandConfig.fonts.heading}\n                                        >\n                                            <Icon as={LockIcon} mr={2} />\n                                            {data.publicPasswordAccess.serviceName}\n                                        </Heading>\n                                        {data.publicPasswordAccess.expiresAt && (\n                                            <Badge \n                                                colorScheme={isExpired(data.publicPasswordAccess.expiresAt) ? \"red\" : \"green\"}\n                                                fontSize=\"sm\"\n                                                px={3}\n                                                py={1}\n                                            >\n                                                {isExpired(data.publicPasswordAccess.expiresAt) \n                                                    ? \"Expired\" \n                                                    : `Expires ${format(new Date(data.publicPasswordAccess.expiresAt), \"MMM dd, yyyy\")}`}\n                                            </Badge>\n                                        )}\n                                    </HStack>\n                                    <Text color={textMuted} fontSize=\"sm\">\n                                        Issued to: {data.publicPasswordAccess.issuedTo.name}\n                                    </Text>\n                                </Box>\n\n                                <Divider borderColor={cardBorder} />\n\n                                {/* Login URLs */}\n                                <VStack align=\"stretch\" spacing={3}>\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\" mb={2}>Login URL</Text>\n                                        <HStack>\n                                            <Link \n                                                href={data.publicPasswordAccess.loginUrl}\n                                                isExternal\n                                                color={infoBlue}\n                                                fontSize=\"sm\"\n                                            >\n                                                {data.publicPasswordAccess.loginUrl}\n                                            </Link>\n                                            <IconButton\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                aria-label=\"Open login page\"\n                                                icon={<ExternalLinkIcon />}\n                                                onClick={() => window.open(data.publicPasswordAccess.loginUrl, '_blank')}\n                                            />\n                                        </HStack>\n                                    </Box>\n\n                                    {data.publicPasswordAccess.dashboardUrl && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>Dashboard URL (after login)</Text>\n                                            <HStack>\n                                                <Link \n                                                    href={data.publicPasswordAccess.dashboardUrl}\n                                                    isExternal\n                                                    color={successGreen}\n                                                    fontSize=\"sm\"\n                                                >\n                                                    {data.publicPasswordAccess.dashboardUrl}\n                                                </Link>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Open dashboard\"\n                                                    icon={<ExternalLinkIcon />}\n                                                    onClick={() => window.open(data.publicPasswordAccess.dashboardUrl, '_blank')}\n                                                />\n                                            </HStack>\n                                        </Box>\n                                    )}\n                                </VStack>\n\n                                <Divider borderColor={cardBorder} />\n\n                                {/* Credentials */}\n                                <VStack align=\"stretch\" spacing={4}>\n                                    {data.publicPasswordAccess.email && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>Email</Text>\n                                            <HStack>\n                                                <Text color={textPrimary} fontFamily=\"mono\">\n                                                    {data.publicPasswordAccess.email}\n                                                </Text>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Copy email\"\n                                                    icon={<CopyIcon />}\n                                                    onClick={() => copyToClipboard(data.publicPasswordAccess.email!, \"Email\")}\n                                                />\n                                            </HStack>\n                                        </Box>\n                                    )}\n\n                                    {data.publicPasswordAccess.username && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>Username</Text>\n                                            <HStack>\n                                                <Text color={textPrimary} fontFamily=\"mono\">\n                                                    {data.publicPasswordAccess.username}\n                                                </Text>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Copy username\"\n                                                    icon={<CopyIcon />}\n                                                    onClick={() => copyToClipboard(data.publicPasswordAccess.username!, \"Username\")}\n                                                />\n                                            </HStack>\n                                        </Box>\n                                    )}\n\n                                    <Box>\n                                        <Text color={textMuted} fontSize=\"sm\" mb={2}>Password</Text>\n                                        <HStack>\n                                            <Text color={textPrimary} fontFamily=\"mono\" fontSize=\"lg\">\n                                                {showPassword \n                                                    ? data.publicPasswordAccess.password \n                                                    : \"••••••••••••\"}\n                                            </Text>\n                                            <IconButton\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                aria-label=\"Toggle password\"\n                                                icon={showPassword ? <ViewOffIcon /> : <ViewIcon />}\n                                                onClick={() => setShowPassword(!showPassword)}\n                                            />\n                                            <IconButton\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                aria-label=\"Copy password\"\n                                                icon={<CopyIcon />}\n                                                onClick={() => copyToClipboard(data.publicPasswordAccess.password, \"Password\")}\n                                            />\n                                        </HStack>\n                                    </Box>\n\n                                    {data.publicPasswordAccess.twoFactorSecret && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>2FA Secret Key</Text>\n                                            <HStack>\n                                                <Text color={textPrimary} fontFamily=\"mono\">\n                                                    {show2FA \n                                                        ? data.publicPasswordAccess.twoFactorSecret \n                                                        : \"••••••••••••••••\"}\n                                                </Text>\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Toggle 2FA\"\n                                                    icon={show2FA ? <ViewOffIcon /> : <ViewIcon />}\n                                                    onClick={() => setShow2FA(!show2FA)}\n                                                />\n                                                <IconButton\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    aria-label=\"Copy 2FA\"\n                                                    icon={<CopyIcon />}\n                                                    onClick={() => copyToClipboard(data.publicPasswordAccess.twoFactorSecret!, \"2FA Secret\")}\n                                                />\n                                            </HStack>\n                                            <Text color={textMuted} fontSize=\"xs\" mt={1}>\n                                                Add this to your authenticator app (Google Authenticator, Authy, etc.)\n                                            </Text>\n                                        </Box>\n                                    )}\n\n                                    {data.publicPasswordAccess.twoFactorBackupCodes && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>Backup Codes</Text>\n                                            <Card bg=\"rgba(0, 0, 0, 0.2)\" p={3}>\n                                                <Text color={textPrimary} fontFamily=\"mono\" fontSize=\"sm\" whiteSpace=\"pre\">\n                                                    {data.publicPasswordAccess.twoFactorBackupCodes}\n                                                </Text>\n                                            </Card>\n                                            <Text color={errorRed} fontSize=\"xs\" mt={1}>\n                                                ⚠️ Save these codes securely. Each can only be used once.\n                                            </Text>\n                                        </Box>\n                                    )}\n\n                                    {data.publicPasswordAccess.notes && (\n                                        <Box>\n                                            <Text color={textMuted} fontSize=\"sm\" mb={2}>Notes</Text>\n                                            <Card bg=\"rgba(0, 0, 0, 0.2)\" p={3}>\n                                                <Text color={textPrimary} whiteSpace=\"pre-wrap\">\n                                                    {data.publicPasswordAccess.notes}\n                                                </Text>\n                                            </Card>\n                                        </Box>\n                                    )}\n                                </VStack>\n\n                                <Divider borderColor={cardBorder} />\n\n                                {/* Action Buttons */}\n                                <HStack justify=\"center\" spacing={4}>\n                                    <Button\n                                        bg={primaryColor}\n                                        color=\"white\"\n                                        _hover={{ bg: primaryHover }}\n                                        leftIcon={<ExternalLinkIcon />}\n                                        onClick={() => window.open(data.publicPasswordAccess.loginUrl, '_blank')}\n                                    >\n                                        Go to Login Page\n                                    </Button>\n                                    <Button\n                                        variant=\"outline\"\n                                        borderColor={primaryColor}\n                                        color={primaryColor}\n                                        onClick={() => window.location.href = '/passwords'}\n                                    >\n                                        View All My Passwords\n                                    </Button>\n                                </HStack>\n\n                                {/* Security Notice */}\n                                <Alert status=\"warning\" borderRadius=\"md\" bg=\"rgba(251, 146, 60, 0.1)\" borderColor=\"orange.500\" border=\"1px\">\n                                    <AlertIcon color=\"orange.500\" />\n                                    <Text fontSize=\"sm\" color={textPrimary}>\n                                        This password information is sensitive. Do not share this page or leave it open on shared devices.\n                                    </Text>\n                                </Alert>\n                            </VStack>\n                        </CardBody>\n                    </Card>\n                )}\n\n                {/* Not authenticated state */}\n                {!user && !showLoginModal && !showDetailsModal && (\n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                    >\n                        <CardBody>\n                            <VStack spacing={4}>\n                                <Icon as={LockIcon} boxSize={12} color={primaryColor} />\n                                <Heading size=\"md\" color={textPrimary}>\n                                    Authentication Required\n                                </Heading>\n                                <Text color={textSecondary} textAlign=\"center\">\n                                    You need to verify your identity to access this password.\n                                </Text>\n                                <Button\n                                    bg={primaryColor}\n                                    color=\"white\"\n                                    _hover={{ bg: primaryHover }}\n                                    onClick={() => setShowLoginModal(true)}\n                                >\n                                    Verify with SMS\n                                </Button>\n                            </VStack>\n                        </CardBody>\n                    </Card>\n                )}\n            </Container>\n        </Box>\n    );\n};\n\nexport default PublicPasswordAccess;"],"names":["ViewOffIcon","createIcon","displayName","path","jsxs","fill","children","jsx","d","PUBLIC_PASSWORD_ACCESS","gql","_templateObject","_taggedTemplateLiteral","PublicPasswordAccess","usePageTitle","id","passwordId","useParams","toast","useToast","user","useAuth","colorMode","useColorMode","authLoading","showLoginModal","setShowLoginModal","useState","showDetailsModal","setShowDetailsModal","showPassword","setShowPassword","show2FA","setShow2FA","verificationData","setVerificationData","userId","setUserId","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","successGreen","errorRed","infoBlue","getPassword","data","loading","error","useLazyQuery","useEffect","copyToClipboard","text","label","navigator","clipboard","writeText","title","concat","status","duration","isClosable","isExpired","expiresAt","Date","_jsx","Box","bg","minH","display","alignItems","justifyContent","Text","color","py","_jsxs","Container","maxW","UnifiedLoginModal","isOpen","onClose","onLoginSuccess","handleLoginSuccess","firstName","lastName","input","mobileNumber","verificationCode","variables","CaptureUserDetailsModal","onUpdateSuccess","handleDetailsUpdateSuccess","Alert","borderRadius","AlertIcon","AlertTitle","AlertDescription","message","publicPasswordAccess","Card","backdropFilter","boxShadow","border","borderColor","CardBody","VStack","spacing","align","HStack","justify","mb","Heading","size","fontFamily","brandConfig","fonts","heading","Icon","as","LockIcon","mr","serviceName","Badge","colorScheme","fontSize","px","format","issuedTo","name","Divider","Link","href","loginUrl","isExternal","IconButton","variant","icon","ExternalLinkIcon","onClick","window","open","dashboardUrl","email","CopyIcon","username","password","ViewIcon","twoFactorSecret","mt","twoFactorBackupCodes","p","whiteSpace","notes","Button","_hover","leftIcon","location","boxSize","textAlign"],"sourceRoot":""}