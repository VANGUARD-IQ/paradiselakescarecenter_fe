{"version":3,"file":"static/js/455.4955b660.chunk.js","mappings":"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","sources":["pages/youtubetoipfs/config.ts","pages/youtubetoipfs/AddVideoByCID.tsx"],"sourcesContent":["// IPFS Configuration\nexport const IPFS_CONFIG = {\n  // Your private Pinata gateway\n  PRIVATE_GATEWAY_URL: 'https://scarlet-professional-perch-484.mypinata.cloud/ipfs',\n\n  // Public gateway fallback (if needed)\n  PUBLIC_GATEWAY_URL: 'https://gateway.pinata.cloud/ipfs',\n\n  // Helper function to construct IPFS URL\n  getIPFSUrl: (cid: string, usePrivate: boolean = true): string => {\n    const gateway = usePrivate ? IPFS_CONFIG.PRIVATE_GATEWAY_URL : IPFS_CONFIG.PUBLIC_GATEWAY_URL;\n    return `${gateway}/${cid}`;\n  }\n};\n\nexport default IPFS_CONFIG;","import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Input,\n  Textarea,\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Alert,\n  AlertIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  useToast,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  Wrap,\n  WrapItem,\n  Switch,\n  useColorModeValue,\n  Divider,\n  Link as ChakraLink,\n  InputGroup,\n  InputLeftElement,\n  Code,\n  List,\n  ListItem,\n  ListIcon\n} from '@chakra-ui/react';\nimport {\n  FiPlus,\n  FiSave,\n  FiX,\n  FiVideo,\n  FiExternalLink,\n  FiInfo,\n  FiCheck,\n  FiHash\n} from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport youtubeToIPFSModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { IPFS_CONFIG } from \"./config\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL mutation for adding video by CID\nconst ADD_VIDEO_BY_CID = gql`\n  mutation AddIPFSVideoByCID($input: IPFSVideoByCIDInput!) {\n    addIPFSVideoByCID(input: $input) {\n      id\n      title\n      description\n      ipfsHash\n      ipfsUrl\n      fileSize\n      tags\n      isPublic\n      isPrivateFile\n      createdAt\n    }\n  }\n`;\n\nconst AddVideoByCID: React.FC = () => {\n  usePageTitle(\"Add Video by CID\");\n  const navigate = useNavigate();\n  const toast = useToast();\n  const bg = useColorModeValue('gray.50', 'gray.900');\n  const cardBg = useColorModeValue('white', 'gray.800');\n  const borderColor = useColorModeValue('gray.200', 'gray.700');\n  const textPrimary = useColorModeValue('gray.900', 'white');\n  const textSecondary = useColorModeValue('gray.600', 'gray.400');\n\n  const [formData, setFormData] = useState({\n    cid: '',\n    title: '',\n    description: '',\n    fileName: '',\n    fileSize: '',\n    tags: [] as string[],\n    isPublic: true,\n    isPrivateFile: false\n  });\n  const [tagInput, setTagInput] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [addVideoByCID] = useMutation(ADD_VIDEO_BY_CID, {\n    onCompleted: (data) => {\n      toast({\n        title: 'Video registered successfully!',\n        description: 'Your IPFS video has been added/updated in your library',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n      // Navigate to video viewer\n      navigate(`/youtubetoipfs/video/${data.addIPFSVideoByCID.id}`);\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to add video',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      setIsSubmitting(false);\n    }\n  });\n\n  const handleSubmit = async () => {\n    // Validate required fields\n    if (!formData.cid.trim()) {\n      toast({\n        title: 'CID is required',\n        description: 'Please enter the IPFS CID for your video',\n        status: 'warning',\n        duration: 3000,\n      });\n      return;\n    }\n\n    if (!formData.title.trim()) {\n      toast({\n        title: 'Title is required',\n        description: 'Please enter a title for your video',\n        status: 'warning',\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Convert file size to bytes if provided\n      let fileSizeInBytes = null;\n      if (formData.fileSize) {\n        const sizeMatch = formData.fileSize.match(/^([\\d.]+)\\s*(B|KB|MB|GB)?$/i);\n        if (sizeMatch) {\n          const [, value, unit = 'B'] = sizeMatch;\n          const multipliers: Record<string, number> = {\n            'B': 1,\n            'KB': 1024,\n            'MB': 1024 * 1024,\n            'GB': 1024 * 1024 * 1024\n          };\n          fileSizeInBytes = Math.round(parseFloat(value) * multipliers[unit.toUpperCase()]);\n        }\n      }\n\n      await addVideoByCID({\n        variables: {\n          input: {\n            ipfsHash: formData.cid.trim(),\n            title: formData.title.trim(),\n            description: formData.description.trim() || undefined,\n            fileName: formData.fileName.trim() || undefined,\n            fileSize: fileSizeInBytes || undefined,\n            tags: formData.tags.length > 0 ? formData.tags : undefined,\n            isPublic: formData.isPublic,\n            isPrivateFile: formData.isPrivateFile\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error adding video:', error);\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleAddTag = () => {\n    const trimmedTag = tagInput.trim();\n    if (trimmedTag && !formData.tags.includes(trimmedTag)) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, trimmedTag]\n      }));\n      setTagInput('');\n    }\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const handleTagInputKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleAddTag();\n    }\n  };\n\n  return (\n    <Box bg={bg} minH=\"100vh\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={youtubeToIPFSModuleConfig} />\n\n      <Container maxW=\"4xl\" py={8}>\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <HStack justify=\"space-between\">\n            <VStack align=\"start\" spacing={1}>\n              <Heading size=\"lg\" color={textPrimary}>Add Video by CID</Heading>\n              <Text color={textSecondary}>\n                Register a video that's already uploaded to IPFS\n              </Text>\n            </VStack>\n            <Button\n              leftIcon={<FiVideo />}\n              onClick={() => navigate('/youtubetoipfs')}\n              variant=\"outline\"\n            >\n              Back to Gallery\n            </Button>\n          </HStack>\n\n          {/* Info Alert */}\n          <Alert status=\"info\" borderRadius=\"md\">\n            <AlertIcon />\n            <Box>\n              <Text fontWeight=\"bold\">How to use this page:</Text>\n              <List spacing={1} mt={2}>\n                <ListItem>\n                  <ListIcon as={FiCheck} color=\"blue.500\" />\n                  Enter the CID (Content Identifier) from your Pinata dashboard\n                </ListItem>\n                <ListItem>\n                  <ListIcon as={FiCheck} color=\"blue.500\" />\n                  The CID looks like: <Code>bafyb...f4uey</Code>\n                </ListItem>\n                <ListItem>\n                  <ListIcon as={FiCheck} color=\"blue.500\" />\n                  Add metadata like title, description, and file size\n                </ListItem>\n                <ListItem>\n                  <ListIcon as={FiCheck} color=\"blue.500\" />\n                  Enable \"Private Pinata File\" if the CID is from a private file\n                </ListItem>\n                <ListItem>\n                  <ListIcon as={FiCheck} color=\"blue.500\" />\n                  Your video will be accessible via the appropriate IPFS gateway\n                </ListItem>\n              </List>\n            </Box>\n          </Alert>\n\n          {/* Form Card */}\n          <Card bg={cardBg} borderColor={borderColor} variant=\"outline\">\n            <CardHeader>\n              <Heading size=\"md\">Video Information</Heading>\n            </CardHeader>\n            <CardBody>\n              <VStack spacing={4} align=\"stretch\">\n                {/* CID Input */}\n                <FormControl isRequired>\n                  <FormLabel>IPFS CID</FormLabel>\n                  <InputGroup>\n                    <InputLeftElement pointerEvents=\"none\">\n                      <FiHash color=\"gray\" />\n                    </InputLeftElement>\n                    <Input\n                      placeholder=\"e.g., bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\"\n                      value={formData.cid}\n                      onChange={(e) => setFormData({ ...formData, cid: e.target.value })}\n                    />\n                  </InputGroup>\n                  <FormHelperText>\n                    The Content Identifier from Pinata or IPFS\n                  </FormHelperText>\n                </FormControl>\n\n                {/* Title Input */}\n                <FormControl isRequired>\n                  <FormLabel>Video Title</FormLabel>\n                  <Input\n                    placeholder=\"Enter a descriptive title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  />\n                </FormControl>\n\n                {/* File Name Input */}\n                <FormControl>\n                  <FormLabel>File Name</FormLabel>\n                  <Input\n                    placeholder=\"e.g., my-video.mp4 (optional)\"\n                    value={formData.fileName}\n                    onChange={(e) => setFormData({ ...formData, fileName: e.target.value })}\n                  />\n                  <FormHelperText>\n                    Original file name (helps identify the video type)\n                  </FormHelperText>\n                </FormControl>\n\n                {/* File Size Input */}\n                <FormControl>\n                  <FormLabel>File Size</FormLabel>\n                  <Input\n                    placeholder=\"e.g., 301.83 MB (optional)\"\n                    value={formData.fileSize}\n                    onChange={(e) => setFormData({ ...formData, fileSize: e.target.value })}\n                  />\n                  <FormHelperText>\n                    Enter size with unit (B, KB, MB, or GB)\n                  </FormHelperText>\n                </FormControl>\n\n                {/* Description */}\n                <FormControl>\n                  <FormLabel>Description</FormLabel>\n                  <Textarea\n                    placeholder=\"Add a description of your video (optional)\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={4}\n                  />\n                </FormControl>\n\n                {/* Tags */}\n                <FormControl>\n                  <FormLabel>Tags</FormLabel>\n                  <HStack>\n                    <Input\n                      placeholder=\"Add tags for categorization\"\n                      value={tagInput}\n                      onChange={(e) => setTagInput(e.target.value)}\n                      onKeyPress={handleTagInputKeyPress}\n                    />\n                    <Button onClick={handleAddTag} leftIcon={<FiPlus />}>\n                      Add\n                    </Button>\n                  </HStack>\n                  {formData.tags.length > 0 && (\n                    <Wrap mt={2}>\n                      {formData.tags.map((tag) => (\n                        <WrapItem key={tag}>\n                          <Tag size=\"md\" variant=\"solid\" colorScheme=\"blue\">\n                            <TagLabel>{tag}</TagLabel>\n                            <TagCloseButton onClick={() => handleRemoveTag(tag)} />\n                          </Tag>\n                        </WrapItem>\n                      ))}\n                    </Wrap>\n                  )}\n                </FormControl>\n\n                {/* Public/Private Toggle */}\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">Make video public</FormLabel>\n                  <Switch\n                    isChecked={formData.isPublic}\n                    onChange={(e) => setFormData({ ...formData, isPublic: e.target.checked })}\n                    colorScheme=\"blue\"\n                  />\n                </FormControl>\n\n                {/* Private Pinata File Toggle */}\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">Private Pinata File</FormLabel>\n                  <Switch\n                    isChecked={formData.isPrivateFile}\n                    onChange={(e) => setFormData({ ...formData, isPrivateFile: e.target.checked })}\n                    colorScheme=\"orange\"\n                  />\n                  <Text fontSize=\"sm\" color={textSecondary} ml={3}>\n                    Enable if this CID is from a private Pinata file\n                  </Text>\n                </FormControl>\n\n                <Divider />\n\n                {/* Action Buttons */}\n                <HStack justify=\"space-between\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => navigate('/youtubetoipfs')}\n                    leftIcon={<FiX />}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    colorScheme=\"blue\"\n                    onClick={handleSubmit}\n                    isLoading={isSubmitting}\n                    loadingText=\"Adding Video...\"\n                    leftIcon={<FiSave />}\n                  >\n                    Add Video\n                  </Button>\n                </HStack>\n              </VStack>\n            </CardBody>\n          </Card>\n\n          {/* IPFS Gateway Info */}\n          <Card bg={cardBg} borderColor={borderColor} variant=\"outline\">\n            <CardBody>\n              <VStack align=\"start\" spacing={2}>\n                <HStack>\n                  <FiInfo color={textSecondary} />\n                  <Text fontWeight=\"bold\" color={textPrimary}>IPFS Gateway Access</Text>\n                </HStack>\n                <Text fontSize=\"sm\" color={textSecondary}>\n                  Once added, your video will be accessible through your private IPFS gateway:\n                </Text>\n                <Code fontSize=\"xs\" p={2} borderRadius=\"md\" w=\"full\">\n                  {IPFS_CONFIG.PRIVATE_GATEWAY_URL}/[YOUR-CID]\n                </Code>\n                <ChakraLink\n                  href=\"https://docs.pinata.cloud/gateways/retrieving-files\"\n                  isExternal\n                  color=\"blue.500\"\n                  fontSize=\"sm\"\n                >\n                  Learn more about IPFS gateways <FiExternalLink style={{ display: 'inline' }} />\n                </ChakraLink>\n              </VStack>\n            </CardBody>\n          </Card>\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default AddVideoByCID;"],"names":["IPFS_CONFIG","PRIVATE_GATEWAY_URL","PUBLIC_GATEWAY_URL","getIPFSUrl","cid","gateway","arguments","length","undefined","concat","ADD_VIDEO_BY_CID","gql","_templateObject","_taggedTemplateLiteral","AddVideoByCID","usePageTitle","navigate","useNavigate","toast","useToast","bg","useColorModeValue","cardBg","borderColor","textPrimary","textSecondary","formData","setFormData","useState","title","description","fileName","fileSize","tags","isPublic","isPrivateFile","tagInput","setTagInput","isSubmitting","setIsSubmitting","addVideoByCID","useMutation","onCompleted","data","status","duration","isClosable","addIPFSVideoByCID","id","onError","error","message","handleAddTag","trimmedTag","trim","includes","prev","_objectSpread","_jsxs","Box","minH","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","youtubeToIPFSModuleConfig","Container","maxW","py","VStack","spacing","align","HStack","justify","Heading","size","color","Text","Button","leftIcon","FiVideo","onClick","variant","Alert","borderRadius","AlertIcon","fontWeight","List","mt","ListItem","ListIcon","as","FiCheck","Code","Card","CardHeader","CardBody","FormControl","isRequired","FormLabel","InputGroup","InputLeftElement","pointerEvents","FiHash","Input","placeholder","value","onChange","e","target","FormHelperText","Textarea","rows","onKeyPress","key","preventDefault","FiPlus","Wrap","map","tag","WrapItem","Tag","colorScheme","TagLabel","TagCloseButton","handleRemoveTag","tagToRemove","filter","display","alignItems","mb","Switch","isChecked","checked","fontSize","ml","Divider","FiX","async","fileSizeInBytes","sizeMatch","match","unit","multipliers","Math","round","parseFloat","toUpperCase","variables","input","ipfsHash","console","isLoading","loadingText","FiSave","FiInfo","p","w","ChakraLink","href","isExternal","FiExternalLink","style","FooterWithFourColumns"],"sourceRoot":""}