{"version":3,"file":"static/js/9345.61c4dbc6.chunk.js","mappings":"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","sources":["pages/bills/markdownTemplates.ts","pages/bills/NewBill.tsx"],"sourcesContent":["/**\n * Centralized markdown templates for import/export functionality\n * Single source of truth for FORMAT_SPEC.md and bill/project templates\n */\n\nexport const FORMAT_SPEC_CONTENT = `# Unified Markdown Format Specification\n\n**Version:** 1.0\n**Last Updated:** January 2025\n\nThis document defines the unified markdown format for importing/exporting projects, bills, and proposals.\n\n---\n\n## 📝 Format Overview\n\nThe unified format combines:\n- Project metadata (name, goal, description)\n- Bill metadata (currency, payment method, status)\n- Line items / Tasks (description, price, status, assignee)\n- Agreement text (optional)\n\nThis allows editing proposals in Claude and importing them into the system.\n\n---\n\n## 📋 Complete Example\n\n\\`\\`\\`markdown\n# One Group Website Development Proposal\n\n## Project Information\n**Project Name:** One Group Website Development\n**Project Goal:** Build unified digital platform for Solar, Finance & Property Investment\n**Project Description:** Complete 80-page unified platform representing all three One Group verticals with custom calculators, CRM integration, and SEO optimization.\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. Content Page: onegroupaustralasia.com.au/\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 2. Content Page: onegroupaustralasia.com.au/about\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n### 3. Custom Logic: onegroupaustralasia.com.au/solar/calculator\n**Price:** $300.00\n**Billable:** Yes\n**Status:** IN_PROGRESS\n**Assignee:** jane@tommillerservices.com\n\n### 4. Project management and coordination\n**Price:** $0.00\n**Billable:** No\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 5. Internal testing and QA\n**Price:** [ENTER PRICE]\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n## Agreement\n\n[Full agreement text goes here...]\n\n**Between:** Tom Miller Services Pty Ltd (\"TMS\")\n**And:** One Group (\"Client\")\n\n[Rest of agreement...]\n\\`\\`\\`\n\n---\n\n## 🔍 Field Specifications\n\n### Project Information Section\n\n| Field | Required | Format | Example |\n|-------|----------|--------|---------|\n| Project Name | Yes | Plain text | \\`One Group Website Development\\` |\n| Project Goal | No | Max 17 words | \\`Build unified digital platform for Solar, Finance & Property\\` |\n| Project Description | No | Max 200 words | \\`Complete 80-page unified platform...\\` |\n\n**Notes:**\n- Project Goal is used for taglines (keep concise)\n- Project Description provides context for the work\n\n---\n\n### Bill Information Section\n\n| Field | Required | Format | Options |\n|-------|----------|--------|---------|\n| Currency | Yes | Uppercase code | \\`AUD\\`, \\`USD\\` |\n| Payment Method | No | Enum value | \\`AUD_TRANSFER\\`, \\`CARD\\`, \\`CRYPTO\\` |\n| Status | No | Enum value | \\`PROPOSAL\\`, \\`DRAFT\\`, \\`SENT\\` |\n\n**Notes:**\n- Currency affects how prices are parsed\n- If Payment Method is omitted, defaults to \\`AUD_TRANSFER\\`\n- If Status is omitted, defaults to \\`PROPOSAL\\`\n\n---\n\n### Line Items Section\n\nEach line item uses this format:\n\n\\`\\`\\`markdown\n### [Number]. [Description]\n**Price:** [Amount]\n**Billable:** [Yes/No]\n**Status:** [Status]\n**Assignee:** [Email or \"Unassigned\"]\n\\`\\`\\`\n\n#### Field Details:\n\n| Field | Required | Format | Options/Rules |\n|-------|----------|--------|---------------|\n| Number | No | Integer | Sequential numbering (1, 2, 3...) |\n| Description | Yes | Plain text | Task/line item description |\n| Price | Yes | Number with currency symbol | \\`$100.00\\`, \\`[ENTER PRICE]\\` (placeholder) |\n| Billable | No | Yes/No | Defaults to \\`Yes\\` if omitted |\n| Status | No | Enum | \\`PENDING\\`, \\`IN_PROGRESS\\`, \\`COMPLETED\\` (defaults to \\`PENDING\\`) |\n| Assignee | No | Email or \"Unassigned\" | Must be valid email or literal \"Unassigned\" |\n\n**Price Format Rules:**\n- With symbol: \\`$100.00\\`, \\`$100\\`, \\`$99.50\\`\n- Without symbol: \\`100.00\\`, \\`100\\`, \\`99.50\\`\n- Placeholder: \\`[ENTER PRICE]\\` ← **Fails import** (must add price before importing)\n- Zero price: \\`$0.00\\` ← Creates non-billable line item\n\n**Assignee Rules:**\n- Valid email: \\`tom@tommillerservices.com\\` ← Looks up user and assigns\n- Invalid email: Creates unassigned task and shows warning\n- \"Unassigned\": Creates unassigned task\n- Omitted: Creates unassigned task\n\n---\n\n## 🔄 Import/Export Behavior\n\n### Export (Project → Markdown)\n\nWhen exporting a project to markdown:\n1. **Project Info:** Populated from project.projectName, projectGoal, projectDescription\n2. **Bill Info:** Uses default values (Currency from tenant, Status = PROPOSAL)\n3. **Line Items:**\n   - Description from task.description\n   - Price = \\`[ENTER PRICE]\\` for billable tasks, \\`$0.00\\` for non-billable\n   - Billable from task.billable (defaults to Yes)\n   - Status from task.status\n   - Assignee from task.assignedTo.email (or \"Unassigned\")\n4. **Agreement:** Not included in export (add manually if needed)\n\n### Import (Markdown → Bill)\n\nWhen importing markdown to a bill:\n1. **Project Info:** Ignored (bill already linked to project)\n2. **Bill Info:** Updates bill.currency if specified\n3. **Line Items:**\n   - **Replaces all existing line items** (with confirmation modal)\n   - Creates new line items from each \\`### [Number]. [Description]\\` section\n   - Parses price and converts to cents for Stripe\n   - Sets billable flag based on price ($0 = non-billable)\n   - Assignee is stored but not enforced (bills don't have task assignments)\n4. **Agreement:** Ignored during bill import\n\n---\n\n## ✅ Validation Rules\n\n### During Export\n- [ ] At least 1 task exists in project\n- [ ] Task descriptions are not empty\n- [ ] All billable tasks marked with price placeholder\n\n### During Import to Bill\n- [ ] Valid markdown structure\n- [ ] At least 1 line item found\n- [ ] All line items have valid prices (no \\`[ENTER PRICE]\\` placeholders)\n- [ ] All prices are positive numbers or zero\n- [ ] Currency code is valid (AUD or USD)\n- [ ] Status enum is valid (if provided)\n\n---\n\n## 🚫 Common Parse Errors\n\n| Error | Cause | Solution |\n|-------|-------|----------|\n| \"No line items found\" | Missing \\`## Line Items\\` section | Add section header |\n| \"Invalid price format\" | Price has \\`[ENTER PRICE]\\` | Replace with actual dollar amount |\n| \"Currency not supported\" | Invalid currency code | Use \\`AUD\\` or \\`USD\\` |\n| \"Line item missing description\" | Empty description after number | Add description text |\n| \"Negative price not allowed\" | Price is negative | Use positive number or $0.00 |\n\n---\n\n## 🎨 Formatting Tips for Claude Editing\n\n### Adding New Line Items\n\\`\\`\\`markdown\n### 81. New feature: User authentication module\n**Price:** $500.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\\`\\`\\`\n\n### Bulk Price Adjustments\nAsk Claude: \"Increase all Content Page items by 20%\"\nClaude will update:\n- \\`**Price:** $100.00\\` → \\`**Price:** $120.00\\`\n\n### Reassigning Tasks\nAsk Claude: \"Assign all calculator tasks to jane@tommillerservices.com\"\nClaude will update:\n- \\`**Assignee:** Unassigned\\` → \\`**Assignee:** jane@tommillerservices.com\\`\n\n### Marking Tasks Complete\nAsk Claude: \"Mark tasks 1-10 as completed\"\nClaude will update:\n- \\`**Status:** PENDING\\` → \\`**Status:** COMPLETED\\`\n\n---\n\n**Version History:**\n- v1.0 (Jan 2025) - Initial specification\n`;\n\nexport const BILL_TEMPLATE_CONTENT = `# Bill Line Items Template\n\n## Project Information\n**Project Name:** [Enter project name]\n**Project Goal:** [Enter project goal - max 17 words]\n**Project Description:** [Enter project description - max 200 words]\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. [Task description]\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** email@example.com\n\n### 2. [Another task description]\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n### 3. [Add more line items as needed]\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n## Agreement\n\n[Add your agreement text here, or leave this section empty]\n`;\n\n/**\n * Download a markdown file with the given content\n */\nexport const downloadMarkdownFile = (content: string, filename: string) => {\n  const blob = new Blob([content], { type: 'text/markdown' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n","import React, { useState, useEffect } from \"react\";\nimport { BILL_TEMPLATE_CONTENT, downloadMarkdownFile } from \"./markdownTemplates\";\nimport {\n  Box,\n  Container,\n  Heading,\n  VStack,\n  FormControl,\n  FormLabel,\n  Select,\n  Switch,\n  Button,\n  useToast,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Input,\n  Textarea,\n  IconButton,\n  HStack,\n  Badge,\n  Text,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { AddIcon, DeleteIcon } from \"@chakra-ui/icons\";\nimport { gql, useQuery, useMutation, useApolloClient, ApolloQueryResult } from \"@apollo/client\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport billsModuleConfig from \"./moduleConfig\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { getColor } from \"../../brandConfig\";\nimport { Bill, BillInput } from \"../../generated/graphql\";\n\nenum BillStatus {\n  PROPOSAL = \"PROPOSAL\",\n  DRAFT = \"DRAFT\",\n  SENT = \"SENT\"\n}\n\nconst GET_ALL_PROJECTS = gql`\n  query GetAllProjects {\n    projects {\n      id\n      projectName\n      projectGoal\n      progress\n      billingClient {\n        id\n        fName\n        lName\n        email\n        businessName\n      }\n    }\n  }\n`;\n\nconst GET_PROJECT_WITH_TASKS = gql`\n  query GetProjectWithTasks($projectId: ID!) {\n    project(id: $projectId) {\n      id\n      projectName\n      projectGoal\n      progress\n      billingClient {\n        id\n        fName\n        lName\n        email\n        businessName\n      }\n      tasks {\n        id\n        description\n        status\n        order\n        billed\n        assignedTo {\n          id\n          fName\n          lName\n        }\n        media {\n          url\n          description\n          fileType\n        }\n      }\n    }\n  }\n`;\n\nconst CREATE_BILL = gql`\n  mutation CreateBill($input: BillInput!) {\n    createBill(input: $input) {\n      id\n      isPaid\n      status\n      paymentMethod\n      currency\n      acceptCardPayment\n      acceptCryptoPayment\n      clientId\n      lineItems {\n        id\n        amount\n        description\n      }\n      subtotal\n      taxPercentage\n      taxAmount\n      totalAmount\n      projectId\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      businessName\n    }\n  }\n`;\n\nconst GET_CURRENT_TENANT = gql`\n  query GetCurrentTenant {\n    currentTenant {\n      id\n      name\n      companyDetails {\n        companyName\n        taxId\n        taxPercentage\n        billingEmail\n        billingPhone\n        billingAddress {\n          addressLine1\n          addressLine2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      paymentReceivingDetails {\n        acceptedMethods\n        bankAccount {\n          accountName\n          bsb\n          accountNumber\n          bankName\n        }\n      }\n    }\n  }\n`;\n\nconst NewBill = () => {\n  usePageTitle(\"New Bill\");\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n  const client = useApolloClient(); // Get Apollo client instance\n  const { user } = useAuth(); // Get current authenticated user\n\n  // Consistent styling from brandConfig with theme support\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  const [searchParams] = useSearchParams();\n  const projectIdFromUrl = searchParams.get('projectId');\n  \n  const [selectedProject, setSelectedProject] = useState(\"\");\n  const [selectedClient, setSelectedClient] = useState(\"\");\n  const [isPaid, setIsPaid] = useState(false);\n  const [billStatus, setBillStatus] = useState<BillStatus>(BillStatus.DRAFT);\n  const [currency, setCurrency] = useState<\"AUD\" | \"USD\">(\"AUD\");\n  const [acceptBankTransfer, setAcceptBankTransfer] = useState(true);\n  const [acceptCardPayment, setAcceptCardPayment] = useState(true);\n  const [acceptCryptoPayment, setAcceptCryptoPayment] = useState(false);\ninterface LineItem {\n  description: string;\n  amount: string | number;\n}  const [lineItems, setLineItems] = useState<LineItem[]>([{ description: \"\", amount: \"\" }]);\n\n  // Fetch tenant company details for pre-population\n  const { data: tenantData } = useQuery(GET_CURRENT_TENANT);\n  const taxPercentage = tenantData?.currentTenant?.companyDetails?.taxPercentage ?? 10;\n\n  // Calculate subtotal, GST, and total amount\n  const subtotal = lineItems.reduce((sum, item) => {\n    const amount = typeof item.amount === 'number' ? item.amount : parseFloat(item.amount as string) || 0;\n    return sum + amount;\n  }, 0);\n\n  const gstAmount = subtotal * (taxPercentage / 100);\n  const totalAmount = subtotal + gstAmount;\n\n  const { loading: projectsLoading, error: projectsError, data: projectsData } = useQuery(GET_ALL_PROJECTS, {\n    onCompleted: (data) => {\n      console.log(\"Project data received from query:\", data);\n      if (data?.projects) {\n        console.log(`Received ${data.projects.length} projects`);\n        // Check the structure of the first project if available\n        if (data.projects.length > 0) {\n          const sampleProject = data.projects[0];\n          console.log(\"Sample project structure:\", {\n            id: sampleProject.id,\n            name: sampleProject.projectName,\n            tasksCount: sampleProject.tasks?.length || 0,\n            hasTasks: Array.isArray(sampleProject.tasks),\n            billsCount: sampleProject.bills?.length || 0,\n            firstTaskBilled: sampleProject.tasks && sampleProject.tasks.length > 0\n              ? sampleProject.tasks[0].billed\n              : \"No tasks\"\n          });\n        }\n      } else {\n        console.log(\"No projects data received\");\n      }\n    },\n    onError: (error) => {\n      console.error(\"Error fetching projects:\", error);\n    }\n  });\n\n  const { data: clientsData, loading: clientsLoading } = useQuery(GET_CLIENTS);\n\n  const [createBill, { loading: creatingBill }] = useMutation(CREATE_BILL);\n\n  // Pre-populate line items when a project is selected\n  const handleProjectSelect = (projectId: string) => {\n    console.log(\"Project selected:\", projectId);\n    setSelectedProject(projectId);\n\n    if (!projectId) {\n      console.log(\"No project selected, resetting line items\");\n      setLineItems([{ description: \"\", amount: \"\" }]);\n      setSelectedClient(\"\"); // Also clear client\n      return;\n    }\n\n    // Auto-select client from project\n    const project = projectsData?.projects?.find((p: any) => p.id === projectId);\n    if (project?.billingClient?.id) {\n      console.log(\"Auto-selecting client from project:\", project.billingClient);\n      setSelectedClient(project.billingClient.id);\n    }\n\n    // Set a loading line item while we fetch data\n    setLineItems([{ description: \"Loading tasks...\", amount: \"\" }]);\n\n    // Fetch the specific project with its tasks\n    client.query<{ project: any }>({\n      query: GET_PROJECT_WITH_TASKS,\n      variables: { projectId },\n      fetchPolicy: \"network-only\" // Force a fresh fetch\n    }).then((response: ApolloQueryResult<{ project: any }>) => {\n      console.log(\"Project details fetched:\", response.data);\n\n      const projectData = response.data.project;\n      if (!projectData) {\n        console.log(\"Project data not found\");\n        setLineItems([{ description: \"\", amount: \"\" }]);\n        toast({\n          title: \"Error\",\n          description: \"Could not load project details\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true,\n        });\n        return;\n      }\n\n      console.log(\"Project tasks:\", projectData.tasks);\n      console.log(\"Task count:\", projectData.tasks?.length || 0);\n\n      // Check if tasks exist\n      if (!projectData.tasks || projectData.tasks.length === 0) {\n        console.log(\"No tasks found in this project\");\n        setLineItems([{ description: \"\", amount: \"\" }]);\n        toast({\n          title: \"No tasks\",\n          description: \"This project has no tasks. You can add custom line items.\",\n          status: \"info\",\n          duration: 3000,\n          isClosable: true,\n        });\n        return;\n      }\n\n      // Get tasks that aren't already billed\n      const unbilledTasks = projectData.tasks.filter((task: any) => {\n        console.log(`Task ${task.id} - ${task.description} - Billed:`, task.billed);\n        // We need to check explicitly for false since billed is a boolean\n        return task.billed === false;\n      });\n\n      console.log(\"Unbilled tasks:\", unbilledTasks);\n      console.log(\"Unbilled task count:\", unbilledTasks.length);\n\n      if (unbilledTasks.length === 0) {\n        // If no unbilled tasks, keep an empty line item\n        console.log(\"No unbilled tasks found\");\n        setLineItems([{ description: \"\", amount: \"\" }]);\n        toast({\n          title: \"No unbilled tasks\",\n          description: \"This project has no unbilled tasks. You can add custom line items.\",\n          status: \"info\",\n          duration: 3000,\n          isClosable: true,\n        });\n        return;\n      }\n\n      // Create line items from unbilled tasks\n      const newLineItems = unbilledTasks.map((task: any) => {\n        console.log(`Creating line item for task: ${task.description}`);\n        return {\n          description: task.description,\n          amount: \"\", // Default to empty, user will need to set amount\n          taskId: task.id, // Store the task ID for reference\n          status: task.status // Store the task status for reference\n        };\n      });\n\n      console.log(\"New line items:\", newLineItems);\n      setLineItems(newLineItems);\n\n      toast({\n        title: \"Tasks loaded\",\n        description: `Loaded ${newLineItems.length} unbilled tasks as line items.`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }).catch(error => {\n      console.error(\"Error fetching project details:\", error);\n      setLineItems([{ description: \"\", amount: \"\" }]);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load project tasks. Please try again.\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n    });\n  };\n\n  // Auto-select project from URL parameter when projects data is loaded\n  useEffect(() => {\n    if (projectIdFromUrl && projectsData?.projects && !selectedProject) {\n      const projectExists = projectsData.projects.some((p: any) => p.id === projectIdFromUrl);\n      if (projectExists) {\n        console.log(\"Auto-selecting project from URL:\", projectIdFromUrl);\n        handleProjectSelect(projectIdFromUrl);\n      }\n    }\n  }, [projectIdFromUrl, projectsData, selectedProject]);\n\n  // Pre-fill from booking URL parameters\n  useEffect(() => {\n    const itemName = searchParams.get('itemName');\n    const itemPrice = searchParams.get('itemPrice');\n    const itemQuantity = searchParams.get('itemQuantity');\n    const urlCurrency = searchParams.get('currency');\n    const notes = searchParams.get('notes');\n\n    if (itemName && itemPrice) {\n      console.log('📋 Pre-filling bill from booking:', { itemName, itemPrice, itemQuantity });\n\n      // Set line items\n      const quantity = parseInt(itemQuantity || '1');\n      const price = parseFloat(itemPrice);\n      setLineItems([{\n        description: itemName,\n        amount: price * quantity\n      }]);\n\n      // Set currency if provided\n      if (urlCurrency === 'AUD' || urlCurrency === 'USD') {\n        setCurrency(urlCurrency);\n      }\n\n      // TODO: Set notes when that field is added to the form\n      // setNotes(notes);\n    }\n  }, [searchParams]);\n\n  const handleAddLineItem = () => {\n    setLineItems([...lineItems, { description: \"\", amount: \"\" }]);\n  };\n\n  const handleRemoveLineItem = (index: number) => {\n    setLineItems(lineItems.filter((_, i) => i !== index));\n  };\n\n  const handleLineItemChange = (index: number, field: keyof LineItem, value: string | number) => {\n    const newLineItems = [...lineItems];\n    newLineItems[index] = {\n      ...newLineItems[index],\n      [field]: field === \"amount\" ? (value === \"\" ? \"\" : parseFloat(value as string) || 0) : value,\n    };\n    setLineItems(newLineItems);\n  };\n\n  const handleSubmit = async () => {\n    console.log(\"🚀 Starting bill creation...\");\n\n    // Validate that either a project or a client is selected\n    if (!selectedProject && !selectedClient) {\n      console.error(\"❌ No project or client selected\");\n      toast({\n        title: \"Client Required\",\n        description: \"Please select either a project or a client to bill\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    // Filter out line items with no description or zero amount\n    const validLineItems = lineItems.filter(item => item.description && item.amount && Number(item.amount) > 0);\n    console.log(`✅ Valid line items: ${validLineItems.length}`);\n\n    if (validLineItems.length === 0) {\n      console.error(\"❌ No valid line items\");\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one line item with a description and amount\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    try {\n      // Remove taskId and status from lineItems before submitting\n      const cleanedLineItems = validLineItems.map(({ description, amount }) => ({\n        description,\n        amount: Number(amount)\n      }));\n\n      const billInput: any = {\n        isPaid,\n        status: billStatus,\n        currency,\n        acceptBankTransfer,\n        acceptCardPayment,\n        acceptCryptoPayment,\n        lineItems: cleanedLineItems,\n        subtotal,\n        taxPercentage,\n        taxAmount: gstAmount,\n        totalAmount,\n        issuedBy: user?.id, // Include the current user's ID as the issuer\n      };\n\n      // Only include clientId if one is selected (don't send empty string)\n      if (selectedClient) {\n        billInput.clientId = selectedClient;\n      }\n\n      // Only include projectId if one is selected\n      if (selectedProject) {\n        billInput.projectId = selectedProject;\n      }\n\n      console.log(\"📋 Creating bill with:\", {\n        ...billInput,\n        totalAmount: totalAmount.toFixed(2),\n        currency,\n        lineItemsCount: cleanedLineItems.length,\n        hasClientId: !!selectedClient,\n        clientIdValue: selectedClient\n      });\n\n      const { data } = await createBill({\n        variables: {\n          input: billInput,\n        },\n      });\n\n      console.log(\"✅ Bill created successfully:\", {\n        billId: data.createBill.id,\n        currency: data.createBill.currency,\n        totalLineItems: data.createBill.lineItems?.length,\n        clientId: data.createBill.clientId,\n        hasClientId: !!data.createBill.clientId\n      });\n\n      toast({\n        title: \"Success\",\n        description: `Bill created successfully in ${currency}`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n\n      navigate(`/bill/${data.createBill.id}`);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create bill\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n      <Container maxW=\"container.xl\" py={8}>\n        <VStack spacing={8} align=\"stretch\">\n          <HStack justify=\"space-between\" align=\"center\">\n            <Heading color={textPrimary}>📝 Create New Bill</Heading>\n            <Button\n              size=\"sm\"\n              colorScheme=\"purple\"\n              leftIcon={<AddIcon />}\n              onClick={() => downloadMarkdownFile(BILL_TEMPLATE_CONTENT, 'bill_template.md')}\n            >\n              Download .md Template\n            </Button>\n          </HStack>\n\n          <Box\n            p={6}\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            borderRadius=\"lg\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            borderWidth=\"1px\"\n            borderColor={cardBorder}\n          >\n            <VStack spacing={6} align=\"stretch\">\n              <FormControl>\n                <FormLabel color={textPrimary}>\n                  Project (Optional)\n                  {projectsLoading && <Text as=\"span\" fontSize=\"xs\" ml={2} color={textMuted}>(Loading projects...)</Text>}\n                </FormLabel>\n                <Select\n                  placeholder={projectsLoading ? \"Loading projects...\" : \"Select project (optional)\"}\n                  value={selectedProject}\n                  onChange={(e) => handleProjectSelect(e.target.value)}\n                  isDisabled={projectsLoading}\n                  bg=\"rgba(0, 0, 0, 0.2)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ borderColor: textSecondary }}\n                >\n                  {projectsData?.projects.map((project: any) => (\n                    <option key={project.id} value={project.id} style={{ backgroundColor: '#1a1a1a' }}>\n                  {project.projectName} - {project.billingClient?.businessName || `${project.billingClient?.fName} ${project.billingClient?.lName}`}\n                    </option>\n                  ))}\n                </Select>\n                <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                  Link this bill to a project to auto-populate line items from unbilled tasks, or leave blank to create a standalone bill.\n                </Text>\n              </FormControl>\n\n              {/* Client dropdown - shown when no project is selected OR to override project client */}\n              <FormControl isRequired={!selectedProject}>\n                <FormLabel color={textPrimary}>\n                  Client {selectedProject ? \"(Auto-selected from project)\" : \"\"}\n                  {clientsLoading && !selectedProject && <Text as=\"span\" fontSize=\"xs\" ml={2} color={textMuted}>(Loading clients...)</Text>}\n                </FormLabel>\n                <Select\n                  placeholder={clientsLoading ? \"Loading clients...\" : \"Select client to bill\"}\n                  value={selectedClient}\n                  onChange={(e) => setSelectedClient(e.target.value)}\n                  isDisabled={clientsLoading || !!selectedProject}\n                  bg=\"rgba(0, 0, 0, 0.2)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ borderColor: textSecondary }}\n                >\n                  {clientsData?.clients?.map((client: any) => (\n                    <option key={client.id} value={client.id} style={{ backgroundColor: '#1a1a1a' }}>\n                      {client.businessName || `${client.fName} ${client.lName}`} ({client.email})\n                    </option>\n                  ))}\n                </Select>\n                <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                  {selectedProject\n                    ? \"Client is automatically selected from the project above\"\n                    : \"Select who this bill is for - this is required\"}\n                </Text>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textPrimary}>Currency</FormLabel>\n                <Select\n                  value={currency}\n                  onChange={(e) => {\n                    const newCurrency = e.target.value as \"AUD\" | \"USD\";\n                    setCurrency(newCurrency);\n                    console.log(`Currency changed to: ${newCurrency}`);\n                  }}\n                  bg=\"rgba(0, 0, 0, 0.2)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ borderColor: textSecondary }}\n                >\n                  <option value=\"AUD\" style={{ backgroundColor: '#1a1a1a' }}>AUD - Australian Dollar</option>\n                  <option value=\"USD\" style={{ backgroundColor: '#1a1a1a' }}>USD - US Dollar</option>\n                </Select>\n              </FormControl>\n\n              {/* Payment Method Toggles - Only visible for DRAFT bills */}\n              <Box>\n                <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textPrimary} mb={3}>\n                  Payment Methods Available to Customer\n                </Text>\n                <VStack align=\"stretch\" spacing={3}>\n                  <FormControl display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <FormLabel htmlFor=\"bank-transfer\" mb=\"0\" color={textPrimary}>\n                      Accept Bank Transfer\n                    </FormLabel>\n                    <Switch\n                      id=\"bank-transfer\"\n                      isChecked={acceptBankTransfer}\n                      onChange={(e) => setAcceptBankTransfer(e.target.checked)}\n                      colorScheme=\"blue\"\n                    />\n                  </FormControl>\n\n                  <FormControl display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <FormLabel htmlFor=\"card-payment\" mb=\"0\" color={textPrimary}>\n                      Accept Card Payments (Stripe)\n                    </FormLabel>\n                    <Switch\n                      id=\"card-payment\"\n                      isChecked={acceptCardPayment}\n                      onChange={(e) => setAcceptCardPayment(e.target.checked)}\n                      colorScheme=\"blue\"\n                    />\n                  </FormControl>\n\n                  <FormControl display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <FormLabel htmlFor=\"crypto-payment\" mb=\"0\" color={textPrimary}>\n                      Accept Crypto Payments (Bitcoin)\n                    </FormLabel>\n                    <Switch\n                      id=\"crypto-payment\"\n                      isChecked={acceptCryptoPayment}\n                      onChange={(e) => setAcceptCryptoPayment(e.target.checked)}\n                      colorScheme=\"blue\"\n                    />\n                  </FormControl>\n                </VStack>\n                <Text fontSize=\"xs\" color={textMuted} mt={2}>\n                  Note: These options can only be changed while the bill is in DRAFT status\n                </Text>\n              </Box>\n\n              <FormControl display=\"flex\" alignItems=\"center\">\n                <FormLabel mb=\"0\" color={textPrimary}>Is Paid?</FormLabel>\n                <Switch isChecked={isPaid} onChange={(e) => setIsPaid(e.target.checked)} />\n              </FormControl>\n            </VStack>\n          </Box>\n\n          <Box\n            p={6}\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            borderRadius=\"lg\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            borderWidth=\"1px\"\n            borderColor={cardBorder}\n          >\n            <HStack mb={4} justify=\"space-between\">\n              <Heading size=\"md\" color={textPrimary}>Line Items</Heading>\n              {selectedProject && (\n                <Text fontSize=\"sm\" color={textMuted}>\n                  Line items are pre-populated with unbilled tasks from the selected project\n                </Text>\n              )}\n            </HStack>\n            <Box overflowX=\"auto\" overflowY=\"hidden\">\n              <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\" }}>\n                <Thead>\n                  <Tr>\n                    <Th color={textSecondary} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 4 }}>Description</Th>\n                    <Th color={textSecondary} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 4 }}>Amount</Th>\n                    <Th color={textSecondary} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 4 }} display={{ base: \"none\", md: \"table-cell\" }}>Status</Th>\n                    <Th color={textSecondary} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 4 }}>Action</Th>\n                  </Tr>\n                </Thead>\n              <Tbody>\n                {lineItems.map((item, index) => (\n                  <Tr key={index}>\n                    <Td px={{ base: 2, md: 4 }} py={{ base: 2, md: 3 }}>\n                      <Textarea\n                        value={item.description}\n                        onChange={(e) => handleLineItemChange(index, \"description\", e.target.value)}\n                        placeholder=\"Item description\"\n                        bg=\"rgba(0, 0, 0, 0.2)\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: textSecondary }}\n                        minH={{ base: \"80px\", md: \"120px\" }}\n                        resize=\"vertical\"\n                        rows={5}\n                        fontSize={{ base: \"sm\", md: \"md\" }}\n                      />\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }} py={{ base: 2, md: 3 }}>\n                      <Input\n                        type=\"number\"\n                        value={item.amount}\n                        onChange={(e) => handleLineItemChange(index, \"amount\", e.target.value)}\n                        placeholder=\"Amount\"\n                        bg=\"rgba(0, 0, 0, 0.2)\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: textSecondary }}\n                        fontSize={{ base: \"sm\", md: \"md\" }}\n                        minW={{ base: \"80px\", md: \"120px\" }}\n                      />\n                    </Td>\n                    <Td px={{ base: 2, md: 4 }} py={{ base: 2, md: 3 }}>\n                      <IconButton\n                        aria-label=\"Remove line item\"\n                        icon={<DeleteIcon />}\n                        onClick={() => handleRemoveLineItem(index)}\n                        isDisabled={lineItems.length === 1}\n                        size={{ base: \"sm\", md: \"md\" }}\n                        variant=\"ghost\"\n                        colorScheme=\"red\"\n                      />\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n              </Table>\n            </Box>\n            <Button\n              leftIcon={<AddIcon />}\n              onClick={handleAddLineItem}\n              mt={4}\n              size=\"sm\"\n              bg=\"white\"\n              color=\"black\"\n              _hover={{\n                bg: \"gray.100\",\n                transform: \"translateY(-2px)\"\n              }}\n            >\n              Add Line Item\n            </Button>\n          </Box>\n\n          <HStack spacing={4}>\n            <Button\n              onClick={handleSubmit}\n              isLoading={creatingBill}\n              bg=\"white\"\n              color=\"black\"\n              _hover={{\n                bg: \"gray.100\",\n                transform: \"translateY(-2px)\"\n              }}\n            >\n              Create Bill\n            </Button>\n            <Button \n              onClick={() => navigate(\"/bills\")}\n              variant=\"outline\"\n              borderColor={cardBorder}\n              color={textPrimary}\n              _hover={{\n                borderColor: textSecondary,\n                bg: \"rgba(255, 255, 255, 0.05)\"\n              }}\n            >\n              Cancel\n            </Button>\n          </HStack>\n        </VStack>\n      </Container>\n      <FooterWithFourColumns />\n      \n      {/* Floating Total Display */}\n      <Box\n        position=\"fixed\"\n        bottom={8}\n        right={8}\n        p={6}\n        bg=\"linear-gradient(135deg, rgba(20, 20, 20, 0.95) 0%, rgba(30, 30, 30, 0.9) 50%, rgba(20, 20, 20, 0.95) 100%)\"\n        backdropFilter=\"blur(20px)\"\n        borderRadius=\"2xl\"\n        boxShadow=\"0 10px 40px rgba(0, 0, 0, 0.5), 0 0 60px rgba(54, 158, 255, 0.15)\"\n        borderWidth=\"1px\"\n        borderColor=\"rgba(54, 158, 255, 0.3)\"\n        transition=\"all 0.3s ease\"\n        _hover={{\n          transform: \"translateY(-2px) scale(1.02)\",\n          boxShadow: \"0 15px 50px rgba(0, 0, 0, 0.6), 0 0 80px rgba(54, 158, 255, 0.25)\",\n          borderColor: \"rgba(54, 158, 255, 0.5)\"\n        }}\n        zIndex={1000}\n      >\n        <VStack spacing={3} align=\"stretch\">\n          <Text\n            fontSize=\"xs\"\n            fontWeight=\"semibold\"\n            textTransform=\"uppercase\"\n            letterSpacing=\"wider\"\n            color=\"rgba(255, 255, 255, 0.6)\"\n          >\n            Bill Summary\n          </Text>\n\n          {/* Subtotal */}\n          <HStack justify=\"space-between\">\n            <Text fontSize=\"sm\" color=\"rgba(255, 255, 255, 0.7)\">\n              Subtotal\n            </Text>\n            <Text fontSize=\"sm\" fontWeight=\"medium\" color=\"rgba(255, 255, 255, 0.9)\">\n              ${subtotal.toFixed(2)} {currency}\n            </Text>\n          </HStack>\n\n          {/* GST/Tax */}\n          <HStack justify=\"space-between\">\n            <Text fontSize=\"sm\" color=\"rgba(255, 255, 255, 0.7)\">\n              GST ({taxPercentage}%)\n            </Text>\n            <Text fontSize=\"sm\" fontWeight=\"medium\" color=\"rgba(255, 255, 255, 0.9)\">\n              ${gstAmount.toFixed(2)} {currency}\n            </Text>\n          </HStack>\n\n          {/* Divider */}\n          <Box height=\"1px\" bg=\"rgba(54, 158, 255, 0.3)\" my={1} />\n\n          {/* Total */}\n          <HStack justify=\"space-between\" align=\"baseline\">\n            <Text\n              fontSize=\"sm\"\n              fontWeight=\"semibold\"\n              color=\"rgba(255, 255, 255, 0.8)\"\n            >\n              Total\n            </Text>\n            <Text\n              fontSize=\"2xl\"\n              fontWeight=\"bold\"\n              color=\"#FFFFFF\"\n              lineHeight=\"1\"\n            >\n              ${totalAmount.toFixed(2)} {currency}\n            </Text>\n          </HStack>\n\n          {lineItems.filter(item => item.amount && Number(item.amount) > 0).length > 0 && (\n            <Text\n              fontSize=\"xs\"\n              color=\"rgba(54, 158, 255, 0.8)\"\n              textAlign=\"center\"\n            >\n              {lineItems.filter(item => item.amount && Number(item.amount) > 0).length} item{lineItems.filter(item => item.amount && Number(item.amount) > 0).length !== 1 ? 's' : ''}\n            </Text>\n          )}\n        </VStack>\n      </Box>\n    </Box>\n  );\n};\n\nexport default NewBill; "],"names":["FORMAT_SPEC_CONTENT","BILL_TEMPLATE_CONTENT","downloadMarkdownFile","content","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","BillStatus","GET_ALL_PROJECTS","gql","_templateObject","_taggedTemplateLiteral","GET_PROJECT_WITH_TASKS","_templateObject2","CREATE_BILL","_templateObject3","GET_CLIENTS","_templateObject4","GET_CURRENT_TENANT","_templateObject5","NewBill","_tenantData$currentTe","_tenantData$currentTe2","_tenantData$currentTe3","_clientsData$clients","usePageTitle","navigate","useNavigate","toast","useToast","colorMode","useColorMode","client","useApolloClient","user","useAuth","bg","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","searchParams","useSearchParams","projectIdFromUrl","get","selectedProject","setSelectedProject","useState","selectedClient","setSelectedClient","isPaid","setIsPaid","billStatus","setBillStatus","DRAFT","currency","setCurrency","acceptBankTransfer","setAcceptBankTransfer","acceptCardPayment","setAcceptCardPayment","acceptCryptoPayment","setAcceptCryptoPayment","lineItems","setLineItems","description","amount","data","tenantData","useQuery","taxPercentage","currentTenant","companyDetails","subtotal","reduce","sum","item","parseFloat","gstAmount","totalAmount","loading","projectsLoading","error","projectsError","projectsData","onCompleted","console","log","projects","concat","length","_sampleProject$tasks","_sampleProject$bills","sampleProject","id","name","projectName","tasksCount","tasks","hasTasks","Array","isArray","billsCount","bills","firstTaskBilled","billed","onError","clientsData","clientsLoading","createBill","creatingBill","useMutation","handleProjectSelect","projectId","_projectsData$project","_project$billingClien","project","find","p","billingClient","query","variables","fetchPolicy","then","response","_projectData$tasks","projectData","title","status","duration","isClosable","unbilledTasks","filter","task","newLineItems","map","taskId","catch","useEffect","some","itemName","itemPrice","itemQuantity","urlCurrency","quantity","parseInt","price","handleLineItemChange","index","field","value","_objectSpread","_jsxs","Box","minHeight","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","billsModuleConfig","Container","maxW","py","VStack","spacing","align","HStack","justify","Heading","color","Button","size","colorScheme","leftIcon","AddIcon","onClick","backdropFilter","borderRadius","boxShadow","borderWidth","borderColor","FormControl","FormLabel","Text","as","fontSize","ml","Select","placeholder","onChange","e","target","isDisabled","_hover","_project$billingClien2","_project$billingClien3","_project$billingClien4","style","backgroundColor","businessName","fName","lName","mt","isRequired","clients","email","newCurrency","fontWeight","mb","display","alignItems","justifyContent","htmlFor","Switch","isChecked","checked","overflowX","overflowY","Table","variant","base","md","Thead","Tr","Th","px","Tbody","Td","Textarea","_placeholder","minH","resize","rows","Input","minW","IconButton","icon","DeleteIcon","_","i","handleRemoveLineItem","handleAddLineItem","transform","async","validLineItems","Number","_data$createBill$line","cleanedLineItems","_ref","billInput","taxAmount","issuedBy","clientId","toFixed","lineItemsCount","hasClientId","clientIdValue","input","billId","totalLineItems","Error","message","isLoading","FooterWithFourColumns","position","bottom","right","transition","zIndex","textTransform","letterSpacing","height","my","lineHeight","textAlign"],"sourceRoot":""}