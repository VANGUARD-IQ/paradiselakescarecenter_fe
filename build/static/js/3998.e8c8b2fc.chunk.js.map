{"version":3,"file":"static/js/3998.e8c8b2fc.chunk.js","mappings":"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","sources":["pages/tenant-management/QuickDeploy.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n    Box,\n    Container,\n    Heading,\n    VStack,\n    HStack,\n    Text,\n    Card,\n    CardHeader,\n    CardBody,\n    Button,\n    useToast,\n    FormControl,\n    FormLabel,\n    Select,\n    Alert,\n    AlertIcon,\n    SimpleGrid,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useColorModeValue,\n    useColorMode,\n    Spinner\n} from \"@chakra-ui/react\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nimport { ArrowBackIcon, RepeatIcon } from \"@chakra-ui/icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport tenantManagementModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL Operations\nconst GET_TENANTS = gql`\n  query GetTenantsForQuickDeploy {\n    tenants {\n      id\n      name\n      status\n      githubRepo\n      githubOwner\n      branding {\n        siteName\n      }\n      client {\n        id\n        fName\n        lName\n      }\n    }\n  }\n`;\n\nconst GET_AVAILABLE_MODULES = gql`\n  query GetAvailableModules {\n    availableModules {\n      id\n      name\n      description\n      icon\n      version\n      requiredTier\n    }\n  }\n`;\n\nconst DEPLOY_MODULE_TO_TENANT = gql`\n  mutation DeployModuleToTenant($moduleId: String!, $tenantId: String!) {\n    deployModuleToTenant(moduleId: $moduleId, tenantId: $tenantId) {\n      tenantId\n      tenantName\n      success\n      error\n      commitSha\n    }\n  }\n`;\n\nconst ENABLE_MODULE_FOR_TENANT = gql`\n  mutation EnableModuleForTenant($tenantId: ID!, $moduleId: String!, $version: String) {\n    enableModuleForTenant(tenantId: $tenantId, moduleId: $moduleId, version: $version) {\n      id\n      moduleConfig {\n        moduleId\n        version\n        enabled\n        enabledAt\n      }\n    }\n  }\n`;\n\nconst QuickDeploy = () => {\n    usePageTitle(\"Quick Deploy\");\n\n    const { colorMode } = useColorMode();\n    const navigate = useNavigate();\n    const toast = useToast();\n    const bg = getColor(\"background.main\", colorMode);\n\n    // Consistent styling from brandConfig\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    // Form state\n    const [selectedModule, setSelectedModule] = React.useState(\"\");\n    const [selectedTenant, setSelectedTenant] = React.useState(\"\");\n\n    // Loading states\n    const [isDeploying, setIsDeploying] = React.useState(false);\n    const [deploymentLogs, setDeploymentLogs] = React.useState<string[]>([]);\n    const [currentDeploymentTenant, setCurrentDeploymentTenant] = React.useState<string>(\"\");\n    const [showDeploymentModal, setShowDeploymentModal] = React.useState(false);\n\n    const { data: tenantsData, loading: tenantsLoading } = useQuery(GET_TENANTS);\n    const { data: modulesData, loading: modulesLoading } = useQuery(GET_AVAILABLE_MODULES);\n    const [deployModuleToTenant] = useMutation(DEPLOY_MODULE_TO_TENANT);\n    const [enableModuleForTenant] = useMutation(ENABLE_MODULE_FOR_TENANT);\n\n    const tenants = tenantsData?.tenants || [];\n\n    // Function to add logs with timestamp\n    const addDeploymentLog = (message: string) => {\n        const timestamp = new Date().toLocaleTimeString();\n        const logMessage = `[${timestamp}] ${message}`;\n        setDeploymentLogs(prev => [...prev, logMessage]);\n        console.log(`🚀 DEPLOYMENT: ${logMessage}`);\n    };\n\n    // Function to clear logs\n    const clearDeploymentLogs = () => {\n        setDeploymentLogs([]);\n    };\n\n    const handleSingleTenantDeployment = async () => {\n        if (!selectedTenant || !selectedModule) {\n            toast({\n                title: \"Missing Information\",\n                description: \"Please select both a tenant and a module\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        const tenant = tenants.find((t: any) => t.id === selectedTenant);\n        if (!tenant) return;\n\n        const tenantName = tenant.branding?.siteName || tenant.name;\n\n        // Initialize deployment modal\n        setCurrentDeploymentTenant(tenantName);\n        clearDeploymentLogs();\n        setShowDeploymentModal(true);\n        setIsDeploying(true);\n\n        try {\n            addDeploymentLog(`🚀 Starting deployment of ${selectedModule} module to ${tenantName}`);\n            addDeploymentLog(`📋 Tenant ID: ${selectedTenant}`);\n            addDeploymentLog(`📂 Target Repository: ${tenant.githubOwner}/${tenant.githubRepo}`);\n            addDeploymentLog(`📡 Sending deployment request to backend...`);\n\n            const result = await deployModuleToTenant({\n                variables: {\n                    moduleId: selectedModule,\n                    tenantId: selectedTenant\n                }\n            });\n\n            const deploymentResult = result.data.deployModuleToTenant;\n\n            if (deploymentResult.success) {\n                addDeploymentLog(`✅ Backend deployment request successful`);\n                addDeploymentLog(`📝 Commit SHA: ${deploymentResult.commitSha || 'Not provided'}`);\n                addDeploymentLog(`🎉 Module ${selectedModule} successfully deployed to ${tenantName}!`);\n                addDeploymentLog(`📁 Files copied to repository: ${tenant.githubOwner}/${tenant.githubRepo}`);\n                addDeploymentLog(`🔄 Repository has been updated with new module files`);\n\n                // Enable the module for the tenant\n                addDeploymentLog(`🔧 Enabling module ${selectedModule} for tenant...`);\n                try {\n                    const moduleVersion = modulesData?.availableModules?.find((m: any) => m.id === selectedModule)?.version || 'latest';\n\n                    await enableModuleForTenant({\n                        variables: {\n                            tenantId: selectedTenant,\n                            moduleId: selectedModule,\n                            version: moduleVersion\n                        }\n                    });\n\n                    addDeploymentLog(`✅ Module ${selectedModule} enabled in tenant configuration`);\n                    addDeploymentLog(`📋 Module is now active and accessible on the client site`);\n                } catch (enableError) {\n                    addDeploymentLog(`⚠️ Warning: Module deployed but failed to enable in tenant config`);\n                    addDeploymentLog(`🔧 Error: ${enableError instanceof Error ? enableError.message : 'Unknown enable error'}`);\n                    addDeploymentLog(`💡 You may need to manually enable the module in tenant settings`);\n                }\n\n                toast({\n                    title: \"✅ Deployment Successful!\",\n                    description: `${selectedModule} module deployed and enabled for ${tenantName}`,\n                    status: \"success\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n\n                // Reset form\n                setSelectedModule(\"\");\n                setSelectedTenant(\"\");\n            } else {\n                addDeploymentLog(`❌ Deployment failed: ${deploymentResult.error || 'Unknown error'}`);\n                addDeploymentLog(`💡 Check the error details above for troubleshooting`);\n\n                toast({\n                    title: \"❌ Deployment Failed\",\n                    description: deploymentResult.error || \"Unknown error occurred\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n            }\n\n            addDeploymentLog(`✅ Deployment process completed`);\n\n        } catch (error) {\n            addDeploymentLog(`💥 Deployment error occurred: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            addDeploymentLog(`❌ Deployment failed with exception`);\n\n            toast({\n                title: \"Deployment Error\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        } finally {\n            setIsDeploying(false);\n        }\n    };\n\n    if (tenantsLoading || modulesLoading) {\n        return (\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <Container maxW=\"container.xl\" py={12} flex=\"1\">\n                    <VStack spacing={8}>\n                        <Spinner size=\"xl\" />\n                        <Text>Loading deployment options...</Text>\n                    </VStack>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const selectedTenantData = tenants.find((t: any) => t.id === selectedTenant);\n    const selectedModuleData = modulesData?.availableModules?.find((m: any) => m.id === selectedModule);\n\n    return (\n        <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={tenantManagementModuleConfig} />\n            <Container maxW=\"container.lg\" py={12} flex=\"1\">\n                <VStack spacing={8} align=\"stretch\">\n                    {/* Header */}\n                    <HStack justify=\"space-between\">\n                        <VStack align=\"start\" spacing={2}>\n                            <HStack>\n                                <Button\n                                    variant=\"ghost\"\n                                    onClick={() => navigate(\"/tenants/deploy\")}\n                                    leftIcon={<ArrowBackIcon />}\n                                >\n                                    Back to Module Deployment\n                                </Button>\n                            </HStack>\n                            <Heading size=\"lg\" color={textPrimary}>⚡ Quick Deploy</Heading>\n                            <Text color={textMuted}>Deploy a specific module to a specific tenant quickly</Text>\n                        </VStack>\n                    </HStack>\n\n                    {/* Quick Deploy Form */}\n                    <Card bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n                        <CardHeader>\n                            <Heading size=\"md\" color={textPrimary}>Select Deployment Target</Heading>\n                        </CardHeader>\n                        <CardBody>\n                            <VStack spacing={6} align=\"stretch\">\n                                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>\n                                    <FormControl isRequired>\n                                        <FormLabel>Select Tenant</FormLabel>\n                                        <Select\n                                            placeholder=\"Choose a tenant\"\n                                            value={selectedTenant}\n                                            onChange={(e) => setSelectedTenant(e.target.value)}\n                                            size=\"lg\"\n                                        >\n                                            {tenants.map((tenant: any) => (\n                                                <option key={tenant.id} value={tenant.id}>\n                                                    {tenant.branding?.siteName || tenant.name} ({tenant.client?.fName} {tenant.client?.lName})\n                                                </option>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n\n                                    <FormControl isRequired>\n                                        <FormLabel>Select Module</FormLabel>\n                                        <Select\n                                            placeholder=\"Choose a module\"\n                                            value={selectedModule}\n                                            onChange={(e) => setSelectedModule(e.target.value)}\n                                            size=\"lg\"\n                                        >\n                                            {modulesData?.availableModules?.map((module: any) => (\n                                                <option key={module.id} value={module.id}>\n                                                    {module.icon} {module.name} (v{module.version})\n                                                </option>\n                                            ))}\n                                        </Select>\n                                    </FormControl>\n                                </SimpleGrid>\n\n                                {selectedTenant && selectedModule && (\n                                    <Alert status=\"info\" borderRadius=\"md\">\n                                        <AlertIcon />\n                                        <VStack align=\"start\" spacing={2} flex=\"1\">\n                                            <Text fontWeight=\"bold\">\n                                                📋 Deployment Preview\n                                            </Text>\n                                            <Text fontSize=\"sm\">\n                                                <strong>Module:</strong> {selectedModuleData?.name} (v{selectedModuleData?.version})\n                                            </Text>\n                                            <Text fontSize=\"sm\">\n                                                <strong>Target:</strong> {selectedTenantData?.branding?.siteName || selectedTenantData?.name}\n                                            </Text>\n                                            <Text fontSize=\"sm\">\n                                                <strong>Repository:</strong> {\n                                                    selectedTenantData?.githubRepo\n                                                        ? `${selectedTenantData?.githubOwner}/${selectedTenantData?.githubRepo}`\n                                                        : '⚠️ No repository configured - deployment will fail'\n                                                }\n                                            </Text>\n                                        </VStack>\n                                    </Alert>\n                                )}\n\n                                <Button\n                                    colorScheme=\"blue\"\n                                    size=\"lg\"\n                                    onClick={handleSingleTenantDeployment}\n                                    leftIcon={<RepeatIcon />}\n                                    isDisabled={!selectedTenant || !selectedModule || !selectedTenantData?.githubRepo}\n                                    width=\"full\"\n                                >\n                                    🚀 Deploy Now\n                                </Button>\n\n                                {selectedTenant && !selectedTenantData?.githubRepo && (\n                                    <Alert status=\"warning\" borderRadius=\"md\">\n                                        <AlertIcon />\n                                        <Text fontSize=\"sm\">\n                                            This tenant does not have a GitHub repository configured. Please set up a repository first.\n                                        </Text>\n                                    </Alert>\n                                )}\n                            </VStack>\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            {/* Deployment Progress Modal */}\n            <Modal isOpen={showDeploymentModal} onClose={() => setShowDeploymentModal(false)} size=\"xl\">\n                <ModalOverlay />\n                <ModalContent bg={cardGradientBg} color={textPrimary} borderColor={cardBorder} borderWidth=\"1px\">\n                    <ModalHeader color={textPrimary}>\n                        <HStack>\n                            <Text>🚀 Deploying to {currentDeploymentTenant}</Text>\n                            {isDeploying && <Spinner size=\"sm\" />}\n                        </HStack>\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <VStack spacing={4} align=\"stretch\">\n                            <Alert status={isDeploying ? \"info\" : \"success\"}>\n                                <AlertIcon />\n                                <Text>\n                                    {isDeploying\n                                        ? \"Deployment in progress... Please wait\"\n                                        : \"Deployment completed! Check the logs below for details.\"\n                                    }\n                                </Text>\n                            </Alert>\n\n                            <Box>\n                                <Text fontWeight=\"bold\" mb={2}>📋 Deployment Logs:</Text>\n                                <Box\n                                    bg=\"gray.900\"\n                                    color=\"green.300\"\n                                    p={4}\n                                    borderRadius=\"md\"\n                                    fontFamily=\"mono\"\n                                    fontSize=\"sm\"\n                                    maxHeight=\"400px\"\n                                    overflowY=\"auto\"\n                                    border=\"1px solid\"\n                                    borderColor=\"gray.600\"\n                                >\n                                    {deploymentLogs.length > 0 ? (\n                                        deploymentLogs.map((log, index) => (\n                                            <Box key={index} mb={1}>\n                                                {log}\n                                            </Box>\n                                        ))\n                                    ) : (\n                                        <Text color=\"gray.500\">No logs yet...</Text>\n                                    )}\n                                    {isDeploying && (\n                                        <Box>\n                                            <Text color=\"yellow.300\">⏳ Waiting for deployment to complete...</Text>\n                                        </Box>\n                                    )}\n                                </Box>\n                            </Box>\n\n                            {!isDeploying && (\n                                <Alert status=\"success\">\n                                    <AlertIcon />\n                                    <VStack align=\"start\" spacing={1}>\n                                        <Text fontWeight=\"bold\">Deployment Summary:</Text>\n                                        <Text fontSize=\"sm\">\n                                            • Module files have been copied to the target repository\n                                        </Text>\n                                        <Text fontSize=\"sm\">\n                                            • Repository has been updated with the latest changes\n                                        </Text>\n                                        <Text fontSize=\"sm\">\n                                            • You can now access the deployed module on the client site\n                                        </Text>\n                                    </VStack>\n                                </Alert>\n                            )}\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button\n                            variant=\"ghost\"\n                            mr={3}\n                            onClick={() => {\n                                navigator.clipboard.writeText(deploymentLogs.join('\\n'));\n                                toast({\n                                    title: \"Logs copied to clipboard\",\n                                    status: \"success\",\n                                    duration: 2000,\n                                });\n                            }}\n                        >\n                            📋 Copy Logs\n                        </Button>\n                        <Button\n                            colorScheme=\"blue\"\n                            onClick={() => setShowDeploymentModal(false)}\n                            isDisabled={isDeploying}\n                        >\n                            {isDeploying ? \"Please wait...\" : \"Close\"}\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default QuickDeploy;\n"],"names":["GET_TENANTS","gql","_templateObject","_taggedTemplateLiteral","GET_AVAILABLE_MODULES","_templateObject2","DEPLOY_MODULE_TO_TENANT","_templateObject3","ENABLE_MODULE_FOR_TENANT","_templateObject4","QuickDeploy","_modulesData$availabl3","_modulesData$availabl4","_selectedTenantData$b","usePageTitle","colorMode","useColorMode","navigate","useNavigate","toast","useToast","bg","getColor","cardGradientBg","cardBorder","textPrimary","textMuted","selectedModule","setSelectedModule","React","selectedTenant","setSelectedTenant","isDeploying","setIsDeploying","deploymentLogs","setDeploymentLogs","currentDeploymentTenant","setCurrentDeploymentTenant","showDeploymentModal","setShowDeploymentModal","data","tenantsData","loading","tenantsLoading","useQuery","modulesData","modulesLoading","deployModuleToTenant","useMutation","enableModuleForTenant","tenants","addDeploymentLog","message","timestamp","Date","toLocaleTimeString","logMessage","concat","prev","console","log","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","Container","maxW","py","flex","VStack","spacing","Spinner","size","Text","FooterWithFourColumns","selectedTenantData","find","t","id","selectedModuleData","availableModules","m","ModuleBreadcrumb","moduleConfig","tenantManagementModuleConfig","align","HStack","justify","Button","variant","onClick","leftIcon","ArrowBackIcon","Heading","color","Card","borderColor","borderWidth","CardHeader","CardBody","SimpleGrid","columns","base","md","FormControl","isRequired","FormLabel","Select","placeholder","value","onChange","e","target","map","tenant","_tenant$branding2","_tenant$client","_tenant$client2","branding","siteName","name","client","fName","lName","module","icon","version","Alert","status","borderRadius","AlertIcon","fontWeight","fontSize","githubRepo","githubOwner","colorScheme","async","_tenant$branding","title","description","duration","isClosable","tenantName","deploymentResult","variables","moduleId","tenantId","success","commitSha","_modulesData$availabl","_modulesData$availabl2","moduleVersion","enableError","Error","error","RepeatIcon","isDisabled","width","Modal","isOpen","onClose","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","mb","p","fontFamily","maxHeight","overflowY","border","length","index","ModalFooter","mr","navigator","clipboard","writeText","join"],"sourceRoot":""}