{"version":3,"file":"static/js/1138.fa363b56.chunk.js","mappings":"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","sources":["pages/emails/components/EmailComposer.tsx","pages/emails/new.tsx","pages/emails/markdownTemplates.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    VStack,\n    HStack,\n    FormControl,\n    FormLabel,\n    Input,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n    Button,\n    Textarea,\n    Text,\n    IconButton,\n    ButtonGroup,\n    Tooltip,\n    Divider,\n    useColorModeValue\n} from '@chakra-ui/react';\nimport {\n    FiBold,\n    FiItalic,\n    FiUnderline,\n    FiList,\n    FiLink,\n    FiCode,\n    FiAlignLeft,\n    FiAlignCenter,\n    FiAlignRight\n} from 'react-icons/fi';\nimport { useEditor, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Link from '@tiptap/extension-link';\nimport Underline from '@tiptap/extension-underline';\nimport TextAlign from '@tiptap/extension-text-align';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\ninterface EmailComposerProps {\n    subject: string;\n    onSubjectChange: (value: string) => void;\n    content: string;\n    onContentChange: (value: string) => void;\n    contentType?: 'html' | 'markdown';\n    placeholder?: string;\n    subjectPlaceholder?: string;\n    isReadOnly?: boolean;\n    onImprove?: () => void;\n    isImproving?: boolean;\n    showSubject?: boolean;\n}\n\nconst EmailComposer: React.FC<EmailComposerProps> = ({\n    subject,\n    onSubjectChange,\n    content,\n    onContentChange,\n    contentType = 'html',\n    subjectPlaceholder = 'Enter email subject',\n    isReadOnly = false,\n    onImprove,\n    isImproving = false,\n    showSubject = true\n}) => {\n    const [editorMode, setEditorMode] = useState<'visual' | 'source'>('visual');\n    const [sourceContent, setSourceContent] = useState(content);\n    const [activeTab, setActiveTab] = useState(0);\n\n    // Use proper color mode values\n    const bg = useColorModeValue('white', 'gray.800');\n    const inputBg = useColorModeValue('white', 'gray.700');\n    const cardBorder = useColorModeValue('gray.200', 'gray.600');\n    const textPrimary = useColorModeValue('gray.800', 'white');\n    const textSecondary = useColorModeValue('gray.600', 'gray.300');\n    const textMuted = useColorModeValue('gray.500', 'gray.400');\n    const cardGradientBg = useColorModeValue('gray.50', 'gray.700');\n    const hoverBorderColor = useColorModeValue('gray.300', 'gray.500');\n    const readOnlyBg = useColorModeValue('white', 'gray.700');\n    const readOnlyBorder = useColorModeValue('gray.200', 'gray.600');\n    const readOnlyColor = useColorModeValue('gray.800', 'white');\n    const primaryBlue = useColorModeValue('blue.500', 'blue.400');\n    const primaryBlueHover = useColorModeValue('blue.600', 'blue.500');\n    const overlayBg = useColorModeValue('gray.100', 'gray.700');\n\n    // Initialize TipTap editor\n    const editor = useEditor({\n        extensions: [\n            StarterKit,\n            Underline,\n            Link.configure({\n                openOnClick: false,\n                HTMLAttributes: {\n                    style: 'color: #3434ef; text-decoration: underline;'\n                },\n                // Add autolink functionality but with better cursor handling\n                autolink: true,\n                linkOnPaste: true,\n            }),\n            TextAlign.configure({\n                types: ['heading', 'paragraph'],\n            }),\n        ],\n        content: contentType === 'html' ? content : '',\n        onUpdate: ({ editor }) => {\n            if (editorMode === 'visual') {\n                const html = editor.getHTML();\n                onContentChange(html);\n                setSourceContent(html);\n            }\n        },\n        editable: !isReadOnly,\n        // Add event handler for paste to handle link pasting better\n        editorProps: {\n            handlePaste: (_view, event) => {\n                const text = event.clipboardData?.getData('text/plain');\n                // Check if the pasted text is a URL\n                if (text && /^https?:\\/\\//.test(text)) {\n                    // Let TipTap handle the paste normally\n                    // but add a small delay to move cursor after the link\n                    setTimeout(() => {\n                        if (editor) {\n                            // Insert a space after the link and move cursor there\n                            editor.chain()\n                                .focus()\n                                .insertContent(' ')\n                                .run();\n                        }\n                    }, 10);\n                }\n                return false; // Let TipTap handle the paste\n            }\n        }\n    });\n\n    // Update editor when content changes externally\n    useEffect(() => {\n        if (editor && content !== editor.getHTML() && editorMode === 'visual') {\n            editor.commands.setContent(content);\n        }\n    }, [content, editor, editorMode]);\n\n    // Handle source mode changes\n    const handleSourceChange = (value: string) => {\n        setSourceContent(value);\n        if (contentType === 'markdown') {\n            onContentChange(value);\n        } else {\n            // For HTML mode, update the content\n            onContentChange(value);\n            if (editor) {\n                editor.commands.setContent(value);\n            }\n        }\n    };\n\n    // Convert HTML to plain text for preview\n    const htmlToPlainText = (html: string) => {\n        const temp = document.createElement('div');\n        temp.innerHTML = html;\n        return temp.textContent || temp.innerText || '';\n    };\n\n    // Toolbar button component\n    const ToolbarButton: React.FC<{\n        icon: React.ReactElement;\n        onClick: () => void;\n        isActive?: boolean;\n        tooltip: string;\n    }> = ({ icon, onClick, isActive = false, tooltip }) => (\n        <Tooltip label={tooltip} placement=\"top\">\n            <IconButton\n                aria-label={tooltip}\n                icon={icon}\n                size=\"sm\"\n                variant={isActive ? \"solid\" : \"ghost\"}\n                bg={isActive ? primaryBlue : 'transparent'}\n                color={isActive ? 'white' : textSecondary}\n                _hover={{\n                    bg: isActive ? primaryBlueHover : overlayBg,\n                    color: isActive ? 'white' : textPrimary\n                }}\n                onClick={onClick}\n                isDisabled={isReadOnly}\n            />\n        </Tooltip>\n    );\n\n    const addLink = () => {\n        const url = window.prompt('Enter URL:');\n        if (url && editor) {\n            editor.chain().focus().setLink({ href: url }).run();\n        }\n    };\n\n    return (\n        <VStack align=\"stretch\" spacing={6}>\n            {showSubject && (\n                <FormControl>\n                    <FormLabel color={textPrimary}>Subject</FormLabel>\n                    <Input\n                        value={subject}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onSubjectChange(e.target.value)}\n                        placeholder={subjectPlaceholder}\n                        size=\"lg\"\n                        bg={inputBg}\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _placeholder={{ color: textMuted }}\n                        _hover={{ borderColor: hoverBorderColor }}\n                        _focus={{ borderColor: 'blue.500', boxShadow: '0 0 0 1px rgba(66, 153, 225, 0.6)' }}\n                        fontWeight=\"medium\"\n                        isReadOnly={isReadOnly}\n                    />\n                </FormControl>\n            )}\n\n            <FormControl>\n                <HStack justify=\"space-between\" mb={3}>\n                    <FormLabel color={textPrimary} mb={0}>Email Body</FormLabel>\n                    <HStack>\n                        {onImprove && (\n                            <Button\n                                size=\"sm\"\n                                leftIcon={<Text>✨</Text>}\n                                onClick={onImprove}\n                                isLoading={isImproving}\n                                loadingText=\"Improving...\"\n                                colorScheme=\"purple\"\n                                variant=\"outline\"\n                                _hover={{ bg: 'purple.50', borderColor: 'purple.500' }}\n                            >\n                                Improve with AI\n                            </Button>\n                        )}\n                        <ButtonGroup size=\"sm\" isAttached variant=\"outline\">\n                            <Tooltip \n                                label=\"Rich text editor with formatting toolbar - edit visually like a word processor\" \n                                placement=\"top\"\n                            >\n                                <Button\n                                    onClick={() => setEditorMode('visual')}\n                                    variant={editorMode === 'visual' ? 'solid' : 'outline'}\n                                    bg={editorMode === 'visual' ? primaryBlue : 'transparent'}\n                                    color={editorMode === 'visual' ? 'white' : textSecondary}\n                                    borderColor={cardBorder}\n                                >\n                                    Visual\n                                </Button>\n                            </Tooltip>\n                            <Tooltip \n                                label=\"Edit raw HTML code directly - for advanced users who want precise control\" \n                                placement=\"top\"\n                            >\n                                <Button\n                                    onClick={() => setEditorMode('source')}\n                                    variant={editorMode === 'source' ? 'solid' : 'outline'}\n                                    bg={editorMode === 'source' ? primaryBlue : 'transparent'}\n                                    color={editorMode === 'source' ? 'white' : textSecondary}\n                                    borderColor={cardBorder}\n                                >\n                                    Source\n                                </Button>\n                            </Tooltip>\n                        </ButtonGroup>\n                    </HStack>\n                </HStack>\n\n                <Tabs \n                    variant=\"soft-rounded\" \n                    colorScheme=\"blue\"\n                    index={activeTab}\n                    onChange={setActiveTab}\n                >\n                    <TabList bg={bg} p={2} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                        <Tooltip \n                            label={editorMode === 'visual' \n                                ? \"Write and format your email content here\" \n                                : \"Edit the raw HTML source code directly\"} \n                            placement=\"top\"\n                        >\n                            <Tab color={textMuted} _selected={{ bg: primaryBlue, color: \"white\" }}>\n                                {editorMode === 'visual' ? 'Compose' : 'Edit'}\n                            </Tab>\n                        </Tooltip>\n                        <Tooltip \n                            label=\"Preview how your email will look with all formatting applied\" \n                            placement=\"top\"\n                        >\n                            <Tab color={textMuted} _selected={{ bg: primaryBlue, color: \"white\" }}>\n                                HTML Preview\n                            </Tab>\n                        </Tooltip>\n                        <Tooltip \n                            label=\"See how your email appears in plain text for email clients that don't support HTML\" \n                            placement=\"top\"\n                        >\n                            <Tab color={textMuted} _selected={{ bg: primaryBlue, color: \"white\" }}>\n                                Plain Text\n                            </Tab>\n                        </Tooltip>\n                    </TabList>\n\n                    <TabPanels>\n                        <TabPanel px={0}>\n                            {editorMode === 'visual' ? (\n                                <Box>\n                                    {/* Toolbar */}\n                                    {!isReadOnly && (\n                                        <HStack\n                                            p={2}\n                                            mb={2}\n                                            bg={bg}\n                                            border=\"1px solid\"\n                                            borderColor={cardBorder}\n                                            borderRadius=\"md\"\n                                            spacing={1}\n                                        >\n                                            <ToolbarButton\n                                                icon={<FiBold />}\n                                                onClick={() => editor?.chain().focus().toggleBold().run()}\n                                                isActive={editor?.isActive('bold')}\n                                                tooltip=\"Bold\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiItalic />}\n                                                onClick={() => editor?.chain().focus().toggleItalic().run()}\n                                                isActive={editor?.isActive('italic')}\n                                                tooltip=\"Italic\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiUnderline />}\n                                                onClick={() => editor?.chain().focus().toggleUnderline().run()}\n                                                isActive={editor?.isActive('underline')}\n                                                tooltip=\"Underline\"\n                                            />\n                                            <Divider orientation=\"vertical\" h={6} borderColor={cardBorder} />\n                                            <ToolbarButton\n                                                icon={<FiList />}\n                                                onClick={() => editor?.chain().focus().toggleBulletList().run()}\n                                                isActive={editor?.isActive('bulletList')}\n                                                tooltip=\"Bullet List\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiLink />}\n                                                onClick={addLink}\n                                                isActive={editor?.isActive('link')}\n                                                tooltip=\"Add Link\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiCode />}\n                                                onClick={() => editor?.chain().focus().toggleCodeBlock().run()}\n                                                isActive={editor?.isActive('codeBlock')}\n                                                tooltip=\"Code Block\"\n                                            />\n                                            <Divider orientation=\"vertical\" h={6} borderColor={cardBorder} />\n                                            <ToolbarButton\n                                                icon={<FiAlignLeft />}\n                                                onClick={() => editor?.chain().focus().setTextAlign('left').run()}\n                                                isActive={editor?.isActive({ textAlign: 'left' })}\n                                                tooltip=\"Align Left\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiAlignCenter />}\n                                                onClick={() => editor?.chain().focus().setTextAlign('center').run()}\n                                                isActive={editor?.isActive({ textAlign: 'center' })}\n                                                tooltip=\"Align Center\"\n                                            />\n                                            <ToolbarButton\n                                                icon={<FiAlignRight />}\n                                                onClick={() => editor?.chain().focus().setTextAlign('right').run()}\n                                                isActive={editor?.isActive({ textAlign: 'right' })}\n                                                tooltip=\"Align Right\"\n                                            />\n                                        </HStack>\n                                    )}\n                                    \n                                    {/* Editor */}\n                                    <Box\n                                        bg={isReadOnly ? readOnlyBg : inputBg}\n                                        border=\"1px solid\"\n                                        borderColor={isReadOnly ? readOnlyBorder : cardBorder}\n                                        borderRadius=\"md\"\n                                        minH=\"400px\"\n                                        p={4}\n                                        sx={{\n                                            '.ProseMirror': {\n                                                minHeight: '380px',\n                                                outline: 'none',\n                                                color: isReadOnly ? readOnlyColor : textPrimary,\n                                                '& p': { marginBottom: '1em' },\n                                                '& h1, & h2, & h3': { \n                                                    fontWeight: 'bold', \n                                                    marginBottom: '0.5em',\n                                                    marginTop: '1em'\n                                                },\n                                                '& h1': { fontSize: '2em' },\n                                                '& h2': { fontSize: '1.5em' },\n                                                '& h3': { fontSize: '1.2em' },\n                                                '& ul, & ol': { \n                                                    paddingLeft: '2em',\n                                                    marginBottom: '1em'\n                                                },\n                                                '& li': { marginBottom: '0.5em' },\n                                                '& blockquote': {\n                                                    borderLeft: '3px solid',\n                                                    borderColor: cardBorder,\n                                                    paddingLeft: '1em',\n                                                    marginLeft: '0',\n                                                    fontStyle: 'italic',\n                                                    color: textSecondary\n                                                },\n                                                '& code': {\n                                                    backgroundColor: cardGradientBg,\n                                                    padding: '0.2em 0.4em',\n                                                    borderRadius: '3px',\n                                                    fontSize: '0.9em',\n                                                    fontFamily: 'monospace'\n                                                },\n                                                '& pre': {\n                                                    backgroundColor: cardGradientBg,\n                                                    padding: '1em',\n                                                    borderRadius: '5px',\n                                                    overflow: 'auto',\n                                                    marginBottom: '1em'\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <EditorContent editor={editor} />\n                                    </Box>\n                                </Box>\n                            ) : (\n                                <Textarea\n                                    value={sourceContent}\n                                    onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => handleSourceChange(e.target.value)}\n                                    placeholder={contentType === 'markdown'\n                                        ? \"Write in Markdown format...\"\n                                        : \"Edit HTML source...\"}\n                                    minHeight=\"450px\"\n                                    fontFamily=\"mono\"\n                                    fontSize=\"sm\"\n                                    bg={inputBg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _placeholder={{ color: textMuted }}\n                                    _hover={{ borderColor: hoverBorderColor }}\n                                    _focus={{ borderColor: 'blue.500', boxShadow: '0 0 0 1px rgba(66, 153, 225, 0.6)' }}\n                                    isReadOnly={isReadOnly}\n                                />\n                            )}\n                        </TabPanel>\n\n                        <TabPanel px={0}>\n                            <Box\n                                bg={bg}\n                                p={6}\n                                borderRadius=\"md\"\n                                minHeight=\"400px\"\n                                border=\"1px solid\"\n                                borderColor={cardBorder}\n                            >\n                                {contentType === 'markdown' ? (\n                                    <Box\n                                        sx={{\n                                            '& h1, & h2, & h3, & h4, & h5, & h6': { \n                                                fontWeight: 'bold', \n                                                marginBottom: '0.5em',\n                                                color: textPrimary\n                                            },\n                                            '& p': { \n                                                marginBottom: '1em', \n                                                color: textPrimary,\n                                                lineHeight: '1.6'\n                                            },\n                                            '& a': { \n                                                color: primaryBlue, \n                                                textDecoration: 'underline',\n                                                '&:hover': {\n                                                    color: primaryBlueHover\n                                                }\n                                            },\n                                            '& ul, & ol': { \n                                                paddingLeft: '2em', \n                                                marginBottom: '1em',\n                                                '& li': {\n                                                    color: textPrimary\n                                                }\n                                            },\n                                            '& li': { \n                                                marginBottom: '0.5em', \n                                                color: textPrimary \n                                            },\n                                            '& blockquote': {\n                                                borderLeft: '3px solid',\n                                                borderColor: cardBorder,\n                                                paddingLeft: '1em',\n                                                marginLeft: '0',\n                                                fontStyle: 'italic',\n                                                color: textSecondary\n                                            },\n                                            '& code': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '0.2em 0.4em',\n                                                borderRadius: '3px',\n                                                fontSize: '0.9em',\n                                                fontFamily: 'monospace',\n                                                color: primaryBlue\n                                            },\n                                            '& pre': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '1em',\n                                                borderRadius: '5px',\n                                                overflow: 'auto',\n                                                marginBottom: '1em',\n                                                '& code': {\n                                                    backgroundColor: 'transparent',\n                                                    padding: '0',\n                                                    color: textPrimary\n                                                }\n                                            },\n                                            '& strong': { \n                                                fontWeight: 'bold',\n                                                color: textPrimary\n                                            },\n                                            '& em': { \n                                                fontStyle: 'italic',\n                                                color: textPrimary\n                                            },\n                                            '& hr': {\n                                                border: 'none',\n                                                borderTop: '1px solid',\n                                                borderColor: cardBorder,\n                                                marginTop: '1em',\n                                                marginBottom: '1em'\n                                            },\n                                            '& table': {\n                                                width: '100%',\n                                                marginBottom: '1em',\n                                                borderCollapse: 'collapse',\n                                                '& th, & td': {\n                                                    padding: '0.5em',\n                                                    border: '1px solid',\n                                                    borderColor: cardBorder,\n                                                    color: textPrimary\n                                                },\n                                                '& th': {\n                                                    fontWeight: 'bold',\n                                                    backgroundColor: cardGradientBg\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                                            {sourceContent}\n                                        </ReactMarkdown>\n                                    </Box>\n                                ) : (\n                                    <Box\n                                        dangerouslySetInnerHTML={{ __html: sourceContent }}\n                                        sx={{\n                                            // Apply comprehensive HTML email styling\n                                            '& *': {\n                                                color: textPrimary // Default text color for all elements\n                                            },\n                                            '& h1, & h2, & h3, & h4, & h5, & h6': { \n                                                fontWeight: 'bold', \n                                                marginBottom: '0.5em',\n                                                marginTop: '0.5em',\n                                                color: textPrimary\n                                            },\n                                            '& h1': { fontSize: '2em' },\n                                            '& h2': { fontSize: '1.5em' },\n                                            '& h3': { fontSize: '1.2em' },\n                                            '& h4': { fontSize: '1em' },\n                                            '& p': { \n                                                marginBottom: '1em',\n                                                color: textPrimary,\n                                                lineHeight: '1.6'\n                                            },\n                                            '& a': { \n                                                color: primaryBlue, \n                                                textDecoration: 'underline',\n                                                '&:hover': {\n                                                    color: primaryBlueHover\n                                                }\n                                            },\n                                            '& ul, & ol': { \n                                                paddingLeft: '2em', \n                                                marginBottom: '1em',\n                                                '& li': {\n                                                    color: textPrimary,\n                                                    marginBottom: '0.5em'\n                                                }\n                                            },\n                                            '& blockquote': {\n                                                borderLeft: '3px solid',\n                                                borderColor: cardBorder,\n                                                paddingLeft: '1em',\n                                                marginLeft: '0',\n                                                fontStyle: 'italic',\n                                                color: textSecondary\n                                            },\n                                            '& code': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '0.2em 0.4em',\n                                                borderRadius: '3px',\n                                                fontSize: '0.9em',\n                                                fontFamily: 'monospace',\n                                                color: primaryBlue\n                                            },\n                                            '& pre': {\n                                                backgroundColor: cardGradientBg,\n                                                padding: '1em',\n                                                borderRadius: '5px',\n                                                overflow: 'auto',\n                                                marginBottom: '1em',\n                                                '& code': {\n                                                    backgroundColor: 'transparent',\n                                                    padding: '0',\n                                                    color: textPrimary\n                                                }\n                                            },\n                                            '& strong, & b': { \n                                                fontWeight: 'bold',\n                                                color: textPrimary\n                                            },\n                                            '& em, & i': { \n                                                fontStyle: 'italic',\n                                                color: textPrimary\n                                            },\n                                            '& u': {\n                                                textDecoration: 'underline',\n                                                color: textPrimary\n                                            },\n                                            '& hr': {\n                                                border: 'none',\n                                                borderTop: '1px solid',\n                                                borderColor: cardBorder,\n                                                marginTop: '1em',\n                                                marginBottom: '1em'\n                                            },\n                                            '& table': {\n                                                width: '100%',\n                                                marginBottom: '1em',\n                                                borderCollapse: 'collapse',\n                                                '& th, & td': {\n                                                    padding: '0.5em',\n                                                    border: '1px solid',\n                                                    borderColor: cardBorder,\n                                                    color: textPrimary\n                                                },\n                                                '& th': {\n                                                    fontWeight: 'bold',\n                                                    backgroundColor: cardGradientBg\n                                                }\n                                            },\n                                            '& img': {\n                                                maxWidth: '100%',\n                                                height: 'auto',\n                                                marginBottom: '1em'\n                                            },\n                                            // Common email client specific elements\n                                            '& span': {\n                                                color: 'inherit' // Let spans inherit parent color\n                                            },\n                                            '& div': {\n                                                color: textPrimary\n                                            }\n                                        }}\n                                    />\n                                )}\n                            </Box>\n                        </TabPanel>\n\n                        <TabPanel px={0}>\n                            <Box\n                                bg={bg}\n                                p={6}\n                                borderRadius=\"md\"\n                                minHeight=\"400px\"\n                                border=\"1px solid\"\n                                borderColor={cardBorder}\n                            >\n                                <Text\n                                    whiteSpace=\"pre-wrap\"\n                                    color={textSecondary}\n                                    fontFamily=\"system-ui, -apple-system, sans-serif\"\n                                    fontSize=\"14px\"\n                                    lineHeight=\"1.6\"\n                                >\n                                    {htmlToPlainText(sourceContent)}\n                                </Text>\n                            </Box>\n                        </TabPanel>\n                    </TabPanels>\n                </Tabs>\n            </FormControl>\n        </VStack>\n    );\n};\n\nexport default EmailComposer;","import React, { useState, useEffect, useRef } from 'react';\nimport {\n    Box,\n    Container,\n    Heading,\n    FormControl,\n    FormLabel,\n    Input,\n    Button,\n    VStack,\n    HStack,\n    Select,\n    useToast,\n    Text,\n    FormHelperText,\n    Divider,\n    Card,\n    CardBody,\n    CardHeader,\n    Stack,\n    IconButton,\n    Badge,\n    InputGroup,\n    InputRightElement,\n    List,\n    ListItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalCloseButton,\n    useDisclosure,\n    Checkbox,\n    CheckboxGroup,\n    useColorMode\n} from '@chakra-ui/react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { FiSend, FiSave, FiPaperclip, FiX, FiFile, FiUsers, FiSearch, FiDownload, FiUpload } from 'react-icons/fi';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport emailsModuleConfig from './moduleConfig';\nimport EmailComposer from \"./components/EmailComposer\";\nimport { EMAIL_TEMPLATE_CONTENT, downloadMarkdownFile } from './markdownTemplates';\nimport { marked } from 'marked';\n\nconst CREATE_EMAIL_MUTATION = gql`\n    mutation CreateEmail($input: EmailComposeInput!) {\n        createEmail(input: $input) {\n            id\n            subject\n            status\n            attachments {\n                name\n                contentType\n                contentLength\n            }\n        }\n    }\n`;\n\nconst SEND_EMAIL_MUTATION = gql`\n    mutation SendEmail($id: ID!) {\n        sendEmail(id: $id) {\n            id\n            status\n            sentAt\n        }\n    }\n`;\n\nconst EMAIL_SENDERS_QUERY = gql`\n    query GetEmailSenders {\n        emailSenders\n    }\n`;\n\nconst ADDRESS_BOOK_QUERY = gql`\n    query GetEmailAddresses($search: String) {\n        emailAddresses(search: $search) {\n            id\n            email\n            name\n            type\n            emailsSent\n            emailsReceived\n        }\n    }\n`;\n\nconst CLIENTS_QUERY = gql`\n    query GetClients {\n        clients {\n            id\n            fName\n            lName\n            email\n            businessName\n        }\n    }\n`;\n\nconst IMPROVE_EMAIL_MUTATION = gql`\n    mutation ImproveOutgoingEmail($emailContent: String!, $subject: String) {\n        improveOutgoingEmail(emailContent: $emailContent, subject: $subject)\n    }\n`;\n\nconst NewEmail: React.FC = () => {\n    usePageTitle(\"New Email\");\n    const navigate = useNavigate();\n    const location = useLocation();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    \n    // Consistent styling from brandConfig\n    const bg = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    const [subject, setSubject] = useState('');\n    const [from, setFrom] = useState('');\n    const [fromPreset, setFromPreset] = useState<string | null>(null); // Track if from was preset from reply data\n    const [to, setTo] = useState('');\n    const [cc, setCc] = useState('');\n    const [bcc, setBcc] = useState('');\n    const [replyTo, setReplyTo] = useState('');\n    const [bodyMarkdown, setBodyMarkdown] = useState('');\n    const [isSaving, setIsSaving] = useState(false);\n    const [isReply, setIsReply] = useState(false);\n    const [attachments, setAttachments] = useState<Array<{\n        name: string;\n        contentType: string;\n        content: string;\n        size: number;\n    }>>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const markdownFileInputRef = useRef<HTMLInputElement>(null);\n\n    // Address book states\n    const [searchTerm, setSearchTerm] = useState('');\n    const [modalSearchTerm, setModalSearchTerm] = useState('');\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const [selectedEmails, setSelectedEmails] = useState<string[]>([]);\n    const [currentField, setCurrentField] = useState<'to' | 'cc' | 'bcc'>('to');\n    const [isImproving, setIsImproving] = useState(false);\n    const [includeClients, setIncludeClients] = useState(false);\n    const { isOpen: isAddressBookOpen, onOpen: onAddressBookOpen, onClose: onAddressBookClose } = useDisclosure();\n\n    const { data: sendersData } = useQuery(EMAIL_SENDERS_QUERY);\n    \n    // Query for autocomplete suggestions\n    const { data: addressBookData } = useQuery(ADDRESS_BOOK_QUERY, {\n        variables: { search: searchTerm },\n        skip: !searchTerm || searchTerm.length < 2\n    });\n    \n    // Query for client emails\n    const { data: clientsData } = useQuery(CLIENTS_QUERY, {\n        skip: !searchTerm || searchTerm.length < 2\n    });\n    \n    // Query for modal - fetches all addresses or filtered by modal search\n    const { data: allAddressesData } = useQuery(ADDRESS_BOOK_QUERY, {\n        variables: { search: modalSearchTerm || undefined },\n        skip: !isAddressBookOpen\n    });\n    \n    // Query for all clients in modal\n    const { data: allClientsData } = useQuery(CLIENTS_QUERY, {\n        skip: !isAddressBookOpen || !includeClients\n    });\n\n    useEffect(() => {\n        // Check for location state first (for Reply All functionality)\n        if (location.state) {\n            const state = location.state as any;\n            if (state.to) setTo(state.to);\n            if (state.cc) setCc(state.cc);\n            if (state.subject) setSubject(state.subject);\n            if (state.replyTo) {\n                // Extract just the email address from \"Name <email>\" format\n                const emailMatch = state.replyTo.match(/<(.+?)>/) || state.replyTo.match(/([^\\s]+@[^\\s]+)/);\n                setReplyTo(emailMatch ? emailMatch[1] : state.replyTo);\n            }\n            if (state.bodyMarkdown) setBodyMarkdown(state.bodyMarkdown);\n            if (state.subject?.startsWith('Re:')) setIsReply(true);\n        } else {\n            // Parse query parameters for action type\n            const searchParams = new URLSearchParams(location.search);\n            const action = searchParams.get('action');\n            \n            if (action === 'forward') {\n                // Handle forwarding from sessionStorage\n                const forwardDataStr = sessionStorage.getItem('forwardEmail');\n                if (forwardDataStr) {\n                    const forwardData = JSON.parse(forwardDataStr);\n                    setSubject(forwardData.subject);\n                    setTo(''); // Leave empty for user to fill\n                    \n                    // Format date for the forward header\n                    const formattedDate = forwardData.date ? new Date(forwardData.date).toLocaleString() : 'Unknown date';\n                    \n                    // Use HTML body if available with proper formatting\n                    let originalContent = '';\n                    if (forwardData.htmlBody) {\n                        // For HTML content, preserve it in a cleaner format\n                        originalContent = `\\n\\n---------- Forwarded message ----------\\nFrom: ${forwardData.fromName}\\nDate: ${formattedDate}\\nSubject: ${forwardData.originalSubject}\\n\\n`;\n                        // Add the HTML content directly - it will be rendered properly\n                        originalContent += forwardData.htmlBody;\n                        setBodyMarkdown(originalContent);\n                    } else {\n                        // For plain text, use the standard format\n                        originalContent = forwardData.textBody || '';\n                        const forwardedMessage = `\\n\\n---------- Forwarded message ----------\\nFrom: ${forwardData.fromName}\\nDate: ${formattedDate}\\nSubject: ${forwardData.originalSubject}\\n\\n${originalContent}`;\n                        setBodyMarkdown(forwardedMessage);\n                    }\n                    \n                    // Clear the sessionStorage after use\n                    sessionStorage.removeItem('forwardEmail');\n                }\n            } else if (action === 'reply' || action === 'replyAll') {\n                // Handle reply from sessionStorage\n                const replyDataStr = sessionStorage.getItem('replyEmail');\n                if (replyDataStr) {\n                    const replyData = JSON.parse(replyDataStr);\n                    setIsReply(true);\n                    setTo(replyData.to);\n                    if (replyData.cc) setCc(replyData.cc);\n                    setSubject(replyData.subject);\n\n                    // Set the 'from' field to the original recipient email if available\n                    if (replyData.originalTo) {\n                        // Extract just the email address from formats like \"Tom Miller <tom@tommillerservices.com>\"\n                        const emailMatch = replyData.originalTo.match(/<(.+?)>/);\n                        if (emailMatch) {\n                            setFromPreset(emailMatch[1]);\n                        } else if (replyData.originalTo.includes('@')) {\n                            setFromPreset(replyData.originalTo);\n                        }\n                    }\n\n                    // Format date for the quote header\n                    const formattedDate = replyData.date ? new Date(replyData.date).toLocaleString() : 'Unknown date';\n\n                    // Create properly formatted quoted reply with HTML preservation\n                    let quotedMessage = '';\n\n                    if (replyData.htmlBody) {\n                        // For HTML emails, create a properly formatted blockquote\n                        quotedMessage = `\\n\\n<div style=\"border-left: 2px solid #ccc; margin-left: 0; padding-left: 10px; color: #666;\">\\n<p style=\"margin: 0 0 10px 0;\"><strong>On ${formattedDate}, ${replyData.fromName} wrote:</strong></p>\\n${replyData.htmlBody}\\n</div>`;\n                    } else if (replyData.textBody) {\n                        // For plain text emails, use traditional quote format\n                        const originalContent = replyData.textBody;\n                        quotedMessage = `\\n\\n---\\n\\nOn ${formattedDate}, ${replyData.fromName} wrote:\\n\\n${originalContent.split('\\n').map((line: string) => `> ${line}`).join('\\n')}`;\n                    } else {\n                        // Fallback if neither is available\n                        quotedMessage = `\\n\\n---\\n\\nOn ${formattedDate}, ${replyData.fromName} wrote:\\n\\n> [Original message content]`;\n                    }\n\n                    setBodyMarkdown(quotedMessage);\n\n                    // Clear the sessionStorage after use\n                    sessionStorage.removeItem('replyEmail');\n                }\n            } else if (searchParams.has('to')) {\n                // Handle direct email composition with pre-filled recipient\n                const toEmail = searchParams.get('to') || '';\n                setTo(toEmail);\n                const recipientName = searchParams.get('recipientName') || '';\n                // Optionally set a subject with the recipient name\n                if (recipientName) {\n                    setSubject(`Message for ${recipientName}`);\n                }\n            } else if (searchParams.has('replyTo')) {\n                // Fallback to URL params for backward compatibility\n                setIsReply(true);\n                \n                // Set recipient to the original sender\n                const replyToEmail = searchParams.get('replyTo') || '';\n                setTo(replyToEmail);\n                \n                // Set CC recipients for Reply to All\n                const replyCcEmail = searchParams.get('replyCc') || '';\n                if (replyCcEmail) {\n                    setCc(replyCcEmail);\n                }\n                \n                // Set subject with \"Re:\" prefix\n                const replySubject = searchParams.get('replySubject') || '';\n                setSubject(replySubject);\n                \n                // Format the reply body with quoted original message\n                const replyFromName = searchParams.get('replyFromName') || replyToEmail;\n                const replyDate = searchParams.get('replyDate') || '';\n                const replyBody = searchParams.get('replyBody') || '';\n                const replyHtmlBody = searchParams.get('replyHtmlBody') || '';\n                \n                // Use text body if available, otherwise try to extract text from HTML\n                const originalContent = replyBody || replyHtmlBody.replace(/<[^>]*>/g, '');\n                \n                // Format date for the quote header\n                const formattedDate = replyDate ? new Date(replyDate).toLocaleString() : 'Unknown date';\n                \n                // Create quoted reply format\n                const quotedMessage = `\\n\\n---\\n\\nOn ${formattedDate}, ${replyFromName} wrote:\\n\\n${originalContent.split('\\n').map((line: string) => `> ${line}`).join('\\n')}`;\n                \n                setBodyMarkdown(quotedMessage);\n            }\n        }\n    }, [location.search, location.state]);\n\n    useEffect(() => {\n        // Set the from field based on priority:\n        // 1. If we have a preset from reply data, use that if it exists in senders list\n        // 2. Otherwise use the first available sender\n        if (sendersData?.emailSenders?.length > 0) {\n            if (fromPreset) {\n                // Check if the preset email exists in the senders list\n                const matchingSender = sendersData.emailSenders.find((sender: string) => {\n                    // Handle both plain email and \"Name <email>\" format\n                    return sender === fromPreset || sender.includes(fromPreset);\n                });\n\n                if (matchingSender) {\n                    setFrom(matchingSender);\n                } else {\n                    // Fallback to first sender if preset doesn't match\n                    if (!from) {\n                        setFrom(sendersData.emailSenders[0]);\n                    }\n                }\n                // Clear the preset after using it\n                setFromPreset(null);\n            } else if (!from) {\n                // No preset and no current from, use first sender\n                setFrom(sendersData.emailSenders[0]);\n            }\n        }\n    }, [sendersData, fromPreset, from]);\n\n    // Address book handlers\n    const handleToChange = (value: string) => {\n        setTo(value);\n        setSearchTerm(value);\n        setShowSuggestions(value.length >= 2);\n    };\n\n    const selectEmail = (email: string) => {\n        setTo(email);\n        setShowSuggestions(false);\n        setSearchTerm('');\n    };\n\n    const openAddressBookFor = (field: 'to' | 'cc' | 'bcc') => {\n        setCurrentField(field);\n        onAddressBookOpen();\n    };\n\n    const handleAddressBookSelect = () => {\n        if (selectedEmails.length > 0) {\n            const emailsString = selectedEmails.join(', ');\n            if (currentField === 'to') {\n                setTo(emailsString);\n            } else if (currentField === 'cc') {\n                setCc(emailsString);\n            } else if (currentField === 'bcc') {\n                setBcc(emailsString);\n            }\n            setSelectedEmails([]);\n            setModalSearchTerm('');\n            onAddressBookClose();\n        }\n    };\n    \n    const handleAddressBookClose = () => {\n        setModalSearchTerm('');\n        setSelectedEmails([]);\n        setIncludeClients(false);\n        onAddressBookClose();\n    };\n\n    const handleImproveEmail = async () => {\n        if (!bodyMarkdown) {\n            toast({\n                title: 'No content to improve',\n                description: 'Please write some email content first',\n                status: 'warning',\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        setIsImproving(true);\n        try {\n            const result = await improveEmail({\n                variables: {\n                    emailContent: bodyMarkdown,\n                    subject: subject || undefined\n                }\n            });\n\n            if (result.data?.improveOutgoingEmail) {\n                setBodyMarkdown(result.data.improveOutgoingEmail);\n                toast({\n                    title: 'Email improved!',\n                    description: 'Your email has been enhanced with AI',\n                    status: 'success',\n                    duration: 3000,\n                    isClosable: true,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving email:', error);\n            toast({\n                title: 'Improvement failed',\n                description: 'Could not improve email. Please try again.',\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        } finally {\n            setIsImproving(false);\n        }\n    };\n\n    const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const files = event.target.files;\n        if (!files || files.length === 0) return;\n\n        const MAX_TOTAL_SIZE = 10 * 1024 * 1024; // 10MB total limit (Postmark limit)\n        const MAX_FILE_SIZE = 5 * 1024 * 1024;  // 5MB per file\n        let totalSize = attachments.reduce((acc, att) => acc + att.size, 0);\n        let successCount = 0;\n\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            \n            // Check individual file size\n            if (file.size > MAX_FILE_SIZE) {\n                toast({\n                    title: `File too large: ${file.name}`,\n                    description: `Maximum file size is 5MB`,\n                    status: 'error',\n                    duration: 3000,\n                    isClosable: true,\n                });\n                continue;\n            }\n\n            // Check total size\n            if (totalSize + file.size > MAX_TOTAL_SIZE) {\n                toast({\n                    title: 'Total attachment size exceeded',\n                    description: 'Maximum total size is 10MB',\n                    status: 'error',\n                    duration: 3000,\n                    isClosable: true,\n                });\n                break;\n            }\n\n            // Convert to base64\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                if (e.target?.result) {\n                    const base64 = (e.target.result as string).split(',')[1]; // Remove data URL prefix\n                    setAttachments(prev => [...prev, {\n                        name: file.name,\n                        contentType: file.type || 'application/octet-stream',\n                        content: base64,\n                        size: file.size\n                    }]);\n                    successCount++;\n                    \n                    // Show success toast for each file\n                    toast({\n                        title: `Attachment added`,\n                        description: `${file.name} has been attached successfully`,\n                        status: 'success',\n                        duration: 2000,\n                        isClosable: true,\n                    });\n                }\n            };\n            reader.readAsDataURL(file);\n            totalSize += file.size;\n        }\n\n        // Reset file input\n        if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    };\n\n    const removeAttachment = (index: number) => {\n        setAttachments(prev => prev.filter((_, i) => i !== index));\n    };\n\n    const formatFileSize = (bytes: number) => {\n        if (bytes < 1024) return bytes + ' B';\n        if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n        return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n    };\n\n    const handleDownloadTemplate = () => {\n        downloadMarkdownFile(EMAIL_TEMPLATE_CONTENT, 'email-template.md');\n        toast({\n            title: 'Template downloaded',\n            description: 'Edit the file and import it to populate your email',\n            status: 'success',\n            duration: 3000,\n            isClosable: true,\n        });\n    };\n\n    const parseEmailMetadata = (markdown: string): {\n        to?: string;\n        from?: string;\n        subject?: string;\n        cc?: string;\n        bcc?: string;\n        replyTo?: string;\n        body: string;\n    } => {\n        const lines = markdown.split('\\n');\n        const metadata: any = {};\n        let bodyStartIndex = 0;\n        let inMetadataSection = false;\n\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i].trim();\n\n            // Check if we're in the Email Metadata section\n            if (line === '## Email Metadata') {\n                inMetadataSection = true;\n                continue;\n            }\n\n            // End of metadata section\n            if (inMetadataSection && (line === '---' || line.startsWith('## '))) {\n                bodyStartIndex = i;\n                break;\n            }\n\n            // Parse metadata fields\n            if (inMetadataSection && line.startsWith('**')) {\n                const match = line.match(/\\*\\*(.+?):\\*\\*\\s*(.*)/);\n                if (match) {\n                    const key = match[1].toLowerCase().replace('-', '');\n                    const value = match[2].trim();\n                    if (value) {\n                        metadata[key] = value;\n                    }\n                }\n            }\n        }\n\n        // Get the body content after metadata\n        const bodyLines = lines.slice(bodyStartIndex);\n        // Remove the first separator line if it exists\n        if (bodyLines[0] && bodyLines[0].trim() === '---') {\n            bodyLines.shift();\n        }\n        // Skip empty lines at the start\n        while (bodyLines.length > 0 && !bodyLines[0].trim()) {\n            bodyLines.shift();\n        }\n        // Remove \"## Email Body\" header if it exists\n        if (bodyLines[0] && bodyLines[0].trim() === '## Email Body') {\n            bodyLines.shift();\n        }\n\n        const body = bodyLines.join('\\n').trim();\n\n        return {\n            to: metadata.to,\n            from: metadata.from,\n            subject: metadata.subject,\n            cc: metadata.cc,\n            bcc: metadata.bcc,\n            replyTo: metadata.replyto,\n            body\n        };\n    };\n\n    const handleMarkdownImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        // Validate file type\n        if (!file.name.endsWith('.md') && !file.name.endsWith('.markdown')) {\n            toast({\n                title: 'Invalid file type',\n                description: 'Please select a markdown file (.md or .markdown)',\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        try {\n            const text = await file.text();\n            const { to: toEmail, from: fromEmail, subject: emailSubject, cc: ccEmail, bcc: bccEmail, replyTo: replyToEmail, body } = parseEmailMetadata(text);\n\n            // Convert markdown body to HTML\n            const htmlBody = await marked(body, {\n                gfm: true,\n                breaks: true\n            });\n\n            // Populate form fields\n            if (toEmail) setTo(toEmail);\n            if (fromEmail && sendersData?.emailSenders?.includes(fromEmail)) {\n                setFrom(fromEmail);\n            }\n            if (emailSubject) setSubject(emailSubject);\n            if (ccEmail) setCc(ccEmail);\n            if (bccEmail) setBcc(bccEmail);\n            if (replyToEmail) setReplyTo(replyToEmail);\n            if (htmlBody) setBodyMarkdown(htmlBody);\n\n            toast({\n                title: 'Markdown imported successfully',\n                description: 'Email fields have been populated from the markdown file',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n        } catch (error) {\n            console.error('Error importing markdown:', error);\n            toast({\n                title: 'Import failed',\n                description: 'Could not parse markdown file. Please check the format.',\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n\n        // Reset file input\n        if (markdownFileInputRef.current) {\n            markdownFileInputRef.current.value = '';\n        }\n    };\n\n    const [improveEmail] = useMutation(IMPROVE_EMAIL_MUTATION);\n    const [createEmail] = useMutation(CREATE_EMAIL_MUTATION, {\n        onCompleted: (data) => {\n            toast({\n                title: 'Email saved as draft',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            \n            if (isSaving) {\n                navigate(`/email/${data.createEmail.id}`);\n            }\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error saving email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [sendEmail] = useMutation(SEND_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email sent successfully',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            navigate('/emails');\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error sending email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const handleSaveDraft = async () => {\n        if (!subject || !to || !bodyMarkdown) {\n            toast({\n                title: 'Missing required fields',\n                description: 'Please fill in subject, to, and body',\n                status: 'warning',\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n\n        setIsSaving(true);\n        await createEmail({\n            variables: {\n                input: {\n                    subject,\n                    from: from || undefined,\n                    to,\n                    cc: cc && cc.trim() !== '' ? cc : undefined,\n                    bcc: bcc && bcc.trim() !== '' ? bcc : undefined,\n                    replyTo: replyTo && replyTo.trim() !== '' ? replyTo : undefined,\n                    bodyMarkdown,\n                    attachments: attachments.map(att => ({\n                        name: att.name,\n                        contentType: att.contentType,\n                        content: att.content\n                    }))\n                }\n            }\n        });\n    };\n\n    const handleSendNow = async () => {\n        if (!subject || !to || !bodyMarkdown) {\n            toast({\n                title: 'Missing required fields',\n                description: 'Please fill in subject, to, and body',\n                status: 'warning',\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        console.log('📧 [FRONTEND] Sending email with:');\n        console.log('📧 [FRONTEND] - From:', from || 'NOT PROVIDED');\n        console.log('📧 [FRONTEND] - To:', to);\n        console.log('📧 [FRONTEND] - Subject:', subject);\n\n        setIsSaving(false);\n        const result = await createEmail({\n            variables: {\n                input: {\n                    subject,\n                    from: from || undefined,\n                    to,\n                    cc: cc && cc.trim() !== '' ? cc : undefined,\n                    bcc: bcc && bcc.trim() !== '' ? bcc : undefined,\n                    replyTo: replyTo && replyTo.trim() !== '' ? replyTo : undefined,\n                    bodyMarkdown,\n                    attachments: attachments.map(att => ({\n                        name: att.name,\n                        contentType: att.contentType,\n                        content: att.content\n                    }))\n                }\n            }\n        });\n\n        if (result.data?.createEmail?.id) {\n            await sendEmail({\n                variables: {\n                    id: result.data.createEmail.id\n                }\n            });\n        }\n    };\n\n    return (\n        <Box minH=\"100vh\" bg={bg} overflowX=\"hidden\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n            \n            <Container maxW={{ base: \"100%\", md: \"container.md\", lg: \"container.xl\" }} py={{ base: 4, md: 8 }} px={{ base: 3, md: 8 }}>\n                <VStack spacing={{ base: 4, md: 8 }} align=\"stretch\">\n                    <Stack direction={{ base: \"column\", lg: \"row\" }} justify=\"space-between\" spacing={{ base: 4, lg: 0 }}>\n                        <VStack align=\"start\" spacing={1}>\n                            <Heading size={{ base: \"lg\", md: \"xl\", lg: \"2xl\" }} color={textPrimary}>\n                                {isReply ? 'Reply to Email' : 'Compose Email'}\n                            </Heading>\n                            <Text color={textMuted} fontSize={{ base: \"sm\", md: \"md\" }}>\n                                {isReply ? 'Compose your reply with quoted message' : 'Create and send branded emails with markdown support'}\n                            </Text>\n                        </VStack>\n                        <Stack direction={{ base: \"column\", sm: \"row\" }} spacing={{ base: 2, sm: 3 }} width={{ base: \"100%\", lg: \"auto\" }}>\n                            <Button\n                                variant=\"outline\"\n                                onClick={() => navigate('/emails')}\n                                borderColor={cardBorder}\n                                color={textSecondary}\n                                size={{ base: \"sm\", md: \"md\" }}\n                                width={{ base: \"100%\", sm: \"auto\" }}\n                            >\n                                Cancel\n                            </Button>\n                            {sendersData?.emailSenders?.length > 0 && (\n                                <>\n                                    <Button\n                                        leftIcon={<FiSave />}\n                                        onClick={handleSaveDraft}\n                                        variant=\"outline\"\n                                        borderColor={getColor('primaryBlue')}\n                                        color={getColor('primaryBlue')}\n                                        _hover={{ bg: getColor('components.button.secondaryBg') }}\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                        width={{ base: \"100%\", sm: \"auto\" }}\n                                    >\n                                        Save Draft\n                                    </Button>\n                                    <Button\n                                        leftIcon={<FiSend />}\n                                        colorScheme=\"blue\"\n                                        onClick={handleSendNow}\n                                        bg={getColor('primaryBlue')}\n                                        _hover={{ bg: getColor('primaryBlueHover') }}\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                        width={{ base: \"100%\", sm: \"auto\" }}\n                                    >\n                                        Send Now\n                                    </Button>\n                                </>\n                            )}\n                        </Stack>\n                    </Stack>\n\n                    <Card \n                        bg={cardGradientBg} \n                        border=\"1px solid\" \n                        borderColor={cardBorder}\n                        borderRadius=\"xl\"\n                        overflow=\"hidden\"\n                    >\n                        <CardHeader p={{ base: 4, md: 6 }}>\n                            <Heading size={{ base: \"md\", md: \"lg\" }} color={textPrimary}>\n                                Email Details\n                            </Heading>\n                        </CardHeader>\n                        <CardBody p={{ base: 4, md: 6 }}>\n                            {sendersData?.emailSenders?.length === 0 ? (\n                                <Box\n                                    p={8}\n                                    textAlign=\"center\"\n                                    bg=\"red.900\"\n                                    borderRadius=\"lg\"\n                                    border=\"1px solid\"\n                                    borderColor=\"red.600\"\n                                >\n                                    <Text fontSize=\"lg\" color=\"red.200\" mb={2}>\n                                        ⚠️ No Email Address Assigned\n                                    </Text>\n                                    <Text color=\"red.300\" mb={4}>\n                                        You don't have any email addresses assigned to your account.\n                                    </Text>\n                                    <Text color=\"red.400\" fontSize=\"sm\">\n                                        Please contact your system administrator to have an email address assigned to you before you can send emails.\n                                    </Text>\n                                    <Button\n                                        mt={6}\n                                        onClick={() => navigate('/emails')}\n                                        variant=\"outline\"\n                                        borderColor=\"red.400\"\n                                        color=\"red.400\"\n                                        _hover={{ bg: \"red.900\" }}\n                                    >\n                                        Back to Inbox\n                                    </Button>\n                                </Box>\n                            ) : (\n                                <Stack spacing={{ base: 4, md: 6 }}>\n                                <FormControl isRequired>\n                                    <FormLabel color={textPrimary}>From</FormLabel>\n                                    <Select\n                                        value={from}\n                                        onChange={(e) => setFrom(e.target.value)}\n                                        placeholder=\"Select sender\"\n                                        bg={bg}\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _placeholder={{ color: textMuted }}\n                                    >\n                                        {sendersData?.emailSenders?.map((sender: string) => (\n                                            <option key={sender} value={sender}>\n                                                {sender}\n                                            </option>\n                                        ))}\n                                    </Select>\n                                    <FormHelperText color={textMuted}>\n                                        Select the sender email address\n                                    </FormHelperText>\n                                </FormControl>\n\n                                <FormControl isRequired>\n                                    <FormLabel color={textPrimary}>To</FormLabel>\n                                    <InputGroup>\n                                        <Input\n                                            type=\"email\"\n                                            value={to}\n                                            onChange={(e) => handleToChange(e.target.value)}\n                                            placeholder=\"recipient@example.com or multiple emails separated by commas\"\n                                            bg={bg}\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            _placeholder={{ color: textMuted }}\n                                            onFocus={() => to.length >= 2 && setShowSuggestions(true)}\n                                            onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n                                        />\n                                        <InputRightElement>\n                                            <IconButton\n                                                aria-label=\"Open address book\"\n                                                icon={<FiUsers />}\n                                                size=\"sm\"\n                                                variant=\"ghost\"\n                                                color={textSecondary}\n                                                onClick={() => openAddressBookFor('to')}\n                                                _hover={{ color: getColor('primaryBlue') }}\n                                            />\n                                        </InputRightElement>\n                                    </InputGroup>\n                                    {showSuggestions && ((addressBookData?.emailAddresses && addressBookData.emailAddresses.length > 0) || \n                                                        (clientsData?.clients && clientsData.clients.length > 0)) && (\n                                        <Box \n                                            position=\"absolute\" \n                                            zIndex={10} \n                                            w=\"full\" \n                                            mt={1} \n                                            bg={cardGradientBg} \n                                            border=\"1px solid\" \n                                            borderColor={cardBorder}\n                                            borderRadius=\"md\"\n                                            boxShadow=\"lg\"\n                                            maxH=\"300px\"\n                                            overflowY=\"auto\"\n                                        >\n                                            <List p={2}>\n                                                {/* Email Addresses Section */}\n                                                {addressBookData?.emailAddresses && addressBookData.emailAddresses.length > 0 && (\n                                                    <>\n                                                        <Text fontSize=\"xs\" color={textMuted} px={2} py={1} fontWeight=\"bold\">\n                                                            EMAIL ADDRESSES\n                                                        </Text>\n                                                        {addressBookData.emailAddresses.map((address: any) => (\n                                                            <ListItem\n                                                                key={`addr-${address.id}`}\n                                                                p={2}\n                                                                cursor=\"pointer\"\n                                                                _hover={{ bg: getColor('background.overlay') }}\n                                                        borderRadius=\"md\"\n                                                        onClick={() => selectEmail(address.email)}\n                                                    >\n                                                        <HStack justify=\"space-between\">\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                <Text fontSize=\"sm\" color={textPrimary}>\n                                                                    {address.name || address.email}\n                                                                </Text>\n                                                                {address.name && (\n                                                                    <Text fontSize=\"xs\" color={textMuted}>\n                                                                        {address.email}\n                                                                    </Text>\n                                                                )}\n                                                            </VStack>\n                                                            <Badge \n                                                                colorScheme={\n                                                                    address.type === 'PERSONAL' ? 'blue' :\n                                                                    address.type === 'BUSINESS' ? 'green' :\n                                                                    'gray'\n                                                                }\n                                                                size=\"sm\"\n                                                            >\n                                                                {address.type}\n                                                            </Badge>\n                                                        </HStack>\n                                                    </ListItem>\n                                                        ))}\n                                                    </>\n                                                )}\n                                                \n                                                {/* Clients Section */}\n                                                {clientsData?.clients && clientsData.clients.length > 0 && (\n                                                    <>\n                                                        {addressBookData?.emailAddresses?.length > 0 && <Divider my={2} borderColor={cardBorder} />}\n                                                        <Text fontSize=\"xs\" color={textMuted} px={2} py={1} fontWeight=\"bold\">\n                                                            CLIENTS\n                                                        </Text>\n                                                        {clientsData.clients\n                                                            .filter((client: any) => client.email)\n                                                            .filter((client: any) => {\n                                                                const searchLower = searchTerm.toLowerCase();\n                                                                return client.email.toLowerCase().includes(searchLower) ||\n                                                                       `${client.fName} ${client.lName}`.toLowerCase().includes(searchLower) ||\n                                                                       (client.businessName && client.businessName.toLowerCase().includes(searchLower));\n                                                            })\n                                                            .map((client: any) => (\n                                                            <ListItem\n                                                                key={`client-${client.id}`}\n                                                                p={2}\n                                                                cursor=\"pointer\"\n                                                                _hover={{ bg: getColor('background.overlay') }}\n                                                                borderRadius=\"md\"\n                                                                onClick={() => selectEmail(client.email)}\n                                                            >\n                                                                <HStack justify=\"space-between\">\n                                                                    <VStack align=\"start\" spacing={0}>\n                                                                        <Text fontSize=\"sm\" color={textPrimary}>\n                                                                            {`${client.fName} ${client.lName}`}\n                                                                        </Text>\n                                                                        <Text fontSize=\"xs\" color={textMuted}>\n                                                                            {client.email}\n                                                                        </Text>\n                                                                        {client.businessName && (\n                                                                            <Text fontSize=\"xs\" color={textMuted}>\n                                                                                {client.businessName}\n                                                                            </Text>\n                                                                        )}\n                                                                    </VStack>\n                                                                    <Badge colorScheme=\"purple\" size=\"sm\">\n                                                                        CLIENT\n                                                                    </Badge>\n                                                                </HStack>\n                                                            </ListItem>\n                                                        ))}\n                                                    </>\n                                                )}\n                                            </List>\n                                        </Box>\n                                    )}\n                                    <FormHelperText color={textMuted}>\n                                        Separate multiple email addresses with commas\n                                    </FormHelperText>\n                                </FormControl>\n\n                                <Stack direction={{ base: \"column\", md: \"row\" }} spacing={{ base: 3, md: 4 }}>\n                                    <FormControl flex={1}>\n                                        <FormLabel color={textPrimary}>CC</FormLabel>\n                                        <InputGroup>\n                                            <Input\n                                                type=\"email\"\n                                                value={cc}\n                                                onChange={(e) => setCc(e.target.value)}\n                                                placeholder=\"Optional: Add CC recipients\"\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                                _placeholder={{ color: textMuted }}\n                                            />\n                                            <InputRightElement>\n                                                <IconButton\n                                                    aria-label=\"Open address book for CC\"\n                                                    icon={<FiUsers />}\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    color={textSecondary}\n                                                    onClick={() => openAddressBookFor('cc')}\n                                                    _hover={{ color: getColor('primaryBlue') }}\n                                                />\n                                            </InputRightElement>\n                                        </InputGroup>\n                                    </FormControl>\n\n                                    <FormControl flex={1}>\n                                        <FormLabel color={textPrimary}>BCC</FormLabel>\n                                        <InputGroup>\n                                            <Input\n                                                type=\"email\"\n                                                value={bcc}\n                                                onChange={(e) => setBcc(e.target.value)}\n                                                placeholder=\"Optional: Add BCC recipients\"\n                                                bg={bg}\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                                _placeholder={{ color: textMuted }}\n                                            />\n                                            <InputRightElement>\n                                                <IconButton\n                                                    aria-label=\"Open address book for BCC\"\n                                                    icon={<FiUsers />}\n                                                    size=\"sm\"\n                                                    variant=\"ghost\"\n                                                    color={textSecondary}\n                                                    onClick={() => openAddressBookFor('bcc')}\n                                                    _hover={{ color: getColor('primaryBlue') }}\n                                                />\n                                            </InputRightElement>\n                                        </InputGroup>\n                                    </FormControl>\n                                </Stack>\n\n                                <FormControl>\n                                    <FormLabel color={textPrimary}>Reply To</FormLabel>\n                                        <Input\n                                        type=\"email\"\n                                        value={replyTo}\n                                        onChange={(e) => setReplyTo(e.target.value)}\n                                        placeholder=\"Optional: Different reply address\"\n                                        bg={bg}\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _placeholder={{ color: textMuted }}\n                                    />\n                                    <FormHelperText color={textMuted}>\n                                        Leave blank to use the sender address\n                                    </FormHelperText>\n                                </FormControl>\n\n                                <FormControl>\n                                    <FormLabel color={textPrimary}>\n                                        <HStack>\n                                            <Text>Attachments & Import</Text>\n                                            {attachments.length > 0 && (\n                                                <Badge colorScheme=\"blue\">{attachments.length}</Badge>\n                                            )}\n                                        </HStack>\n                                    </FormLabel>\n\n                                    <VStack align=\"stretch\" spacing={3}>\n                                        {/* Hidden file inputs */}\n                                        <input\n                                            ref={fileInputRef}\n                                            type=\"file\"\n                                            multiple\n                                            style={{ display: 'none' }}\n                                            onChange={handleFileSelect}\n                                            accept=\"*/*\"\n                                        />\n                                        <input\n                                            ref={markdownFileInputRef}\n                                            type=\"file\"\n                                            accept=\".md,.markdown\"\n                                            style={{ display: 'none' }}\n                                            onChange={handleMarkdownImport}\n                                        />\n\n                                        {/* Action buttons */}\n                                        <HStack spacing={2} wrap=\"wrap\">\n                                            <Button\n                                                leftIcon={<FiPaperclip />}\n                                                onClick={() => fileInputRef.current?.click()}\n                                                variant=\"outline\"\n                                                borderColor={cardBorder}\n                                                color={textSecondary}\n                                                _hover={{ borderColor: getColor('primaryBlue'), color: getColor('primaryBlue') }}\n                                                size=\"sm\"\n                                            >\n                                                Add Attachment\n                                            </Button>\n                                            <Button\n                                                leftIcon={<FiUpload />}\n                                                onClick={() => markdownFileInputRef.current?.click()}\n                                                variant=\"outline\"\n                                                borderColor={cardBorder}\n                                                color={textSecondary}\n                                                _hover={{ borderColor: getColor('primaryBlue'), color: getColor('primaryBlue') }}\n                                                size=\"sm\"\n                                            >\n                                                Import Markdown\n                                            </Button>\n                                            <Button\n                                                leftIcon={<FiDownload />}\n                                                onClick={handleDownloadTemplate}\n                                                variant=\"outline\"\n                                                borderColor={cardBorder}\n                                                color={textSecondary}\n                                                _hover={{ borderColor: getColor('primaryBlue'), color: getColor('primaryBlue') }}\n                                                size=\"sm\"\n                                            >\n                                                Download Template\n                                            </Button>\n                                        </HStack>\n                                        \n                                        {/* Attachment list */}\n                                        {attachments.length > 0 && (\n                                            <VStack align=\"stretch\" spacing={2}>\n                                                {attachments.map((attachment, index) => (\n                                                    <HStack\n                                                        key={index}\n                                                        p={2}\n                                                        bg={bg}\n                                                        borderRadius=\"md\"\n                                                        border=\"1px solid\"\n                                                        borderColor={cardBorder}\n                                                        justify=\"space-between\"\n                                                    >\n                                                        <HStack flex={1}>\n                                                            <Box color=\"green.500\">\n                                                                <FiFile size=\"20px\" />\n                                                            </Box>\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                <Text fontSize=\"sm\" color={textPrimary} fontWeight=\"medium\">\n                                                                    {attachment.name}\n                                                                </Text>\n                                                                <HStack spacing={2}>\n                                                                    <Badge colorScheme=\"green\" fontSize=\"xs\">\n                                                                        Attached\n                                                                    </Badge>\n                                                                    <Text fontSize=\"xs\" color={textMuted}>\n                                                                        {formatFileSize(attachment.size)}\n                                                                    </Text>\n                                                                </HStack>\n                                                            </VStack>\n                                                        </HStack>\n                                                        <IconButton\n                                                            aria-label=\"Remove attachment\"\n                                                            icon={<FiX />}\n                                                            size=\"sm\"\n                                                            variant=\"ghost\"\n                                                            color=\"red.500\"\n                                                            onClick={() => removeAttachment(index)}\n                                                        />\n                                                    </HStack>\n                                                ))}\n                                            </VStack>\n                                        )}\n\n                                        <FormHelperText color={textMuted}>\n                                            Attachments: 5MB per file, 10MB total. Import markdown files to auto-populate email fields and convert to HTML.\n                                        </FormHelperText>\n                                    </VStack>\n                                </FormControl>\n\n                                <Divider borderColor={cardBorder} />\n\n                                <Divider borderColor={cardBorder} />\n\n                                <EmailComposer\n                                    subject={subject}\n                                    onSubjectChange={setSubject}\n                                    content={bodyMarkdown}\n                                    onContentChange={setBodyMarkdown}\n                                    contentType=\"html\"\n                                    placeholder=\"Write your email content...\"\n                                    subjectPlaceholder=\"Enter email subject\"\n                                    onImprove={handleImproveEmail}\n                                    isImproving={isImproving}\n                                    showSubject={true}\n                                />\n                                </Stack>\n                            )}\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            {/* Address Book Modal */}\n            <Modal isOpen={isAddressBookOpen} onClose={handleAddressBookClose} size={{ base: \"full\", md: \"xl\" }}>\n                <ModalOverlay />\n                <ModalContent bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                    <ModalHeader color={textPrimary}>\n                        Select Recipients for {currentField.toUpperCase()} from Address Book\n                    </ModalHeader>\n                    <ModalCloseButton color={textSecondary} />\n                    <ModalBody pb={6}>\n                        <VStack align=\"stretch\" spacing={4}>\n                            <InputGroup>\n                                <Input\n                                    placeholder=\"Search address book...\"\n                                    bg={bg}\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                    _placeholder={{ color: textMuted }}\n                                    value={modalSearchTerm}\n                                    onChange={(e) => setModalSearchTerm(e.target.value)}\n                                />\n                                <InputRightElement>\n                                    <FiSearch color={textMuted} />\n                                </InputRightElement>\n                            </InputGroup>\n                            \n                            <Text fontSize=\"sm\" color={textMuted}>\n                                {allAddressesData?.emailAddresses?.length || 0} contacts in address book\n                                {includeClients && allClientsData?.clients && (\n                                    <>, {allClientsData.clients.filter((c: any) => c.email).length} clients</>\n                                )}\n                            </Text>\n                            \n                            <CheckboxGroup value={selectedEmails} onChange={(values) => setSelectedEmails(values as string[])}>\n                                <VStack align=\"stretch\" spacing={2} maxH={{ base: \"300px\", md: \"400px\" }} overflowY=\"auto\">\n                                    {allAddressesData?.emailAddresses?.map((address: any) => (\n                                        <Box\n                                            key={address.id}\n                                            p={3}\n                                            border=\"1px solid\"\n                                            borderColor={cardBorder}\n                                            borderRadius=\"md\"\n                                            _hover={{ bg: getColor('background.overlay') }}\n                                        >\n                                            <Checkbox value={address.email} colorScheme=\"blue\">\n                                                <HStack spacing={3} ml={2}>\n                                                    <VStack align=\"start\" spacing={0}>\n                                                        <Text fontSize=\"sm\" color={textPrimary}>\n                                                            {address.name || address.email}\n                                                        </Text>\n                                                        {address.name && (\n                                                            <Text fontSize=\"xs\" color={textMuted}>\n                                                                {address.email}\n                                                            </Text>\n                                                        )}\n                                                    </VStack>\n                                                </HStack>\n                                            </Checkbox>\n                                        </Box>\n                                    ))}\n                                    \n                                    {/* Client emails when checkbox is checked */}\n                                    {includeClients && allClientsData?.clients\n                                        ?.filter((client: any) => client.email)\n                                        .filter((client: any) => {\n                                            if (!modalSearchTerm) return true;\n                                            const searchLower = modalSearchTerm.toLowerCase();\n                                            return client.email.toLowerCase().includes(searchLower) ||\n                                                   `${client.fName} ${client.lName}`.toLowerCase().includes(searchLower) ||\n                                                   (client.businessName && client.businessName.toLowerCase().includes(searchLower));\n                                        })\n                                        .map((client: any) => (\n                                        <Box\n                                            key={`client-${client.id}`}\n                                            p={3}\n                                            border=\"1px solid\"\n                                            borderColor={cardBorder}\n                                            borderRadius=\"md\"\n                                            _hover={{ bg: getColor('background.overlay') }}\n                                        >\n                                            <Checkbox value={client.email} colorScheme=\"blue\">\n                                                <HStack spacing={3} ml={2}>\n                                                    <VStack align=\"start\" spacing={0}>\n                                                        <HStack spacing={2}>\n                                                            <Text fontSize=\"sm\" color={textPrimary}>\n                                                                {`${client.fName} ${client.lName}`}\n                                                            </Text>\n                                                            <Badge colorScheme=\"purple\" size=\"sm\">\n                                                                CLIENT\n                                                            </Badge>\n                                                        </HStack>\n                                                        <Text fontSize=\"xs\" color={textMuted}>\n                                                            {client.email}\n                                                        </Text>\n                                                        {client.businessName && (\n                                                            <Text fontSize=\"xs\" color={textMuted}>\n                                                                {client.businessName}\n                                                            </Text>\n                                                        )}\n                                                    </VStack>\n                                                </HStack>\n                                            </Checkbox>\n                                        </Box>\n                                    ))}\n                                </VStack>\n                            </CheckboxGroup>\n                            \n                            {/* Include Clients Checkbox */}\n                            <Checkbox \n                                isChecked={includeClients}\n                                onChange={(e) => setIncludeClients(e.target.checked)}\n                                colorScheme=\"purple\"\n                            >\n                                Include Clients\n                            </Checkbox>\n                            \n                            <Stack direction={{ base: \"column\", sm: \"row\" }} justify=\"space-between\" spacing={{ base: 3, sm: 0 }}>\n                                <Text fontSize=\"sm\" color={textMuted} textAlign={{ base: \"center\", sm: \"left\" }}>\n                                    {selectedEmails.length} recipient(s) selected\n                                </Text>\n                                <Stack direction={{ base: \"column-reverse\", sm: \"row\" }} spacing={{ base: 2, sm: 3 }} width={{ base: \"100%\", sm: \"auto\" }}>\n                                    <Button \n                                        variant=\"outline\" \n                                        onClick={handleAddressBookClose} \n                                        borderColor={cardBorder}\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                        width={{ base: \"100%\", sm: \"auto\" }}\n                                    >\n                                        Cancel\n                                    </Button>\n                                    <Button \n                                        colorScheme=\"blue\" \n                                        onClick={handleAddressBookSelect}\n                                        isDisabled={selectedEmails.length === 0}\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                        width={{ base: \"100%\", sm: \"auto\" }}\n                                    >\n                                        Add Recipients\n                                    </Button>\n                                </Stack>\n                            </Stack>\n                        </VStack>\n                    </ModalBody>\n                </ModalContent>\n            </Modal>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default NewEmail;","/**\n * Email markdown templates for import/export functionality\n */\n\nexport const EMAIL_TEMPLATE_CONTENT = `# Email Template\n\n## Email Metadata\n**To:** recipient@example.com\n**From:** your-email@example.com\n**Subject:** Your Email Subject Here\n**CC:**\n**BCC:**\n**Reply-To:**\n\n---\n\n## Email Body\n\nHi there,\n\nI wanted to give you a quick overview of [topic].\n\n## Main Section Heading\n\nHere's what you need to know:\n\n**Key Point 1:**\n- Important detail about point 1\n- Another aspect of this point\n\n**Key Point 2:**\n- Information about the second point\n- Supporting details\n\n## Another Section\n\nYou can use all standard markdown formatting:\n\n- **Bold text** for emphasis\n- *Italic text* for subtle emphasis\n- [Links](https://example.com) to reference materials\n- Bullet lists like this one\n\n### Subsection\n\nNumbered lists work too:\n\n1. First item\n2. Second item\n3. Third item\n\n> Blockquotes can be used for highlighting important information or quotes\n\n## Conclusion\n\nFeel free to structure your email however you like using markdown formatting.\n\nBest regards,\nYour Name\n\n---\n\n**Tips for Using This Template:**\n- Fill in the Email Metadata section with your recipient, subject, etc.\n- Write your email content using markdown formatting\n- Save the file and import it using the \"Import Markdown\" button\n- The markdown will be automatically converted to beautiful HTML formatting\n`;\n\n/**\n * Download a markdown file with the given content\n */\nexport const downloadMarkdownFile = (content: string, filename: string) => {\n  const blob = new Blob([content], { type: 'text/markdown' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n"],"names":["_ref","subject","onSubjectChange","content","onContentChange","contentType","subjectPlaceholder","isReadOnly","onImprove","isImproving","showSubject","editorMode","setEditorMode","useState","sourceContent","setSourceContent","activeTab","setActiveTab","bg","useColorModeValue","inputBg","cardBorder","textPrimary","textSecondary","textMuted","cardGradientBg","hoverBorderColor","readOnlyBg","readOnlyBorder","readOnlyColor","primaryBlue","primaryBlueHover","overlayBg","editor","useEditor","extensions","StarterKit","Underline","Link","configure","openOnClick","HTMLAttributes","style","autolink","linkOnPaste","TextAlign","types","onUpdate","_ref2","html","getHTML","editable","editorProps","handlePaste","_view","event","_event$clipboardData","text","clipboardData","getData","test","setTimeout","chain","focus","insertContent","run","useEffect","commands","setContent","ToolbarButton","_ref3","icon","onClick","isActive","tooltip","_jsx","Tooltip","label","placement","children","IconButton","size","variant","color","_hover","isDisabled","_jsxs","VStack","align","spacing","FormControl","FormLabel","Input","value","onChange","e","target","placeholder","borderColor","_placeholder","_focus","boxShadow","fontWeight","HStack","justify","mb","Button","leftIcon","Text","isLoading","loadingText","colorScheme","ButtonGroup","isAttached","Tabs","index","TabList","p","borderRadius","border","Tab","_selected","TabPanels","TabPanel","px","Box","FiBold","toggleBold","FiItalic","toggleItalic","FiUnderline","toggleUnderline","Divider","orientation","h","FiList","toggleBulletList","FiLink","addLink","url","window","prompt","setLink","href","FiCode","toggleCodeBlock","FiAlignLeft","setTextAlign","textAlign","FiAlignCenter","FiAlignRight","minH","sx","minHeight","outline","marginBottom","marginTop","fontSize","paddingLeft","borderLeft","marginLeft","fontStyle","backgroundColor","padding","fontFamily","overflow","EditorContent","Textarea","handleSourceChange","lineHeight","textDecoration","borderTop","width","borderCollapse","ReactMarkdown","remarkPlugins","remarkGfm","dangerouslySetInnerHTML","__html","maxWidth","height","whiteSpace","temp","document","createElement","innerHTML","textContent","innerText","htmlToPlainText","CREATE_EMAIL_MUTATION","gql","_templateObject","_taggedTemplateLiteral","SEND_EMAIL_MUTATION","_templateObject2","EMAIL_SENDERS_QUERY","_templateObject3","ADDRESS_BOOK_QUERY","_templateObject4","CLIENTS_QUERY","_templateObject5","IMPROVE_EMAIL_MUTATION","_templateObject6","NewEmail","_sendersData$emailSen3","_sendersData$emailSen4","_sendersData$emailSen5","_addressBookData$emai","_allAddressesData$ema","_allAddressesData$ema2","_allClientsData$clien","usePageTitle","navigate","useNavigate","location","useLocation","toast","useToast","colorMode","useColorMode","getColor","setSubject","from","setFrom","fromPreset","setFromPreset","to","setTo","cc","setCc","bcc","setBcc","replyTo","setReplyTo","bodyMarkdown","setBodyMarkdown","isSaving","setIsSaving","isReply","setIsReply","attachments","setAttachments","fileInputRef","useRef","markdownFileInputRef","searchTerm","setSearchTerm","modalSearchTerm","setModalSearchTerm","showSuggestions","setShowSuggestions","selectedEmails","setSelectedEmails","currentField","setCurrentField","setIsImproving","includeClients","setIncludeClients","isOpen","isAddressBookOpen","onOpen","onAddressBookOpen","onClose","onAddressBookClose","useDisclosure","data","sendersData","useQuery","addressBookData","variables","search","skip","length","clientsData","allAddressesData","undefined","allClientsData","state","_state$subject","emailMatch","match","startsWith","searchParams","URLSearchParams","action","get","forwardDataStr","sessionStorage","getItem","forwardData","JSON","parse","formattedDate","date","Date","toLocaleString","originalContent","htmlBody","concat","fromName","originalSubject","textBody","forwardedMessage","removeItem","replyDataStr","replyData","originalTo","includes","quotedMessage","split","map","line","join","has","toEmail","recipientName","replyToEmail","replyCcEmail","replySubject","replyFromName","replyDate","replyBody","replyHtmlBody","replace","_sendersData$emailSen","emailSenders","matchingSender","find","sender","selectEmail","email","openAddressBookFor","field","handleAddressBookClose","improveEmail","useMutation","createEmail","onCompleted","title","status","duration","isClosable","id","onError","error","description","message","sendEmail","overflowX","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","emailsModuleConfig","Container","maxW","base","md","lg","py","Stack","direction","Heading","sm","_Fragment","FiSave","async","input","trim","att","name","FiSend","_result$data2","_result$data2$createE","console","log","result","Card","CardHeader","CardBody","mt","isRequired","Select","FormHelperText","InputGroup","type","handleToChange","onFocus","onBlur","InputRightElement","FiUsers","emailAddresses","clients","position","zIndex","w","maxH","overflowY","List","address","ListItem","cursor","Badge","my","filter","client","searchLower","toLowerCase","fName","lName","businessName","flex","ref","multiple","display","files","totalSize","reduce","acc","i","file","reader","FileReader","onload","_e$target","base64","prev","readAsDataURL","current","accept","_event$target$files","endsWith","_sendersData$emailSen2","fromEmail","emailSubject","ccEmail","bccEmail","body","markdown","lines","metadata","bodyStartIndex","inMetadataSection","key","bodyLines","slice","shift","replyto","parseEmailMetadata","marked","gfm","breaks","wrap","FiPaperclip","_fileInputRef$current","click","FiUpload","_markdownFileInputRef","FiDownload","handleDownloadTemplate","downloadMarkdownFile","filename","blob","Blob","URL","createObjectURL","link","download","appendChild","removeChild","revokeObjectURL","attachment","FiFile","bytes","toFixed","FiX","_","removeAttachment","EmailComposer","_result$data","emailContent","improveOutgoingEmail","Modal","ModalOverlay","ModalContent","ModalHeader","toUpperCase","ModalCloseButton","ModalBody","pb","FiSearch","c","CheckboxGroup","values","Checkbox","ml","isChecked","checked","handleAddressBookSelect","emailsString","FooterWithFourColumns"],"sourceRoot":""}