{"version":3,"file":"static/js/3922.ddef50a1.chunk.js","mappings":"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","sources":["pages/meeting-summarizer/NewMeetingSummary.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport {\n  Box,\n  Container,\n  VStack,\n  HStack,\n  Button,\n  Text,\n  Input,\n  Textarea,\n  Card,\n  CardHeader,\n  CardBody,\n  Heading,\n  useToast,\n  Progress,\n  Alert,\n  AlertIcon,\n  Divider,\n  FormControl,\n  FormLabel,\n  Tag,\n  TagLabel,\n  TagCloseButton,\n  IconButton,\n  Spinner,\n  ButtonGroup,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { \n  FiMic, \n  FiMicOff, \n  FiUpload, \n  FiPlay, \n  FiPause,\n  FiSave\n} from 'react-icons/fi';\nimport { gql, useMutation } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { getColor, getComponent, brandConfig } from '../../brandConfig';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport meetingSummarizerModule from './moduleConfig';\nimport { usePageTitle } from '../../hooks/useDocumentTitle';\n\n// GraphQL Mutations\nconst UPLOAD_TO_PINATA = gql`\n  mutation UploadToPinata($file: Upload!) {\n    uploadToPinata(file: $file)\n  }\n`;\n\nconst CREATE_MEETING = gql`\n  mutation CreateMeeting($input: MeetingInput!) {\n    createMeeting(input: $input) {\n      id\n      title\n      description\n      date\n      location\n      attendees\n      audioUrl\n      audioIpfsHash\n      status\n      createdAt\n    }\n  }\n`;\n\nconst UPLOAD_MEETING_AUDIO = gql`\n  mutation UploadMeetingAudio($meetingId: ID!, $audioIpfsHash: String!) {\n    uploadMeetingAudio(meetingId: $meetingId, audioIpfsHash: $audioIpfsHash) {\n      id\n      audioUrl\n      audioIpfsHash\n      status\n    }\n  }\n`;\n\n\nconst NewMeetingSummary: React.FC = () => {\n  usePageTitle('New Meeting Summary');\n  const navigate = useNavigate();\n  const toast = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const { colorMode } = useColorMode();\n\n  // Theme-aware styling from brandConfig\n  const bg = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(colorMode === 'light' ? \"white\" : \"background.cardGradient\", colorMode);\n  const cardBorder = getColor(colorMode === 'light' ? \"border.lightCard\" : \"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const buttonBg = getColor(\"primary\", colorMode);\n  const buttonHoverBg = getColor(\"secondary\", colorMode);\n  const textColor = textPrimary; // For compatibility\n  const inputBg = colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\";\n  const inputTextColor = colorMode === 'light' ? \"gray.800\" : textPrimary;\n  const inputBorder = colorMode === 'light' ? \"gray.200\" : \"rgba(255, 255, 255, 0.2)\";\n\n  // Form state\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\n  const [location, setLocation] = useState('');\n  const [attendees, setAttendees] = useState<string[]>([]);\n  const [currentAttendee, setCurrentAttendee] = useState('');\n  \n  // Audio state\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordedAudio, setRecordedAudio] = useState<Blob | null>(null);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef<HTMLAudioElement>(null);\n  \n  // Upload and processing state\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStage, setUploadStage] = useState<'uploading' | 'transcribing' | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n\n\n  // GraphQL mutations\n  const [uploadToPinata] = useMutation(UPLOAD_TO_PINATA);\n  const [createMeeting] = useMutation(CREATE_MEETING);\n  const [uploadMeetingAudio] = useMutation(UPLOAD_MEETING_AUDIO);\n\n  // Audio recording functions\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n        setRecordedAudio(audioBlob);\n        const url = URL.createObjectURL(audioBlob);\n        setAudioUrl(url);\n        \n        // Stop all tracks\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      \n      toast({\n        title: \"Recording started\",\n        status: \"info\",\n        duration: 2000,\n      });\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      toast({\n        title: \"Failed to start recording\",\n        description: \"Please check your microphone permissions\",\n        status: \"error\",\n        duration: 5000,\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      toast({\n        title: \"Recording stopped\",\n        status: \"success\",\n        duration: 2000,\n      });\n    }\n  };\n\n  const processAudioFile = (file: File) => {\n    // Validate file type\n    const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/m4a', 'audio/webm', 'audio/ogg', 'audio/mp3', 'audio/x-m4a'];\n    if (!allowedTypes.includes(file.type) && !file.name.match(/\\.(mp3|wav|m4a|webm|ogg)$/i)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an audio file\",\n        status: \"error\",\n        duration: 5000,\n      });\n      return;\n    }\n\n    // Validate file size (150MB limit)\n    const maxSize = 150 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select a file under 150MB\",\n        status: \"error\",\n        duration: 5000,\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n    const url = URL.createObjectURL(file);\n    setAudioUrl(url);\n    setRecordedAudio(null);\n    \n    toast({\n      title: \"File loaded\",\n      description: `${file.name} ready for upload`,\n      status: \"success\",\n      duration: 3000,\n    });\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      processAudioFile(file);\n    }\n  };\n\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDragging(false);\n\n    const files = event.dataTransfer.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      processAudioFile(file);\n    }\n  };\n\n  const addAttendee = () => {\n    if (currentAttendee.trim()) {\n      setAttendees([...attendees, currentAttendee.trim()]);\n      setCurrentAttendee('');\n    }\n  };\n\n  const removeAttendee = (index: number) => {\n    setAttendees(attendees.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = async () => {\n    if (!title.trim()) {\n      toast({\n        title: \"Title required\",\n        description: \"Please enter a meeting title\",\n        status: \"warning\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    if (!selectedFile && !recordedAudio) {\n      toast({\n        title: \"Audio required\",\n        description: \"Please record or upload an audio file\",\n        status: \"warning\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Step 1: Create the meeting\n      const { data: meetingData } = await createMeeting({\n        variables: {\n          input: {\n            title,\n            description,\n            date: new Date(date),\n            location,\n            attendees\n          }\n        }\n      });\n\n      const newMeetingId = meetingData.createMeeting.id;\n\n      // Step 2: Upload audio to Pinata\n      setIsUploading(true);\n      setUploadStage('uploading');\n      setUploadProgress(10); // Initial progress\n      \n      // Create File object from recorded audio if needed\n      let fileToUpload = selectedFile;\n      if (!fileToUpload && recordedAudio) {\n        fileToUpload = new File([recordedAudio], `meeting-${Date.now()}.webm`, { type: 'audio/webm' });\n      }\n\n      const { data: uploadData } = await uploadToPinata({\n        variables: { file: fileToUpload }\n      });\n\n      const ipfsHash = uploadData.uploadToPinata;\n      \n      // Update progress to 50% when IPFS upload is complete\n      setUploadProgress(50);\n      setUploadStage('transcribing');\n      \n      // Step 3: Update meeting with audio URL\n      await uploadMeetingAudio({\n        variables: {\n          meetingId: newMeetingId,\n          audioIpfsHash: ipfsHash\n        }\n      });\n      \n      // Update progress to 80% after submitting for transcription\n      setUploadProgress(80);\n\n      // Step 4: Transcription is handled by backend automatically\n      // The backend calls n8n webhook when uploadMeetingAudio is called\n      // Just show success and navigate\n      \n      toast({\n        title: \"Meeting created successfully\",\n        description: \"Audio is being transcribed. This usually takes a few seconds.\",\n        status: \"success\",\n        duration: 5000,\n      });\n\n      // Navigate to meeting details page\n      setTimeout(() => {\n        navigate(`/meeting-summarizer/${newMeetingId}`);\n      }, 2000);\n\n    } catch (error: any) {\n      console.error('Error creating meeting:', error);\n      toast({\n        title: \"Failed to create meeting\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n      });\n    } finally {\n      setIsProcessing(false);\n      setIsUploading(false);\n      setUploadStage(null);\n      setUploadProgress(0);\n    }\n  };\n\n  const togglePlayPause = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n      } else {\n        audioRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  return (\n    <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={meetingSummarizerModule} />\n      \n      <Container maxW=\"container.xl\" py={12} flex=\"1\">\n        <VStack spacing={8} align=\"stretch\">\n          <HStack justify=\"space-between\">\n            <Heading color={textColor} fontFamily={brandConfig.fonts.heading}>\n              Create Meeting Summary\n            </Heading>\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate('/meeting-summarizer')}\n              color={textColor}\n            >\n              View All Meetings\n            </Button>\n          </HStack>\n\n          <Card \n            bg={cardGradientBg}\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            borderRadius=\"xl\"\n            backdropFilter=\"blur(10px)\"\n          >\n            <CardHeader>\n              <Heading size=\"lg\" color={textColor}>Meeting Details</Heading>\n            </CardHeader>\n            <CardBody>\n              <VStack spacing={6} align=\"stretch\">\n                <FormControl isRequired>\n                  <FormLabel color={textColor} fontSize=\"lg\" fontWeight=\"semibold\">Title</FormLabel>\n                  <Input\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    placeholder=\"Enter meeting title\"\n                    bg={inputBg}\n                    borderColor={inputBorder}\n                    color={inputTextColor}\n                    _placeholder={{ color: 'gray.500' }}\n                    _hover={{ borderColor: 'gray.400' }}\n                    _focus={{ borderColor: buttonBg, boxShadow: 'outline' }}\n                    size=\"lg\"\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textColor} fontSize=\"lg\" fontWeight=\"semibold\">Description</FormLabel>\n                  <Textarea\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    placeholder=\"Enter meeting description\"\n                    bg={inputBg}\n                    borderColor={inputBorder}\n                    color={inputTextColor}\n                    _placeholder={{ color: 'gray.500' }}\n                    _hover={{ borderColor: 'gray.400' }}\n                    _focus={{ borderColor: buttonBg, boxShadow: 'outline' }}\n                    rows={3}\n                    fontSize=\"md\"\n                  />\n                </FormControl>\n\n                <HStack spacing={4}>\n                  <FormControl>\n                    <FormLabel color={textColor} fontSize=\"lg\" fontWeight=\"semibold\">Date</FormLabel>\n                    <Input\n                      type=\"date\"\n                      value={date}\n                      onChange={(e) => setDate(e.target.value)}\n                      bg={inputBg}\n                      borderColor={inputBorder}\n                      color={inputTextColor}\n                      _hover={{ borderColor: 'gray.400' }}\n                      _focus={{ borderColor: buttonBg, boxShadow: 'outline' }}\n                      size=\"lg\"\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={textColor} fontSize=\"lg\" fontWeight=\"semibold\">Location</FormLabel>\n                    <Input\n                      value={location}\n                      onChange={(e) => setLocation(e.target.value)}\n                      placeholder=\"Enter location\"\n                      bg={inputBg}\n                      borderColor={inputBorder}\n                      color={inputTextColor}\n                      _placeholder={{ color: 'gray.500' }}\n                      _hover={{ borderColor: 'gray.400' }}\n                      _focus={{ borderColor: buttonBg, boxShadow: 'outline' }}\n                      size=\"lg\"\n                    />\n                  </FormControl>\n                </HStack>\n\n                <FormControl>\n                  <FormLabel color={textColor} fontSize=\"lg\" fontWeight=\"semibold\">Attendees</FormLabel>\n                  <HStack mb={2}>\n                    <Input\n                      value={currentAttendee}\n                      onChange={(e) => setCurrentAttendee(e.target.value)}\n                      onKeyDown={(e) => e.key === 'Enter' && addAttendee()}\n                      placeholder=\"Enter attendee name\"\n                      bg={inputBg}\n                      borderColor={inputBorder}\n                      color={inputTextColor}\n                      _placeholder={{ color: 'gray.500' }}\n                      _hover={{ borderColor: 'gray.400' }}\n                      _focus={{ borderColor: buttonBg, boxShadow: 'outline' }}\n                      size=\"lg\"\n                    />\n                    <Button onClick={addAttendee} size=\"lg\" bg={buttonBg} color=\"white\" _hover={{ bg: buttonHoverBg }}>Add</Button>\n                  </HStack>\n                  <HStack wrap=\"wrap\" spacing={2}>\n                    {attendees.map((attendee, index) => (\n                      <Tag key={index} size=\"md\" colorScheme=\"blue\">\n                        <TagLabel>{attendee}</TagLabel>\n                        <TagCloseButton onClick={() => removeAttendee(index)} />\n                      </Tag>\n                    ))}\n                  </HStack>\n                </FormControl>\n              </VStack>\n            </CardBody>\n          </Card>\n\n          <Card \n            bg={cardGradientBg}\n            border=\"1px solid\"\n            borderColor={cardBorder}\n            borderRadius=\"xl\"\n            backdropFilter=\"blur(10px)\"\n          >\n            <CardHeader>\n              <Heading size=\"lg\" color={textColor}>Audio Recording</Heading>\n            </CardHeader>\n            <CardBody>\n              <Tabs colorScheme=\"blue\">\n                <TabList>\n                  <Tab color={textColor}>Record Audio</Tab>\n                  <Tab color={textColor}>Upload Audio</Tab>\n                </TabList>\n\n                <TabPanels>\n                  <TabPanel>\n                    <VStack spacing={4}>\n                      <ButtonGroup>\n                        <Button\n                          leftIcon={isRecording ? <FiMicOff /> : <FiMic />}\n                          colorScheme={isRecording ? \"red\" : \"green\"}\n                          onClick={isRecording ? stopRecording : startRecording}\n                          size=\"lg\"\n                        >\n                          {isRecording ? \"Stop Recording\" : \"Start Recording\"}\n                        </Button>\n                      </ButtonGroup>\n\n                      {isRecording && (\n                        <HStack>\n                          <Spinner color=\"red.500\" />\n                          <Text color={textColor}>Recording in progress...</Text>\n                        </HStack>\n                      )}\n\n                      {recordedAudio && !isRecording && (\n                        <Alert status=\"success\">\n                          <AlertIcon />\n                          Audio recorded successfully\n                        </Alert>\n                      )}\n                    </VStack>\n                  </TabPanel>\n\n                  <TabPanel>\n                    <VStack spacing={4}>\n                      <Input\n                        ref={fileInputRef}\n                        type=\"file\"\n                        accept=\"audio/*\"\n                        onChange={handleFileSelect}\n                        display=\"none\"\n                      />\n                      \n                      <Box\n                        onDragOver={handleDragOver}\n                        onDragLeave={handleDragLeave}\n                        onDrop={handleDrop}\n                        w=\"100%\"\n                        p={8}\n                        border=\"2px dashed\"\n                        borderColor={isDragging ? buttonBg : (colorMode === 'light' ? 'gray.300' : 'gray.600')}\n                        borderRadius=\"xl\"\n                        bg={isDragging ? (colorMode === 'light' ? 'teal.50' : 'rgba(0, 128, 128, 0.1)') : (colorMode === 'light' ? 'gray.50' : 'rgba(255, 255, 255, 0.05)')}\n                        transition=\"all 0.2s\"\n                        cursor=\"pointer\"\n                        onClick={() => fileInputRef.current?.click()}\n                        _hover={{\n                          borderColor: buttonBg,\n                          bg: colorMode === 'light' ? 'teal.50' : 'rgba(0, 128, 128, 0.1)'\n                        }}\n                      >\n                        <VStack spacing={3}>\n                          <FiUpload size={48} color={isDragging ? buttonBg : (colorMode === 'light' ? 'gray.600' : 'gray.400')} />\n                          <Text color={colorMode === 'light' ? \"gray.800\" : textColor} fontSize=\"lg\" fontWeight=\"semibold\">\n                            {isDragging ? 'Drop audio file here' : 'Drag & drop audio file here'}\n                          </Text>\n                          <Text color={colorMode === 'light' ? \"gray.600\" : textMuted} fontSize=\"md\">\n                            or click to browse\n                          </Text>\n                          <Text color={colorMode === 'light' ? \"gray.500\" : textMuted} fontSize=\"sm\">\n                            Supported formats: MP3, WAV, M4A, WebM, OGG (max 150MB)\n                          </Text>\n                        </VStack>\n                      </Box>\n\n                      {selectedFile && (\n                        <Alert status=\"success\" bg={colorMode === 'light' ? \"green.50\" : \"rgba(72, 187, 120, 0.1)\"} borderColor={colorMode === 'light' ? \"green.200\" : \"rgba(72, 187, 120, 0.3)\"}>\n                          <AlertIcon color={colorMode === 'light' ? \"green.500\" : \"green.300\"} />\n                          <Box>\n                            <Text color={colorMode === 'light' ? \"gray.800\" : textColor} fontWeight=\"semibold\">\n                              {selectedFile.name}\n                            </Text>\n                            <Text color={colorMode === 'light' ? \"gray.600\" : textMuted} fontSize=\"sm\">\n                              {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n                            </Text>\n                          </Box>\n                        </Alert>\n                      )}\n                    </VStack>\n                  </TabPanel>\n                </TabPanels>\n              </Tabs>\n\n              {audioUrl && (\n                <Box mt={4}>\n                  <Divider mb={4} />\n                  <VStack spacing={3}>\n                    <audio ref={audioRef} src={audioUrl} onEnded={() => setIsPlaying(false)} />\n                    <ButtonGroup>\n                      <IconButton\n                        icon={isPlaying ? <FiPause /> : <FiPlay />}\n                        onClick={togglePlayPause}\n                        aria-label={isPlaying ? \"Pause\" : \"Play\"}\n                        colorScheme=\"blue\"\n                      />\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setAudioUrl(null);\n                          setSelectedFile(null);\n                          setRecordedAudio(null);\n                        }}\n                      >\n                        Clear Audio\n                      </Button>\n                    </ButtonGroup>\n                  </VStack>\n                </Box>\n              )}\n\n              {isUploading && (\n                <Box mt={4}>\n                  <VStack spacing={2} align=\"stretch\">\n                    <Text color={textColor} fontWeight=\"semibold\">\n                      {uploadStage === 'uploading' && 'Uploading audio to IPFS...'}\n                      {uploadStage === 'transcribing' && 'Audio uploaded! Waiting for transcription...'}\n                    </Text>\n                    <Progress \n                      value={uploadProgress} \n                      size=\"sm\" \n                      colorScheme={uploadStage === 'transcribing' ? \"green\" : \"blue\"}\n                      hasStripe\n                      isAnimated={uploadStage === 'transcribing'}\n                    />\n                    <Text color={textMuted} fontSize=\"sm\">\n                      {uploadStage === 'uploading' && `Uploading: ${uploadProgress}%`}\n                      {uploadStage === 'transcribing' && 'Processing audio through AI transcription service...'}\n                    </Text>\n                  </VStack>\n                </Box>\n              )}\n            </CardBody>\n          </Card>\n\n          <Button\n            bg={buttonBg}\n            color=\"white\"\n            _hover={{ bg: buttonHoverBg }}\n            size=\"lg\"\n            onClick={handleSubmit}\n            isLoading={isProcessing}\n            loadingText=\"Processing...\"\n            isDisabled={!title || (!selectedFile && !recordedAudio)}\n            borderRadius=\"xl\"\n            leftIcon={<FiSave />}\n          >\n            Create Meeting Summary\n          </Button>\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default NewMeetingSummary;"],"names":["UPLOAD_TO_PINATA","gql","_templateObject","_taggedTemplateLiteral","CREATE_MEETING","_templateObject2","UPLOAD_MEETING_AUDIO","_templateObject3","NewMeetingSummary","usePageTitle","navigate","useNavigate","toast","useToast","fileInputRef","useRef","mediaRecorderRef","audioChunksRef","colorMode","useColorMode","bg","getColor","cardGradientBg","cardBorder","textPrimary","textMuted","buttonBg","buttonHoverBg","textColor","inputBg","inputTextColor","inputBorder","title","setTitle","useState","description","setDescription","date","setDate","Date","toISOString","split","location","setLocation","attendees","setAttendees","currentAttendee","setCurrentAttendee","selectedFile","setSelectedFile","isRecording","setIsRecording","recordedAudio","setRecordedAudio","audioUrl","setAudioUrl","isPlaying","setIsPlaying","audioRef","isUploading","setIsUploading","uploadProgress","setUploadProgress","uploadStage","setUploadStage","isProcessing","setIsProcessing","isDragging","setIsDragging","uploadToPinata","useMutation","createMeeting","uploadMeetingAudio","processAudioFile","file","includes","type","name","match","status","duration","size","url","URL","createObjectURL","concat","addAttendee","trim","_jsxs","Box","minHeight","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","meetingSummarizerModule","Container","maxW","py","flex","VStack","spacing","align","HStack","justify","Heading","color","fontFamily","brandConfig","fonts","heading","Button","variant","onClick","Card","border","borderColor","borderRadius","backdropFilter","CardHeader","CardBody","FormControl","isRequired","FormLabel","fontSize","fontWeight","Input","value","onChange","e","target","placeholder","_placeholder","_hover","_focus","boxShadow","Textarea","rows","mb","onKeyDown","key","wrap","map","attendee","index","Tag","colorScheme","TagLabel","TagCloseButton","filter","_","i","removeAttendee","Tabs","TabList","Tab","TabPanels","TabPanel","ButtonGroup","leftIcon","FiMicOff","FiMic","stopRecording","current","stop","async","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","event","data","push","onstop","audioBlob","Blob","getTracks","forEach","track","start","error","console","Spinner","Text","Alert","AlertIcon","ref","accept","_event$target$files","files","onDragOver","preventDefault","stopPropagation","onDragLeave","onDrop","dataTransfer","length","w","p","transition","cursor","_fileInputRef$current","click","FiUpload","toFixed","mt","Divider","src","onEnded","IconButton","icon","FiPause","FiPlay","togglePlayPause","pause","play","Progress","hasStripe","isAnimated","meetingData","variables","input","newMeetingId","id","fileToUpload","File","now","uploadData","ipfsHash","meetingId","audioIpfsHash","setTimeout","message","isLoading","loadingText","isDisabled","FiSave","FooterWithFourColumns"],"sourceRoot":""}