{"version":3,"file":"static/js/8297.5bab405f.chunk.js","mappings":"qLAGA,MAAMA,GAAcC,E,SAAAA,GAAW,CAC7BC,YAAa,cACbC,MAAsBC,EAAAA,EAAAA,MAAK,IAAK,CAAEC,KAAM,eAAgBC,SAAU,EAChDC,EAAAA,EAAAA,KAAI,OAAQ,CAAEC,EAAG,uaACjBD,EAAAA,EAAAA,KAAI,OAAQ,CAAEC,EAAG,yT,ujBCqCrC,MAAMC,GAAcC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yKAYjBC,IAAgBH,EAAAA,EAAAA,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uJAWnBG,IAAqBL,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,gKAWxBK,IAAkBP,EAAAA,EAAAA,IAAGQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6kBA8pB3B,GAloB8BO,KAAO,IAADC,EAAAC,EAAAC,GAChCC,EAAAA,EAAAA,GAAa,gBACb,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,MACR,UAAEC,IAAcC,EAAAA,EAAAA,MAGhBC,GAASC,EAAAA,EAAAA,IAAS,kBAAmBH,GACrCI,GAAiBD,EAAAA,EAAAA,IAAS,0BAA2BH,GACrDK,GAAaF,EAAAA,EAAAA,IAAS,kBAAmBH,GACzCM,IAAcH,EAAAA,EAAAA,IAAuB,UAAdH,EAAwB,eAAiB,mBAAoBA,GAEpFO,KADgBJ,EAAAA,EAAAA,IAAuB,UAAdH,EAAwB,iBAAmB,qBAAsBA,IAC9EG,EAAAA,EAAAA,IAAuB,UAAdH,EAAwB,aAAe,iBAAkBA,IAC9EQ,IAAeL,EAAAA,EAAAA,IAAS,WACxBM,IAAeN,EAAAA,EAAAA,IAAS,iBAMvBO,GAAaC,MALCR,EAAAA,EAAAA,IAAS,iBACbA,EAAAA,EAAAA,IAAS,iBACLA,EAAAA,EAAAA,IAAS,mBAGQS,EAAAA,EAAAA,UAAS,MACxCC,GAAUC,KAAeF,EAAAA,EAAAA,UAAS,KAClCG,GAAcC,KAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,GAAUC,KAAeN,EAAAA,EAAAA,UAAS,KAClCO,GAAOC,KAAYR,EAAAA,EAAAA,UAAS,KAC5BS,GAAUC,KAAeV,EAAAA,EAAAA,UAAS,KAClCW,GAAcC,KAAmBZ,EAAAA,EAAAA,WAAS,IAC1Ca,GAAiBC,KAAsBd,EAAAA,EAAAA,UAAS,KAChDe,GAAsBC,KAA2BhB,EAAAA,EAAAA,UAAS,KAC1DiB,GAAOC,KAAYlB,EAAAA,EAAAA,UAAS,KAC5BmB,GAASC,KAAcpB,EAAAA,EAAAA,UAAS,KAChCqB,GAAYC,KAAiBtB,EAAAA,EAAAA,UAAmB,KAChDuB,GAAeC,KAAoBxB,EAAAA,EAAAA,WAAS,IAC5CyB,GAAWC,KAAgB1B,EAAAA,EAAAA,UAAS,KACpC2B,GAAQC,KAAa5B,EAAAA,EAAAA,WAAS,IAC9B6B,GAAqBC,KAA0B9B,EAAAA,EAAAA,UAAyE,KAGvH+B,KAAMC,GAAaC,QAASC,KAAmBC,EAAAA,EAAAA,IAASlE,IACxD8D,KAAMK,GAAeH,QAASI,KAAqBF,EAAAA,EAAAA,IAAS9D,KAC5D0D,KAAMO,GAAgBL,QAASM,KAAsBJ,EAAAA,EAAAA,IAAS5D,KAC/DiE,IAAkBP,QAASQ,MAAcC,EAAAA,EAAAA,GAAYjE,GAAiB,CACzEkE,YAAcZ,IAAU,IAADa,EAAAC,EACnB,MAAMC,IAAsD,QAAvCF,EAAAb,EAAKS,eAAeO,2BAAmB,IAAAH,OAAA,EAAvCA,EAAyCI,SAAU,KAA4C,QAAtCH,EAAAd,EAAKS,eAAeS,0BAAkB,IAAAJ,OAAA,EAAtCA,EAAwCG,SAAU,GAChI9D,EAAM,CACFgE,MAAO,gCACPC,YAAY,gBAADC,OAAkBrB,EAAKS,eAAe1C,YAAW,qBAAAsD,OAAoBN,EAAc,EAAI,cAAgB,IAClHO,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEhBvE,EAAS,qBAEbwE,QAAUC,IACNvE,EAAM,CACFgE,MAAO,0BACPC,YAAaM,EAAMC,QACnBL,OAAQ,QACRC,SAAU,IACVC,YAAY,OAsBlBI,GAAkBA,CAACC,EAAcC,KACnCC,UAAUC,UAAUC,UAAUJ,GAC9B1E,EAAM,CACFgE,MAAM,GAADE,OAAKS,EAAK,WACfR,OAAQ,UACRC,SAAU,OA+ClB,OACIW,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI7E,EAAQ8E,KAAK,QAAQC,QAAQ,OAAOC,cAAc,SAAQxG,SAAA,EAC/DyG,EAAAA,EAAAA,KAACC,EAAAA,EAAsB,KACvBD,EAAAA,EAAAA,KAACE,EAAAA,EAAgB,CAACC,aAAcC,EAAAA,WAEhCJ,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CAACC,KAAM,CAAEC,KAAM,eAAgBC,GAAI,gBAAkBC,GAAI,CAAEF,KAAM,EAAGG,GAAI,GAAKC,GAAI,CAAEJ,KAAM,EAAGG,GAAI,GAAKE,KAAK,IAAGrH,UACnHmG,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAS,CAAEP,KAAM,EAAGG,GAAI,GAAKK,MAAM,UAASxH,SAAA,EAChDyG,EAAAA,EAAAA,KAACgB,EAAAA,EAAO,CAACC,MAAO9F,GAAa+F,WAAYC,EAAAA,GAAYC,MAAMC,QAASC,KAAM,CAAEf,KAAM,KAAMG,GAAI,MAAOnH,SAAC,yBAIpGyG,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACD3B,GAAI3E,EACJuG,eAAe,aACfC,UAAU,mCACVC,OAAO,MACPC,YAAazG,EACb0G,aAAa,KAAIrI,UAEjByG,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAAAtI,UACLyG,EAAAA,EAAAA,KAAA,QAAM8B,SA9DTC,UAIjB,GAHAC,EAAEC,kBAGG1G,KAAgBW,GAOjB,YANAvB,EAAM,CACFgE,MAAO,0BACPC,YAAa,2CACbE,OAAQ,QACRC,SAAU,MAKlB,MAAMmD,EAAa,CACf3G,eACAW,aAIAR,KAAUwG,EAAMxG,SAAWA,IAG3BE,KAAcsG,EAAMtG,aAAeA,IACnCE,KAAUoG,EAAMpG,SAAWA,IAC3BE,KAAOkG,EAAMlG,MAAQA,IACrBU,KAAOwF,EAAMxF,MAAQA,IACrBE,KAASsF,EAAMtF,QAAUA,IACzBQ,IAAUd,KACV4F,EAAM5F,gBAAkBA,GACpBE,KAAsB0F,EAAM1F,qBAAuBA,KAGvDM,GAAW2B,OAAS,IAAGyD,EAAMxD,mBAAqB5B,IAClDE,IAAiBE,KACjBgF,EAAMhF,UAAY,IAAIiF,KAAKjF,IAAWkF,eAEtC9E,GAAoBmB,OAAS,IAAGyD,EAAM5E,oBAAsBA,UAE1DW,GAAe,CAAEoE,UAAW,CAAEH,YAuBa3I,UACzBmG,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAS,CAAEP,KAAM,EAAGG,GAAI,GAAKK,MAAM,UAASxH,SAAA,EAEhDmG,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAApG,SAAA,EACAyG,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACrB,MAAO9F,GAAaoH,SAAU,CAAEhC,KAAM,KAAMG,GAAI,MAAQ8B,WAAW,OAAOC,GAAI,EAAElJ,SAAC,yBAGvFmG,EAAAA,EAAAA,MAACgD,EAAAA,EAAI,CAACC,gBAAiB,CAAEpC,KAAM,MAAOG,GAAI,kBAAoBkC,IAAK,CAAErC,KAAM,EAAGG,GAAI,GAAInH,SAAA,EAClFyG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,CAAEvC,KAAM,EAAGG,GAAI,GAAInH,UAClCmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAACC,YAAU,EAAAzJ,SAAA,EACnByG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,kBAC/ByG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFC,YAAY,mCACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAO9H,GACP+H,SAAWtB,GAAMxG,GAAewG,EAAEuB,OAAOF,UAE7CrD,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,6EAM1CyG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,CAAEvC,KAAM,EAAGG,GAAI,GAAInH,UAClCmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,wBAC/ByG,EAAAA,EAAAA,KAACyD,EAAAA,EAAM,CACHN,YAAY,iBACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPkI,MAAOzG,GACP0G,SAAWtB,GAAMnF,GAAWmF,EAAEuB,OAAOF,OACrCK,SAAU5F,GAAiBvE,SAEb,OAAbsE,SAAa,IAAbA,IAAwB,QAAXxD,EAAbwD,GAAe8F,iBAAS,IAAAtJ,OAAX,EAAbA,EAA0BuJ,IAAKhH,IAC5B8C,EAAAA,EAAAA,MAAA,UAAyB2D,MAAOzG,EAAQiH,GAAGtK,SAAA,CACtCqD,EAAQkH,aAAelH,EAAQmH,KAAK,IAAEnH,EAAQoH,IAAG,SAAAnF,OAAYjC,EAAQoH,IAAG,KAAM,KADtEpH,EAAQiH,QAK7B7D,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,0CAM1CyG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,EAAEvJ,UACjBmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,2BAC/ByG,EAAAA,EAAAA,KAACyD,EAAAA,EAAM,CACHN,YAAY,6BACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPmI,SAAWtB,IACHA,EAAEuB,OAAOF,QAAUvG,GAAWmH,SAASjC,EAAEuB,OAAOF,QAChDtG,GAAc,IAAID,GAAYkF,EAAEuB,OAAOF,SAG/CK,SAAU/F,GAAepE,SAEb,OAAXkE,SAAW,IAAXA,IAAoB,QAATnD,EAAXmD,GAAayG,eAAO,IAAA5J,OAAT,EAAXA,EACK6J,OAAQC,IAAoBtH,GAAWmH,SAASG,EAAOP,KACxDD,IAAKQ,IACF1E,EAAAA,EAAAA,MAAA,UAAwB2D,MAAOe,EAAOP,GAAGtK,SAAA,CACpC6K,EAAOC,MAAM,IAAED,EAAOE,MAAM,KAAGF,EAAOpI,MAAM,MADpCoI,EAAOP,QAKhC7D,EAAAA,EAAAA,KAACuE,EAAAA,EAAM,CAACC,GAAI,EAAGC,KAAK,OAAO3D,QAAS,EAAEvH,SACjCuD,GAAW8G,IAAKc,IAAc,IAADC,EAC1B,MAAMP,EAAoB,OAAX3G,SAAW,IAAXA,IAAoB,QAATkH,EAAXlH,GAAayG,eAAO,IAAAS,OAAT,EAAXA,EAAsBC,KAAMC,GAAcA,EAAEhB,KAAOa,GAClE,OACIhF,EAAAA,EAAAA,MAACoF,EAAAA,EAAK,CAEFC,YAAY,SACZtE,GAAI,EACJE,GAAI,EACJiB,aAAa,KACboD,OAAO,UACPC,QAASA,IAAMlI,GAAcD,GAAWqH,OAAON,GAAMA,IAAOa,IAAWnL,SAAA,CAEhE,OAAN6K,QAAM,IAANA,OAAM,EAANA,EAAQC,MAAM,IAAQ,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,MAAM,YAR1BI,QAarB1E,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,wDAM1CyG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,EAAEvJ,UACjBmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,0BAC/ByG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFgC,KAAK,MACL/B,YAAY,uDACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAO3H,GACP4H,SAAWtB,GAAMrG,GAAYqG,EAAEuB,OAAOF,UAE1CrD,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,4EAM1CyG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,EAAEvJ,UACjBmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,8BAC/ByG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFgC,KAAK,MACL/B,YAAY,gCACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAOzH,GACP0H,SAAWtB,GAAMnG,GAAgBmG,EAAEuB,OAAOF,UAE9CrD,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,+CAQlDyG,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACxD,YAAazG,KAGtBwE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAApG,SAAA,EACAyG,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACrB,MAAO9F,GAAaoH,SAAU,CAAEhC,KAAM,KAAMG,GAAI,MAAQ8B,WAAW,OAAOC,GAAI,EAAElJ,SAAC,uBAGvFmG,EAAAA,EAAAA,MAACgD,EAAAA,EAAI,CAACC,gBAAiB,CAAEpC,KAAM,MAAOG,GAAI,kBAAoBkC,IAAK,CAAErC,KAAM,EAAGG,GAAI,GAAInH,SAAA,EAClFyG,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,CAAEvC,KAAM,EAAGG,GAAI,GAAInH,UAClCmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,yBAC/ByG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFC,YAAY,WACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAOvH,GACPwH,SAAWtB,GAAMjG,GAAYiG,EAAEuB,OAAOF,eAKlDrD,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,CAAEvC,KAAM,EAAGG,GAAI,GAAInH,UAClCmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,sBAC/ByG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFgC,KAAK,QACL/B,YAAY,mBACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAOrH,GACPsH,SAAWtB,GAAM/F,GAAS+F,EAAEuB,OAAOF,eAK/CrD,EAAAA,EAAAA,KAAC6C,EAAAA,EAAQ,CAACC,QAAS,EAAEvJ,UACjBmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAACC,YAAU,EAAAzJ,SAAA,EACnByG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,cAC/BmG,EAAAA,EAAAA,MAAC0F,EAAAA,EAAU,CAAA7L,SAAA,EACPyG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFgC,KAAM9I,GAAe,OAAS,WAC9B+G,YAAY,iBACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAOnH,GACPoH,SAAWtB,GAAM7F,GAAY6F,EAAEuB,OAAOF,OACtCnC,WAAW,UAEflB,EAAAA,EAAAA,KAACqF,EAAAA,EAAiB,CAACC,MAAO,CAAE/E,KAAM,OAAQG,GAAI,QAASnH,UACnDmG,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CAACzD,QAAS,EAAEvH,SAAA,EACfyG,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACPjE,KAAM,CAAEf,KAAM,KAAMG,GAAI,MACxB8E,QAAQ,QACR,aAAW,kBACXC,KAAMrJ,IAAe4D,EAAAA,EAAAA,KAAC/G,EAAAA,EAAW,KAAM+G,EAAAA,EAAAA,KAAC0F,EAAAA,EAAQ,IAChDT,QAASA,IAAM5I,IAAiBD,IAChCuJ,KAAK,OACL9F,KAAK,OACLC,QAAS,CAAES,KAAM,OAAQqF,GAAI,WAEjC5F,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACPjE,KAAM,CAAEf,KAAM,KAAMG,GAAI,MACxB8E,QAAQ,QACR,aAAW,oBACXC,MAAMzF,EAAAA,EAAAA,KAAC6F,EAAAA,EAAU,IACjBZ,QAxSvCa,KACrB,MACMC,EAAU,2FAChB,IAAIC,EAAc,GAClB,IAAK,IAAIC,EAAI,EAAGA,EAHD,GAGaA,IACxBD,GAAeD,EAAQG,OAAOC,KAAKC,MAAsBL,GAAhBI,KAAKE,WAElDlK,GAAY6J,GACZrL,EAAM,CACFgE,MAAO,qBACPG,OAAQ,OACRC,SAAU,OA8R8C4G,KAAK,OACL9F,KAAK,SAER3D,KACG8D,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACPjE,KAAM,CAAEf,KAAM,KAAMG,GAAI,MACxB8E,QAAQ,QACR,aAAW,gBACXC,MAAMzF,EAAAA,EAAAA,KAACsG,EAAAA,EAAQ,IACfrB,QAASA,IAAM7F,GAAgBlD,GAAU,YACzCyJ,KAAK,OACL9F,KAAK,OACLC,QAAS,CAAES,KAAM,OAAQqF,GAAI,mBAMjD5F,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,8DAQlDyG,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACxD,YAAazG,KAGtBwE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAApG,SAAA,EACAyG,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAAU0B,GAAI,EAAElJ,UACtCmG,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CAACgC,QAAQ,gBAAehN,SAAA,EAC3ByG,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACrB,MAAO9F,GAAaoH,SAAU,CAAEhC,KAAM,KAAMG,GAAI,MAAQ8B,WAAW,OAAMjJ,SAAC,+BAGhFyG,EAAAA,EAAAA,KAACwG,EAAAA,EAAM,CACHC,UAAWrJ,GACXkG,SAAWtB,GAAM3E,GAAU2E,EAAEuB,OAAOmD,SACpC3B,YAAY,gBAIvB3H,KACGsC,EAAAA,EAAAA,MAACgD,EAAAA,EAAI,CAACC,gBAAgB,iBAAiBC,IAAK,EAAErJ,SAAA,EAC1CmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,oBAC/BmG,EAAAA,EAAAA,MAAC0F,EAAAA,EAAU,CAAA7L,SAAA,EACPyG,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFC,YAAY,sBACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAO/G,GACPgH,SAAWtB,GAAMzF,GAAmByF,EAAEuB,OAAOF,OAC7CnC,WAAW,SAEd5E,KACG0D,EAAAA,EAAAA,KAACqF,EAAAA,EAAiB,CAAA9L,UACdyG,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACPjE,KAAM,CAAEf,KAAM,KAAMG,GAAI,MACxB8E,QAAQ,QACR,aAAW,WACXC,MAAMzF,EAAAA,EAAAA,KAACsG,EAAAA,EAAQ,IACfrB,QAASA,IAAM7F,GAAgB9C,GAAiB,cAChDqJ,KAAK,OACL9F,KAAK,eAKrBG,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,2CAKtCmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,kBAC/ByG,EAAAA,EAAAA,KAAC2G,EAAAA,EAAQ,CACLxD,YAAY,sDACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAO7G,GACP8G,SAAWtB,GAAMvF,GAAwBuF,EAAEuB,OAAOF,OAClDuD,KAAM,KAEV5G,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,wCAQlDyG,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACxD,YAAazG,KAGtBwE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAApG,SAAA,EACAyG,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACrB,MAAO9F,GAAaoH,SAAU,CAAEhC,KAAM,KAAMG,GAAI,MAAQ8B,WAAW,OAAOC,GAAI,EAAElJ,SAAC,yBAGvFmG,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASxH,SAAA,EAC/BmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,sBAC/ByG,EAAAA,EAAAA,KAAC2G,EAAAA,EAAQ,CACLxD,YAAY,uCACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPiI,aAAc,CAAEnC,MAAO7F,IACvBiI,MAAO3G,GACP4G,SAAWtB,GAAMrF,GAASqF,EAAEuB,OAAOF,OACnCuD,KAAM,KAEV5G,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,+CAKtCmG,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASxH,UAC/BmG,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CAACgC,QAAQ,gBAAehN,SAAA,EAC3ByG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAasH,GAAI,EAAElJ,SAAC,yBACtCyG,EAAAA,EAAAA,KAACwG,EAAAA,EAAM,CACHC,UAAWzJ,GACXsG,SAAWtB,GAAM/E,GAAiB+E,EAAEuB,OAAOmD,SAC3C3B,YAAY,gBAIvB/H,KACGgD,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACFgC,KAAK,iBACLtF,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPkI,MAAOnG,GACPoG,SAAWtB,GAAM7E,GAAa6E,EAAEuB,OAAOF,OACvCwD,KAAK,IAAI1E,MAAOC,cAAc0E,MAAM,EAAG,OAG/C9G,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,iDAKtCyG,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACxD,YAAazG,KAGtBwE,EAAAA,EAAAA,MAACqD,EAAAA,GAAW,CAAAxJ,SAAA,EACRyG,EAAAA,EAAAA,KAACiD,EAAAA,EAAS,CAAChC,MAAO9F,GAAY5B,SAAC,qCAC/BmG,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASxH,SAAA,EAC/ByG,EAAAA,EAAAA,KAACyD,EAAAA,EAAM,CACHN,YAAY,wBACZvD,GAAkB,UAAd/E,EAAwB,QAAU,4BACtC8G,YAAazG,EACb+F,MAAO9F,GACPmI,SAAWtB,IAAO,IAAD+E,EACb,MAAMC,EAA8B,OAAdjJ,SAAc,IAAdA,IAA4B,QAAdgJ,EAAdhJ,GAAgBkJ,oBAAY,IAAAF,OAAd,EAAdA,EAA8BnC,KAAMsC,GAAWA,EAAErD,KAAO7B,EAAEuB,OAAOF,OACnF2D,IAAkB1J,GAAoBsH,KAAKsC,GAAKA,EAAEC,WAAaH,EAAcG,YAC7E5J,GAAuB,IAChBD,GACH,CACI6J,SAAUH,EAAcG,SACxBxI,MAAOqI,EAAcrI,MACrBC,YAAaoI,EAAcpI,eAGnCoD,EAAEuB,OAAOF,MAAQ,KAGzBK,SAAU1F,GAAkBzE,SAEb,OAAdwE,SAAc,IAAdA,IAA4B,QAAdxD,EAAdwD,GAAgBkJ,oBAAY,IAAA1M,OAAd,EAAdA,EACK4J,OAAQiD,IAAgB9J,GAAoBsH,KAAKsC,GAAKA,EAAEC,WAAaC,EAAMD,WAC5EvD,IAAKwD,IACFpH,EAAAA,EAAAA,KAAA,UAAuBqD,MAAO+D,EAAMvD,GAAGtK,SAClC6N,EAAMzI,OADEyI,EAAMvD,OAM9BvG,GAAoBmB,OAAS,IAC1BuB,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAASxH,SAC9B+D,GAAoBsG,IAAI,CAACwD,EAAOC,KAC7B3H,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CAEH+C,EAAG,EACH1H,GAAkB,UAAd/E,EAAwB,UAAY,4BACxC+G,aAAa,KACb2F,YAAY,MACZ5F,YAAazG,EACbqL,QAAQ,gBAAehN,SAAA,EAEvBmG,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACE,MAAM,QAAQD,QAAS,EAAGF,KAAM,EAAErH,SAAA,EACtCmG,EAAAA,EAAAA,MAAC4C,EAAAA,EAAI,CAACrB,MAAO9F,GAAaqH,WAAW,SAASD,SAAS,KAAIhJ,SAAA,CACtD8N,EAAQ,EAAE,KAAGD,EAAMzI,SAEvByI,EAAMxI,cACHoB,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACrB,MAAO7F,GAAWmH,SAAS,KAAKiF,UAAW,EAAEjO,SAC9C6N,EAAMxI,kBAInBoB,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACPjE,KAAK,KACLkE,QAAQ,QACR,aAAW,eACXC,MAAMzF,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,IAChBxC,QAASA,KACL1H,GACID,GAAoB6G,OAAO+C,GAAKA,EAAEC,WAAaC,EAAMD,gBAzB5DC,EAAMD,iBAkC/BnH,EAAAA,EAAAA,KAACwD,EAAAA,GAAc,CAACvC,MAAO7F,GAAU7B,SAAC,sGAO9CyG,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACxD,YAAazG,KAGtBwE,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAS,EAAGC,MAAM,UAAU2G,UAAW,CAAEnH,KAAM,SAAUG,GAAI,OAAS6F,QAAS,CAAEhG,KAAM,UAAWG,GAAI,YAAanH,SAAA,EACvHyG,EAAAA,EAAAA,KAAC2H,EAAAA,EAAM,CACHnC,QAAQ,UACR7D,YAAazG,EACb+F,MAAO9F,GACP8J,QAASA,IAAMxK,EAAS,oBACxB6K,MAAO,CAAE/E,KAAM,OAAQG,GAAI,QAC3BiF,KAAM,CAAEjF,GAAI,SAAUnH,SACzB,YAGDyG,EAAAA,EAAAA,KAAC2H,EAAAA,EAAM,CACHzC,KAAK,SACLtF,GAAIvE,GACJ4F,MAAM,QACN2G,OAAQ,CAAEhI,GAAItE,IACduM,UAAW3J,GACX4J,YAAY,aACZC,UAAU/H,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,IAClB1C,MAAO,CAAE/E,KAAM,OAAQG,GAAI,QAC3BiF,KAAM,CAAEjF,GAAI,SAAUnH,SACzB,wBAMLmG,EAAAA,EAAAA,MAACuI,EAAAA,EAAK,CAACnJ,OAAO,OAAO8C,aAAa,KAAKhC,GAAG,0BAA0B+B,YAAY,WAAWD,OAAO,MAAKnI,SAAA,EACnGyG,EAAAA,EAAAA,KAACkI,EAAAA,EAAS,CAACjH,MAAM,cACjBjB,EAAAA,EAAAA,KAACmI,EAAAA,EAAgB,CAAClH,MAAO9F,GAAY5B,UACjCyG,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAACC,SAAS,KAAIhJ,SAAC,iKAapDyG,EAAAA,EAAAA,KAACoI,EAAAA,EAAqB,O","sources":["../node_modules/@chakra-ui/icons/dist/esm/ViewOff.mjs","pages/passwords/NewPassword.tsx"],"sourcesContent":["import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" })\n  ] })\n});\n\nexport { ViewOffIcon };\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Card,\n    CardBody,\n    VStack,\n    HStack,\n    FormControl,\n    FormLabel,\n    FormHelperText,\n    Input,\n    Textarea,\n    Select,\n    Button,\n    useToast,\n    Alert,\n    AlertIcon,\n    AlertDescription,\n    Divider,\n    Text,\n    Switch,\n    InputGroup,\n    InputRightElement,\n    IconButton,\n    Badge,\n    Tooltip,\n    Grid,\n    GridItem,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport { ViewIcon, ViewOffIcon, CopyIcon, RepeatIcon, InfoIcon, AddIcon, CloseIcon } from \"@chakra-ui/icons\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport passwordsModuleConfig from \"./moduleConfig\";\nimport { Client } from \"../../generated/graphql\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\nconst GET_CLIENTS = gql`\n    query GetClients {\n        clients {\n            id\n            fName\n            lName\n            email\n            phoneNumber\n        }\n    }\n`;\n\nconst GET_COMPANIES = gql`\n    query GetCompanies {\n        companies {\n            id\n            name\n            tradingName\n            abn\n        }\n    }\n`;\n\nconst GET_MY_IPFS_VIDEOS = gql`\n    query MyIPFSVideos {\n        myIPFSVideos {\n            id\n            title\n            description\n            ipfsHash\n        }\n    }\n`;\n\nconst CREATE_PASSWORD = gql`\n    mutation CreatePassword($input: PasswordInput!) {\n        createPassword(input: $input) {\n            id\n            serviceName\n            loginUrl\n            company {\n                id\n                name\n            }\n            createdBy {\n                id\n                fName\n                lName\n                email\n            }\n            sharedWithEmployees\n            sharedWithExternal\n            instructionalVideos {\n                ipfsHash\n                title\n                description\n            }\n        }\n    }\n`;\n\n\nconst NewPassword: React.FC = () => {\n    usePageTitle(\"New Password\");\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const primaryColor = getColor(\"primary\");\n    const primaryHover = getColor(\"primaryHover\");\n    const successGreen = getColor(\"successGreen\");\n    const errorRed = getColor(\"status.error\");\n    const warningColor = getColor(\"status.warning\");\n\n    // Form state\n    const [serviceName, setServiceName] = useState(\"\");\n    const [loginUrl, setLoginUrl] = useState(\"\");\n    const [dashboardUrl, setDashboardUrl] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [showPassword, setShowPassword] = useState(false);\n    const [twoFactorSecret, setTwoFactorSecret] = useState(\"\");\n    const [twoFactorBackupCodes, setTwoFactorBackupCodes] = useState(\"\");\n    const [notes, setNotes] = useState(\"\");\n    const [company, setCompany] = useState(\"\");\n    const [sharedWith, setSharedWith] = useState<string[]>([]);\n    const [hasExpiration, setHasExpiration] = useState(false);\n    const [expiresAt, setExpiresAt] = useState(\"\");\n    const [has2FA, setHas2FA] = useState(false);\n    const [instructionalVideos, setInstructionalVideos] = useState<Array<{ipfsHash: string, title: string, description?: string}>>([]);\n\n    // Queries and mutations\n    const { data: clientsData, loading: clientsLoading } = useQuery(GET_CLIENTS);\n    const { data: companiesData, loading: companiesLoading } = useQuery(GET_COMPANIES);\n    const { data: ipfsVideosData, loading: ipfsVideosLoading } = useQuery(GET_MY_IPFS_VIDEOS);\n    const [createPassword, { loading: creating }] = useMutation(CREATE_PASSWORD, {\n        onCompleted: (data) => {\n            const sharedCount = (data.createPassword.sharedWithEmployees?.length || 0) + (data.createPassword.sharedWithExternal?.length || 0);\n            toast({\n                title: \"Password created successfully\",\n                description: `Password for ${data.createPassword.serviceName} has been created${sharedCount > 0 ? ' and shared' : ''}`,\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n            });\n            navigate(\"/passwords/admin\");\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error creating password\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        },\n    });\n\n    // Generate a random secure password\n    const generatePassword = () => {\n        const length = 16;\n        const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?\";\n        let newPassword = \"\";\n        for (let i = 0; i < length; i++) {\n            newPassword += charset.charAt(Math.floor(Math.random() * charset.length));\n        }\n        setPassword(newPassword);\n        toast({\n            title: \"Password generated\",\n            status: \"info\",\n            duration: 2000,\n        });\n    };\n\n    // Copy to clipboard\n    const copyToClipboard = (text: string, label: string) => {\n        navigator.clipboard.writeText(text);\n        toast({\n            title: `${label} copied`,\n            status: \"success\",\n            duration: 2000,\n        });\n    };\n\n    // Handle form submission\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        // Validation - only serviceName and password are required now\n        if (!serviceName || !password) {\n            toast({\n                title: \"Missing required fields\",\n                description: \"Please fill in service name and password\",\n                status: \"error\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        const input: any = {\n            serviceName,\n            password,\n        };\n\n        // Add loginUrl only if provided\n        if (loginUrl) input.loginUrl = loginUrl;\n\n        // Add optional fields\n        if (dashboardUrl) input.dashboardUrl = dashboardUrl;\n        if (username) input.username = username;\n        if (email) input.email = email;\n        if (notes) input.notes = notes;\n        if (company) input.company = company;\n        if (has2FA && twoFactorSecret) {\n            input.twoFactorSecret = twoFactorSecret;\n            if (twoFactorBackupCodes) input.twoFactorBackupCodes = twoFactorBackupCodes;\n        }\n        // For now, send all shared users as external (can be enhanced later to distinguish employees)\n        if (sharedWith.length > 0) input.sharedWithExternal = sharedWith;\n        if (hasExpiration && expiresAt) {\n            input.expiresAt = new Date(expiresAt).toISOString();\n        }\n        if (instructionalVideos.length > 0) input.instructionalVideos = instructionalVideos;\n\n        await createPassword({ variables: { input } });\n    };\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n\n            <Container maxW={{ base: \"container.sm\", lg: \"container.lg\" }} px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                    <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading} size={{ base: \"md\", md: \"lg\" }}>\n                        Create New Password\n                    </Heading>\n                    \n                    <Card\n                        bg={cardGradientBg}\n                        backdropFilter=\"blur(10px)\"\n                        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                        border=\"1px\"\n                        borderColor={cardBorder}\n                        borderRadius=\"lg\"\n                    >\n                        <CardBody>\n                            <form onSubmit={handleSubmit}>\n                                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                                    {/* Service Information */}\n                                    <Box>\n                                        <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" mb={4}>\n                                            Service Information\n                                        </Text>\n                                        <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={{ base: 4, md: 6 }}>\n                                            <GridItem colSpan={{ base: 2, md: 1 }}>\n                                                <FormControl isRequired>\n                                                    <FormLabel color={textPrimary}>Service Name</FormLabel>\n                                                    <Input\n                                                        placeholder=\"e.g., Company Gmail, AWS Console\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _placeholder={{ color: textMuted }}\n                                                        value={serviceName}\n                                                        onChange={(e) => setServiceName(e.target.value)}\n                                                    />\n                                                    <FormHelperText color={textMuted}>\n                                                        Name of the service, application, or device (e.g., Company Laptop)\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </GridItem>\n\n                                            <GridItem colSpan={{ base: 2, md: 1 }}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Company (Optional)</FormLabel>\n                                                    <Select\n                                                        placeholder=\"Select company\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        value={company}\n                                                        onChange={(e) => setCompany(e.target.value)}\n                                                        disabled={companiesLoading}\n                                                    >\n                                                        {companiesData?.companies?.map((company: any) => (\n                                                            <option key={company.id} value={company.id}>\n                                                                {company.tradingName || company.name} {company.abn ? `(ABN: ${company.abn})` : ''}\n                                                            </option>\n                                                        ))}\n                                                    </Select>\n                                                    <FormHelperText color={textMuted}>\n                                                        Link this password to a company\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </GridItem>\n\n                                            <GridItem colSpan={2}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Share With (Optional)</FormLabel>\n                                                    <Select\n                                                        placeholder=\"Select users to share with\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        onChange={(e) => {\n                                                            if (e.target.value && !sharedWith.includes(e.target.value)) {\n                                                                setSharedWith([...sharedWith, e.target.value]);\n                                                            }\n                                                        }}\n                                                        disabled={clientsLoading}\n                                                    >\n                                                        {clientsData?.clients\n                                                            ?.filter((client: Client) => !sharedWith.includes(client.id))\n                                                            .map((client: Client) => (\n                                                                <option key={client.id} value={client.id}>\n                                                                    {client.fName} {client.lName} ({client.email})\n                                                                </option>\n                                                            ))}\n                                                    </Select>\n                                                    <HStack mt={2} wrap=\"wrap\" spacing={2}>\n                                                        {sharedWith.map((clientId) => {\n                                                            const client = clientsData?.clients?.find((c: Client) => c.id === clientId);\n                                                            return (\n                                                                <Badge\n                                                                    key={clientId}\n                                                                    colorScheme=\"purple\"\n                                                                    px={2}\n                                                                    py={1}\n                                                                    borderRadius=\"md\"\n                                                                    cursor=\"pointer\"\n                                                                    onClick={() => setSharedWith(sharedWith.filter(id => id !== clientId))}\n                                                                >\n                                                                    {client?.fName} {client?.lName} ✕\n                                                                </Badge>\n                                                            );\n                                                        })}\n                                                    </HStack>\n                                                    <FormHelperText color={textMuted}>\n                                                        Users who can access and manage this password\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </GridItem>\n\n                                            <GridItem colSpan={2}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Login URL (Optional)</FormLabel>\n                                                    <Input\n                                                        type=\"url\"\n                                                        placeholder=\"https://example.com/login or leave blank for devices\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _placeholder={{ color: textMuted }}\n                                                        value={loginUrl}\n                                                        onChange={(e) => setLoginUrl(e.target.value)}\n                                                    />\n                                                    <FormHelperText color={textMuted}>\n                                                        URL where the user logs in (leave blank for devices like laptops)\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </GridItem>\n\n                                            <GridItem colSpan={3}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Dashboard URL (Optional)</FormLabel>\n                                                    <Input\n                                                        type=\"url\"\n                                                        placeholder=\"https://example.com/dashboard\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _placeholder={{ color: textMuted }}\n                                                        value={dashboardUrl}\n                                                        onChange={(e) => setDashboardUrl(e.target.value)}\n                                                    />\n                                                    <FormHelperText color={textMuted}>\n                                                        URL to access after logging in\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </GridItem>\n                                        </Grid>\n                                    </Box>\n\n                                    <Divider borderColor={cardBorder} />\n\n                                    {/* Login Credentials */}\n                                    <Box>\n                                        <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" mb={4}>\n                                            Login Credentials\n                                        </Text>\n                                        <Grid templateColumns={{ base: \"1fr\", md: \"repeat(2, 1fr)\" }} gap={{ base: 4, md: 6 }}>\n                                            <GridItem colSpan={{ base: 2, md: 1 }}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Username (Optional)</FormLabel>\n                                                    <Input\n                                                        placeholder=\"username\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _placeholder={{ color: textMuted }}\n                                                        value={username}\n                                                        onChange={(e) => setUsername(e.target.value)}\n                                                    />\n                                                </FormControl>\n                                            </GridItem>\n\n                                            <GridItem colSpan={{ base: 2, md: 1 }}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Email (Optional)</FormLabel>\n                                                    <Input\n                                                        type=\"email\"\n                                                        placeholder=\"user@example.com\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _placeholder={{ color: textMuted }}\n                                                        value={email}\n                                                        onChange={(e) => setEmail(e.target.value)}\n                                                    />\n                                                </FormControl>\n                                            </GridItem>\n\n                                            <GridItem colSpan={2}>\n                                                <FormControl isRequired>\n                                                    <FormLabel color={textPrimary}>Password</FormLabel>\n                                                    <InputGroup>\n                                                        <Input\n                                                            type={showPassword ? \"text\" : \"password\"}\n                                                            placeholder=\"Enter password\"\n                                                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                            borderColor={cardBorder}\n                                                            color={textPrimary}\n                                                            _placeholder={{ color: textMuted }}\n                                                            value={password}\n                                                            onChange={(e) => setPassword(e.target.value)}\n                                                            fontFamily=\"mono\"\n                                                        />\n                                                        <InputRightElement width={{ base: \"4rem\", md: \"6rem\" }}>\n                                                            <HStack spacing={1}>\n                                                                <IconButton\n                                                                    size={{ base: \"xs\", md: \"sm\" }}\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Toggle password\"\n                                                                    icon={showPassword ? <ViewOffIcon /> : <ViewIcon />}\n                                                                    onClick={() => setShowPassword(!showPassword)}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                    display={{ base: \"none\", sm: \"flex\" }}\n                                                                />\n                                                                <IconButton\n                                                                    size={{ base: \"xs\", md: \"sm\" }}\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Generate password\"\n                                                                    icon={<RepeatIcon />}\n                                                                    onClick={generatePassword}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                                {password && (\n                                                                    <IconButton\n                                                                        size={{ base: \"xs\", md: \"sm\" }}\n                                                                        variant=\"ghost\"\n                                                                        aria-label=\"Copy password\"\n                                                                        icon={<CopyIcon />}\n                                                                        onClick={() => copyToClipboard(password, \"Password\")}\n                                                                        minW=\"32px\"\n                                                                        minH=\"32px\"\n                                                                        display={{ base: \"none\", sm: \"flex\" }}\n                                                                    />\n                                                                )}\n                                                            </HStack>\n                                                        </InputRightElement>\n                                                    </InputGroup>\n                                                    <FormHelperText color={textMuted}>\n                                                        Use the generate button for a secure password\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </GridItem>\n                                        </Grid>\n                                    </Box>\n\n                                    <Divider borderColor={cardBorder} />\n\n                                    {/* Two-Factor Authentication */}\n                                    <Box>\n                                        <VStack spacing={4} align=\"stretch\" mb={4}>\n                                            <HStack justify=\"space-between\">\n                                                <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\">\n                                                    Two-Factor Authentication\n                                                </Text>\n                                                <Switch\n                                                    isChecked={has2FA}\n                                                    onChange={(e) => setHas2FA(e.target.checked)}\n                                                    colorScheme=\"purple\"\n                                                />\n                                            </HStack>\n                                        </VStack>\n                                        {has2FA && (\n                                            <Grid templateColumns=\"repeat(1, 1fr)\" gap={4}>\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>2FA Secret Key</FormLabel>\n                                                    <InputGroup>\n                                                        <Input\n                                                            placeholder=\"JBSWY3DPEHPK3PXP...\"\n                                                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                            borderColor={cardBorder}\n                                                            color={textPrimary}\n                                                            _placeholder={{ color: textMuted }}\n                                                            value={twoFactorSecret}\n                                                            onChange={(e) => setTwoFactorSecret(e.target.value)}\n                                                            fontFamily=\"mono\"\n                                                        />\n                                                        {twoFactorSecret && (\n                                                            <InputRightElement>\n                                                                <IconButton\n                                                                    size={{ base: \"xs\", md: \"sm\" }}\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Copy 2FA\"\n                                                                    icon={<CopyIcon />}\n                                                                    onClick={() => copyToClipboard(twoFactorSecret, \"2FA Secret\")}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                            </InputRightElement>\n                                                        )}\n                                                    </InputGroup>\n                                                    <FormHelperText color={textMuted}>\n                                                        TOTP secret for authenticator apps\n                                                    </FormHelperText>\n                                                </FormControl>\n\n                                                <FormControl>\n                                                    <FormLabel color={textPrimary}>Backup Codes</FormLabel>\n                                                    <Textarea\n                                                        placeholder=\"Enter backup codes, one per line or comma-separated\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _placeholder={{ color: textMuted }}\n                                                        value={twoFactorBackupCodes}\n                                                        onChange={(e) => setTwoFactorBackupCodes(e.target.value)}\n                                                        rows={3}\n                                                    />\n                                                    <FormHelperText color={textMuted}>\n                                                        One-time use backup codes\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </Grid>\n                                        )}\n                                    </Box>\n\n                                    <Divider borderColor={cardBorder} />\n\n                                    {/* Additional Settings */}\n                                    <Box>\n                                        <Text color={textPrimary} fontSize={{ base: \"md\", md: \"lg\" }} fontWeight=\"bold\" mb={4}>\n                                            Additional Settings\n                                        </Text>\n                                        <VStack spacing={4} align=\"stretch\">\n                                            <FormControl>\n                                                <FormLabel color={textPrimary}>Notes (Optional)</FormLabel>\n                                                <Textarea\n                                                    placeholder=\"Any special instructions or notes...\"\n                                                    bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                    borderColor={cardBorder}\n                                                    color={textPrimary}\n                                                    _placeholder={{ color: textMuted }}\n                                                    value={notes}\n                                                    onChange={(e) => setNotes(e.target.value)}\n                                                    rows={4}\n                                                />\n                                                <FormHelperText color={textMuted}>\n                                                    Additional information or instructions\n                                                </FormHelperText>\n                                            </FormControl>\n\n                                            <FormControl>\n                                                <VStack spacing={2} align=\"stretch\">\n                                                    <HStack justify=\"space-between\">\n                                                        <FormLabel color={textPrimary} mb={0}>Password Expiration</FormLabel>\n                                                        <Switch\n                                                            isChecked={hasExpiration}\n                                                            onChange={(e) => setHasExpiration(e.target.checked)}\n                                                            colorScheme=\"orange\"\n                                                        />\n                                                    </HStack>\n                                                </VStack>\n                                                {hasExpiration && (\n                                                    <Input\n                                                        type=\"datetime-local\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        value={expiresAt}\n                                                        onChange={(e) => setExpiresAt(e.target.value)}\n                                                        min={new Date().toISOString().slice(0, 16)}\n                                                    />\n                                                )}\n                                                <FormHelperText color={textMuted}>\n                                                    Set an expiration date for this password\n                                                </FormHelperText>\n                                            </FormControl>\n\n                                            <Divider borderColor={cardBorder} />\n\n                                            {/* Instructional Videos */}\n                                            <FormControl>\n                                                <FormLabel color={textPrimary}>Instructional Videos (Optional)</FormLabel>\n                                                <VStack spacing={3} align=\"stretch\">\n                                                    <Select\n                                                        placeholder=\"Select a video to add\"\n                                                        bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        onChange={(e) => {\n                                                            const selectedVideo = ipfsVideosData?.myIPFSVideos?.find((v: any) => v.id === e.target.value);\n                                                            if (selectedVideo && !instructionalVideos.find(v => v.ipfsHash === selectedVideo.ipfsHash)) {\n                                                                setInstructionalVideos([\n                                                                    ...instructionalVideos,\n                                                                    {\n                                                                        ipfsHash: selectedVideo.ipfsHash,\n                                                                        title: selectedVideo.title,\n                                                                        description: selectedVideo.description\n                                                                    }\n                                                                ]);\n                                                                e.target.value = \"\";\n                                                            }\n                                                        }}\n                                                        disabled={ipfsVideosLoading}\n                                                    >\n                                                        {ipfsVideosData?.myIPFSVideos\n                                                            ?.filter((video: any) => !instructionalVideos.find(v => v.ipfsHash === video.ipfsHash))\n                                                            .map((video: any) => (\n                                                                <option key={video.id} value={video.id}>\n                                                                    {video.title}\n                                                                </option>\n                                                            ))}\n                                                    </Select>\n\n                                                    {instructionalVideos.length > 0 && (\n                                                        <VStack spacing={2} align=\"stretch\">\n                                                            {instructionalVideos.map((video, index) => (\n                                                                <HStack\n                                                                    key={video.ipfsHash}\n                                                                    p={3}\n                                                                    bg={colorMode === 'light' ? 'gray.50' : 'rgba(255, 255, 255, 0.05)'}\n                                                                    borderRadius=\"md\"\n                                                                    borderWidth=\"1px\"\n                                                                    borderColor={cardBorder}\n                                                                    justify=\"space-between\"\n                                                                >\n                                                                    <VStack align=\"start\" spacing={0} flex={1}>\n                                                                        <Text color={textPrimary} fontWeight=\"medium\" fontSize=\"sm\">\n                                                                            {index + 1}. {video.title}\n                                                                        </Text>\n                                                                        {video.description && (\n                                                                            <Text color={textMuted} fontSize=\"xs\" noOfLines={1}>\n                                                                                {video.description}\n                                                                            </Text>\n                                                                        )}\n                                                                    </VStack>\n                                                                    <IconButton\n                                                                        size=\"sm\"\n                                                                        variant=\"ghost\"\n                                                                        aria-label=\"Remove video\"\n                                                                        icon={<CloseIcon />}\n                                                                        onClick={() => {\n                                                                            setInstructionalVideos(\n                                                                                instructionalVideos.filter(v => v.ipfsHash !== video.ipfsHash)\n                                                                            );\n                                                                        }}\n                                                                    />\n                                                                </HStack>\n                                                            ))}\n                                                        </VStack>\n                                                    )}\n                                                </VStack>\n                                                <FormHelperText color={textMuted}>\n                                                    Add IPFS videos to show users how to use this password (e.g., login process, 2FA setup)\n                                                </FormHelperText>\n                                            </FormControl>\n                                        </VStack>\n                                    </Box>\n\n                                    <Divider borderColor={cardBorder} />\n\n                                    {/* Submit Buttons */}\n                                    <VStack spacing={4} align=\"stretch\" direction={{ base: \"column\", md: \"row\" }} justify={{ base: \"stretch\", md: \"flex-end\" }}>\n                                        <Button\n                                            variant=\"outline\"\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            onClick={() => navigate(\"/passwords/admin\")}\n                                            width={{ base: \"100%\", md: \"auto\" }}\n                                            minW={{ md: \"120px\" }}\n                                        >\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            type=\"submit\"\n                                            bg={primaryColor}\n                                            color=\"white\"\n                                            _hover={{ bg: primaryHover }}\n                                            isLoading={creating}\n                                            loadingText=\"Issuing...\"\n                                            leftIcon={<AddIcon />}\n                                            width={{ base: \"100%\", md: \"auto\" }}\n                                            minW={{ md: \"150px\" }}\n                                        >\n                                            Create Password\n                                        </Button>\n                                    </VStack>\n\n                                    {/* Security Notice */}\n                                    <Alert status=\"info\" borderRadius=\"md\" bg=\"rgba(59, 130, 246, 0.1)\" borderColor=\"blue.500\" border=\"1px\">\n                                        <AlertIcon color=\"blue.500\" />\n                                        <AlertDescription color={textPrimary}>\n                                            <Text fontSize=\"sm\">\n                                                This password will be saved securely. Users you share it with will receive an email notification\n                                                and can access it from their dashboard.\n                                            </Text>\n                                        </AlertDescription>\n                                    </Alert>\n                                </VStack>\n                            </form>\n                        </CardBody>\n                    </Card>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default NewPassword;"],"names":["ViewOffIcon","createIcon","displayName","path","jsxs","fill","children","jsx","d","GET_CLIENTS","gql","_templateObject","_taggedTemplateLiteral","GET_COMPANIES","_templateObject2","GET_MY_IPFS_VIDEOS","_templateObject3","CREATE_PASSWORD","_templateObject4","NewPassword","_companiesData$compan","_clientsData$clients","_ipfsVideosData$myIPF2","usePageTitle","navigate","useNavigate","toast","useToast","colorMode","useColorMode","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textMuted","primaryColor","primaryHover","serviceName","setServiceName","useState","loginUrl","setLoginUrl","dashboardUrl","setDashboardUrl","username","setUsername","email","setEmail","password","setPassword","showPassword","setShowPassword","twoFactorSecret","setTwoFactorSecret","twoFactorBackupCodes","setTwoFactorBackupCodes","notes","setNotes","company","setCompany","sharedWith","setSharedWith","hasExpiration","setHasExpiration","expiresAt","setExpiresAt","has2FA","setHas2FA","instructionalVideos","setInstructionalVideos","data","clientsData","loading","clientsLoading","useQuery","companiesData","companiesLoading","ipfsVideosData","ipfsVideosLoading","createPassword","creating","useMutation","onCompleted","_data$createPassword$","_data$createPassword$2","sharedCount","sharedWithEmployees","length","sharedWithExternal","title","description","concat","status","duration","isClosable","onError","error","message","copyToClipboard","text","label","navigator","clipboard","writeText","_jsxs","Box","bg","minH","display","flexDirection","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","passwordsModuleConfig","Container","maxW","base","lg","px","md","py","flex","VStack","spacing","align","Heading","color","fontFamily","brandConfig","fonts","heading","size","Card","backdropFilter","boxShadow","border","borderColor","borderRadius","CardBody","onSubmit","async","e","preventDefault","input","Date","toISOString","variables","Text","fontSize","fontWeight","mb","Grid","templateColumns","gap","GridItem","colSpan","FormControl","isRequired","FormLabel","Input","placeholder","_placeholder","value","onChange","target","FormHelperText","Select","disabled","companies","map","id","tradingName","name","abn","includes","clients","filter","client","fName","lName","HStack","mt","wrap","clientId","_clientsData$clients2","find","c","Badge","colorScheme","cursor","onClick","type","Divider","InputGroup","InputRightElement","width","IconButton","variant","icon","ViewIcon","minW","sm","RepeatIcon","generatePassword","charset","newPassword","i","charAt","Math","floor","random","CopyIcon","justify","Switch","isChecked","checked","Textarea","rows","min","slice","_ipfsVideosData$myIPF","selectedVideo","myIPFSVideos","v","ipfsHash","video","index","p","borderWidth","noOfLines","CloseIcon","direction","Button","_hover","isLoading","loadingText","leftIcon","AddIcon","Alert","AlertIcon","AlertDescription","FooterWithFourColumns"],"sourceRoot":""}