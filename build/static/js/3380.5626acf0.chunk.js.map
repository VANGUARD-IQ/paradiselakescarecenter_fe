{"version":3,"file":"static/js/3380.5626acf0.chunk.js","mappings":"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","sources":["pages/calendars/life-goals/OpportunityLinker.tsx","pages/calendars/life-goals/LifeGoalModal.tsx","pages/calendars/life-goals/LifeGoalCard.tsx","pages/calendars/life-goals/components/TimelineRuler.tsx","pages/calendars/life-goals/LifeGoalsTimeline.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  VStack,\n  HStack,\n  Text,\n  Checkbox,\n  Badge,\n  Box,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  useColorMode,\n  Skeleton,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { FiDollarSign, FiTrendingUp } from 'react-icons/fi';\nimport { getColor } from '../../../brandConfig';\nimport { useQuery, gql } from '@apollo/client';\n\nconst GET_OPPORTUNITIES = gql`\n  query GetOpportunities($status: OpportunityStatus, $stage: String) {\n    opportunities(status: $status, stage: $stage) {\n      id\n      title\n      description\n      clientName\n      value\n      stage\n      status\n      priority\n      probability\n      expectedRevenue\n      expectedCloseDate\n      assignedToName\n    }\n  }\n`;\n\ninterface OpportunityLinkerProps {\n  selectedOpportunities: string[];\n  onOpportunitiesChange: (opportunityIds: string[]) => void;\n}\n\nexport const OpportunityLinker: React.FC<OpportunityLinkerProps> = ({\n  selectedOpportunities,\n  onOpportunitiesChange,\n}) => {\n  const { colorMode } = useColorMode();\n\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const formBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.taskCard\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Fetch opportunities (all statuses and stages)\n  const { loading, error, data } = useQuery(GET_OPPORTUNITIES, {\n    variables: {\n      // Don't filter by status or stage - get all opportunities\n    },\n    context: {\n      headers: {\n        'x-tenant-id': localStorage.getItem('tenantId') || '',\n      },\n    },\n  });\n\n  const opportunities = data?.opportunities || [];\n\n  // Filter opportunities by search term\n  const filteredOpportunities = opportunities.filter((opp: any) =>\n    (opp.title || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleToggleOpportunity = (opportunityId: string) => {\n    if (selectedOpportunities.includes(opportunityId)) {\n      onOpportunitiesChange(selectedOpportunities.filter(id => id !== opportunityId));\n    } else {\n      onOpportunitiesChange([...selectedOpportunities, opportunityId]);\n    }\n  };\n\n  // Calculate selected opportunities stats\n  const selectedOpportunitiesData = opportunities.filter((opp: any) =>\n    selectedOpportunities.includes(opp.id)\n  );\n  const totalValue = selectedOpportunitiesData.reduce((sum: number, opp: any) => sum + (opp.value || 0), 0);\n  const weightedValue = selectedOpportunitiesData.reduce(\n    (sum: number, opp: any) => sum + (opp.value || 0) * ((opp.probability || 0) / 100),\n    0\n  );\n  const expectedRevenue = selectedOpportunitiesData.reduce(\n    (sum: number, opp: any) => sum + (opp.expectedRevenue || 0),\n    0\n  );\n\n  const getStageColor = (stage: string) => {\n    const colors: Record<string, string> = {\n      LEAD: 'gray',\n      QUALIFIED: 'blue',\n      PROPOSAL: 'purple',\n      NEGOTIATION: 'orange',\n      WON: 'green',\n      LOST: 'red',\n      PROSPECTING: 'gray',\n      QUALIFICATION: 'blue',\n      CLOSED_WON: 'green',\n      CLOSED_LOST: 'red',\n    };\n    return colors[stage] || 'gray';\n  };\n\n  const formatStage = (stage: string) => {\n    const stageNames: Record<string, string> = {\n      LEAD: 'Lead',\n      QUALIFIED: 'Qualified',\n      PROPOSAL: 'Proposal',\n      NEGOTIATION: 'Negotiation',\n      WON: 'Won',\n      LOST: 'Lost',\n      PROSPECTING: 'Prospecting',\n      QUALIFICATION: 'Qualification',\n      CLOSED_WON: 'Won',\n      CLOSED_LOST: 'Lost',\n    };\n    return stageNames[stage] || stage;\n  };\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <Text fontSize=\"sm\">Failed to load opportunities: {error.message}</Text>\n      </Alert>\n    );\n  }\n\n  return (\n    <VStack spacing={3} align=\"stretch\">\n      {/* Search */}\n      <InputGroup>\n        <InputLeftElement pointerEvents=\"none\">\n          <SearchIcon color={textMuted} />\n        </InputLeftElement>\n        <Input\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          placeholder=\"Search opportunities...\"\n          bg={formBg}\n          color={textPrimary}\n          borderColor={cardBorder}\n          _placeholder={{ color: textMuted }}\n        />\n      </InputGroup>\n\n      {/* Selected Summary */}\n      {selectedOpportunities.length > 0 && (\n        <Box p={3} bg={formBg} borderRadius=\"md\" borderWidth=\"1px\" borderColor={cardBorder}>\n          <VStack align=\"stretch\" spacing={2}>\n            <HStack justify=\"space-between\">\n              <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                Selected: {selectedOpportunities.length} opportunities\n              </Text>\n            </HStack>\n            <HStack spacing={4} fontSize=\"sm\">\n              <HStack>\n                <FiDollarSign color=\"#10B981\" />\n                <Text color={textSecondary}>\n                  Total: <strong>${totalValue.toLocaleString()}</strong>\n                </Text>\n              </HStack>\n              <HStack>\n                <FiTrendingUp color=\"#F59E0B\" />\n                <Text color={textSecondary}>\n                  Weighted: <strong>${Math.round(weightedValue).toLocaleString()}</strong>\n                </Text>\n              </HStack>\n            </HStack>\n          </VStack>\n        </Box>\n      )}\n\n      {/* Opportunities List */}\n      <Box\n        maxH=\"300px\"\n        overflowY=\"auto\"\n        borderWidth=\"1px\"\n        borderColor={cardBorder}\n        borderRadius=\"md\"\n        p={2}\n      >\n        {loading ? (\n          <VStack spacing={2}>\n            {[1, 2, 3].map(i => (\n              <Skeleton key={i} height=\"50px\" />\n            ))}\n          </VStack>\n        ) : filteredOpportunities.length === 0 ? (\n          <Text color={textMuted} fontSize=\"sm\" textAlign=\"center\" py={4}>\n            {searchTerm ? 'No opportunities match your search' : 'No opportunities available'}\n          </Text>\n        ) : (\n          <VStack spacing={2} align=\"stretch\">\n            {filteredOpportunities.map((opportunity: any) => (\n              <Box\n                key={opportunity.id}\n                p={3}\n                borderWidth=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"md\"\n                bg={selectedOpportunities.includes(opportunity.id) ? `${formBg}` : 'transparent'}\n                cursor=\"pointer\"\n                transition=\"all 0.2s\"\n                _hover={{\n                  bg: formBg,\n                  transform: 'translateX(2px)',\n                }}\n                onClick={() => handleToggleOpportunity(opportunity.id)}\n              >\n                <HStack spacing={3} justify=\"space-between\">\n                  <HStack flex=\"1\" minW=\"0\">\n                    <Checkbox\n                      isChecked={selectedOpportunities.includes(opportunity.id)}\n                      onChange={() => handleToggleOpportunity(opportunity.id)}\n                      onClick={(e) => e.stopPropagation()}\n                    />\n                    <VStack align=\"start\" spacing={0} flex=\"1\" minW=\"0\">\n                      <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary} noOfLines={1}>\n                        {opportunity.title}\n                      </Text>\n                      <HStack spacing={2} fontSize=\"xs\">\n                        <Badge colorScheme={getStageColor(opportunity.stage)} fontSize=\"xs\">\n                          {formatStage(opportunity.stage)}\n                        </Badge>\n                        {opportunity.probability > 0 && (\n                          <Text color={textMuted}>{opportunity.probability}% probability</Text>\n                        )}\n                        {opportunity.clientName && (\n                          <Text color={textMuted}>• {opportunity.clientName}</Text>\n                        )}\n                      </HStack>\n                    </VStack>\n                  </HStack>\n                  <VStack align=\"end\" spacing={0}>\n                    <Text fontSize=\"sm\" fontWeight=\"bold\" color=\"green.500\">\n                      ${opportunity.value?.toLocaleString() || '0'}\n                    </Text>\n                    {opportunity.expectedCloseDate && (\n                      <Text fontSize=\"xs\" color={textMuted}>\n                        {new Date(opportunity.expectedCloseDate).toLocaleDateString()}\n                      </Text>\n                    )}\n                  </VStack>\n                </HStack>\n              </Box>\n            ))}\n          </VStack>\n        )}\n      </Box>\n\n      {/* Helper Text */}\n      <Text fontSize=\"xs\" color={textMuted}>\n        <strong>Tip:</strong> Link opportunities that contribute to this goal. The system will track\n        their progress and calculate how many more opportunities you need to close.\n      </Text>\n    </VStack>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  VStack,\n  HStack,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  useColorMode,\n  Text,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Box,\n  Badge,\n  Divider,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Alert,\n  AlertIcon,\n  Progress,\n} from '@chakra-ui/react';\nimport { InfoIcon } from '@chakra-ui/icons';\nimport { FiTarget, FiDollarSign, FiTrendingUp } from 'react-icons/fi';\nimport { getColor } from '../../../brandConfig';\nimport { OpportunityLinker } from './OpportunityLinker';\n\ninterface LifeGoalModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  goal?: any;\n  initialDates?: {\n    startDate: string;\n    endDate: string;\n  };\n  onSave: (goal: any) => void;\n  onDelete?: (goal: any) => void;\n}\n\nconst GOAL_TYPES = [\n  { value: 'CAREER', label: 'Career', color: '#3B82F6' },\n  { value: 'FINANCIAL', label: 'Financial', color: '#10B981' },\n  { value: 'HEALTH', label: 'Health', color: '#EF4444' },\n  { value: 'RELATIONSHIP', label: 'Relationship', color: '#EC4899' },\n  { value: 'LEARNING', label: 'Learning', color: '#8B5CF6' },\n  { value: 'LEGACY', label: 'Legacy', color: '#F59E0B' },\n];\n\nexport const LifeGoalModal: React.FC<LifeGoalModalProps> = ({\n  isOpen,\n  onClose,\n  goal,\n  initialDates,\n  onSave,\n  onDelete,\n}) => {\n  const { colorMode } = useColorMode();\n\n  // Theme colors\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.darkSurface\", colorMode);\n  const formBg = getColor(colorMode === 'light' ? \"background.light\" : \"background.taskCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    goalType: 'FINANCIAL',\n    startDate: '',\n    endDate: '',\n    financialTarget: 0,\n    linkedOpportunities: [] as string[],\n    parentGoalId: null as string | null,\n    dependencies: [] as string[],\n  });\n\n  // Opportunity calculations\n  const [opportunityStats, setOpportunityStats] = useState({\n    totalValue: 0,\n    closedValue: 0,\n    remainingNeeded: 0,\n    opportunitiesNeeded: 0,\n  });\n\n  useEffect(() => {\n    if (goal) {\n      setFormData({\n        title: goal.title || '',\n        description: goal.description || '',\n        goalType: goal.metadata?.['X-LIFE-GOAL-TYPE'] || 'FINANCIAL',\n        startDate: goal.startTime ? new Date(goal.startTime).toISOString().split('T')[0] : '',\n        endDate: goal.endTime ? new Date(goal.endTime).toISOString().split('T')[0] : '',\n        financialTarget: goal.metadata?.['X-FINANCIAL-TARGET'] || 0,\n        linkedOpportunities: goal.metadata?.['X-OPPORTUNITY-IDS'] || [],\n        parentGoalId: goal.metadata?.['X-PARENT-GOAL-ID'] || null,\n        dependencies: goal.metadata?.['X-DEPENDENCIES'] || [],\n      });\n    } else if (initialDates) {\n      // For new goals created by dragging, set the dates\n      setFormData(prev => ({\n        ...prev,\n        startDate: initialDates.startDate,\n        endDate: initialDates.endDate,\n      }));\n    }\n  }, [goal, initialDates]);\n\n  // Calculate opportunity stats when opportunities change\n  useEffect(() => {\n    calculateOpportunityStats();\n  }, [formData.linkedOpportunities, formData.financialTarget]);\n\n  const calculateOpportunityStats = () => {\n    // TODO: Fetch actual opportunity data from GraphQL\n    // For now, mock calculation\n    const totalValue = formData.linkedOpportunities.length * 50000; // Mock: $50k per opportunity\n    const closedValue = totalValue * 0.3; // Mock: 30% closed\n    const remainingNeeded = formData.financialTarget - closedValue;\n    const opportunitiesNeeded = remainingNeeded > 0 ? Math.ceil(remainingNeeded / 50000) : 0;\n\n    setOpportunityStats({\n      totalValue,\n      closedValue,\n      remainingNeeded: Math.max(0, remainingNeeded),\n      opportunitiesNeeded,\n    });\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    // Build life goal data\n    const lifeGoalData = {\n      id: goal?.id,\n      title: formData.title,\n      description: formData.description,\n      startDate: formData.startDate, // Pass the date string directly\n      endDate: formData.endDate, // Pass the date string directly\n      goalType: formData.goalType,\n      financialTarget: formData.financialTarget,\n      opportunityIds: formData.linkedOpportunities,\n      parentGoalId: formData.parentGoalId,\n      dependencies: formData.dependencies,\n    };\n\n    onSave(lifeGoalData);\n  };\n\n  const handleDelete = () => {\n    if (goal && onDelete) {\n      onDelete(goal);\n      onClose();\n    }\n  };\n\n  const progressPercentage = formData.financialTarget > 0\n    ? Math.min(100, (opportunityStats.closedValue / formData.financialTarget) * 100)\n    : 0;\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"2xl\">\n      <ModalOverlay />\n      <ModalContent bg={cardBg} color={textPrimary}>\n        <ModalHeader>\n          <HStack>\n            <FiTarget />\n            <Text>{goal ? 'Edit' : 'Create'} Life Goal</Text>\n          </HStack>\n        </ModalHeader>\n        <ModalCloseButton />\n\n        <ModalBody>\n          <VStack spacing={4} align=\"stretch\">\n            {/* Basic Info */}\n            <FormControl isRequired>\n              <FormLabel color={textPrimary}>Goal Title</FormLabel>\n              <Input\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                placeholder=\"e.g., Get approved for house loan\"\n                bg={formBg}\n                color={textPrimary}\n                borderColor={cardBorder}\n                _placeholder={{ color: textMuted }}\n              />\n            </FormControl>\n\n            <FormControl>\n              <FormLabel color={textPrimary}>Description</FormLabel>\n              <Textarea\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                placeholder=\"Describe your long-term goal and why it matters...\"\n                rows={3}\n                bg={formBg}\n                color={textPrimary}\n                borderColor={cardBorder}\n                _placeholder={{ color: textMuted }}\n              />\n            </FormControl>\n\n            {/* Goal Type */}\n            <FormControl isRequired>\n              <FormLabel color={textPrimary}>Goal Type</FormLabel>\n              <Select\n                value={formData.goalType}\n                onChange={(e) => handleInputChange('goalType', e.target.value)}\n                bg={formBg}\n                color={textPrimary}\n                borderColor={cardBorder}\n              >\n                {GOAL_TYPES.map(type => (\n                  <option key={type.value} value={type.value} style={{\n                    backgroundColor: colorMode === 'light' ? '#FFFFFF' : '#1A202C',\n                    color: colorMode === 'light' ? '#1A202C' : '#FFFFFF'\n                  }}>\n                    {type.label}\n                  </option>\n                ))}\n              </Select>\n            </FormControl>\n\n            {/* Timeline */}\n            <HStack spacing={4}>\n              <FormControl isRequired>\n                <FormLabel color={textPrimary}>Start Date</FormLabel>\n                <Input\n                  type=\"date\"\n                  value={formData.startDate}\n                  onChange={(e) => handleInputChange('startDate', e.target.value)}\n                  bg={formBg}\n                  color={textPrimary}\n                  borderColor={cardBorder}\n                />\n              </FormControl>\n\n              <FormControl isRequired>\n                <FormLabel color={textPrimary}>Target Date</FormLabel>\n                <Input\n                  type=\"date\"\n                  value={formData.endDate}\n                  onChange={(e) => handleInputChange('endDate', e.target.value)}\n                  bg={formBg}\n                  color={textPrimary}\n                  borderColor={cardBorder}\n                />\n              </FormControl>\n            </HStack>\n\n            {/* Financial Target (for financial goals) */}\n            {formData.goalType === 'FINANCIAL' && (\n              <>\n                <Divider borderColor={cardBorder} />\n                <FormControl>\n                  <FormLabel color={textPrimary}>\n                    <HStack>\n                      <FiDollarSign />\n                      <Text>Financial Target</Text>\n                    </HStack>\n                  </FormLabel>\n                  <NumberInput\n                    value={formData.financialTarget}\n                    onChange={(_, value) => handleInputChange('financialTarget', value)}\n                    min={0}\n                  >\n                    <NumberInputField\n                      bg={formBg}\n                      color={textPrimary}\n                      borderColor={cardBorder}\n                      placeholder=\"e.g., 160000 for down payment\"\n                    />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                  <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                    Amount needed to achieve this goal\n                  </Text>\n                </FormControl>\n\n                {/* Opportunity Progress */}\n                {formData.financialTarget > 0 && (\n                  <Box p={4} bg={formBg} borderRadius=\"md\" borderWidth=\"1px\" borderColor={cardBorder}>\n                    <VStack align=\"stretch\" spacing={3}>\n                      <HStack justify=\"space-between\">\n                        <Text fontWeight=\"bold\" color={textPrimary}>\n                          Progress Tracker\n                        </Text>\n                        <Badge colorScheme={progressPercentage >= 100 ? 'green' : 'blue'}>\n                          {progressPercentage.toFixed(0)}%\n                        </Badge>\n                      </HStack>\n\n                      <Progress\n                        value={progressPercentage}\n                        colorScheme={progressPercentage >= 100 ? 'green' : 'blue'}\n                        size=\"lg\"\n                        borderRadius=\"md\"\n                      />\n\n                      <VStack align=\"stretch\" spacing={1} fontSize=\"sm\">\n                        <HStack justify=\"space-between\">\n                          <Text color={textSecondary}>Target:</Text>\n                          <Text color={textPrimary} fontWeight=\"medium\">\n                            ${formData.financialTarget.toLocaleString()}\n                          </Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color={textSecondary}>Closed Value:</Text>\n                          <Text color=\"green.500\" fontWeight=\"medium\">\n                            ${opportunityStats.closedValue.toLocaleString()}\n                          </Text>\n                        </HStack>\n                        <HStack justify=\"space-between\">\n                          <Text color={textSecondary}>Remaining:</Text>\n                          <Text color={opportunityStats.remainingNeeded > 0 ? \"orange.500\" : \"green.500\"} fontWeight=\"medium\">\n                            ${opportunityStats.remainingNeeded.toLocaleString()}\n                          </Text>\n                        </HStack>\n                      </VStack>\n\n                      {opportunityStats.opportunitiesNeeded > 0 && (\n                        <Alert status=\"info\" borderRadius=\"md\">\n                          <AlertIcon />\n                          <Text fontSize=\"sm\">\n                            You need to close <strong>{opportunityStats.opportunitiesNeeded} more opportunities</strong> to reach this goal\n                          </Text>\n                        </Alert>\n                      )}\n                    </VStack>\n                  </Box>\n                )}\n              </>\n            )}\n\n            {/* Opportunity Linker */}\n            <Divider />\n            <Accordion allowToggle>\n              <AccordionItem border=\"none\">\n                <AccordionButton bg={formBg} borderRadius=\"md\" _expanded={{ bg: formBg }}>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    <HStack>\n                      <FiTrendingUp />\n                      <Text fontWeight=\"medium\" color={textPrimary}>\n                        Link Opportunities\n                      </Text>\n                      <Badge colorScheme=\"blue\">\n                        {formData.linkedOpportunities.length}\n                      </Badge>\n                    </HStack>\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel>\n                  <OpportunityLinker\n                    selectedOpportunities={formData.linkedOpportunities}\n                    onOpportunitiesChange={(opportunities) =>\n                      handleInputChange('linkedOpportunities', opportunities)\n                    }\n                  />\n                </AccordionPanel>\n              </AccordionItem>\n            </Accordion>\n\n            {/* Goal Dependencies */}\n            <Accordion allowToggle>\n              <AccordionItem border=\"none\">\n                <AccordionButton bg={formBg} borderRadius=\"md\" _expanded={{ bg: formBg }}>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    <HStack>\n                      <InfoIcon />\n                      <Text fontWeight=\"medium\" color={textPrimary}>\n                        Dependencies & Parent Goals\n                      </Text>\n                    </HStack>\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel>\n                  <VStack align=\"stretch\" spacing={3}>\n                    <FormControl>\n                      <FormLabel color={textPrimary} fontSize=\"sm\">\n                        Parent Goal\n                      </FormLabel>\n                      <Select\n                        value={formData.parentGoalId || ''}\n                        onChange={(e) => handleInputChange('parentGoalId', e.target.value || null)}\n                        bg={formBg}\n                        color={textPrimary}\n                        borderColor={cardBorder}\n                        placeholder=\"Select parent goal (optional)\"\n                      >\n                        {/* TODO: Load available life goals */}\n                        <option value=\"\" style={{\n                          backgroundColor: colorMode === 'light' ? '#FFFFFF' : '#1A202C',\n                          color: colorMode === 'light' ? '#1A202C' : '#FFFFFF'\n                        }}>None - This is a top-level goal</option>\n                      </Select>\n                      <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                        Break down larger goals into sub-goals\n                      </Text>\n                    </FormControl>\n\n                    <Text fontSize=\"sm\" color={textSecondary}>\n                      Goal dependencies will be added in the next phase\n                    </Text>\n                  </VStack>\n                </AccordionPanel>\n              </AccordionItem>\n            </Accordion>\n          </VStack>\n        </ModalBody>\n\n        <ModalFooter justifyContent=\"space-between\">\n          {goal && onDelete ? (\n            <Button colorScheme=\"red\" variant=\"outline\" onClick={handleDelete}>\n              Delete\n            </Button>\n          ) : (\n            <Box />\n          )}\n          <HStack>\n            <Button variant=\"ghost\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSave}\n              isDisabled={!formData.title || !formData.startDate || !formData.endDate}\n            >\n              {goal ? 'Update' : 'Create'} Goal\n            </Button>\n          </HStack>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Text,\n  HStack,\n  VStack,\n  Badge,\n  IconButton,\n  Tooltip,\n  useColorMode,\n  Progress,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogBody,\n  AlertDialogFooter,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { EditIcon, InfoIcon, DeleteIcon } from '@chakra-ui/icons';\nimport { FiDollarSign, FiTarget } from 'react-icons/fi';\nimport { getColor } from '../../../brandConfig';\nimport type { ZoomLevel } from './LifeGoalsTimeline';\n\ninterface LifeGoalCardProps {\n  goal: any;\n  birthDate: Date;\n  zoomConfig: any;\n  onEdit: (goal: any) => void;\n  onResize?: (goal: any, newStartDate: Date, newEndDate: Date) => void;\n  onDelete?: (goal: any) => void;\n}\n\nconst GOAL_TYPE_COLORS: Record<string, string> = {\n  CAREER: '#3B82F6',\n  FINANCIAL: '#10B981',\n  HEALTH: '#EF4444',\n  RELATIONSHIP: '#EC4899',\n  LEARNING: '#8B5CF6',\n  LEGACY: '#F59E0B',\n};\n\nexport const LifeGoalCard: React.FC<LifeGoalCardProps> = ({\n  goal,\n  birthDate,\n  zoomConfig,\n  onEdit,\n  onResize,\n  onDelete,\n}) => {\n  const { colorMode } = useColorMode();\n  const [isResizing, setIsResizing] = useState<'top' | 'bottom' | null>(null);\n  const [tempStartDate, setTempStartDate] = useState<Date | null>(null);\n  const [tempEndDate, setTempEndDate] = useState<Date | null>(null);\n  const { isOpen: isDeleteOpen, onOpen: onDeleteOpen, onClose: onDeleteClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  // Reset temp dates when goal changes\n  useEffect(() => {\n    setTempStartDate(null);\n    setTempEndDate(null);\n  }, [goal.id]);\n\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  // Use temp dates during resize, otherwise use goal dates\n  const startDate = tempStartDate || new Date(goal.startTime);\n  const endDate = tempEndDate || new Date(goal.endTime);\n\n  // Calculate position and height\n  const daysSinceBirth = Math.floor((startDate.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24));\n  const durationDays = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n  const topPosition = daysSinceBirth * zoomConfig.pixelsPerDay;\n  const height = Math.max(durationDays * zoomConfig.pixelsPerDay, 30); // Min height for visibility\n\n  const goalType = goal.metadata?.['X-LIFE-GOAL-TYPE'] || 'CAREER';\n  const goalColor = GOAL_TYPE_COLORS[goalType] || '#3B82F6';\n  const financialTarget = goal.metadata?.['X-FINANCIAL-TARGET'] || 0;\n  const completionPercentage = goal.metadata?.['X-COMPLETION-PERCENTAGE'] || 0;\n\n  // Handle resize start\n  const handleResizeStart = (e: React.MouseEvent, edge: 'top' | 'bottom') => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    console.log('🎯 Starting resize from', edge);\n    setIsResizing(edge);\n\n    const startY = e.clientY;\n    const originalStart = new Date(goal.startTime);\n    const originalEnd = new Date(goal.endTime);\n\n    // Store the current resizing state in a ref to access in handleMouseUp\n    let currentTempStartDate: Date | null = null;\n    let currentTempEndDate: Date | null = null;\n\n    // Add global mouse event listeners\n    const handleMouseMove = (moveEvent: MouseEvent) => {\n      moveEvent.preventDefault();\n\n      const deltaY = moveEvent.clientY - startY;\n      const daysDelta = Math.round(deltaY / zoomConfig.pixelsPerDay);\n\n      console.log('📏 Resize delta:', daysDelta, 'days');\n\n      if (edge === 'top') {\n        // Resizing from top changes start date\n        const newStartDate = new Date(originalStart);\n        newStartDate.setDate(originalStart.getDate() + daysDelta);\n\n        // Don't allow start date to go past end date\n        if (newStartDate < originalEnd) {\n          currentTempStartDate = newStartDate;\n          currentTempEndDate = null;\n          setTempStartDate(newStartDate);\n          setTempEndDate(null);\n        }\n      } else {\n        // Resizing from bottom changes end date\n        const newEndDate = new Date(originalEnd);\n        newEndDate.setDate(originalEnd.getDate() + daysDelta);\n\n        // Don't allow end date to go before start date\n        if (newEndDate > originalStart) {\n          currentTempEndDate = newEndDate;\n          currentTempStartDate = null;\n          setTempEndDate(newEndDate);\n          setTempStartDate(null);\n        }\n      }\n    };\n\n    const handleMouseUp = () => {\n      console.log('🛑 Ending resize');\n      console.log('Current temp dates:', { currentTempStartDate, currentTempEndDate });\n\n      // Use the current temp values from the closure\n      const finalStart = currentTempStartDate || originalStart;\n      const finalEnd = currentTempEndDate || originalEnd;\n\n      // Check if dates actually changed\n      const datesChanged =\n        finalStart.getTime() !== originalStart.getTime() ||\n        finalEnd.getTime() !== originalEnd.getTime();\n\n      if (datesChanged && onResize) {\n        console.log('💾 Calling onResize with changed dates:', {\n          originalStart: originalStart.toISOString(),\n          originalEnd: originalEnd.toISOString(),\n          finalStart: finalStart.toISOString(),\n          finalEnd: finalEnd.toISOString()\n        });\n        onResize(goal, finalStart, finalEnd);\n      } else {\n        console.log('⏭️ No date changes, skipping resize');\n      }\n\n      // Reset state\n      setIsResizing(null);\n      setTempStartDate(null);\n      setTempEndDate(null);\n\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Determine if we should show details based on zoom level\n  const showDetails = zoomConfig.pixelsPerDay >= 0.5;\n  const showFullDetails = zoomConfig.pixelsPerDay >= 2;\n\n  return (\n    <Box\n      position=\"absolute\"\n      top={`${topPosition}px`}\n      left=\"10px\"\n      right=\"10px\"\n      minH={`${height}px`}\n      bg={`${goalColor}15`}\n      borderLeft=\"4px solid\"\n      borderLeftColor={goalColor}\n      borderRadius=\"md\"\n      borderWidth=\"1px\"\n      borderColor={cardBorder}\n      cursor={isResizing ? 'ns-resize' : 'pointer'}\n      transition={isResizing ? 'none' : 'all 0.2s'}\n      _hover={isResizing ? {} : {\n        transform: 'translateX(5px)',\n        boxShadow: 'lg',\n        bg: `${goalColor}25`,\n      }}\n      onClick={() => !isResizing && onEdit(goal)}\n    >\n      {/* Top resize handle */}\n      <Box\n        position=\"absolute\"\n        top=\"0\"\n        left=\"0\"\n        right=\"0\"\n        h=\"10px\"\n        cursor=\"ns-resize\"\n        bg={isResizing === 'top' ? `${goalColor}50` : 'transparent'}\n        _hover={{ bg: `${goalColor}50` }}\n        onMouseDown={(e) => handleResizeStart(e, 'top')}\n        onClick={(e) => e.stopPropagation()}\n        zIndex={10}\n      />\n\n      {/* Bottom resize handle */}\n      <Box\n        position=\"absolute\"\n        bottom=\"0\"\n        left=\"0\"\n        right=\"0\"\n        h=\"10px\"\n        cursor=\"ns-resize\"\n        bg={isResizing === 'bottom' ? `${goalColor}50` : 'transparent'}\n        _hover={{ bg: `${goalColor}50` }}\n        onMouseDown={(e) => handleResizeStart(e, 'bottom')}\n        onClick={(e) => e.stopPropagation()}\n        zIndex={10}\n      />\n\n      {/* Content */}\n      <Box p={showFullDetails ? 3 : 1}>\n      {showFullDetails ? (\n        <VStack align=\"stretch\" spacing={2} h=\"100%\">\n          <HStack justify=\"space-between\">\n            <HStack spacing={2}>\n              <FiTarget color={goalColor} />\n              <Text\n                fontSize=\"sm\"\n                fontWeight=\"bold\"\n                color={textPrimary}\n                noOfLines={2}\n              >\n                {goal.title}\n              </Text>\n            </HStack>\n            <HStack spacing={0}>\n              <IconButton\n                aria-label=\"Edit goal\"\n                icon={<EditIcon />}\n                size=\"xs\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit(goal);\n                }}\n              />\n              {onDelete && (\n                <IconButton\n                  aria-label=\"Delete goal\"\n                  icon={<DeleteIcon />}\n                  size=\"xs\"\n                  variant=\"ghost\"\n                  colorScheme=\"red\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteOpen();\n                  }}\n                />\n              )}\n            </HStack>\n          </HStack>\n\n          {goal.description && (\n            <Text fontSize=\"xs\" color={textSecondary} noOfLines={3}>\n              {goal.description}\n            </Text>\n          )}\n\n          {financialTarget > 0 && (\n            <HStack spacing={2} fontSize=\"xs\">\n              <FiDollarSign color={goalColor} />\n              <Text color={textSecondary}>\n                ${financialTarget.toLocaleString()} target\n              </Text>\n            </HStack>\n          )}\n\n          {completionPercentage > 0 && (\n            <Box>\n              <Progress\n                value={completionPercentage}\n                size=\"sm\"\n                colorScheme=\"green\"\n                borderRadius=\"full\"\n              />\n              <Text fontSize=\"xs\" color={textSecondary} mt={1}>\n                {completionPercentage}% complete\n              </Text>\n            </Box>\n          )}\n\n          <HStack fontSize=\"xs\" color={textSecondary} mt=\"auto\">\n            <Text>\n              {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n            </Text>\n          </HStack>\n        </VStack>\n      ) : showDetails ? (\n        <HStack justify=\"space-between\" h=\"100%\">\n          <HStack spacing={1} flex=\"1\" minW=\"0\">\n            <FiTarget color={goalColor} size={12} />\n            <Text fontSize=\"xs\" color={textPrimary} noOfLines={1} fontWeight=\"medium\">\n              {goal.title}\n            </Text>\n          </HStack>\n          {financialTarget > 0 && (\n            <Tooltip label={`$${financialTarget.toLocaleString()} target`}>\n              <Box>\n                <FiDollarSign color={goalColor} size={12} />\n              </Box>\n            </Tooltip>\n          )}\n        </HStack>\n      ) : (\n        <HStack h=\"100%\" px={1} align=\"center\">\n          <Text\n            fontSize=\"xs\"\n            color={textPrimary}\n            noOfLines={1}\n            fontWeight=\"semibold\"\n            textShadow={colorMode === 'light' ?\n              '0 1px 2px rgba(255, 255, 255, 0.8)' :\n              '0 1px 2px rgba(0, 0, 0, 0.8)'\n            }\n          >\n            {goal.title}\n          </Text>\n        </HStack>\n      )}\n      </Box>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog\n        isOpen={isDeleteOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onDeleteClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete Life Goal\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure you want to delete \"{goal.title}\"? This action cannot be undone.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onDeleteClose}>\n                Cancel\n              </Button>\n              <Button\n                colorScheme=\"red\"\n                onClick={() => {\n                  onDeleteClose();\n                  if (onDelete) {\n                    onDelete(goal);\n                  }\n                }}\n                ml={3}\n              >\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </Box>\n  );\n};","import React from 'react';\nimport { Box, Text, useColorMode } from '@chakra-ui/react';\nimport { getColor } from '../../../../brandConfig';\n\ninterface TimelineRulerProps {\n  birthDate: Date;\n  endDate: Date;\n  zoomConfig: any;\n  totalHeight: number;\n}\n\nexport const TimelineRuler: React.FC<TimelineRulerProps> = ({\n  birthDate,\n  endDate,\n  zoomConfig,\n  totalHeight,\n}) => {\n  const { colorMode } = useColorMode();\n\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  const renderAgeMarkers = () => {\n    const markers: JSX.Element[] = [];\n    const currentYear = new Date().getFullYear();\n    const birthYear = birthDate.getFullYear();\n\n    // Show age markers every year\n    for (let age = 0; age <= 120; age++) {\n      const ageDate = new Date(birthDate);\n      ageDate.setFullYear(birthDate.getFullYear() + age);\n\n      const daysSinceBirth = Math.floor(\n        (ageDate.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24)\n      );\n      const position = daysSinceBirth * zoomConfig.pixelsPerDay;\n\n      // Show every year, but highlight every 5 or 10 years depending on zoom\n      const isMajor = age % 10 === 0;\n      const isMinor = age % 5 === 0 && !isMajor;\n      const isCurrentAge = birthYear + age === currentYear;\n\n      // Only show labels for major/minor markers or current age, depending on zoom\n      const shouldShowLabel = isMajor || (zoomConfig.pixelsPerDay >= 0.1 && isMinor) || isCurrentAge;\n\n      if (shouldShowLabel || isMajor) {\n        markers.push(\n          <Box\n            key={age}\n            position=\"absolute\"\n            top={`${position}px`}\n            left=\"0\"\n            right=\"0\"\n            borderTop=\"1px solid\"\n            borderColor={\n              isCurrentAge\n                ? 'blue.500'\n                : isMajor\n                ? cardBorder\n                : `${cardBorder}30`\n            }\n          >\n            {shouldShowLabel && (\n              <Text\n                position=\"absolute\"\n                right=\"4px\"\n                top=\"-10px\"\n                fontSize={isMajor ? 'xs' : '2xs'}\n                fontWeight={isMajor || isCurrentAge ? 'bold' : 'normal'}\n                color={\n                  isCurrentAge\n                    ? 'blue.500'\n                    : isMajor\n                    ? textPrimary\n                    : textMuted\n                }\n                bg={colorMode === 'light' ? 'white' : 'gray.800'}\n                px={1}\n              >\n                {age}\n              </Text>\n            )}\n          </Box>\n        );\n      }\n    }\n\n    return markers;\n  };\n\n  const renderMarkers = () => {\n    const markers: JSX.Element[] = [];\n    const { rulerUnit } = zoomConfig;\n\n    let currentDate = new Date(birthDate);\n    let index = 0;\n\n    while (currentDate <= endDate) {\n      const daysSinceBirth = Math.floor(\n        (currentDate.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24)\n      );\n      const position = daysSinceBirth * zoomConfig.pixelsPerDay;\n\n      let label = '';\n      let isMajor = false;\n      const nextDate = new Date(currentDate);\n\n      switch (rulerUnit) {\n        case 'decade':\n          if (currentDate.getFullYear() % 10 === 0) {\n            label = currentDate.getFullYear().toString();\n            isMajor = true;\n          }\n          nextDate.setFullYear(currentDate.getFullYear() + 1);\n          break;\n\n        case 'year':\n          label = currentDate.getFullYear().toString();\n          isMajor = currentDate.getFullYear() % 5 === 0;\n          nextDate.setFullYear(currentDate.getFullYear() + 1);\n          break;\n\n        case 'quarter':\n          const quarter = Math.floor(currentDate.getMonth() / 3) + 1;\n          label = `Q${quarter} ${currentDate.getFullYear()}`;\n          isMajor = quarter === 1;\n          nextDate.setMonth(currentDate.getMonth() + 3);\n          break;\n\n        case 'month':\n          label = currentDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n          isMajor = currentDate.getMonth() === 0;\n          nextDate.setMonth(currentDate.getMonth() + 1);\n          break;\n\n        case 'week':\n          label = currentDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n          isMajor = currentDate.getDate() === 1;\n          nextDate.setDate(currentDate.getDate() + 7);\n          break;\n\n        case 'day':\n          label = currentDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n          isMajor = currentDate.getDate() === 1;\n          nextDate.setDate(currentDate.getDate() + 1);\n          break;\n      }\n\n      if (label) {\n        markers.push(\n          <Box\n            key={index}\n            position=\"absolute\"\n            top={`${position}px`}\n            left=\"0\"\n            right=\"0\"\n            borderTop=\"1px solid\"\n            borderColor={isMajor ? cardBorder : `${cardBorder}50`}\n          >\n            <Text\n              position=\"absolute\"\n              left=\"4px\"\n              top=\"-10px\"\n              fontSize={isMajor ? 'xs' : '2xs'}\n              fontWeight={isMajor ? 'bold' : 'normal'}\n              color={isMajor ? textPrimary : textMuted}\n              bg={colorMode === 'light' ? 'white' : 'gray.800'}\n              px={1}\n            >\n              {label}\n            </Text>\n          </Box>\n        );\n      }\n\n      currentDate = nextDate;\n      index++;\n    }\n\n    return markers;\n  };\n\n  return (\n    <Box display=\"flex\">\n      {/* Age Ruler */}\n      <Box\n        position=\"relative\"\n        w=\"60px\"\n        minH={`${totalHeight}px`}\n        borderRight=\"1px solid\"\n        borderColor={cardBorder}\n        bg={colorMode === 'light' ? 'gray.100' : 'gray.950'}\n      >\n        <Text\n          position=\"sticky\"\n          top=\"0\"\n          fontSize=\"2xs\"\n          fontWeight=\"bold\"\n          color={textMuted}\n          textAlign=\"center\"\n          py={1}\n          bg={colorMode === 'light' ? 'gray.100' : 'gray.950'}\n          borderBottom=\"1px solid\"\n          borderColor={cardBorder}\n          zIndex={10}\n        >\n          AGE\n        </Text>\n        {renderAgeMarkers()}\n      </Box>\n\n      {/* Date Ruler */}\n      <Box\n        position=\"relative\"\n        w=\"100px\"\n        minH={`${totalHeight}px`}\n        borderRight=\"2px solid\"\n        borderColor={cardBorder}\n        bg={colorMode === 'light' ? 'gray.50' : 'gray.900'}\n      >\n        <Text\n          position=\"sticky\"\n          top=\"0\"\n          fontSize=\"2xs\"\n          fontWeight=\"bold\"\n          color={textMuted}\n          textAlign=\"center\"\n          py={1}\n          bg={colorMode === 'light' ? 'gray.50' : 'gray.900'}\n          borderBottom=\"1px solid\"\n          borderColor={cardBorder}\n          zIndex={10}\n        >\n          DATE\n        </Text>\n        {renderMarkers()}\n      </Box>\n    </Box>\n  );\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom';\nimport { NavbarWithCallToAction } from '../../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { ModuleBreadcrumb } from '../../../components/ModuleBreadcrumb';\nimport { calendarsModuleConfig } from '../moduleConfig';\nimport { usePageTitle } from '../../../hooks/useDocumentTitle';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Button,\n  IconButton,\n  useColorMode,\n  Flex,\n  Badge,\n  Switch,\n  useToast,\n  FormControl,\n  FormLabel,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  useDisclosure,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { AddIcon, TimeIcon } from '@chakra-ui/icons';\nimport { FiZoomIn, FiZoomOut, FiTarget, FiCalendar } from 'react-icons/fi';\nimport { getColor } from '../../../brandConfig';\nimport { LifeGoalModal } from './LifeGoalModal';\nimport { LifeGoalCard } from './LifeGoalCard';\nimport { TimelineRuler } from './components/TimelineRuler';\n\n// GraphQL Mutations and Queries\nconst CREATE_LIFE_GOAL = gql`\n  mutation CreateLifeGoal($input: CalendarEventInput!) {\n    createEvent(input: $input) {\n      id\n      title\n      description\n      startTime\n      endTime\n      metadata\n      calendarId\n    }\n  }\n`;\n\nconst UPDATE_LIFE_GOAL = gql`\n  mutation UpdateLifeGoal($id: String!, $input: CalendarEventInput!) {\n    updateEvent(id: $id, input: $input) {\n      id\n      title\n      description\n      startTime\n      endTime\n      metadata\n      calendarId\n    }\n  }\n`;\n\nconst DELETE_LIFE_GOAL = gql`\n  mutation DeleteLifeGoal($id: String!) {\n    deleteEvent(id: $id) {\n      success\n      message\n    }\n  }\n`;\n\nconst GET_LIFE_GOALS = gql`\n  query GetLifeGoals($calendarId: String!, $startDate: String!, $endDate: String!) {\n    calendarEvents(\n      calendarId: $calendarId\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      id\n      title\n      description\n      startTime\n      endTime\n      metadata\n      calendarId\n      organizerId\n    }\n  }\n`;\n\nconst GET_MY_CALENDARS = gql`\n  query GetMyCalendars {\n    myCalendars {\n      id\n      name\n      type\n    }\n  }\n`;\n\nexport type ZoomLevel =\n  | '120years' | '80years' | '40years' | '20years' | '10years'\n  | '5years' | '1year' | '6months' | '3months'\n  | '1month' | '1week' | '1day';\n\ninterface ZoomConfig {\n  level: ZoomLevel;\n  label: string;\n  pixelsPerDay: number;\n  rulerUnit: 'decade' | 'year' | 'quarter' | 'month' | 'week' | 'day';\n  displayUnit: string;\n}\n\nconst ZOOM_LEVELS: ZoomConfig[] = [\n  { level: '120years', label: '120 Years', pixelsPerDay: 0.008, rulerUnit: 'decade', displayUnit: 'Decades' },\n  { level: '80years', label: '80 Years', pixelsPerDay: 0.012, rulerUnit: 'decade', displayUnit: 'Decades' },\n  { level: '40years', label: '40 Years', pixelsPerDay: 0.025, rulerUnit: 'decade', displayUnit: 'Decades' },\n  { level: '20years', label: '20 Years', pixelsPerDay: 0.05, rulerUnit: 'year', displayUnit: 'Years' },\n  { level: '10years', label: '10 Years', pixelsPerDay: 0.1, rulerUnit: 'year', displayUnit: 'Years' },\n  { level: '5years', label: '5 Years', pixelsPerDay: 0.2, rulerUnit: 'year', displayUnit: 'Years' },\n  { level: '1year', label: '1 Year', pixelsPerDay: 1, rulerUnit: 'quarter', displayUnit: 'Quarters' },\n  { level: '6months', label: '6 Months', pixelsPerDay: 2, rulerUnit: 'month', displayUnit: 'Months' },\n  { level: '3months', label: '3 Months', pixelsPerDay: 4, rulerUnit: 'month', displayUnit: 'Months' },\n  { level: '1month', label: '1 Month', pixelsPerDay: 10, rulerUnit: 'week', displayUnit: 'Weeks' },\n  { level: '1week', label: '1 Week', pixelsPerDay: 50, rulerUnit: 'day', displayUnit: 'Days' },\n  { level: '1day', label: '1 Day', pixelsPerDay: 100, rulerUnit: 'day', displayUnit: 'Hours' },\n];\n\nconst LifeGoalsTimeline: React.FC = () => {\n  const { colorMode } = useColorMode();\n  const { isOpen: isModalOpen, onOpen: onModalOpen, onClose: onModalClose } = useDisclosure();\n  const toast = useToast();\n  const navigate = useNavigate();\n  usePageTitle('Life Goals Timeline');\n\n  // Theme colors\n  const bg = getColor(\"background.main\", colorMode);\n  const cardBg = getColor(colorMode === 'light' ? \"background.card\" : \"background.darkSurface\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n\n  // State\n  const [zoomIndex, setZoomIndex] = useState(4); // Start at 10 years (index 4 now with 120years added)\n  const [showRegularEvents, setShowRegularEvents] = useState(false);\n  const [showLifeGoals, setShowLifeGoals] = useState(true);\n  const [lifeGoals, setLifeGoals] = useState<any[]>([]);\n  const [selectedGoal, setSelectedGoal] = useState<any>(null);\n  const [lifeGoalsCalendarId, setLifeGoalsCalendarId] = useState<string | null>(null);\n\n  // Drag-to-create state\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState<{ y: number; date: Date } | null>(null);\n  const [dragEnd, setDragEnd] = useState<{ y: number; date: Date } | null>(null);\n  const [selectionBox, setSelectionBox] = useState<{ top: number; height: number } | null>(null);\n\n  // Load birthdate from localStorage or use default\n  const [birthDateStr, setBirthDateStr] = useState<string>(() => {\n    const saved = localStorage.getItem('lifeGoalsBirthDate');\n    if (saved) return saved;\n    // Default to March 14, 1986 as suggested\n    return '1986-03-14';\n  });\n\n  const timelineRef = useRef<HTMLDivElement>(null);\n  const currentZoom = ZOOM_LEVELS[zoomIndex];\n\n  // Calculate timeline dimensions\n  const today = new Date();\n  const birthDate = new Date(birthDateStr);\n  const endDate = new Date(birthDate.getFullYear() + 120, 11, 31); // 120 years from birth\n  const totalDays = Math.floor((endDate.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24));\n  const timelineHeight = totalDays * currentZoom.pixelsPerDay;\n\n  // GraphQL hooks\n  const [createLifeGoalMutation] = useMutation(CREATE_LIFE_GOAL);\n  const [updateLifeGoalMutation] = useMutation(UPDATE_LIFE_GOAL);\n  const [deleteLifeGoalMutation] = useMutation(DELETE_LIFE_GOAL);\n\n  // Get user's calendars to find or create Life Goals calendar\n  const { data: calendarsData, loading: calendarsLoading } = useQuery(GET_MY_CALENDARS);\n\n  // Get life goals for the calendar\n  const { data: goalsData, loading: goalsLoading, refetch: refetchGoals } = useQuery(GET_LIFE_GOALS, {\n    variables: {\n      calendarId: lifeGoalsCalendarId || '',\n      startDate: birthDate.toISOString(),\n      endDate: endDate.toISOString(),\n    },\n    skip: !lifeGoalsCalendarId,\n  });\n\n  // Zoom controls\n  const zoomIn = () => {\n    if (zoomIndex < ZOOM_LEVELS.length - 1) {\n      setZoomIndex(zoomIndex + 1);\n    }\n  };\n\n  const zoomOut = () => {\n    if (zoomIndex > 0) {\n      setZoomIndex(zoomIndex - 1);\n    }\n  };\n\n  const handleZoomSlider = (value: number) => {\n    setZoomIndex(value);\n  };\n\n  const handleScrollToNow = () => {\n    console.log('🕐 Scroll to Now button clicked');\n\n    // Calculate position of today on the timeline\n    const daysSinceBirth = Math.floor((today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24));\n    const scrollPosition = daysSinceBirth * currentZoom.pixelsPerDay;\n\n    // Scroll the whole page to show today's position\n    // Add offset for header and controls\n    const headerOffset = 300; // Approximate height of header and controls\n    window.scrollTo({\n      top: scrollPosition + headerOffset - 200,\n      behavior: 'smooth'\n    });\n\n    toast({\n      title: '🕐 Scrolled to today',\n      status: 'success',\n      duration: 2000,\n      isClosable: true,\n    });\n  };\n\n  // Find or create Life Goals calendar\n  useEffect(() => {\n    if (calendarsData?.myCalendars) {\n      console.log('🔍 Looking for Life Goals calendar in:', calendarsData.myCalendars);\n      const lifeGoalsCalendar = calendarsData.myCalendars.find(\n        (cal: any) => cal.name === 'Life Goals' || cal.name === 'Life Goals Timeline'\n      );\n      if (lifeGoalsCalendar) {\n        console.log('✅ Found Life Goals calendar:', lifeGoalsCalendar.id);\n        setLifeGoalsCalendarId(lifeGoalsCalendar.id);\n      } else {\n        // Use the first calendar for now, or show a message to create one\n        const firstCalendar = calendarsData.myCalendars[0];\n        if (firstCalendar) {\n          console.log('⚠️ Using first calendar as fallback:', firstCalendar.id);\n          setLifeGoalsCalendarId(firstCalendar.id);\n          toast({\n            title: 'Using default calendar',\n            description: 'Create a \"Life Goals\" calendar for better organization',\n            status: 'info',\n            duration: 5000,\n          });\n        }\n      }\n    }\n  }, [calendarsData, toast]);\n\n  // Load life goals from backend\n  useEffect(() => {\n    if (goalsData?.calendarEvents) {\n      console.log('📅 Loaded calendar events:', goalsData.calendarEvents);\n      // Filter for life goal events (check metadata for X-GOAL-TIER = LIFE)\n      const lifeGoalEvents = goalsData.calendarEvents.filter((event: any) => {\n        return event.metadata && event.metadata['X-GOAL-TIER'] === 'LIFE';\n      });\n      console.log('🎯 Filtered life goals:', lifeGoalEvents);\n      setLifeGoals(lifeGoalEvents);\n    }\n  }, [goalsData]);\n\n  // Scroll to today on mount (only once on initial load)\n  useEffect(() => {\n    // Calculate position of today on the timeline\n    const daysSinceBirth = Math.floor((today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24));\n    const scrollPosition = daysSinceBirth * currentZoom.pixelsPerDay;\n\n    // Scroll the whole page to show today's position\n    // Add offset for header and controls\n    const headerOffset = 300; // Approximate height of header and controls\n    window.scrollTo({\n      top: scrollPosition + headerOffset - 200,\n      behavior: 'smooth'\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Only run on initial mount, not on zoom changes\n\n  const handleAddGoal = () => {\n    setSelectedGoal(null);\n    onModalOpen();\n  };\n\n  const handleEditGoal = (goal: any) => {\n    console.log('🖊️ Editing goal:', goal);\n    setSelectedGoal(goal);\n    onModalOpen();\n  };\n\n  const handleResizeGoal = async (goal: any, newStartDate: Date, newEndDate: Date) => {\n    console.log('📏 Resizing goal:', goal.title, {\n      oldStart: goal.startTime,\n      oldEnd: goal.endTime,\n      newStart: newStartDate.toISOString(),\n      newEnd: newEndDate.toISOString(),\n    });\n\n    try {\n      // Prepare the updated goal data\n      const eventInput = {\n        calendarId: lifeGoalsCalendarId!,\n        title: goal.title,\n        description: goal.description || '',\n        startTime: newStartDate.toISOString(),\n        endTime: newEndDate.toISOString(),\n        isAllDay: true,\n        type: 'EVENT',\n        status: 'CONFIRMED',\n        visibility: 'PRIVATE',\n        metadata: goal.metadata,\n        categories: goal.categories || ['LIFE_GOAL'],\n      };\n\n      // Update the goal via GraphQL\n      const { data } = await updateLifeGoalMutation({\n        variables: {\n          id: goal.id,\n          input: eventInput,\n        },\n      });\n\n      console.log('✅ Goal resized:', data.updateEvent);\n\n      // Refetch goals to update the display\n      await refetchGoals();\n\n      toast({\n        title: 'Goal updated',\n        description: `\"${goal.title}\" dates have been adjusted`,\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.error('❌ Error resizing goal:', error);\n      toast({\n        title: 'Error resizing goal',\n        description: 'Failed to update goal dates',\n        status: 'error',\n        duration: 3000,\n      });\n    }\n  };\n\n  const handleDeleteGoal = async (goal: any) => {\n    console.log('🗑️ Deleting goal:', goal.title);\n\n    try {\n      // Delete the goal via GraphQL\n      await deleteLifeGoalMutation({\n        variables: {\n          id: goal.id,\n        },\n      });\n\n      console.log('✅ Goal deleted');\n\n      // Refetch goals to update the display\n      await refetchGoals();\n\n      toast({\n        title: 'Goal deleted',\n        description: `\"${goal.title}\" has been removed`,\n        status: 'success',\n        duration: 2000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.error('❌ Error deleting goal:', error);\n      toast({\n        title: 'Error deleting goal',\n        description: 'Failed to delete goal',\n        status: 'error',\n        duration: 3000,\n      });\n    }\n  };\n\n  // Convert Y position to date based on timeline\n  const yPositionToDate = (yPos: number): Date => {\n    const daysFromBirth = Math.floor(yPos / currentZoom.pixelsPerDay);\n    const date = new Date(birthDate);\n    date.setDate(date.getDate() + daysFromBirth);\n    return date;\n  };\n\n  // Handle mouse down to start dragging\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    // Only start drag if clicking on empty space (not on an existing goal)\n    const target = e.target as HTMLElement;\n    if (target.closest('.life-goal-card')) return;\n\n    const rect = e.currentTarget.getBoundingClientRect();\n    const y = e.clientY - rect.top + e.currentTarget.scrollTop;\n    const startDate = yPositionToDate(y);\n\n    setIsDragging(true);\n    setDragStart({ y, date: startDate });\n    setSelectionBox({ top: y, height: 0 });\n  };\n\n  // Handle mouse move during drag\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!isDragging || !dragStart) return;\n\n    const rect = e.currentTarget.getBoundingClientRect();\n    const y = e.clientY - rect.top + e.currentTarget.scrollTop;\n    const endDate = yPositionToDate(y);\n\n    setDragEnd({ y, date: endDate });\n\n    // Update selection box visualization\n    const top = Math.min(dragStart.y, y);\n    const height = Math.abs(y - dragStart.y);\n    setSelectionBox({ top, height });\n  };\n\n  // Handle mouse up to complete drag\n  const handleMouseUp = () => {\n    if (!isDragging || !dragStart || !dragEnd) {\n      // Reset state\n      setIsDragging(false);\n      setDragStart(null);\n      setDragEnd(null);\n      setSelectionBox(null);\n      return;\n    }\n\n    // Calculate the date range\n    const startDate = dragStart.date < dragEnd.date ? dragStart.date : dragEnd.date;\n    const endDate = dragStart.date < dragEnd.date ? dragEnd.date : dragStart.date;\n\n    // Minimum duration check (at least 1 day)\n    const duration = Math.abs(endDate.getTime() - startDate.getTime());\n    if (duration < 24 * 60 * 60 * 1000) {\n      // Reset state\n      setIsDragging(false);\n      setDragStart(null);\n      setDragEnd(null);\n      setSelectionBox(null);\n      return;\n    }\n\n    // Open modal with pre-filled dates (not a real goal, just dates)\n    setSelectedGoal(null); // Clear any selected goal\n    // Store the dates separately to pass to modal\n    const draggedDates = {\n      startDate: startDate.toISOString().split('T')[0],\n      endDate: endDate.toISOString().split('T')[0],\n    };\n\n    // Open modal with the dragged dates\n    setSelectedGoal(draggedDates);\n    onModalOpen();\n\n    // Reset drag state\n    setIsDragging(false);\n    setDragStart(null);\n    setDragEnd(null);\n    setSelectionBox(null);\n  };\n\n  const handleSaveGoal = async (goalData: any) => {\n    if (!lifeGoalsCalendarId) {\n      toast({\n        title: 'No calendar available',\n        description: 'Please create a calendar first',\n        status: 'error',\n        duration: 5000,\n      });\n      return;\n    }\n\n    console.log('💾 Saving life goal with data:', goalData);\n    console.log('📝 Is editing?', !!goalData.id, 'Goal ID:', goalData.id);\n\n    try {\n      // Prepare metadata following iCal X-property standard\n      const metadata = {\n        'X-GOAL-TIER': 'LIFE',\n        'X-LIFE-GOAL-TYPE': goalData.goalType,\n        'X-FINANCIAL-TARGET': goalData.financialTarget || 0,\n        'X-OPPORTUNITY-IDS': goalData.opportunityIds || [],\n        'X-PARENT-GOAL-ID': goalData.parentGoalId || null,\n        'X-DEPENDENCIES': goalData.dependencies || [],\n        'X-COMPLETION-PERCENTAGE': 0,\n        'X-CREATED-BY': 'life-goals-timeline',\n        'X-ICAL-VERSION': 'RFC5545',\n      };\n\n      // Ensure dates are valid\n      const startDate = goalData.startDate ? new Date(goalData.startDate) : new Date();\n      const endDate = goalData.endDate ? new Date(goalData.endDate) : new Date(startDate.getTime() + 365 * 24 * 60 * 60 * 1000);\n\n      // Build categories array without null values\n      const categories = ['LIFE_GOAL'];\n      if (goalData.goalType) {\n        categories.push(goalData.goalType);\n      }\n\n      const eventInput = {\n        calendarId: lifeGoalsCalendarId,\n        title: goalData.title || 'Untitled Goal',\n        description: goalData.description || '',\n        startTime: startDate.toISOString(),\n        endTime: endDate.toISOString(),\n        isAllDay: true,\n        type: 'EVENT',\n        status: 'CONFIRMED',\n        visibility: 'PRIVATE',\n        metadata,\n        categories,\n      };\n\n      console.log('📤 Sending GraphQL mutation with input:', eventInput);\n\n      if (goalData.id) {\n        // Update existing goal - make sure ID is provided\n        console.log('🔄 Updating goal with ID:', goalData.id);\n        const { data } = await updateLifeGoalMutation({\n          variables: {\n            id: goalData.id,\n            input: eventInput,\n          },\n        });\n        console.log('✅ Goal updated:', data.updateEvent);\n        toast({\n          title: 'Life goal updated',\n          description: `\"${goalData.title}\" has been updated`,\n          status: 'success',\n          duration: 3000,\n        });\n      } else {\n        // Create new goal\n        console.log('➕ Creating new goal');\n        const { data } = await createLifeGoalMutation({\n          variables: {\n            input: eventInput,\n          },\n        });\n        console.log('✅ Goal created:', data.createEvent);\n        toast({\n          title: 'Life goal created',\n          description: `\"${goalData.title}\" has been added to your timeline`,\n          status: 'success',\n          duration: 3000,\n        });\n      }\n\n      // Clear selected goal after save\n      setSelectedGoal(null);\n\n      // Refetch goals to update the display\n      await refetchGoals();\n      onModalClose();\n    } catch (error) {\n      console.error('❌ Error saving life goal:', error);\n      toast({\n        title: 'Error saving goal',\n        description: error instanceof Error ? error.message : 'An error occurred',\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  return (\n    <Box bg={bg} minH=\"100vh\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />\n\n      {/* Sticky Header and Controls */}\n      <Box\n        position=\"sticky\"\n        top=\"0\"\n        zIndex={100}\n        bg={bg}\n        borderBottom=\"1px solid\"\n        borderColor={cardBorder}\n        boxShadow=\"sm\"\n      >\n        <Box px={4} py={3}>\n          <VStack spacing={3} align=\"stretch\">\n            {/* Header */}\n            <Flex justify=\"space-between\" align=\"center\">\n              <VStack align=\"start\" spacing={1}>\n                <HStack>\n                  <FiTarget size={24} color={textPrimary} />\n                  <Text fontSize=\"2xl\" fontWeight=\"bold\" color={textPrimary}>\n                    Life Goals Timeline\n                  </Text>\n                </HStack>\n                <Text fontSize=\"sm\" color={textSecondary}>\n                  Plan your life from years to days. Link goals to opportunities.\n                </Text>\n              </VStack>\n\n              <Button\n                leftIcon={<AddIcon />}\n                colorScheme=\"blue\"\n                onClick={handleAddGoal}\n              >\n                Add Life Goal\n              </Button>\n            </Flex>\n\n            {/* Controls Panel */}\n            <Box\n              p={3}\n              bg={cardBg}\n              borderRadius=\"md\"\n              borderWidth=\"1px\"\n              borderColor={cardBorder}\n            >\n            <VStack spacing={3} align=\"stretch\">\n              {/* Zoom Controls */}\n              <HStack spacing={4} flexWrap=\"wrap\">\n                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                  Zoom Level:\n                </Text>\n                <Badge colorScheme=\"blue\" fontSize=\"sm\">\n                  {currentZoom.label}\n                </Badge>\n                <IconButton\n                  aria-label=\"Zoom out\"\n                  icon={<FiZoomOut />}\n                  size=\"sm\"\n                  onClick={zoomOut}\n                  isDisabled={zoomIndex === 0}\n                />\n                <Slider\n                  value={zoomIndex}\n                  min={0}\n                  max={ZOOM_LEVELS.length - 1}\n                  step={1}\n                  onChange={handleZoomSlider}\n                  flex=\"1\"\n                  maxW=\"300px\"\n                >\n                  <SliderTrack>\n                    <SliderFilledTrack />\n                  </SliderTrack>\n                  <SliderThumb />\n                </Slider>\n                <IconButton\n                  aria-label=\"Zoom in\"\n                  icon={<FiZoomIn />}\n                  size=\"sm\"\n                  onClick={zoomIn}\n                  isDisabled={zoomIndex === ZOOM_LEVELS.length - 1}\n                />\n                <Button\n                  onClick={handleScrollToNow}\n                  variant=\"ghost\"\n                  colorScheme=\"blue\"\n                  leftIcon={<TimeIcon />}\n                  size=\"sm\"\n                  fontWeight=\"medium\"\n                  title=\"Scroll to today\"\n                >\n                  Now\n                </Button>\n              </HStack>\n\n              {/* Display Toggles */}\n              <HStack spacing={6}>\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel htmlFor=\"show-life-goals\" mb=\"0\" fontSize=\"sm\" color={textPrimary}>\n                    Show Life Goals\n                  </FormLabel>\n                  <Switch\n                    id=\"show-life-goals\"\n                    isChecked={showLifeGoals}\n                    onChange={(e) => setShowLifeGoals(e.target.checked)}\n                    colorScheme=\"blue\"\n                  />\n                </FormControl>\n\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel htmlFor=\"show-events\" mb=\"0\" fontSize=\"sm\" color={textPrimary}>\n                    Show Calendar Events\n                  </FormLabel>\n                  <Switch\n                    id=\"show-events\"\n                    isChecked={showRegularEvents}\n                    onChange={(e) => setShowRegularEvents(e.target.checked)}\n                    colorScheme=\"green\"\n                  />\n                </FormControl>\n              </HStack>\n\n              {/* Birthdate Selector */}\n              <HStack spacing={4}>\n                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                  Your Birthdate:\n                </Text>\n                <InputGroup maxW=\"200px\">\n                  <InputLeftElement pointerEvents=\"none\">\n                    <FiCalendar color={textSecondary} />\n                  </InputLeftElement>\n                  <Input\n                    type=\"date\"\n                    value={birthDateStr}\n                    onChange={(e) => {\n                      const newDate = e.target.value;\n                      setBirthDateStr(newDate);\n                      localStorage.setItem('lifeGoalsBirthDate', newDate);\n                    }}\n                    size=\"sm\"\n                    bg={cardBg}\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _hover={{ borderColor: getColor(\"primary.500\", colorMode) }}\n                    _focus={{ borderColor: getColor(\"primary.500\", colorMode), boxShadow: \"0 0 0 1px \" + getColor(\"primary.500\", colorMode) }}\n                  />\n                </InputGroup>\n                <Text fontSize=\"xs\" color={textSecondary}>\n                  Timeline spans 120 years from birth\n                </Text>\n              </HStack>\n\n              {/* Stats and Instructions */}\n              <HStack spacing={4} fontSize=\"xs\" color={textSecondary}>\n                <Text>Timeline: {currentZoom.displayUnit}</Text>\n                <Text>•</Text>\n                <Text>Total: {totalDays.toLocaleString()} days</Text>\n                <Text>•</Text>\n                <Text>Height: {Math.round(timelineHeight)}px</Text>\n                <Text>•</Text>\n                <Text fontWeight=\"medium\" color={getColor(\"primary.500\", colorMode)}>\n                  💡 Click and drag on timeline to create a goal\n                </Text>\n              </HStack>\n            </VStack>\n            </Box>\n          </VStack>\n        </Box>\n      </Box>\n\n      {/* Timeline Container */}\n      <Box px={4} py={4}>\n        <VStack spacing={4} align=\"stretch\">\n          <Box\n            ref={timelineRef}\n            position=\"relative\"\n            bg={cardBg}\n            borderRadius=\"md\"\n            borderWidth=\"1px\"\n            borderColor={cardBorder}\n          >\n            {/* Timeline Content */}\n            <Flex>\n              {/* Time Ruler */}\n              <TimelineRuler\n                birthDate={birthDate}\n                endDate={endDate}\n                zoomConfig={currentZoom}\n                totalHeight={timelineHeight}\n              />\n\n              {/* Goals Lane */}\n              <Box\n                flex=\"1\"\n                position=\"relative\"\n                minH={`${timelineHeight}px`}\n                onMouseDown={handleMouseDown}\n                onMouseMove={handleMouseMove}\n                onMouseUp={handleMouseUp}\n                onMouseLeave={handleMouseUp}\n                cursor={isDragging ? 'grabbing' : 'crosshair'}\n                userSelect=\"none\"\n              >\n                {/* Today Indicator */}\n                <Box\n                  position=\"absolute\"\n                  top={`${Math.floor((today.getTime() - birthDate.getTime()) / (1000 * 60 * 60 * 24)) * currentZoom.pixelsPerDay}px`}\n                  left=\"0\"\n                  right=\"0\"\n                  h=\"2px\"\n                  bg=\"red.500\"\n                  zIndex={100}\n                >\n                  <Badge\n                    position=\"absolute\"\n                    left=\"10px\"\n                    top=\"-12px\"\n                    colorScheme=\"red\"\n                    fontSize=\"xs\"\n                  >\n                    TODAY\n                  </Badge>\n                </Box>\n\n                {/* Selection Box (while dragging) */}\n                {selectionBox && (\n                  <Box\n                    position=\"absolute\"\n                    top={`${selectionBox.top}px`}\n                    left=\"0\"\n                    right=\"0\"\n                    height={`${selectionBox.height}px`}\n                    bg=\"blue.500\"\n                    opacity={0.2}\n                    borderWidth=\"2px\"\n                    borderColor=\"blue.500\"\n                    borderRadius=\"md\"\n                    pointerEvents=\"none\"\n                    zIndex={50}\n                  />\n                )}\n\n                {/* Life Goals */}\n                {showLifeGoals && lifeGoals.map((goal) => (\n                  <Box className=\"life-goal-card\" key={goal.id}>\n                    <LifeGoalCard\n                      goal={goal}\n                      birthDate={birthDate}\n                      zoomConfig={currentZoom}\n                      onEdit={handleEditGoal}\n                      onResize={handleResizeGoal}\n                      onDelete={handleDeleteGoal}\n                    />\n                  </Box>\n                ))}\n\n                {/* Regular Events (as small markers) */}\n                {showRegularEvents && (\n                  <Text\n                    position=\"absolute\"\n                    top=\"50%\"\n                    left=\"50%\"\n                    transform=\"translate(-50%, -50%)\"\n                    color={textSecondary}\n                    fontSize=\"sm\"\n                  >\n                    Regular events display coming soon...\n                  </Text>\n                )}\n\n                {/* Empty State or Loading */}\n                {calendarsLoading || goalsLoading ? (\n                  <Flex\n                    direction=\"column\"\n                    align=\"center\"\n                    justify=\"center\"\n                    h=\"100%\"\n                    color={textSecondary}\n                  >\n                    <Text fontSize=\"lg\">Loading your life goals...</Text>\n                  </Flex>\n                ) : lifeGoals.length === 0 && (\n                  <Flex\n                    direction=\"column\"\n                    align=\"center\"\n                    justify=\"center\"\n                    h=\"100%\"\n                    color={textSecondary}\n                  >\n                    <FiTarget size={48} />\n                    <Text mt={4} fontSize=\"lg\" fontWeight=\"medium\">\n                      No life goals yet\n                    </Text>\n                    <Text fontSize=\"sm\" mt={2}>\n                      Start by adding your first long-term goal\n                    </Text>\n                    <Button\n                      mt={4}\n                      leftIcon={<AddIcon />}\n                      colorScheme=\"blue\"\n                      variant=\"outline\"\n                      onClick={handleAddGoal}\n                    >\n                      Add Your First Goal\n                    </Button>\n                  </Flex>\n                )}\n              </Box>\n            </Flex>\n          </Box>\n        </VStack>\n      </Box>\n      <FooterWithFourColumns />\n\n      {/* Life Goal Modal */}\n      <LifeGoalModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setSelectedGoal(null);\n          onModalClose();\n        }}\n        goal={selectedGoal && selectedGoal.id ? selectedGoal : null}\n        initialDates={selectedGoal && !selectedGoal.id ? {\n          startDate: selectedGoal.startDate,\n          endDate: selectedGoal.endDate\n        } : undefined}\n        onSave={handleSaveGoal}\n        onDelete={handleDeleteGoal}\n      />\n    </Box>\n  );\n};\n\nexport default LifeGoalsTimeline;"],"names":["GET_OPPORTUNITIES","gql","_templateObject","_taggedTemplateLiteral","OpportunityLinker","_ref","selectedOpportunities","onOpportunitiesChange","colorMode","useColorMode","textPrimary","getColor","textSecondary","textMuted","formBg","cardBorder","searchTerm","setSearchTerm","useState","loading","error","data","useQuery","variables","context","headers","localStorage","getItem","opportunities","filteredOpportunities","filter","opp","title","toLowerCase","includes","handleToggleOpportunity","opportunityId","id","selectedOpportunitiesData","totalValue","reduce","sum","value","weightedValue","probability","formatStage","expectedRevenue","stage","LEAD","QUALIFIED","PROPOSAL","NEGOTIATION","WON","LOST","PROSPECTING","QUALIFICATION","CLOSED_WON","CLOSED_LOST","_jsxs","Alert","status","children","_jsx","AlertIcon","Text","fontSize","message","VStack","spacing","align","InputGroup","InputLeftElement","pointerEvents","SearchIcon","color","Input","onChange","e","target","placeholder","bg","borderColor","_placeholder","length","Box","p","borderRadius","borderWidth","HStack","justify","fontWeight","FiDollarSign","toLocaleString","FiTrendingUp","Math","round","maxH","overflowY","map","i","Skeleton","height","textAlign","py","opportunity","_opportunity$value","concat","cursor","transition","_hover","transform","onClick","flex","minW","Checkbox","isChecked","stopPropagation","noOfLines","Badge","colorScheme","clientName","expectedCloseDate","Date","toLocaleDateString","GOAL_TYPES","label","LifeGoalModal","isOpen","onClose","goal","initialDates","onSave","onDelete","cardBg","formData","setFormData","description","goalType","startDate","endDate","financialTarget","linkedOpportunities","parentGoalId","dependencies","opportunityStats","setOpportunityStats","closedValue","remainingNeeded","opportunitiesNeeded","useEffect","_goal$metadata","_goal$metadata2","_goal$metadata3","_goal$metadata4","_goal$metadata5","metadata","startTime","toISOString","split","endTime","prev","_objectSpread","calculateOpportunityStats","ceil","max","handleInputChange","field","progressPercentage","min","Modal","size","ModalOverlay","ModalContent","ModalHeader","FiTarget","ModalCloseButton","ModalBody","FormControl","isRequired","FormLabel","Textarea","rows","Select","type","style","backgroundColor","_Fragment","Divider","NumberInput","_","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","mt","toFixed","Progress","Accordion","allowToggle","AccordionItem","border","AccordionButton","_expanded","AccordionIcon","AccordionPanel","InfoIcon","ModalFooter","justifyContent","Button","variant","handleDelete","handleSave","lifeGoalData","opportunityIds","isDisabled","GOAL_TYPE_COLORS","CAREER","FINANCIAL","HEALTH","RELATIONSHIP","LEARNING","LEGACY","LifeGoalCard","birthDate","zoomConfig","onEdit","onResize","isResizing","setIsResizing","tempStartDate","setTempStartDate","tempEndDate","setTempEndDate","isDeleteOpen","onOpen","onDeleteOpen","onDeleteClose","useDisclosure","cancelRef","useRef","daysSinceBirth","floor","getTime","durationDays","topPosition","pixelsPerDay","goalColor","completionPercentage","handleResizeStart","edge","preventDefault","console","log","startY","clientY","originalStart","originalEnd","currentTempStartDate","currentTempEndDate","handleMouseMove","moveEvent","deltaY","daysDelta","newStartDate","setDate","getDate","newEndDate","handleMouseUp","finalStart","finalEnd","document","removeEventListener","addEventListener","showDetails","showFullDetails","position","top","left","right","minH","borderLeft","borderLeftColor","boxShadow","h","onMouseDown","zIndex","bottom","IconButton","icon","EditIcon","DeleteIcon","Tooltip","px","textShadow","AlertDialog","leastDestructiveRef","AlertDialogOverlay","AlertDialogContent","AlertDialogHeader","AlertDialogBody","AlertDialogFooter","ref","ml","TimelineRuler","totalHeight","display","w","borderRight","borderBottom","renderAgeMarkers","markers","currentYear","getFullYear","birthYear","age","ageDate","setFullYear","isMajor","isMinor","isCurrentAge","shouldShowLabel","push","borderTop","renderMarkers","rulerUnit","currentDate","index","nextDate","toString","quarter","getMonth","setMonth","month","year","day","CREATE_LIFE_GOAL","UPDATE_LIFE_GOAL","_templateObject2","DELETE_LIFE_GOAL","_templateObject3","GET_LIFE_GOALS","_templateObject4","GET_MY_CALENDARS","_templateObject5","ZOOM_LEVELS","level","displayUnit","LifeGoalsTimeline","isModalOpen","onModalOpen","onModalClose","toast","useToast","useNavigate","usePageTitle","zoomIndex","setZoomIndex","showRegularEvents","setShowRegularEvents","showLifeGoals","setShowLifeGoals","lifeGoals","setLifeGoals","selectedGoal","setSelectedGoal","lifeGoalsCalendarId","setLifeGoalsCalendarId","isDragging","setIsDragging","dragStart","setDragStart","dragEnd","setDragEnd","selectionBox","setSelectionBox","birthDateStr","setBirthDateStr","saved","timelineRef","currentZoom","today","totalDays","timelineHeight","createLifeGoalMutation","useMutation","updateLifeGoalMutation","deleteLifeGoalMutation","calendarsData","calendarsLoading","goalsData","goalsLoading","refetch","refetchGoals","calendarId","skip","myCalendars","lifeGoalsCalendar","find","cal","name","firstCalendar","duration","calendarEvents","lifeGoalEvents","event","scrollPosition","window","scrollTo","behavior","handleAddGoal","handleEditGoal","handleResizeGoal","async","oldStart","oldEnd","newStart","newEnd","eventInput","isAllDay","visibility","categories","input","updateEvent","isClosable","handleDeleteGoal","yPositionToDate","yPos","daysFromBirth","date","abs","draggedDates","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","calendarsModuleConfig","Flex","leftIcon","AddIcon","flexWrap","FiZoomOut","zoomOut","Slider","step","maxW","SliderTrack","SliderFilledTrack","SliderThumb","FiZoomIn","zoomIn","handleScrollToNow","TimeIcon","alignItems","htmlFor","mb","Switch","checked","FiCalendar","newDate","setItem","_focus","closest","rect","currentTarget","getBoundingClientRect","y","scrollTop","onMouseMove","onMouseUp","onMouseLeave","userSelect","opacity","className","direction","FooterWithFourColumns","undefined","goalData","createEvent","Error"],"sourceRoot":""}