{"version":3,"file":"static/js/3648.a9bf77e2.chunk.js","mappings":"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","sources":["pages/projects/markdownTemplates.ts","pages/projects/TaskModal.tsx","pages/projects/AddMemberModal.tsx","pages/projects/ProjectPage.tsx"],"sourcesContent":["/**\n * Centralized markdown templates for import/export functionality\n * Single source of truth for FORMAT_SPEC.md and bill/project templates\n */\n\nexport const FORMAT_SPEC_CONTENT = `# Unified Markdown Format Specification\n\n**Version:** 1.0\n**Last Updated:** January 2025\n\nThis document defines the unified markdown format for importing/exporting projects, bills, and proposals.\n\n---\n\n## 📝 Format Overview\n\nThe unified format combines:\n- Project metadata (name, goal, description)\n- Bill metadata (currency, payment method, status)\n- Line items / Tasks (description, price, status, assignee)\n- Agreement text (optional)\n\nThis allows editing proposals in Claude and importing them into the system.\n\n---\n\n## 📋 Complete Example\n\n\\`\\`\\`markdown\n# One Group Website Development Proposal\n\n## Project Information\n**Project Name:** One Group Website Development\n**Project Goal:** Build unified digital platform for Solar, Finance & Property Investment\n**Project Description:** Complete 80-page unified platform representing all three One Group verticals with custom calculators, CRM integration, and SEO optimization.\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. Content Page: onegroupaustralasia.com.au/\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 2. Content Page: onegroupaustralasia.com.au/about\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n### 3. Custom Logic: onegroupaustralasia.com.au/solar/calculator\n**Price:** $300.00\n**Billable:** Yes\n**Status:** IN_PROGRESS\n**Assignee:** jane@tommillerservices.com\n\n### 4. Project management and coordination\n**Price:** $0.00\n**Billable:** No\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 5. Internal testing and QA\n**Price:** [ENTER PRICE]\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n## Agreement\n\n[Full agreement text goes here...]\n\n**Between:** Tom Miller Services Pty Ltd (\"TMS\")\n**And:** One Group (\"Client\")\n\n[Rest of agreement...]\n\\`\\`\\`\n\n---\n\n## 🔍 Field Specifications\n\n### Project Information Section\n\n| Field | Required | Format | Example |\n|-------|----------|--------|---------|\n| Project Name | Yes | Plain text | \\`One Group Website Development\\` |\n| Project Goal | No | Max 17 words | \\`Build unified digital platform for Solar, Finance & Property\\` |\n| Project Description | No | Max 200 words | \\`Complete 80-page unified platform...\\` |\n\n**Notes:**\n- Project Goal is used for taglines (keep concise)\n- Project Description provides context for the work\n\n---\n\n### Bill Information Section\n\n| Field | Required | Format | Options |\n|-------|----------|--------|---------|\n| Currency | Yes | Uppercase code | \\`AUD\\`, \\`USD\\` |\n| Payment Method | No | Enum value | \\`AUD_TRANSFER\\`, \\`CARD\\`, \\`CRYPTO\\` |\n| Status | No | Enum value | \\`PROPOSAL\\`, \\`DRAFT\\`, \\`SENT\\` |\n\n**Notes:**\n- Currency affects how prices are parsed\n- If Payment Method is omitted, defaults to \\`AUD_TRANSFER\\`\n- If Status is omitted, defaults to \\`PROPOSAL\\`\n\n---\n\n### Line Items Section\n\nEach line item uses this format:\n\n\\`\\`\\`markdown\n### [Number]. [Description]\n**Price:** [Amount]\n**Billable:** [Yes/No]\n**Status:** [Status]\n**Assignee:** [Email or \"Unassigned\"]\n\\`\\`\\`\n\n#### Field Details:\n\n| Field | Required | Format | Options/Rules |\n|-------|----------|--------|---------------|\n| Number | No | Integer | Sequential numbering (1, 2, 3...) |\n| Description | Yes | Plain text | Task/line item description |\n| Price | Yes | Number with currency symbol | \\`$100.00\\`, \\`[ENTER PRICE]\\` (placeholder) |\n| Billable | No | Yes/No | Defaults to \\`Yes\\` if omitted |\n| Status | No | Enum | \\`PENDING\\`, \\`IN_PROGRESS\\`, \\`COMPLETED\\` (defaults to \\`PENDING\\`) |\n| Assignee | No | Email or \"Unassigned\" | Must be valid email or literal \"Unassigned\" |\n\n**Price Format Rules:**\n- With symbol: \\`$100.00\\`, \\`$100\\`, \\`$99.50\\`\n- Without symbol: \\`100.00\\`, \\`100\\`, \\`99.50\\`\n- Placeholder: \\`[ENTER PRICE]\\` ← **Fails import** (must add price before importing)\n- Zero price: \\`$0.00\\` ← Creates non-billable line item\n\n**Assignee Rules:**\n- Valid email: \\`tom@tommillerservices.com\\` ← Looks up user and assigns\n- Invalid email: Creates unassigned task and shows warning\n- \"Unassigned\": Creates unassigned task\n- Omitted: Creates unassigned task\n\n---\n\n## 🔄 Import/Export Behavior\n\n### Export (Project → Markdown)\n\nWhen exporting a project to markdown:\n1. **Project Info:** Populated from project.projectName, projectGoal, projectDescription\n2. **Bill Info:** Uses default values (Currency from tenant, Status = PROPOSAL)\n3. **Line Items:**\n   - Description from task.description\n   - Price = \\`[ENTER PRICE]\\` for billable tasks, \\`$0.00\\` for non-billable\n   - Billable from task.billable (defaults to Yes)\n   - Status from task.status\n   - Assignee from task.assignedTo.email (or \"Unassigned\")\n4. **Agreement:** Not included in export (add manually if needed)\n\n### Import (Markdown → Bill)\n\nWhen importing markdown to a bill:\n1. **Project Info:** Ignored (bill already linked to project)\n2. **Bill Info:** Updates bill.currency if specified\n3. **Line Items:**\n   - **Replaces all existing line items** (with confirmation modal)\n   - Creates new line items from each \\`### [Number]. [Description]\\` section\n   - Parses price and converts to cents for Stripe\n   - Sets billable flag based on price ($0 = non-billable)\n   - Assignee is stored but not enforced (bills don't have task assignments)\n4. **Agreement:** Ignored during bill import\n\n---\n\n## ✅ Validation Rules\n\n### During Export\n- [ ] At least 1 task exists in project\n- [ ] Task descriptions are not empty\n- [ ] All billable tasks marked with price placeholder\n\n### During Import to Bill\n- [ ] Valid markdown structure\n- [ ] At least 1 line item found\n- [ ] All line items have valid prices (no \\`[ENTER PRICE]\\` placeholders)\n- [ ] All prices are positive numbers or zero\n- [ ] Currency code is valid (AUD or USD)\n- [ ] Status enum is valid (if provided)\n\n---\n\n## 🚫 Common Parse Errors\n\n| Error | Cause | Solution |\n|-------|-------|----------|\n| \"No line items found\" | Missing \\`## Line Items\\` section | Add section header |\n| \"Invalid price format\" | Price has \\`[ENTER PRICE]\\` | Replace with actual dollar amount |\n| \"Currency not supported\" | Invalid currency code | Use \\`AUD\\` or \\`USD\\` |\n| \"Line item missing description\" | Empty description after number | Add description text |\n| \"Negative price not allowed\" | Price is negative | Use positive number or $0.00 |\n\n---\n\n## 🎨 Formatting Tips for Claude Editing\n\n### Adding New Line Items\n\\`\\`\\`markdown\n### 81. New feature: User authentication module\n**Price:** $500.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\\`\\`\\`\n\n### Bulk Price Adjustments\nAsk Claude: \"Increase all Content Page items by 20%\"\nClaude will update:\n- \\`**Price:** $100.00\\` → \\`**Price:** $120.00\\`\n\n### Reassigning Tasks\nAsk Claude: \"Assign all calculator tasks to jane@tommillerservices.com\"\nClaude will update:\n- \\`**Assignee:** Unassigned\\` → \\`**Assignee:** jane@tommillerservices.com\\`\n\n### Marking Tasks Complete\nAsk Claude: \"Mark tasks 1-10 as completed\"\nClaude will update:\n- \\`**Status:** PENDING\\` → \\`**Status:** COMPLETED\\`\n\n---\n\n**Version History:**\n- v1.0 (Jan 2025) - Initial specification\n`;\n\nexport const BILL_TEMPLATE_CONTENT = `# Bill Line Items Template\n\n## Project Information\n**Project Name:** [Enter project name]\n**Project Goal:** [Enter project goal - max 17 words]\n**Project Description:** [Enter project description - max 200 words]\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. [Task description]\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** email@example.com\n\n### 2. [Another task description]\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n### 3. [Add more line items as needed]\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n## Agreement\n\n[Add your agreement text here, or leave this section empty]\n`;\n\nexport const WATTLAB_PROJECT_TEMPLATE = `# WattLab Token Ecosystem Platform\n\n## Project Information\n**Project Name:** WattLab Token Ecosystem Platform\n**Project Goal:** Launch blockchain-powered platform to monetize bicycle carbon offsets through verified token rewards\n**Project Description:** Build comprehensive digital platform for WattLab/WattDrop featuring branded CRM, investor tracking, token mechanism designer, roadmap management, and launch planning tools. Platform enables tracking GPS-verified cycling activity, minting carbon offset tokens, and managing investor relationships across multi-city expansion.\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. DISCOVERY: Conduct discovery session to understand token ecosystem requirements and business objectives\n**Price:** $0.00\n**Billable:** No\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 2. PLANNING: Develop comprehensive platform architecture and timeline within $2,978 budget\n**Price:** $0.00\n**Billable:** No\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 3. INFRA: Setup domain (wattlab.io or wattdrop.com), SSL, email infrastructure for team\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 4. BRAND: Design and implement WattLab branded platform with custom color scheme\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 5. AUTH: Setup user authentication and access control system\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 6. CRM: Build client/investor database with tagging and contact management\n**Price:** $300.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 7. SMS: Integrate Australian SMS messaging system for investor communications\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 8. EMAIL: Setup branded email system with templates and tracking\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 9. OPPORTUNITIES: Build opportunity tracker with client attachment and status management\n**Price:** $250.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 10. JOBS: Create job tracking system linked to opportunities\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 11. BOOKING: Implement investor meeting booking system with calendar integration\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 12. ROADMAP: Build public project roadmap page with milestone tracking\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 13. PRESENTATION: Create investor presentation tools and pitch deck system\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 14. TOKEN-DESIGNER: Build token mechanism designer tracking minting events and carbon offsets\n**Price:** $400.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 15. CARBON-PROOF: Design battery data to cryptographic proof workflow system\n**Price:** $300.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 16. PAYMENT-FLOW: Document token payment mechanisms and business proof-of-offset system\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 17. LAUNCH-PLAN: Create hidden token launch planning portal with strategy documentation\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 18. ADVISORY: Provide ongoing token structure and launch strategy consultation\n**Price:** $0.00\n**Billable:** No\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 19. TESTING: Complete platform testing and quality assurance\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 20. TRAINING: Provide team training on platform usage and management\n**Price:** $128.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n## Agreement\n\n[Agreement to be added in proposal system]\n`;\n\n/**\n * Download a markdown file with the given content\n */\nexport const downloadMarkdownFile = (content: string, filename: string) => {\n  const blob = new Blob([content], { type: 'text/markdown' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    VStack,\n    Input,\n    FormControl,\n    FormLabel,\n    useToast,\n    Box,\n    Select,\n    Textarea,\n    HStack,\n    Image,\n    IconButton,\n    SimpleGrid,\n    Switch,\n    FormHelperText,\n    Stack,\n    Progress,\n    Text,\n    Tooltip,\n    useClipboard,\n} from \"@chakra-ui/react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { CloseIcon } from \"@chakra-ui/icons\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { normalizeMediaUrl } from \"../../helpers\";\nimport { ProjectTask, TaskStatus } from \"../../generated/graphql\";\n\nenum TaskPriority {\n    LOW = \"LOW\",\n    MEDIUM = \"MEDIUM\",\n    HIGH = \"HIGH\",\n    URGENT = \"URGENT\"\n}\n\n// Configure pdf.js worker for react-pdf v10 with Create React App\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n\ninterface PhotoUpload {\n    url: string;\n    description?: string;\n    fileType?: string;\n}\n\n\nconst CREATE_TASK = gql`\n  mutation CreateTask($input: TaskInput!) {\n    createTask(input: $input) {\n      id\n      description\n      status\n      projectId\n      assignedTo {\n        id\n        email\n      }\n      media {\n        url\n        description\n        fileType\n      }\n      billed\n      billable\n    }\n  }\n`;\n\nconst UPDATE_TASK = gql`\n  mutation UpdateTask($id: ID!, $input: TaskInput!) {\n    updateTask(id: $id, input: $input) {\n      id\n      description\n      status\n      projectId\n      assignedTo {\n        id\n        email\n      }\n      media {\n        url\n        description\n        fileType\n      }\n      billed\n      billable\n    }\n  }\n`;\n\nconst UPLOAD_FILE = gql`\n  mutation UploadFile($file: Upload!) {\n    uploadToPinata(file: $file)\n  }\n`;\n\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      businessName\n    }\n  }\n`;\n\n// GraphQL mutations for AI improvement\nconst IMPROVE_DESCRIPTION = gql`\n  mutation ImproveDescription($text: String!, $context: String) {\n    improveDescription(text: $text, context: $context)\n  }\n`;\n\nconst IMPROVE_TAGLINE = gql`\n  mutation ImproveTagline($text: String!, $context: String) {\n    improveTagline(text: $text, context: $context)\n  }\n`;\n\ninterface TaskModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    projectId: string;\n    onTaskUpdated?: () => void;\n    existingTask?: {\n        id: string;\n        description: string;\n        status: string;\n        assignedTo?: { id: string }[];\n        media?: {  // Changed from photos to media\n            url: string;\n            description?: string;\n            fileType: string;  // Add this field\n        }[];\n        billed: boolean;\n        billable?: boolean;\n    };\n}\n\nconst isPDF = (url: string): boolean => {\n    return url.endsWith(\".pdf\") ||\n        url.includes(\"application/pdf\") ||\n        url.includes(\"%2Fpdf\") ||  // URL encoded /pdf\n        url.toLowerCase().includes(\"pdf\");\n};\n\nexport const TaskModal: React.FC<TaskModalProps> = ({\n    isOpen,\n    onClose,\n    projectId,\n    onTaskUpdated,\n    existingTask\n}) => {\n    // Add console log to debug initial state\n    console.log(\"TaskModal initialization:\", {\n        existingTask,\n        isNewTask: !existingTask\n    });\n\n    // Get the current user from auth context\n    const { user } = useAuth();\n\n    const defaultClientId = \"6760ec476be9cc253e78285c\";\n    const [assignedToIds, setAssignedToIds] = useState<string[]>(() => {\n        if (existingTask?.assignedTo) {\n            return existingTask.assignedTo.map(user => user.id);\n        }\n        // If no existing task (new task mode), use current user's ID if available, otherwise use default\n        return user?.id ? [user.id] : [defaultClientId];\n    });\n\n    const [description, setDescription] = useState(existingTask?.description || \"\");\n    const [status, setStatus] = useState(existingTask?.status || \"PENDING\");\n    const [photos, setPhotos] = useState<PhotoUpload[]>(\n        existingTask?.media?.map(media => ({\n            url: normalizeMediaUrl(media.url), // Normalize URLs when loading existing task\n            description: media.description || \"\",\n            fileType: media.fileType || \"image/*\"\n        })) || []\n    );\n    const [billed, setBilled] = useState(existingTask?.billed || false);\n    const [billable, setBillable] = useState(existingTask?.billable !== undefined ? existingTask.billable : true);\n    const [isImprovingDescription, setIsImprovingDescription] = useState(false);\n    const [improvingFileDescription, setImprovingFileDescription] = useState<number | null>(null);\n    const toast = useToast();\n\n    const [createTask, { loading: createLoading }] = useMutation(CREATE_TASK);\n    const [updateTask, { loading: updateLoading }] = useMutation(UPDATE_TASK);\n    const [uploadFile] = useMutation(UPLOAD_FILE);\n    const [improveDescriptionMutation] = useMutation(IMPROVE_DESCRIPTION);\n    const [improveTaglineMutation] = useMutation(IMPROVE_TAGLINE);\n    const [isUploading, setIsUploading] = useState(false);\n    const [uploadProgress, setUploadProgress] = useState(0);\n\n    // Get clients for dropdown\n    const { data: clientsData, loading: clientsLoading } = useQuery(GET_CLIENTS);\n\n    // Add state for PDF preview\n    const [selectedPDF, setSelectedPDF] = useState<PhotoUpload | null>(null);\n\n    // Reset form when modal opens/closes or when existingTask changes\n    useEffect(() => {\n        if (existingTask) {\n            setDescription(existingTask.description);\n            setStatus(existingTask.status);\n            setAssignedToIds(existingTask.assignedTo?.map(user => user.id) || []);\n            setPhotos(existingTask.media?.map(media => ({\n                url: normalizeMediaUrl(media.url), // Normalize URLs when setting photos\n                description: media.description || \"\",\n                fileType: media.fileType || \"image/*\"\n            })) || []);\n            setBilled(existingTask.billed);\n            setBillable(existingTask.billable !== undefined ? existingTask.billable : true);\n        } else {\n            setDescription(\"\");\n            setStatus(\"PENDING\");\n            // For new tasks, use current user's ID if available\n            setAssignedToIds(user?.id ? [user.id] : [defaultClientId]);\n            setPhotos([]);\n            setBilled(false);\n            setBillable(true);\n        }\n        setSelectedPDF(null);\n    }, [existingTask, isOpen, user]);\n\n    // Add logging for component lifecycle and state changes\n    useEffect(() => {\n        console.log(\"TaskModal - Component mounted or updated\");\n        console.log(\"Current photos:\", photos);\n        console.log(\"Existing task:\", existingTask);\n    }, [photos, existingTask]);\n\n    const handleSubmit = async () => {\n        try {\n            const input = {\n                description: description.trim(),\n                projectId,\n                status: status as TaskStatus,\n                assignedTo: assignedToIds.length > 0 ? assignedToIds : undefined,\n                media: photos.length > 0 ? photos.map(photo => ({\n                    url: photo.url, // Keep the normalized URL\n                    description: photo.description || undefined,\n                    fileType: photo.fileType || \"image/*\"\n                })) : undefined,\n                billed: billed || undefined,\n                billable: billable\n            };\n\n            console.log(`${existingTask ? \"Updating\" : \"Creating\"} task with input:`, input);\n\n            const { data } = existingTask\n                ? await updateTask({\n                    variables: {\n                        id: existingTask.id,\n                        input\n                    }\n                })\n                : await createTask({\n                    variables: { input }\n                });\n\n            toast({\n                title: `Task ${existingTask ? \"updated\" : \"created\"}`,\n                status: \"success\",\n                duration: 3000,\n            });\n            onTaskUpdated?.();\n            handleClose();\n        } catch (error) {\n            console.error(`${existingTask ? \"Update\" : \"Create\"} task error:`, error);\n            toast({\n                title: \"Error\",\n                description: error instanceof Error ? error.message : `Failed to ${existingTask ? \"update\" : \"create\"} task`,\n                status: \"error\",\n                duration: 5000,\n            });\n        }\n    };\n\n    const handleClose = () => {\n        setDescription(\"\");\n        setStatus(\"PENDING\");\n        setAssignedToIds([]);\n        setPhotos([]);\n        setBilled(false);\n        setBillable(true);\n        setSelectedPDF(null); // Reset PDF preview\n        setIsImprovingDescription(false);\n        setImprovingFileDescription(null);\n        onClose();\n    };\n\n    // Helper function to clean AI responses\n    const cleanAIResponse = (text: string): string => {\n        // Remove surrounding quotes if present\n        let cleaned = text.trim();\n        if ((cleaned.startsWith('\"') && cleaned.endsWith('\"')) || \n            (cleaned.startsWith(\"'\") && cleaned.endsWith(\"'\"))) {\n            cleaned = cleaned.slice(1, -1);\n        }\n        \n        // Remove any preamble text like \"Here is the improved...\"\n        const patterns = [\n            /^Here is the improved [^:]*:\\s*/i,\n            /^Improved [^:]*:\\s*/i,\n            /^The improved [^:]*:\\s*/i\n        ];\n        \n        for (const pattern of patterns) {\n            cleaned = cleaned.replace(pattern, '');\n        }\n        \n        return cleaned.trim();\n    };\n\n    // Generate AI context for task description\n    const getDescriptionContext = (value: string) => {\n        return `Please improve this task description to be an actionable, professional task in maximum 30 words. Start with action verbs like \"Build\", \"Configure\", \"Implement\", \"Develop\", \"Create\", \"Setup\", etc. Focus on WHAT needs to be done, not WHY. This is a specific task description that will be shown to the client to demonstrate concrete work being completed. Make it sound technical, specific, and valuable. Return ONLY the improved task description without any preamble, explanation, or quotes. Original description: \"${value}\"`;\n    };\n\n    // AI improvement handler for task description\n    const handleImproveDescription = async () => {\n        const value = description;\n        if (!value.trim()) {\n            toast({\n                title: \"No text to improve\",\n                description: \"Please enter a task description first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsImprovingDescription(true);\n        try {\n            const context = getDescriptionContext(value);\n            const { data } = await improveDescriptionMutation({\n                variables: { text: value, context }\n            });\n            if (data?.improveDescription) {\n                setDescription(cleanAIResponse(data.improveDescription));\n                toast({\n                    title: \"✨ Task description improved!\",\n                    description: \"Claude has enhanced your task description\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving task description:', error);\n            toast({\n                title: \"Improvement failed\",\n                description: error instanceof Error ? error.message : \"Failed to improve task description. Please try again.\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsImprovingDescription(false);\n        }\n    };\n\n    // Generate AI context for file description\n    const getFileDescriptionContext = (value: string) => {\n        return `Please improve this file description to be concise and descriptive in maximum 10 words. This describes evidence/proof of work for a task. Make it clear what the file shows. Return ONLY the improved description without any preamble, explanation, or quotes. Original description: \"${value}\"`;\n    };\n\n    // AI improvement handler for file description\n    const handleImproveFileDescription = async (index: number) => {\n        const currentDescription = photos[index].description || \"\";\n        if (!currentDescription.trim()) {\n            toast({\n                title: \"No description to improve\",\n                description: \"Please enter a file description first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setImprovingFileDescription(index);\n        try {\n            const context = getFileDescriptionContext(currentDescription);\n            const { data } = await improveDescriptionMutation({\n                variables: { text: currentDescription, context }\n            });\n            if (data?.improveDescription) {\n                const newPhotos = [...photos];\n                newPhotos[index].description = cleanAIResponse(data.improveDescription);\n                setPhotos(newPhotos);\n                toast({\n                    title: \"✨ File description improved!\",\n                    description: \"Claude has enhanced your file description\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving file description:', error);\n            toast({\n                title: \"Improvement failed\",\n                description: error instanceof Error ? error.message : \"Failed to improve file description. Please try again.\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setImprovingFileDescription(null);\n        }\n    };\n\n    // Add logging to file upload handler\n    const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!e.target.files || !e.target.files[0]) return;\n\n        const file = e.target.files[0];\n        const allowedTypes = [\n            \"image/jpeg\",\n            \"image/png\",\n            \"image/gif\",\n            \"application/pdf\",\n            \"video/mp4\"\n        ];\n\n        if (!allowedTypes.includes(file.type)) {\n            toast({\n                title: \"Invalid file type\",\n                description: \"Please upload an image, PDF, or MP4 file\",\n                status: \"error\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsUploading(true);\n        setUploadProgress(0);\n\n        try {\n            // Simulate upload progress\n            const progressInterval = setInterval(() => {\n                setUploadProgress(prev => {\n                    if (prev >= 95) {\n                        clearInterval(progressInterval);\n                        return prev;\n                    }\n                    return prev + 5;\n                });\n            }, 100);\n\n            const { data } = await uploadFile({\n                variables: { file }\n            });\n\n            clearInterval(progressInterval);\n            setUploadProgress(100);\n\n            if (data.uploadToPinata) {\n                const newPhoto = {\n                    url: normalizeMediaUrl(data.uploadToPinata), // Normalize the uploaded URL immediately\n                    description: \"\",\n                    fileType: file.type\n                };\n                setPhotos([...photos, newPhoto]);\n                toast({\n                    title: \"File uploaded\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error(\"File upload error:\", error);\n            toast({\n                title: \"Upload failed\",\n                description: error instanceof Error ? error.message : \"Failed to upload file\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsUploading(false);\n            setUploadProgress(0);\n        }\n    };\n\n    const handlePhotoDescriptionChange = (index: number, description: string) => {\n        const newPhotos = [...photos];\n        newPhotos[index].description = description;\n        setPhotos(newPhotos);\n    };\n\n    const removePhoto = (index: number) => {\n        setPhotos(photos.filter((_, i) => i !== index));\n    };\n\n    // Add detailed logging for media rendering\n    const renderFilePreview = (photo: PhotoUpload, index: number) => {\n        // Comprehensive logging for debugging\n        console.log(\"🎨 === MEDIA RENDERING DEBUG ===\", {\n            index,\n            photo: {\n                url: photo.url,\n                fileType: photo.fileType,\n                description: photo.description\n            },\n            normalizedUrl: normalizeMediaUrl(photo.url),\n            urlAnalysis: {\n                isPDF: photo.fileType === \"application/pdf\" || photo.url.toLowerCase().includes(\"pdf\"),\n                isVideo: photo.fileType === \"video/mp4\" || photo.url.endsWith(\".mp4\"),\n                isImage: photo.fileType?.startsWith(\"image/\"),\n                hasFileType: !!photo.fileType,\n                fileTypeValue: photo.fileType || \"NO_FILETYPE_SET\"\n            },\n            urlPatterns: {\n                endsWithPDF: photo.url.endsWith(\".pdf\"),\n                endsWithMP4: photo.url.endsWith(\".mp4\"),\n                endsWithJPG: photo.url.endsWith(\".jpg\") || photo.url.endsWith(\".jpeg\"),\n                endsWithPNG: photo.url.endsWith(\".png\"),\n                endsWithGIF: photo.url.endsWith(\".gif\"),\n                containsIPFS: photo.url.includes(\"ipfs\"),\n                containsGateway: photo.url.includes(\"gateway\")\n            }\n        });\n\n        // Use normalized URL for all media rendering\n        const normalizedUrl = normalizeMediaUrl(photo.url);\n\n        // PDF handling\n        if (photo.fileType === \"application/pdf\" || photo.url.toLowerCase().includes(\"pdf\")) {\n            console.log(\"📄 Rendering as PDF:\", { normalizedUrl, fileType: photo.fileType });\n            return (\n                <Box\n                    maxH=\"100px\"\n                    overflow=\"hidden\"\n                    cursor=\"pointer\"\n                    onClick={() => setSelectedPDF({ ...photo, url: normalizedUrl })}\n                >\n                    <Document\n                        file={normalizedUrl}\n                        onLoadSuccess={({ numPages }) => {\n                            console.log(\"✅ PDF loaded successfully:\", {\n                                url: normalizedUrl,\n                                numPages,\n                                index\n                            });\n                        }}\n                        onLoadError={(error) => {\n                            console.error(\"❌ PDF load error:\", {\n                                error,\n                                url: normalizedUrl,\n                                index,\n                                errorMessage: error?.message || \"Unknown error\"\n                            });\n                        }}\n                    >\n                        <Page pageNumber={1} height={100} scale={0.5} />\n                    </Document>\n                </Box>\n            );\n        }\n\n        // Video handling\n        if (photo.fileType === \"video/mp4\" || photo.url.endsWith(\".mp4\")) {\n            console.log(\"🎥 Rendering as VIDEO:\", { normalizedUrl, fileType: photo.fileType });\n            return (\n                <Box maxH=\"100px\" overflow=\"hidden\">\n                    <video\n                        src={normalizedUrl}\n                        controls\n                        style={{ width: \"100%\", maxHeight: \"100px\", objectFit: \"contain\" }}\n                        onLoadStart={() => console.log(\"🎥 Video load started:\", { normalizedUrl, index })}\n                        onLoadedData={() => console.log(\"✅ Video data loaded:\", { normalizedUrl, index })}\n                        onError={(e) => {\n                            console.error(\"❌ Video load error:\", {\n                                event: e,\n                                url: normalizedUrl,\n                                index,\n                                target: e.currentTarget.src\n                            });\n                        }}\n                    >\n                        Your browser does not support the video tag.\n                    </video>\n                </Box>\n            );\n        }\n\n        // Default to image handling\n        console.log(\"🖼️ Rendering as IMAGE (default):\", {\n            normalizedUrl,\n            fileType: photo.fileType || \"UNDEFINED\",\n            willRenderAs: \"Image component\"\n        });\n\n        return (\n            <Box maxH=\"100px\" overflow=\"hidden\">\n                <Image\n                    src={normalizedUrl}\n                    alt={`Upload ${index + 1}`}\n                    maxH=\"100px\"\n                    objectFit=\"contain\"\n                    onLoad={() => {\n                        console.log(\"✅ Image loaded successfully:\", {\n                            url: normalizedUrl,\n                            index,\n                            fileType: photo.fileType\n                        });\n                    }}\n                    onError={(e) => {\n                        const imgElement = e.currentTarget as HTMLImageElement;\n                        console.error(\"❌ IMAGE LOAD ERROR:\", {\n                            url: normalizedUrl,\n                            originalUrl: photo.url,\n                            index,\n                            fileType: photo.fileType || \"NO_FILETYPE\",\n                            imgSrc: imgElement.src,\n                            imgComplete: imgElement.complete,\n                            imgNaturalWidth: imgElement.naturalWidth,\n                            imgNaturalHeight: imgElement.naturalHeight,\n                            error: e,\n                            suggestions: [\n                                \"Check if URL is accessible\",\n                                \"Check CORS settings\",\n                                \"Check if normalizeMediaUrl is working\",\n                                \"Check network tab for 404/403 errors\",\n                                \"Check if file actually exists at URL\"\n                            ]\n                        });\n                    }}\n                />\n            </Box>\n        );\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={handleClose} size=\"xl\">\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{existingTask ? \"Edit Task\" : \"Add New Task\"}</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody pb={6}>\n                    <VStack spacing={4}>\n                        <FormControl isRequired>\n                            <HStack justify=\"space-between\" align=\"center\" mb={2}>\n                                <FormLabel mb={0}>Description*</FormLabel>\n                                <HStack spacing={2}>\n                                    <Tooltip \n                                        label={\n                                            <Box p={2} maxW=\"600px\">\n                                                <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                    {getDescriptionContext(description || \"[your task description]\")}\n                                                </Text>\n                                            </Box>\n                                        }\n                                        placement=\"top\"\n                                        hasArrow\n                                        bg=\"gray.700\"\n                                        color=\"white\"\n                                    >\n                                        <Button\n                                            size=\"sm\"\n                                            variant=\"outline\"\n                                            colorScheme=\"purple\"\n                                            isDisabled={!description.trim()}\n                                            isLoading={isImprovingDescription}\n                                            onClick={handleImproveDescription}\n                                            leftIcon={<Text>✨</Text>}\n                                        >\n                                            AI Improve\n                                        </Button>\n                                    </Tooltip>\n                                    <IconButton\n                                        aria-label=\"Copy AI context\"\n                                        icon={<Text>📋</Text>}\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        isDisabled={!description.trim()}\n                                        onClick={() => {\n                                            if (description.trim()) {\n                                                navigator.clipboard.writeText(getDescriptionContext(description));\n                                                toast({\n                                                    title: \"AI context copied!\",\n                                                    description: \"The full context has been copied to your clipboard\",\n                                                    status: \"success\",\n                                                    duration: 2000,\n                                                });\n                                            }\n                                        }}\n                                        title=\"Copy AI context to clipboard\"\n                                    />\n                                </HStack>\n                            </HStack>\n                            <Textarea\n                                value={description}\n                                onChange={(e) => setDescription(e.target.value)}\n                                placeholder=\"Enter task description (e.g., 'Build user login system') - AI will make it professional...\"\n                                rows={4}\n                            />\n                        </FormControl>\n\n                        <FormControl>\n                            <FormLabel>Status</FormLabel>\n                            <Select\n                                value={status}\n                                onChange={(e) => setStatus(e.target.value)}\n                                bg={\n                                    status === \"COMPLETED\" ? \"green.50\" :\n                                        status === \"IN_PROGRESS\" ? \"green.50\" : \"orange.50\"\n                                }\n                                borderColor={\n                                    status === \"COMPLETED\" ? \"green.400\" :\n                                        status === \"IN_PROGRESS\" ? \"green.400\" : \"orange.400\"\n                                }\n                            >\n                                <option value=\"PENDING\" style={{ backgroundColor: \"var(--chakra-colors-orange-50)\" }}>Pending</option>\n                                <option value=\"IN_PROGRESS\" style={{ backgroundColor: \"var(--chakra-colors-green-50)\" }}>In Progress</option>\n                                <option value=\"COMPLETED\" style={{ backgroundColor: \"var(--chakra-colors-green-50)\" }}>Completed</option>\n                            </Select>\n                        </FormControl>\n\n                        <FormControl>\n                            <FormLabel>Assign To</FormLabel>\n                            <Select\n                                value={assignedToIds[0] || \"\"}\n                                onChange={(e) => setAssignedToIds(e.target.value ? [e.target.value] : [])}\n                                placeholder=\"Select client\"\n                                isDisabled={clientsLoading}\n                            >\n                                {clientsData?.clients?.map((client: any) => (\n                                    <option key={client.id} value={client.id}>\n                                        {client.businessName ? `${client.businessName} - ` : \"\"}\n                                        {client.fName} {client.lName} ({client.email})\n                                        {client.id === user?.id ? \" (You)\" : \"\"}\n                                    </option>\n                                ))}\n                            </Select>\n                        </FormControl>\n\n                        <FormControl>\n                            <FormLabel>Task Evidence</FormLabel>\n                            <Input\n                                type=\"file\"\n                                accept=\"image/*,video/mp4,application/pdf\"\n                                onChange={handleFileUpload}\n                                disabled={isUploading}\n                            />\n                            <FormHelperText>\n                                Upload images, videos, or PDFs as proof of work (screenshots, recordings, documents, etc.)\n                            </FormHelperText>\n                            {isUploading && (\n                                <Box mt={2}>\n                                    <Text>Uploading... {uploadProgress.toFixed(2)}%</Text>\n                                    <Progress value={uploadProgress} size=\"sm\" colorScheme=\"blue\" />\n                                </Box>\n                            )}\n                        </FormControl>\n\n                        {photos.length > 0 && (\n                            <SimpleGrid columns={2} spacing={4} w=\"full\">\n                                {photos.map((photo, index) => (\n                                    <Box key={index} borderWidth={1} p={2} borderRadius=\"md\" position=\"relative\">\n                                        {renderFilePreview(photo, index)}\n                                        <VStack spacing={2} mt={2} align=\"stretch\">\n                                            <HStack spacing={2} align=\"flex-start\">\n                                                <Textarea\n                                                    size=\"sm\"\n                                                    placeholder=\"File description (max 10 words)\"\n                                                    value={photo.description}\n                                                    onChange={(e) => handlePhotoDescriptionChange(index, e.target.value)}\n                                                    flex={1}\n                                                    rows={2}\n                                                    resize=\"vertical\"\n                                                />\n                                                <VStack spacing={1}>\n                                                    <Tooltip \n                                                        label={\n                                                            <Box p={2} maxW=\"500px\">\n                                                                <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                                <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                                    {getFileDescriptionContext(photo.description || \"[your file description]\")}\n                                                                </Text>\n                                                            </Box>\n                                                        }\n                                                        placement=\"top\"\n                                                        hasArrow\n                                                        bg=\"gray.700\"\n                                                        color=\"white\"\n                                                    >\n                                                        <Button\n                                                            size=\"sm\"\n                                                            variant=\"outline\"\n                                                            colorScheme=\"purple\"\n                                                            isDisabled={!photo.description?.trim()}\n                                                            isLoading={improvingFileDescription === index}\n                                                            onClick={() => handleImproveFileDescription(index)}\n                                                            minW=\"auto\"\n                                                            px={2}\n                                                        >\n                                                            ✨\n                                                        </Button>\n                                                    </Tooltip>\n                                                    <IconButton\n                                                        aria-label=\"Copy AI context\"\n                                                        icon={<Text fontSize=\"xs\">📋</Text>}\n                                                        size=\"xs\"\n                                                        variant=\"ghost\"\n                                                        isDisabled={!photo.description?.trim()}\n                                                        onClick={() => {\n                                                            if (photo.description?.trim()) {\n                                                                navigator.clipboard.writeText(getFileDescriptionContext(photo.description));\n                                                                toast({\n                                                                    title: \"AI context copied!\",\n                                                                    description: \"The file description context has been copied\",\n                                                                    status: \"success\",\n                                                                    duration: 2000,\n                                                                });\n                                                            }\n                                                        }}\n                                                        title=\"Copy AI context\"\n                                                    />\n                                                </VStack>\n                                            </HStack>\n                                        </VStack>\n                                        <IconButton\n                                            aria-label=\"Remove file\"\n                                            icon={<CloseIcon />}\n                                            size=\"sm\"\n                                            position=\"absolute\"\n                                            right={2}\n                                            top={2}\n                                            onClick={() => removePhoto(index)}\n                                            bg=\"red.500\"\n                                            color=\"white\"\n                                            _hover={{ bg: \"red.600\" }}\n                                        />\n                                    </Box>\n                                ))}\n                            </SimpleGrid>\n                        )}\n\n                        <HStack spacing={6} width=\"full\">\n                            <FormControl flex={1}>\n                                <FormLabel>Billable</FormLabel>\n                                <Switch\n                                    isChecked={billable}\n                                    onChange={(e) => {\n                                        setBillable(e.target.checked);\n                                        // If marking as non-billable, also mark as not billed\n                                        if (!e.target.checked) {\n                                            setBilled(false);\n                                        }\n                                    }}\n                                    colorScheme=\"green\"\n                                />\n                                <FormHelperText>Is this task billable?</FormHelperText>\n                            </FormControl>\n                            \n                            <FormControl flex={1}>\n                                <FormLabel>Billed</FormLabel>\n                                <Switch\n                                    isChecked={billed}\n                                    onChange={(e) => setBilled(e.target.checked)}\n                                    isDisabled={!billable}\n                                    colorScheme=\"purple\"\n                                />\n                                <FormHelperText>\n                                    {!billable ? \"Non-billable task\" : \"Mark if this task has been billed\"}\n                                </FormHelperText>\n                            </FormControl>\n                        </HStack>\n\n                        <HStack spacing={4} width=\"full\" justify=\"flex-end\">\n                            <Button onClick={handleClose}>Cancel</Button>\n                            <Button\n                                colorScheme=\"blue\"\n                                onClick={handleSubmit}\n                                isLoading={createLoading || updateLoading}\n                                disabled={!description}\n                            >\n                                {existingTask ? \"Update Task\" : \"Create Task\"}\n                            </Button>\n                        </HStack>\n                    </VStack>\n                </ModalBody>\n            </ModalContent>\n            {selectedPDF && (\n                <Modal isOpen={!!selectedPDF} onClose={() => setSelectedPDF(null)} size=\"6xl\">\n                    <ModalOverlay />\n                    <ModalContent maxW=\"90vw\" maxH=\"90vh\">\n                        <ModalCloseButton zIndex=\"popover\" />\n                        <ModalBody p={0}>\n                            <Box height=\"85vh\" overflow=\"auto\">\n                                <Document file={normalizeMediaUrl(selectedPDF.url)}>\n                                    <Page\n                                        pageNumber={1}\n                                        width={window.innerWidth * 0.8}\n                                    />\n                                </Document>\n                            </Box>\n                        </ModalBody>\n                    </ModalContent>\n                </Modal>\n            )}\n        </Modal>\n    );\n}; ","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  VStack,\n  Input,\n  FormControl,\n  FormLabel,\n  useToast,\n  Box,\n  Text,\n  HStack,\n  InputGroup,\n  InputLeftAddon,\n  Select,\n  FormHelperText,\n} from \"@chakra-ui/react\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\n\n// Country codes for phone number formatting (from SMS login modal)\nconst COUNTRY_CODES = [\n  { name: \"Australia\", code: \"+61\", flag: \"🇦🇺\" },\n  { name: \"United States\", code: \"+1\", flag: \"🇺🇸\" },\n  { name: \"United Kingdom\", code: \"+44\", flag: \"🇬🇧\" },\n  { name: \"Canada\", code: \"+1\", flag: \"🇨🇦\" },\n  { name: \"New Zealand\", code: \"+64\", flag: \"🇳🇿\" },\n  { name: \"Germany\", code: \"+49\", flag: \"🇩🇪\" },\n  { name: \"France\", code: \"+33\", flag: \"🇫🇷\" },\n  { name: \"Japan\", code: \"+81\", flag: \"🇯🇵\" },\n  { name: \"Singapore\", code: \"+65\", flag: \"🇸🇬\" },\n];\n\nconst CREATE_CLIENT = gql`\n  mutation CreateClient($input: ClientInput!) {\n    createClient(input: $input) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst UPDATE_PROJECT = gql`\n  mutation UpdateProject($id: ID!, $input: ProjectUpdateInput!) {\n    updateProject(id: $id, input: $input) {\n      id\n      projectName\n      projectGoal\n      members {\n        id\n        fName\n        lName\n        email\n      }\n    }\n  }\n`;\n\nconst GET_PROJECT = gql`\n  query GetProject($id: ID!) {\n    project(id: $id) {\n      id\n      members {\n        id\n        fName\n        lName\n        email\n      }\n    }\n  }\n`;\n\ninterface AddMemberModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  onMemberAdded: () => void;\n}\n\ninterface FormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n}\n\nexport const AddMemberModal: React.FC<AddMemberModalProps> = ({\n  isOpen,\n  onClose,\n  projectId,\n  onMemberAdded,\n}) => {\n  // Consistent styling from brandConfig\n  const bg = getColor(\"background.main\");\n  const cardGradientBg = getColor(\"background.cardGradient\");\n  const cardBorder = getColor(\"border.darkCard\");\n  const textPrimary = getColor(\"text.primaryDark\");\n  const textSecondary = getColor(\"text.secondaryDark\");\n  const textMuted = getColor(\"text.mutedDark\");\n  \n  const [selectedCountry, setSelectedCountry] = useState(COUNTRY_CODES[0]); // Default to Australia\n  const [localPhoneNumber, setLocalPhoneNumber] = useState(\"\");\n  const [formattedPhoneNumber, setFormattedPhoneNumber] = useState(\"\");\n  const [formData, setFormData] = useState<FormData>({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n  });\n\n  const toast = useToast();\n\n  const [createClient, { loading: createLoading }] = useMutation(CREATE_CLIENT, {\n    refetchQueries: [\"GetClients\"]\n  });\n\n  const [updateProject] = useMutation(UPDATE_PROJECT);\n\n  const { data: projectData } = useQuery(GET_PROJECT, {\n    variables: { id: projectId },\n    skip: !projectId,\n  });\n\n  const handleCountryChange = (countryCode: string) => {\n    const country = COUNTRY_CODES.find(c => c.code === countryCode);\n    if (country) {\n      setSelectedCountry(country);\n      // Clear local number when changing countries to avoid confusion\n      setLocalPhoneNumber(\"\");\n    }\n  };\n\n  // Format phone number when country or local number changes (from SMS login modal)\n  useEffect(() => {\n    if (!localPhoneNumber.trim()) {\n      setFormattedPhoneNumber(\"\");\n      setFormData(prev => ({ ...prev, phoneNumber: \"\" }));\n      return;\n    }\n\n    let cleanedLocal = localPhoneNumber.trim();\n\n    // Remove any spaces, dashes, parentheses\n    cleanedLocal = cleanedLocal.replace(/[\\s\\-\\(\\)]/g, \"\");\n\n    // Remove any existing plus sign\n    if (cleanedLocal.startsWith(\"+\")) {\n      cleanedLocal = cleanedLocal.substring(1);\n    }\n\n    // Remove country code if user accidentally included it\n    const countryCodeWithoutPlus = selectedCountry.code.substring(1); // Remove + from country code\n    if (cleanedLocal.startsWith(countryCodeWithoutPlus)) {\n      cleanedLocal = cleanedLocal.substring(countryCodeWithoutPlus.length);\n    }\n\n    // Format the complete number\n    const completeNumber = selectedCountry.code + cleanedLocal;\n    setFormattedPhoneNumber(completeNumber);\n    setFormData(prev => ({ ...prev, phoneNumber: completeNumber }));\n  }, [selectedCountry, localPhoneNumber]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLocalPhoneNumber(e.target.value);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n    });\n    setLocalPhoneNumber(\"\");\n    setFormattedPhoneNumber(\"\");\n    setSelectedCountry(COUNTRY_CODES[0]);\n  };\n\n  const handleSubmit = async () => {\n    // Basic validation\n    if (!formData.firstName.trim() || !formData.lastName.trim() || !formData.email.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        status: \"error\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(formData.email)) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        status: \"error\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    // Phone validation\n    if (!formattedPhoneNumber || !formattedPhoneNumber.match(/^\\+[1-9]\\d{1,14}$/)) {\n      toast({\n        title: \"Invalid Phone Number\",\n        description: \"Please enter a valid phone number\",\n        status: \"error\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    try {\n      // Step 1: Create the new client\n      const { data: clientData } = await createClient({\n        variables: {\n          input: {\n            fName: formData.firstName.trim(),\n            lName: formData.lastName.trim(),\n            email: formData.email.trim(),\n            phoneNumber: formattedPhoneNumber,\n          }\n        }\n      });\n\n      if (!clientData?.createClient) {\n        throw new Error(\"Failed to create client\");\n      }\n\n      // Step 2: Add the new client to the project as a member\n      const currentMemberIds = projectData?.project?.members?.map((member: any) => member.id) || [];\n      const updatedMemberIds = [...currentMemberIds, clientData.createClient.id];\n\n      await updateProject({\n        variables: {\n          id: projectId,\n          input: {\n            members: updatedMemberIds,\n          },\n        },\n      });\n\n      toast({\n        title: \"Success!\",\n        description: `${formData.firstName} ${formData.lastName} has been created and added to the project`,\n        status: \"success\",\n        duration: 5000,\n      });\n\n      resetForm();\n      onMemberAdded();\n      onClose();\n\n    } catch (error) {\n      console.error(\"Error creating and adding member:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create and add member\",\n        status: \"error\",\n        duration: 5000,\n      });\n    }\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={handleClose} size=\"md\">\n      <ModalOverlay bg=\"rgba(0, 0, 0, 0.7)\" backdropFilter=\"blur(10px)\" />\n      <ModalContent\n        bg=\"rgba(30, 30, 30, 0.98)\"\n        backdropFilter=\"blur(20px)\"\n        borderColor={cardBorder}\n        border=\"1px solid\"\n        boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.5)\"\n      >\n        <ModalHeader borderBottom=\"1px\" borderColor={cardBorder}>\n          <Text color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n            Add New Team Member\n          </Text>\n        </ModalHeader>\n        <ModalCloseButton \n          color={textSecondary}\n          _hover={{ color: textPrimary, bg: \"rgba(255, 255, 255, 0.1)\" }}\n        />\n        <ModalBody pb={6}>\n          <VStack spacing={4} align=\"stretch\">\n            <Text fontSize=\"sm\" color={textSecondary}>\n              Create a new client and add them to this project as a team member.\n            </Text>\n\n            <FormControl isRequired>\n              <FormLabel color={textPrimary}>First Name<Text as=\"span\" color=\"red.400\">*</Text></FormLabel>\n              <Input\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleChange}\n                placeholder=\"Enter first name\"\n                bg=\"rgba(0, 0, 0, 0.2)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                color={textPrimary}\n                borderRadius=\"lg\"\n                _placeholder={{ color: textMuted }}\n                _focus={{\n                  borderColor: textSecondary,\n                  boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\"\n                }}\n                _hover={{\n                  borderColor: textSecondary\n                }}\n              />\n            </FormControl>\n\n            <FormControl isRequired>\n              <FormLabel color={textPrimary}>Last Name<Text as=\"span\" color=\"red.400\">*</Text></FormLabel>\n              <Input\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleChange}\n                placeholder=\"Enter last name\"\n                bg=\"rgba(0, 0, 0, 0.2)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                color={textPrimary}\n                borderRadius=\"lg\"\n                _placeholder={{ color: textMuted }}\n                _focus={{\n                  borderColor: textSecondary,\n                  boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\"\n                }}\n                _hover={{\n                  borderColor: textSecondary\n                }}\n              />\n            </FormControl>\n\n            <FormControl isRequired>\n              <FormLabel color={textPrimary}>Email<Text as=\"span\" color=\"red.400\">*</Text></FormLabel>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                placeholder=\"Enter email address\"\n                bg=\"rgba(0, 0, 0, 0.2)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                color={textPrimary}\n                borderRadius=\"lg\"\n                _placeholder={{ color: textMuted }}\n                _focus={{\n                  borderColor: textSecondary,\n                  boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\"\n                }}\n                _hover={{\n                  borderColor: textSecondary\n                }}\n              />\n            </FormControl>\n\n            <FormControl isRequired>\n              <FormLabel color={textPrimary}>Phone Number<Text as=\"span\" color=\"red.400\">*</Text></FormLabel>\n              <VStack spacing={2} align=\"stretch\">\n                <Select\n                  value={selectedCountry.code}\n                  onChange={(e) => handleCountryChange(e.target.value)}\n                  bg=\"rgba(0, 0, 0, 0.2)\"\n                  border=\"1px\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  borderRadius=\"lg\"\n                  _focus={{\n                    borderColor: textSecondary,\n                    boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\"\n                  }}\n                  _hover={{\n                    borderColor: textSecondary\n                  }}\n                >\n                  {COUNTRY_CODES.map((country) => (\n                    <option key={country.code} value={country.code} style={{ backgroundColor: '#2a2a2a', color: '#E5E5E5' }}>\n                      {country.flag} {country.name} ({country.code})\n                    </option>\n                  ))}\n                </Select>\n                <InputGroup>\n                  <InputLeftAddon\n                    bg=\"rgba(0, 0, 0, 0.3)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    {selectedCountry.code}\n                  </InputLeftAddon>\n                  <Input\n                    type=\"tel\"\n                    value={localPhoneNumber}\n                    onChange={handlePhoneChange}\n                    placeholder=\"Enter phone number\"\n                    bg=\"rgba(0, 0, 0, 0.2)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    _placeholder={{ color: textMuted }}\n                    _focus={{\n                      borderColor: textSecondary,\n                      boxShadow: \"0 0 0 1px rgba(255, 255, 255, 0.1)\"\n                    }}\n                    _hover={{\n                      borderColor: textSecondary\n                    }}\n                  />\n                </InputGroup>\n                {formattedPhoneNumber && (\n                  <FormHelperText color={textSecondary}>\n                    Formatted: {formattedPhoneNumber}\n                  </FormHelperText>\n                )}\n              </VStack>\n            </FormControl>\n\n            <HStack spacing={3} pt={4}>\n              <Button\n                variant=\"outline\"\n                onClick={handleClose}\n                flex={1}\n                borderColor={cardBorder}\n                color={textPrimary}\n                bg=\"rgba(0, 0, 0, 0.2)\"\n                _hover={{ \n                  borderColor: textSecondary,\n                  bg: \"rgba(255, 255, 255, 0.05)\" \n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                bg={getColor(\"components.button.primaryBg\")}\n                color=\"white\"\n                _hover={{ \n                  bg: getColor(\"components.button.primaryHover\"),\n                  transform: \"translateY(-2px)\"\n                }}\n                onClick={handleSubmit}\n                isLoading={createLoading}\n                loadingText=\"Creating...\"\n                flex={1}\n                boxShadow=\"0 2px 4px rgba(0, 122, 255, 0.2)\"\n              >\n                Create & Add Member\n              </Button>\n            </HStack>\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\nimport { gql, useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { FORMAT_SPEC_CONTENT, BILL_TEMPLATE_CONTENT, downloadMarkdownFile } from \"./markdownTemplates\";\nimport {\n    Box,\n    Container,\n    Card,\n    CardBody,\n    CardHeader,\n    Heading,\n    Text,\n    VStack,\n    HStack,\n    Badge,\n    Skeleton,\n    SimpleGrid,\n    Avatar,\n    Icon,\n    Button,\n    Input,\n    Textarea,\n    IconButton,\n    useToast,\n    Select,\n    Image,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalBody,\n    ModalCloseButton,\n    Progress,\n    Stack,\n    Center,\n    Spinner,\n    Flex,\n    Tooltip,\n    Divider,\n} from \"@chakra-ui/react\";\nimport { keyframes } from '@emotion/react';\nimport { motion } from \"framer-motion\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\nimport projectsModuleConfig from \"./moduleConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { FiUsers, FiCheckCircle, FiLock, FiHome, FiAlertCircle, FiArrowUp, FiArrowDown, FiClock, FiPlus, FiInfo } from \"react-icons/fi\";\nimport { EditIcon, CheckIcon, DeleteIcon, DownloadIcon, ViewIcon } from \"@chakra-ui/icons\";\nimport { TaskModal } from \"./TaskModal\";\nimport { AddMemberModal } from \"./AddMemberModal\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\n// Configure pdf.js worker for react-pdf v10 with Create React App\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { LoginWithSmsModal } from \"../authentication\";\nimport { normalizeMediaUrl } from \"../../helpers\";\nimport { Bill, Project, ProjectTask, TaskStatus } from \"../../generated/graphql\";\n\n// Define pulse animation for checkbox\nconst pulse = keyframes`\n  0% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0.1;\n  }\n  50% {\n    transform: translate(-50%, -50%) scale(1.05);\n    opacity: 0.2;\n  }\n  100% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 0.1;\n  }\n`;\n\nconst GET_PROJECT = gql`\n  query GetProject($id: ID!) {\n    project(id: $id) {\n      id\n      projectName\n      projectGoal\n      projectDescription\n      progress\n      createdAt\n      updatedAt\n      billingClient {\n        id\n        fName\n        lName\n        email\n      }\n      members {\n        id\n        fName\n        lName\n        email\n      }\n      tasks {\n        id\n        description\n        status\n        order\n        assignedTo {\n          id\n          fName\n          lName\n          email\n          profilePhoto\n        }\n        media {\n          url\n          description\n          fileType\n        }\n        billed\n        billable\n      }\n      bills {\n        id\n      }\n    }\n  }\n`;\n\nconst PUBLIC_GET_PROJECT = gql`\n  query PublicGetProject($id: ID!) {\n    publicProject(id: $id) {\n      id\n      projectName\n      projectGoal\n      projectDescription\n      progress\n      createdAt\n      updatedAt\n      billingClient {\n        id\n        fName\n        lName\n        email\n      }\n      members {\n        id\n        fName\n        lName\n        email\n      }\n      tasks {\n        id\n        description\n        status\n        order\n        assignedTo {\n          id\n          fName\n          lName\n          email\n          profilePhoto\n        }\n        media {\n          url\n          description\n          fileType\n        }\n        billed\n        billable\n      }\n      bills {\n        id\n      }\n    }\n  }\n`;\n\nconst UPDATE_PROJECT = gql`\n  mutation UpdateProject($id: ID!, $input: ProjectUpdateInput!) {\n    updateProject(id: $id, input: $input) {\n      id\n      projectName\n      projectGoal\n      members {\n        id\n        fName\n        lName\n        email\n      }\n    }\n  }\n`;\n\nconst UPDATE_TASK_STATUS = gql`\n  mutation UpdateTaskStatus($taskId: ID!, $status: TaskStatus!) {\n    updateTaskStatus(taskId: $taskId, status: $status) {\n      id\n      description\n      status\n      assignedTo {\n        id\n        email\n      }\n    }\n  }\n`;\n\nconst DELETE_PHOTO = gql`\n  mutation DeleteFile($url: String!) {\n    deleteFromPinata(url: $url)\n  }\n`;\n\nconst CREATE_DRAFT_BILL_WITH_TASKS = gql`\n  mutation CreateDraftBillWithTasks($projectId: ID!) {\n    createDraftBillWithTasks(projectId: $projectId) {\n      id\n      lineItems {\n        id\n        description\n        amount\n \n      }\n      service {\n        id\n        client {\n          id\n          fName\n          lName\n        }\n      }\n   \n      isPaid\n    }\n  }\n`;\n\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: ID!) {\n    deleteTask(id: $id)\n  }\n`;\n\nconst UPDATE_PROJECT_PROGRESS = gql`\n  mutation UpdateProjectProgress($id: ID!, $input: UpdateProjectProgressInput!) {\n    updateProjectProgress(id: $id, input: $input) {\n      id\n      progress\n      projectName\n      projectGoal\n    }\n  }\n`;\n\nconst IMPROVE_DESCRIPTION = gql`\n  mutation ImproveDescription($text: String!, $context: String) {\n    improveDescription(text: $text, context: $context)\n  }\n`;\n\nconst IMPROVE_TAGLINE = gql`\n  mutation ImproveTagline($text: String!, $context: String) {\n    improveTagline(text: $text, context: $context)\n  }\n`;\n\nconst UPDATE_TASK_ORDER = gql`\n  mutation UpdateTaskOrder($taskId: ID!, $order: Int!) {\n    updateTaskOrder(taskId: $taskId, order: $order) {\n      id\n      order\n    }\n  }\n`;\n\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      businessName\n    }\n  }\n`;\n\n\nconst DELETE_TASK_MEDIA = gql`\n  mutation DeleteTaskMedia($taskId: ID!, $photoUrl: String!) {\n    deleteTaskMedia(taskId: $taskId, photoUrl: $photoUrl)\n  }\n`;\n\nconst EXPORT_PROJECT_TASKS_TO_MARKDOWN = gql`\n  query ExportProjectTasksToMarkdown($projectId: ID!) {\n    exportProjectTasksToMarkdown(projectId: $projectId)\n  }\n`;\n\nconst IMPORT_TASKS_FROM_MARKDOWN = gql`\n  mutation ImportTasksFromMarkdown($projectId: ID!, $markdown: String!) {\n    importTasksFromMarkdown(projectId: $projectId, markdown: $markdown) {\n      id\n      projectName\n    }\n  }\n`;\n\nconst APPEND_TASKS_FROM_MARKDOWN = gql`\n  mutation AppendTasksFromMarkdown($projectId: ID!, $markdown: String!) {\n    appendTasksFromMarkdown(projectId: $projectId, markdown: $markdown) {\n      id\n      projectName\n    }\n  }\n`;\n\ninterface Member {\n    id: string;\n    fName: string;\n    lName: string;\n    email: string;\n}\n\n\nconst ProjectPage = () => {\n    usePageTitle(\"Project Details\");\n    const { id } = useParams<{ id: string }>();\n    const { loading: authLoading, isAuthenticated, user } = useAuth();\n    const navigate = useNavigate();\n    const toast = useToast();\n\n    // State declarations (moved before their use in hooks)\n    const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);\n    const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n    const [selectedImage, setSelectedImage] = useState<{ url: string; description?: string } | null>(null);\n    const [isEditing, setIsEditing] = useState(false);\ninterface Task {\n        id: string;\n        description: string;\n        status: string;\n        order?: number;\n        media?: any[];\n        assignedTo?: { id: string; fName: string; lName: string }[];\n        billable?: boolean;\n        billed?: boolean;\n    }\n\n    const [editedName, setEditedName] = useState(\"\");\n    const [editedGoal, setEditedGoal] = useState(\"\");\n    const [editedDescription, setEditedDescription] = useState(\"\");\n    const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n    const [tempOrder, setTempOrder] = useState<{ [key: string]: number }>({});\n    const [orderedTasks, setOrderedTasks] = useState<Task[]>([]);\n    const [selectedClientId, setSelectedClientId] = useState<string>(\"\");\n    const [isAddingMember, setIsAddingMember] = useState(false);\n    const [isAddMemberModalOpen, setIsAddMemberModalOpen] = useState(false);\n    const [isImprovingGoal, setIsImprovingGoal] = useState(false);\n    const [isImprovingDescription, setIsImprovingDescription] = useState(false);\n\n    // Consistent styling from brandConfig\n    const bg = getColor(\"background.main\");\n    const cardGradientBg = getColor(\"background.cardGradient\");\n    const cardBorder = getColor(\"border.darkCard\");\n    const textPrimary = getColor(\"text.primaryDark\");\n    const textSecondary = getColor(\"text.secondaryDark\");\n    const textMuted = getColor(\"text.mutedDark\");\n\n    // Use public query when not authenticated\n    const projectQuery = isAuthenticated ? GET_PROJECT : PUBLIC_GET_PROJECT;\n\n    // GraphQL queries\n    const { loading, error, data, refetch } = useQuery(projectQuery, {\n        variables: { id },\n        onCompleted: (data) => {\n            console.log(\"Project data loaded:\", data);\n            // Get project from either authenticated or public query\n            const project = data?.project || data?.publicProject;\n            if (project?.tasks) {\n                // Sort tasks by order and store them in state\n                setOrderedTasks([...project.tasks].sort((a, b) => a.order - b.order));\n            }\n        },\n        onError: (error) => {\n            console.error(\"Project data error:\", error);\n        }\n    });\n\n    // Get clients for member selection\n    const { data: clientsData, loading: clientsLoading } = useQuery(GET_CLIENTS);\n\n    // Replace isAuthorized with proper admin check\n    const isAdmin = user?.permissions?.includes(\"PROJECTS_ADMIN\");\n\n    // Export to markdown - lazy query\n    const [exportProjectTasks, { loading: exportingTasks }] = useLazyQuery(EXPORT_PROJECT_TASKS_TO_MARKDOWN, {\n        fetchPolicy: 'network-only',\n        onCompleted: (data) => {\n            if (data?.exportProjectTasksToMarkdown) {\n                const markdown = data.exportProjectTasksToMarkdown;\n                const projectName = project?.projectName || 'project';\n                const fileName = `${projectName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_tasks.md`;\n\n                // Create blob and download\n                const blob = new Blob([markdown], { type: 'text/markdown' });\n                const url = URL.createObjectURL(blob);\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = fileName;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n\n                toast({\n                    title: 'Tasks exported',\n                    description: `Downloaded ${fileName}`,\n                    status: 'success',\n                    duration: 3000,\n                    isClosable: true,\n                });\n            }\n        },\n        onError: (error) => {\n            toast({\n                title: 'Export failed',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    // Import from markdown - file input refs\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const appendFileInputRef = useRef<HTMLInputElement>(null);\n    const [importingFile, setImportingFile] = useState(false);\n    const [appendingFile, setAppendingFile] = useState(false);\n\n    // Import mutation (replaces all tasks)\n    const [importTasksFromMarkdown] = useMutation(IMPORT_TASKS_FROM_MARKDOWN, {\n        onCompleted: () => {\n            toast({\n                title: 'Tasks imported successfully',\n                description: 'All tasks have been replaced with imported data',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            setImportingFile(false);\n            // Refetch project data\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: 'Import failed',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n            setImportingFile(false);\n        }\n    });\n\n    // Append mutation (adds tasks without deleting existing ones)\n    const [appendTasksFromMarkdown] = useMutation(APPEND_TASKS_FROM_MARKDOWN, {\n        onCompleted: () => {\n            toast({\n                title: 'Tasks appended successfully',\n                description: 'Additional tasks added to project (existing tasks preserved)',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            setAppendingFile(false);\n            // Refetch project data\n            refetch();\n        },\n        onError: (error) => {\n            toast({\n                title: 'Append failed',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n            setAppendingFile(false);\n        }\n    });\n\n    // Handle file import (replaces tasks)\n    const handleFileImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        // Validate file type\n        if (!file.name.endsWith('.md')) {\n            toast({\n                title: 'Invalid file type',\n                description: 'Please upload a .md (markdown) file',\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        setImportingFile(true);\n\n        try {\n            // Read file content\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                const markdown = e.target?.result as string;\n\n                // Import to project\n                await importTasksFromMarkdown({\n                    variables: {\n                        projectId: id,\n                        markdown\n                    }\n                });\n            };\n            reader.readAsText(file);\n        } catch (error: any) {\n            toast({\n                title: 'Error reading file',\n                description: error.message,\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            });\n            setImportingFile(false);\n        }\n\n        // Reset file input\n        event.target.value = '';\n    };\n\n    // Handle file append (adds tasks without deleting)\n    const handleFileAppend = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        // Validate file type\n        if (!file.name.endsWith('.md')) {\n            toast({\n                title: 'Invalid file type',\n                description: 'Please upload a .md (markdown) file',\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        setAppendingFile(true);\n\n        try {\n            // Read file content\n            const reader = new FileReader();\n            reader.onload = async (e) => {\n                const markdown = e.target?.result as string;\n\n                // Append to project\n                await appendTasksFromMarkdown({\n                    variables: {\n                        projectId: id,\n                        markdown\n                    }\n                });\n            };\n            reader.readAsText(file);\n        } catch (error: any) {\n            toast({\n                title: 'Error reading file',\n                description: error.message,\n                status: 'error',\n                duration: 3000,\n                isClosable: true,\n            });\n            setAppendingFile(false);\n        }\n\n        // Reset file input\n        event.target.value = '';\n    };\n\n    // Mutations\n    const [updateProject] = useMutation(UPDATE_PROJECT);\n    const [improveDescription] = useMutation(IMPROVE_DESCRIPTION);\n    const [improveTagline] = useMutation(IMPROVE_TAGLINE);\n    const [deleteTaskMedia] = useMutation(DELETE_TASK_MEDIA, {\n        onCompleted: (data) => console.log(\"Task media deleted:\", data),\n        onError: (error) => console.error(\"Task media deletion error:\", error)\n    });\n    const [updateTaskStatus] = useMutation(UPDATE_TASK_STATUS, {\n        onCompleted: (data) => console.log(\"Task status updated:\", data),\n        onError: (error) => console.error(\"Task status update error:\", error),\n        // Update the cache to reflect the change immediately\n        update: (cache, { data }) => {\n            if (data?.updateTaskStatus) {\n                const updatedTask = data.updateTaskStatus;\n                \n                // Update the task in the project query cache\n                try {\n                    const existingData: any = cache.readQuery({\n                        query: GET_PROJECT,\n                        variables: { id }\n                    });\n                    \n                    if (existingData?.project) {\n                        const updatedTasks = existingData.project.tasks.map((task: any) => \n                            task.id === updatedTask.id \n                                ? { ...task, status: updatedTask.status }\n                                : task\n                        );\n                        \n                        cache.writeQuery({\n                            query: GET_PROJECT,\n                            variables: { id },\n                            data: {\n                                project: {\n                                    ...existingData.project,\n                                    tasks: updatedTasks\n                                }\n                            }\n                        });\n                        \n                        // Also update orderedTasks state immediately\n                        setOrderedTasks(prevTasks => \n                            prevTasks.map(task => \n                                task.id === updatedTask.id \n                                    ? { ...task, status: updatedTask.status }\n                                    : task\n                            )\n                        );\n                    }\n                } catch (error) {\n                    console.error(\"Error updating cache:\", error);\n                }\n            }\n        }\n    });\n    const [createDraftBill] = useMutation(CREATE_DRAFT_BILL_WITH_TASKS);\n    const [deleteTask] = useMutation(DELETE_TASK);\n    const [updateProjectProgress] = useMutation(UPDATE_PROJECT_PROGRESS, {\n        onCompleted: () => {\n            toast({\n                title: \"Progress Updated\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error updating progress\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n    const [updateTaskOrder] = useMutation(UPDATE_TASK_ORDER);\n\n    // Effects\n    // Log modal state changes\n    useEffect(() => {\n        console.log(\"Add task modal state:\", isTaskModalOpen);\n        console.log(\"Selected image:\", selectedImage);\n    }, [isTaskModalOpen, selectedImage]);\n\n    // Log state changes\n    useEffect(() => {\n        console.log(\"Project ID:\", id);\n        console.log(\"Loading state:\", loading);\n        console.log(\"Current project data:\", data?.project);\n        if (error) console.error(\"Query error:\", error);\n    }, [id, loading, data, error]);\n\n    // Show login modal if not authenticated - COMMENTED OUT FOR TESTING\n    // useEffect(() => {\n    //     if (!authLoading && !isAuthenticated) {\n    //         setIsLoginModalOpen(true);\n    //     }\n    // }, [isAuthenticated, authLoading]);\n\n    // Update the values when data is loaded\n    useEffect(() => {\n        const project = data?.project || data?.publicProject;\n        if (project) {\n            setEditedName(project.projectName);\n            setEditedGoal(project.projectGoal);\n            setEditedDescription(project.projectDescription || \"\");\n            // Sort tasks by order and store them in state\n            if (project.tasks) {\n                setOrderedTasks([...project.tasks].sort((a, b) => a.order - b.order));\n            }\n        }\n    }, [data?.project, data?.publicProject]);\n\n    const handleLoginModalClose = () => {\n        setIsLoginModalOpen(false);\n        if (!isAuthenticated) {\n            navigate(\"/\");\n        }\n    };\n\n    const handleLoginSuccess = () => {\n        // On successful login, just close the modal and stay on current page\n        setIsLoginModalOpen(false);\n        // Don't redirect - let the user stay on the project page\n    };\n\n    // Helper function to clean AI responses\n    const cleanAIResponse = (text: string): string => {\n        // Remove surrounding quotes if present\n        let cleaned = text.trim();\n        if ((cleaned.startsWith('\"') && cleaned.endsWith('\"')) || \n            (cleaned.startsWith(\"'\") && cleaned.endsWith(\"'\"))) {\n            cleaned = cleaned.slice(1, -1);\n        }\n        \n        // Remove any preamble text like \"Here is the improved...\"\n        const patterns = [\n            /^Here is the improved [^:]*:\\s*/i,\n            /^Improved [^:]*:\\s*/i,\n            /^The improved [^:]*:\\s*/i\n        ];\n        \n        for (const pattern of patterns) {\n            cleaned = cleaned.replace(pattern, '');\n        }\n        \n        return cleaned.trim();\n    };\n\n    // Generate AI contexts\n    const getProjectGoalContext = (goal: string, projectName: string) => {\n        return `Please create a single, concise project goal for \"${projectName || 'this project'}\" in maximum 17 words. Focus on the key outcome or value proposition. Return ONLY the improved goal without any preamble, explanation, or quotes. Current goal: \"${goal}\"`;\n    };\n\n    const getProjectDescriptionContext = (description: string, projectName: string) => {\n        return `Please create a compelling project description for \"${projectName || 'this project'}\" in maximum 70 words. This should expand on the goal to explain what the project does, who it's for, and what makes it unique. Be specific and value-focused. Return ONLY the improved description without any preamble, explanation, or quotes. Current description: \"${description}\"`;\n    };\n\n    const handleImproveProjectGoal = async () => {\n        if (!editedGoal.trim()) {\n            toast({\n                title: \"Please enter a project goal first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsImprovingGoal(true);\n        try {\n            const context = getProjectGoalContext(editedGoal, editedName);\n            const { data } = await improveTagline({\n                variables: { text: editedGoal, context }\n            });\n            if (data?.improveTagline) {\n                setEditedGoal(cleanAIResponse(data.improveTagline));\n                toast({\n                    title: \"✨ Project goal improved!\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving project goal:', error);\n            toast({\n                title: \"Failed to improve project goal\",\n                description: error instanceof Error ? error.message : \"Please try again\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsImprovingGoal(false);\n        }\n    };\n\n    const handleImproveProjectDescription = async () => {\n        if (!editedDescription.trim() && !editedName.trim()) {\n            toast({\n                title: \"Please enter a project name or description first\",\n                status: \"warning\",\n                duration: 3000,\n            });\n            return;\n        }\n\n        setIsImprovingDescription(true);\n        try {\n            const context = getProjectDescriptionContext(editedDescription || editedName, editedName);\n            const { data } = await improveDescription({\n                variables: { text: editedDescription || editedName, context }\n            });\n            if (data?.improveDescription) {\n                setEditedDescription(cleanAIResponse(data.improveDescription));\n                toast({\n                    title: \"✨ Project description improved!\",\n                    status: \"success\",\n                    duration: 3000,\n                });\n            }\n        } catch (error) {\n            console.error('Error improving project description:', error);\n            toast({\n                title: \"Failed to improve project description\",\n                description: error instanceof Error ? error.message : \"Please try again\",\n                status: \"error\",\n                duration: 5000,\n            });\n        } finally {\n            setIsImprovingDescription(false);\n        }\n    };\n\n    const handleSave = async () => {\n        try {\n            await updateProject({\n                variables: {\n                    id,\n                    input: {\n                        projectName: editedName,\n                        projectGoal: editedGoal,\n                        projectDescription: editedDescription,\n                    },\n                },\n            });\n            setIsEditing(false);\n            refetch(); // Refresh project data\n        } catch (error) {\n            console.error(\"Error updating project:\", error);\n        }\n    };\n\n    const handleAddMember = async () => {\n        if (!selectedClientId) {\n            toast({\n                title: \"Please select a client\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        // Check if client is already a member\n        const isAlreadyMember = project.members?.some((member: any) => member.id === selectedClientId);\n        if (isAlreadyMember) {\n            toast({\n                title: \"Client is already a member\",\n                status: \"warning\",\n                duration: 3000,\n                isClosable: true,\n            });\n            return;\n        }\n\n        try {\n            const currentMemberIds = project.members?.map((member: any) => member.id) || [];\n            const updatedMemberIds = [...currentMemberIds, selectedClientId];\n\n            await updateProject({\n                variables: {\n                    id,\n                    input: {\n                        members: updatedMemberIds,\n                    },\n                },\n            });\n\n            setSelectedClientId(\"\");\n            setIsAddingMember(false);\n            refetch(); // Refresh project data\n\n            toast({\n                title: \"Member added successfully\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true,\n            });\n        } catch (error) {\n            console.error(\"Error adding member:\", error);\n            toast({\n                title: \"Error adding member\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    };\n\n    const handleRemoveMember = async (memberId: string) => {\n        if (window.confirm(\"Are you sure you want to remove this member from the project?\")) {\n            try {\n                const currentMemberIds = project.members?.map((member: any) => member.id) || [];\n                const updatedMemberIds = currentMemberIds.filter((id: string) => id !== memberId);\n\n                await updateProject({\n                    variables: {\n                        id,\n                        input: {\n                            members: updatedMemberIds,\n                        },\n                    },\n                });\n\n                refetch(); // Refresh project data\n\n                toast({\n                    title: \"Member removed successfully\",\n                    status: \"success\",\n                    duration: 3000,\n                    isClosable: true,\n                });\n            } catch (error) {\n                console.error(\"Error removing member:\", error);\n                toast({\n                    title: \"Error removing member\",\n                    description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n            }\n        }\n    };\n\n    const handleCreateBill = async () => {\n        // Add confirmation dialog\n        if (window.confirm(\"Are you sure you want to create a bill for the completed tasks?\")) {\n            try {\n                const { data } = await createDraftBill({\n                    variables: { projectId: id }\n                });\n\n                toast({\n                    title: \"Bill Created\",\n                    description: \"Draft bill has been created successfully\",\n                    status: \"success\",\n                    duration: 3000,\n                    isClosable: true,\n                });\n\n                // Navigate to the bill details page\n                navigate(`/bill/${data.createDraftBillWithTasks.id}`);\n            } catch (error) {\n                toast({\n                    title: \"Error\",\n                    description: error instanceof Error ? error.message : \"Failed to create bill\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                });\n            }\n        }\n    };\n\n    // Functions to move tasks up and down\n    const moveTaskUp = async (taskId: string, currentIndex: number) => {\n        if (currentIndex <= 0) return; // Already at the top\n\n        const newOrderedTasks = [...orderedTasks];\n        const currentTask = newOrderedTasks[currentIndex];\n        const prevTask = newOrderedTasks[currentIndex - 1];\n\n        // Get order values\n        const currentOrder = currentTask.order;\n        const prevOrder = prevTask.order;\n\n        // Create new task objects with updated orders\n        const updatedCurrentTask = { ...currentTask };\n        const updatedPrevTask = { ...prevTask };\n\n        // Swap positions in array (but keep original objects for now)\n        newOrderedTasks[currentIndex - 1] = updatedCurrentTask;\n        newOrderedTasks[currentIndex] = updatedPrevTask;\n\n        // Update state first for responsive UI\n        setOrderedTasks(newOrderedTasks);\n\n        // Update in database\n        try {\n            await updateTaskOrder({\n                variables: {\n                    taskId: currentTask.id,\n                    order: prevOrder\n                }\n            });\n\n            await updateTaskOrder({\n                variables: {\n                    taskId: prevTask.id,\n                    order: currentOrder\n                }\n            });\n\n            toast({\n                title: \"Task moved up\",\n                status: \"success\",\n                duration: 1000,\n                isClosable: true,\n            });\n\n        } catch (error) {\n            toast({\n                title: \"Error moving task\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 3000,\n                isClosable: true,\n            });\n            // Restore original order\n            const project = data?.project || data?.publicProject;\n            if (project?.tasks) {\n                setOrderedTasks([...project.tasks].sort((a, b) => a.order - b.order));\n            }\n        }\n    };\n\n    const moveTaskDown = async (taskId: string, currentIndex: number) => {\n        if (currentIndex >= orderedTasks.length - 1) return; // Already at the bottom\n\n        const newOrderedTasks = [...orderedTasks];\n        const currentTask = newOrderedTasks[currentIndex];\n        const nextTask = newOrderedTasks[currentIndex + 1];\n\n        // Get order values\n        const currentOrder = currentTask.order;\n        const nextOrder = nextTask.order;\n\n        // Create new task objects with updated orders\n        const updatedCurrentTask = { ...currentTask };\n        const updatedNextTask = { ...nextTask };\n\n        // Swap positions in array (but keep original objects for now)\n        newOrderedTasks[currentIndex] = updatedNextTask;\n        newOrderedTasks[currentIndex + 1] = updatedCurrentTask;\n\n        // Update state first for responsive UI\n        setOrderedTasks(newOrderedTasks);\n\n        // Update in database\n        try {\n            await updateTaskOrder({\n                variables: {\n                    taskId: currentTask.id,\n                    order: nextOrder\n                }\n            });\n\n            await updateTaskOrder({\n                variables: {\n                    taskId: nextTask.id,\n                    order: currentOrder\n                }\n            });\n\n            toast({\n                title: \"Task moved down\",\n                status: \"success\",\n                duration: 1000,\n                isClosable: true,\n            });\n\n        } catch (error) {\n            toast({\n                title: \"Error moving task\",\n                description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                status: \"error\",\n                duration: 3000,\n                isClosable: true,\n            });\n            // Restore original order\n            const project = data?.project || data?.publicProject;\n            if (project?.tasks) {\n                setOrderedTasks([...project.tasks].sort((a, b) => a.order - b.order));\n            }\n        }\n    };\n\n    // Loading state for both auth and data\n    if (authLoading || loading) {\n        return (\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Center h=\"50vh\">\n                        <VStack spacing={6}>\n                            <Spinner size=\"xl\" color=\"blue.500\" thickness=\"4px\" />\n                            <Text>Loading project data...</Text>\n                        </VStack>\n                    </Center>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    // Not authenticated state - COMMENTED OUT FOR TESTING\n    // if (!isAuthenticated) {\n    //     return (\n    //         <>\n    //             <NavbarWithCallToAction />\n    //             <Box minH=\"100vh\" bg=\"gray.50\" py={12}>\n    //                 <Container maxW=\"md\">\n    //                     <VStack spacing={8}>\n    //                         <Box bg=\"white\" p={8} rounded=\"xl\" shadow=\"lg\" w=\"full\">\n    //                             <VStack spacing={4}>\n    //                                 <Icon as={FiLock} boxSize={12} color=\"blue.500\" />\n    //                                 <Heading size=\"lg\">Authentication Required</Heading>\n    //                                 <Text textAlign=\"center\">Please log in to view this project.</Text>\n    //                                 <Button\n    //                                     colorScheme=\"blue\"\n    //                                     onClick={() => setIsLoginModalOpen(true)}\n    //                                     leftIcon={<FiLock />>\n    //                                 >\n    //                                     Log In\n    //                                 </Button>\n    //                             </VStack>\n    //                         </Box>\n    //                     </VStack>\n    //                 </Container>\n    //             </Box>\n    //             <LoginWithSmsModal\n    //                 isOpen={isLoginModalOpen}\n    //                 onClose={handleLoginModalClose}\n    //                 onLoginSuccess={handleLoginSuccess}\n    //             />\n    //             <FooterWithFourColumns />\n    //         </>\n    //     );\n    // }\n\n    if (error) {\n        console.error(\"GraphQL Error:\", error);\n        return <Text>Error: {error.message}</Text>;\n    }\n\n    const project = data?.project || data?.publicProject;\n    if (!project) {\n        return <Text>Project not found</Text>;\n    }\n\n    // Check if the user is a member of the project or the client - COMMENTED OUT FOR TESTING\n    // const isProjectMember = project.members?.some((member: any) => member.id === user?.id);\n    // const isProjectClient = project.billingClient?.id === user?.id;\n\n    // User needs to be admin, project member, or the client to view the project - COMMENTED OUT FOR TESTING\n    // const hasProjectAccess = isAdmin || isProjectMember || isProjectClient;\n\n    // No project access state - COMMENTED OUT FOR TESTING\n    // if (!hasProjectAccess) {\n    //     return (\n    //         <>\n    //             <NavbarWithCallToAction />\n    //             <Box minH=\"100vh\" bg=\"gray.50\" py={12}>\n    //                 <Container maxW=\"md\">\n    //                     <VStack spacing={8}>\n    //                         <Box bg=\"white\" p={8} rounded=\"xl\" shadow=\"lg\" w=\"full\">\n    //                             <VStack spacing={4}>\n    //                                 <Icon as={FiAlertCircle} boxSize={12} color=\"red.500\" />\n    //                                 <Heading size=\"lg\" color=\"red.500\">Access Denied</Heading>\n    //                                 <Text textAlign=\"center\">You do not have permission to view this project.</Text>\n    //                                 <Button\n    //                                     colorScheme=\"blue\"\n    //                                     onClick={() => navigate(\"/\")}\n    //                                     leftIcon={<FiHome />>\n    //                                 >\n    //                                     Return to Home\n    //                                 </Button>\n    //                             </VStack>\n    //                         </Box>\n    //                     </VStack>\n    //                 </Container>\n    //             </Box>\n    //             <FooterWithFourColumns />\n    //         </>\n    //     );\n    // }\n\n    return (\n        <>\n            <style>\n                {`\n                    @keyframes shimmer {\n                        0% { transform: translateX(-100%); }\n                        100% { transform: translateX(100%); }\n                    }\n                    @keyframes pulse {\n                        0%, 100% { opacity: 1; }\n                        50% { opacity: 0.5; }\n                    }\n                `}\n            </style>\n            <Box bg={bg} minHeight=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={projectsModuleConfig} />\n            <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                {/* Access badge commented out for testing */}\n                {/* <Badge\n                    mb={4}\n                    colorScheme={isAdmin ? \"green\" : \"blue\"}\n                    p={2}\n                    borderRadius=\"md\"\n                    fontSize=\"sm\"\n                >\n                    {isAdmin ? \"Admin Access\" : isProjectMember ? \"Team Member Access\" : \"Client Access\"}\n                </Badge> */}\n                <HStack justify=\"space-between\" mb={4} wrap=\"wrap\" spacing={4}>\n                    <Box></Box> {/* Empty spacer to push buttons to the right */}\n                    <HStack spacing={4}>\n                        <Button\n                            as={Link}\n                            to={`/project/${id}/timeline`}\n                            bg={getColor(\"status.info\")}\n                            color={getColor(\"text.inverse\")}\n                            _hover={{ bg: getColor(\"secondary\") }}\n                            leftIcon={<FiClock />}\n                            fontFamily={brandConfig.fonts.body}\n                        >\n                            Timeline View\n                        </Button>\n                    </HStack>\n                </HStack>\n                <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5 }}\n                >\n                    <VStack spacing={8} align=\"stretch\">\n                        {/* Project Overview Card */}\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"xl\"\n                            overflow=\"hidden\"\n                        >\n                            <CardHeader bg=\"rgba(0, 0, 0, 0.2)\" borderBottom=\"1px\" borderColor={cardBorder}>\n                                <VStack align=\"start\" spacing={4}>\n                                    <HStack justify=\"space-between\" width=\"full\">\n                                        {isEditing ? (\n                                            <Input\n                                                value={editedName}\n                                                onChange={(e) => setEditedName(e.target.value)}\n                                                size=\"lg\"\n                                                variant=\"unstyled\"\n                                                fontWeight=\"bold\"\n                                                fontSize={{ base: \"xl\", md: \"2xl\" }}\n                                                width=\"full\"\n                                                color={textPrimary}\n                                                fontFamily={brandConfig.fonts.heading}\n                                            />\n                                        ) : (\n                                            <Heading\n                                                size={{ base: \"md\", md: \"lg\" }}\n                                                wordBreak=\"break-word\"\n                                                pr={{ base: 2, md: 4 }}\n                                                color={textPrimary}\n                                                fontFamily={brandConfig.fonts.heading}\n                                            >\n                                                {project.projectName}\n                                            </Heading>\n                                        )}\n                                        {isAdmin && (\n                                            <IconButton\n                                                aria-label=\"Edit project\"\n                                                icon={isEditing ? <CheckIcon /> : <EditIcon />}\n                                                onClick={isEditing ? handleSave : () => setIsEditing(true)}\n                                                variant=\"ghost\"\n                                                flexShrink={0}\n                                                color={textPrimary}\n                                                _hover={{ bg: \"rgba(255, 255, 255, 0.05)\" }}\n                                            />\n                                        )}\n                                    </HStack>\n                                    <HStack spacing={4} flexWrap=\"wrap\" gap={2}>\n                                        <Badge colorScheme=\"blue\" px={2} py={1} borderRadius=\"full\">\n                                            Project #{id}\n                                        </Badge>\n                                        <Text\n                                            color={textSecondary}\n                                            fontSize={{ base: \"sm\", md: \"md\" }}\n                                            whiteSpace={{ base: \"normal\", md: \"nowrap\" }}\n                                            fontFamily={brandConfig.fonts.body}\n                                        >\n                                            Created: {new Date(project.createdAt).toLocaleDateString()}\n                                        </Text>\n                                        {isAdmin && (\n                                            <Button\n                                                size=\"sm\"\n                                                colorScheme=\"green\"\n                                                onClick={() => window.open(`/bills/new?projectId=${id}`, '_blank')}\n                                                leftIcon={<Text>💰</Text>}\n                                            >\n                                                Create New Bill\n                                            </Button>\n                                        )}\n                                    </HStack>\n                                </VStack>\n                            </CardHeader>\n                            <CardBody p={8}>\n                                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>\n                                    {/* Left Column */}\n                                    <VStack align=\"stretch\" spacing={6}>\n                                        <Box>\n                                            <HStack justify=\"space-between\" align=\"center\" mb={2}>\n                                                <Text fontWeight=\"bold\" color={brandConfig.colors.text.inverse} fontFamily={brandConfig.fonts.body}>\n                                                    Project Goal\n                                                </Text>\n                                                {isEditing && (\n                                                    <HStack spacing={2}>\n                                                        <Tooltip \n                                                            label={\n                                                                <Box p={2} maxW=\"500px\">\n                                                                    <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                                    <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                                        {getProjectGoalContext(editedGoal || \"[your project goal]\", editedName)}\n                                                                    </Text>\n                                                                </Box>\n                                                            }\n                                                            placement=\"top\"\n                                                            hasArrow\n                                                            bg=\"gray.700\"\n                                                            color=\"white\"\n                                                        >\n                                                            <Button\n                                                                size=\"sm\"\n                                                                variant=\"outline\"\n                                                                colorScheme=\"purple\"\n                                                                isDisabled={!editedGoal.trim()}\n                                                                isLoading={isImprovingGoal}\n                                                                onClick={handleImproveProjectGoal}\n                                                                leftIcon={<Text>✨</Text>}\n                                                            >\n                                                                AI Improve\n                                                            </Button>\n                                                        </Tooltip>\n                                                        <IconButton\n                                                            aria-label=\"Copy AI context\"\n                                                            icon={<Text>📋</Text>}\n                                                            size=\"sm\"\n                                                            variant=\"ghost\"\n                                                            isDisabled={!editedGoal.trim()}\n                                                            onClick={() => {\n                                                                if (editedGoal.trim()) {\n                                                                    navigator.clipboard.writeText(getProjectGoalContext(editedGoal, editedName));\n                                                                    toast({\n                                                                        title: \"AI context copied!\",\n                                                                        description: \"The project goal context has been copied to your clipboard\",\n                                                                        status: \"success\",\n                                                                        duration: 2000,\n                                                                    });\n                                                                }\n                                                            }}\n                                                            title=\"Copy AI context to clipboard\"\n                                                        />\n                                                    </HStack>\n                                                )}\n                                            </HStack>\n                                            {isEditing ? (\n                                                <Textarea\n                                                    value={editedGoal}\n                                                    onChange={(e) => setEditedGoal(e.target.value)}\n                                                    size=\"sm\"\n                                                    bg={getComponent(\"form\", \"fieldBg\")}\n                                                    border=\"1px\"\n                                                    borderColor={getComponent(\"form\", \"fieldBorder\")}\n                                                    borderRadius=\"lg\"\n                                                    _focus={{\n                                                        borderColor: getComponent(\"form\", \"fieldBorderFocus\"),\n                                                        boxShadow: getComponent(\"form\", \"fieldShadowFocus\")\n                                                    }}\n                                                    fontFamily={brandConfig.fonts.body}\n                                                    placeholder=\"Project goal (max 17 words)\"\n                                                    rows={2}\n                                                />\n                                            ) : (\n                                                <Text color={brandConfig.colors.text.inverse} fontFamily={brandConfig.fonts.body}>\n                                                    {project.projectGoal}\n                                                </Text>\n                                            )}\n                                        </Box>\n                                        <Box>\n                                            <HStack justify=\"space-between\" align=\"center\" mb={2}>\n                                                <Text fontWeight=\"bold\" color={brandConfig.colors.text.inverse} fontFamily={brandConfig.fonts.body}>\n                                                    Project Description\n                                                </Text>\n                                                {isEditing && (\n                                                    <HStack spacing={2}>\n                                                        <Tooltip \n                                                            label={\n                                                                <Box p={2} maxW=\"600px\">\n                                                                    <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2}>AI Context:</Text>\n                                                                    <Text fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                                                                        {getProjectDescriptionContext(editedDescription || \"[your project description]\", editedName)}\n                                                                    </Text>\n                                                                </Box>\n                                                            }\n                                                            placement=\"top\"\n                                                            hasArrow\n                                                            bg=\"gray.700\"\n                                                            color=\"white\"\n                                                        >\n                                                            <Button\n                                                                size=\"sm\"\n                                                                variant=\"outline\"\n                                                                colorScheme=\"purple\"\n                                                                isDisabled={!editedDescription.trim() && !editedName.trim()}\n                                                                isLoading={isImprovingDescription}\n                                                                onClick={handleImproveProjectDescription}\n                                                                leftIcon={<Text>✨</Text>}\n                                                            >\n                                                                AI Improve\n                                                            </Button>\n                                                        </Tooltip>\n                                                        <IconButton\n                                                            aria-label=\"Copy AI context\"\n                                                            icon={<Text>📋</Text>}\n                                                            size=\"sm\"\n                                                            variant=\"ghost\"\n                                                            isDisabled={!editedDescription.trim() && !editedName.trim()}\n                                                            onClick={() => {\n                                                                if (editedDescription.trim() || editedName.trim()) {\n                                                                    navigator.clipboard.writeText(getProjectDescriptionContext(editedDescription || editedName, editedName));\n                                                                    toast({\n                                                                        title: \"AI context copied!\",\n                                                                        description: \"The project description context has been copied to your clipboard\",\n                                                                        status: \"success\",\n                                                                        duration: 2000,\n                                                                    });\n                                                                }\n                                                            }}\n                                                            title=\"Copy AI context to clipboard\"\n                                                        />\n                                                    </HStack>\n                                                )}\n                                            </HStack>\n                                            {isEditing ? (\n                                                <Textarea\n                                                    value={editedDescription}\n                                                    onChange={(e) => setEditedDescription(e.target.value)}\n                                                    size=\"sm\"\n                                                    bg={getComponent(\"form\", \"fieldBg\")}\n                                                    border=\"1px\"\n                                                    borderColor={getComponent(\"form\", \"fieldBorder\")}\n                                                    borderRadius=\"lg\"\n                                                    _focus={{\n                                                        borderColor: getComponent(\"form\", \"fieldBorderFocus\"),\n                                                        boxShadow: getComponent(\"form\", \"fieldShadowFocus\")\n                                                    }}\n                                                    fontFamily={brandConfig.fonts.body}\n                                                    placeholder=\"Project description (max 70 words)\"\n                                                    rows={3}\n                                                />\n                                            ) : (\n                                                <Text color={brandConfig.colors.text.inverse} fontFamily={brandConfig.fonts.body}>\n                                                    {project.projectDescription || \"No description provided\"}\n                                                </Text>\n                                            )}\n                                        </Box>\n                                        <Box>\n                                            <Text fontWeight=\"bold\" mb={2} color={textPrimary} fontFamily={brandConfig.fonts.body}>\n                                                Client\n                                            </Text>\n                                            {isAdmin && isEditing ? (\n                                                <Select\n                                                    value={project.billingClient.id}\n                                                    onChange={async (e) => {\n                                                        const newClientId = e.target.value;\n                                                        try {\n                                                            await updateProject({\n                                                                variables: {\n                                                                    id,\n                                                                    input: {\n                                                                        billingClient: newClientId,\n                                                                    },\n                                                                },\n                                                            });\n                                                            refetch();\n                                                            toast({\n                                                                title: \"Client updated successfully\",\n                                                                status: \"success\",\n                                                                duration: 3000,\n                                                                isClosable: true,\n                                                            });\n                                                        } catch (error) {\n                                                            console.error(\"Error updating client:\", error);\n                                                            toast({\n                                                                title: \"Error updating client\",\n                                                                description: error instanceof Error ? error.message : \"Unknown error\",\n                                                                status: \"error\",\n                                                                duration: 5000,\n                                                                isClosable: true,\n                                                            });\n                                                        }\n                                                    }}\n                                                    size=\"sm\"\n                                                    bg=\"rgba(20, 20, 20, 0.95)\"\n                                                    color=\"#FFFFFF\"\n                                                    borderColor={cardBorder}\n                                                    _hover={{ borderColor: getColor(\"primary\") }}\n                                                    _focus={{ borderColor: getColor(\"primary\"), bg: \"rgba(20, 20, 20, 0.95)\" }}\n                                                    sx={{\n                                                        option: {\n                                                            backgroundColor: '#2a2a2a',\n                                                            color: '#E5E5E5',\n                                                            _hover: {\n                                                                backgroundColor: '#3a3a3a',\n                                                            }\n                                                        }\n                                                    }}\n                                                >\n                                                    {clientsData?.clients?.map((client: any) => (\n                                                        <option key={client.id} value={client.id} style={{ backgroundColor: '#2a2a2a', color: '#E5E5E5' }}>\n                                                            {client.fName} {client.lName} ({client.email})\n                                                        </option>\n                                                    ))}\n                                                </Select>\n                                            ) : (\n                                                <HStack>\n                                                    <Avatar\n                                                        size=\"sm\"\n                                                        name={`${project.billingClient.fName} ${project.billingClient.lName}`}\n                                                        bg={getColor(\"primary\")}\n                                                    />\n                                                    <VStack align=\"start\" spacing={0}>\n                                                        <Text color={textPrimary} fontFamily={brandConfig.fonts.body}>\n                                                            {project.billingClient.fName} {project.billingClient.lName}\n                                                        </Text>\n                                                        <Text fontSize=\"sm\" color={textSecondary} fontFamily={brandConfig.fonts.body}>\n                                                            {project.billingClient.email}\n                                                        </Text>\n                                                    </VStack>\n                                                </HStack>\n                                            )}\n                                        </Box>\n\n                                        {/* Project Members Section */}\n                                        <Box>\n                                            <HStack justify=\"space-between\" mb={2}>\n                                                <Text fontWeight=\"bold\" color={textPrimary} fontFamily={brandConfig.fonts.body}>\n                                                    Team Members ({project.members.length + 1})\n                                                </Text>\n                                                {isAdmin && (\n                                                    <HStack spacing={2}>\n                                                        <Button\n                                                            size=\"sm\"\n                                                            colorScheme=\"blue\"\n                                                            variant=\"outline\"\n                                                            onClick={() => setIsAddingMember(true)}\n                                                            leftIcon={<FiUsers />}\n                                                        >\n                                                            Add Existing\n                                                        </Button>\n                                                        <Button\n                                                            size=\"sm\"\n                                                            colorScheme=\"green\"\n                                                            variant=\"outline\"\n                                                            onClick={() => setIsAddMemberModalOpen(true)}\n                                                            leftIcon={<FiUsers />}\n                                                        >\n                                                            Create New Member\n                                                        </Button>\n                                                    </HStack>\n                                                )}\n                                            </HStack>\n\n                                            {/* Current Members */}\n                                            <VStack align=\"stretch\" spacing={2}>\n                                                {/* Client as first team member */}\n                                                <HStack\n                                                    p={3}\n                                                    bg=\"rgba(0, 122, 255, 0.1)\"\n                                                    backdropFilter=\"blur(10px)\"\n                                                    borderRadius=\"md\"\n                                                    border=\"2px\"\n                                                    borderColor=\"rgba(0, 122, 255, 0.3)\"\n                                                    justify=\"space-between\"\n                                                    transition=\"all 0.3s\"\n                                                    _hover={{ \n                                                        bg: \"rgba(0, 122, 255, 0.15)\",\n                                                        borderColor: getColor(\"primary\")\n                                                    }}\n                                                >\n                                                    <HStack>\n                                                        <Avatar\n                                                            size=\"sm\"\n                                                            name={`${project.billingClient.fName} ${project.billingClient.lName}`}\n                                                            bg={getColor(\"primary\")}\n                                                        />\n                                                        <VStack align=\"start\" spacing={0}>\n                                                            <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                                                                {project.billingClient.fName} {project.billingClient.lName}\n                                                                {/* {project.billingClient.id === user?.id && \" (You)\"} */}\n                                                                <Badge ml={2} colorScheme=\"blue\" size=\"sm\">Client</Badge>\n                                                            </Text>\n                                                            <Text fontSize=\"xs\" color={textSecondary}>\n                                                                {project.billingClient.email}\n                                                            </Text>\n                                                        </VStack>\n                                                    </HStack>\n                                                </HStack>\n                                                {project.members.map((member: any) => (\n                                                    <HStack\n                                                        key={member.id}\n                                                        p={3}\n                                                        bg=\"rgba(255, 255, 255, 0.02)\"\n                                                        backdropFilter=\"blur(10px)\"\n                                                        borderRadius=\"md\"\n                                                        border=\"1px\"\n                                                        borderColor={cardBorder}\n                                                        justify=\"space-between\"\n                                                        transition=\"all 0.3s\"\n                                                        _hover={{ \n                                                            bg: \"rgba(255, 255, 255, 0.05)\",\n                                                            borderColor: textSecondary\n                                                        }}\n                                                    >\n                                                        <HStack>\n                                                            <Avatar\n                                                                size=\"sm\"\n                                                                name={`${member.fName} ${member.lName}`}\n                                                                bg={getColor(\"primary\")}\n                                                            />\n                                                            <VStack align=\"start\" spacing={0}>\n                                                                <Text fontSize=\"sm\" fontWeight=\"medium\" color={textPrimary}>\n                                                                    {member.fName} {member.lName}\n                                                                    {/* {member.id === user?.id && \" (You)\"} */}\n                                                                </Text>\n                                                                <Text fontSize=\"xs\" color={textSecondary}>\n                                                                    {member.email}\n                                                                </Text>\n                                                            </VStack>\n                                                        </HStack>\n                                                        {isAdmin && (\n                                                            <IconButton\n                                                                aria-label=\"Remove member\"\n                                                                icon={<DeleteIcon />}\n                                                                size=\"sm\"\n                                                                colorScheme=\"red\"\n                                                                variant=\"ghost\"\n                                                                onClick={() => handleRemoveMember(member.id)}\n                                                                title={member.id === user?.id ? \"Remove yourself from project\" : \"Remove member from project\"}\n                                                            />\n                                                        )}\n                                                    </HStack>\n                                                ))}\n\n                                                {/* Add Member Form */}\n                                                {isAdmin && isAddingMember && (\n                                                    <VStack\n                                                        p={4}\n                                                        bg=\"rgba(255, 255, 255, 0.03)\"\n                                                        backdropFilter=\"blur(10px)\"\n                                                        borderRadius=\"md\"\n                                                        border=\"1px\"\n                                                        borderColor={cardBorder}\n                                                        spacing={3}\n                                                    >\n                                                        <HStack width=\"full\" spacing={3}>\n                                                            <Select\n                                                                value={selectedClientId}\n                                                                onChange={(e) => setSelectedClientId(e.target.value)}\n                                                                placeholder=\"Select client to add\"\n                                                                isDisabled={clientsLoading}\n                                                                bg={getComponent(\"form\", \"fieldBg\")}\n                                                                color={textPrimary}\n                                                                border=\"1px\"\n                                                                borderColor={getComponent(\"form\", \"fieldBorder\")}\n                                                                borderRadius=\"lg\"\n                                                                _focus={{\n                                                                    borderColor: getComponent(\"form\", \"fieldBorderFocus\"),\n                                                                    boxShadow: getComponent(\"form\", \"fieldShadowFocus\")\n                                                                }}\n                                                                _placeholder={{\n                                                                    color: textSecondary\n                                                                }}\n                                                                size=\"sm\"\n                                                                flex={1}\n                                                                sx={{\n                                                                    option: {\n                                                                        backgroundColor: '#2a2a2a',\n                                                                        color: '#E5E5E5',\n                                                                        _hover: {\n                                                                            backgroundColor: '#3a3a3a',\n                                                                        }\n                                                                    }\n                                                                }}\n                                                            >\n                                                                {clientsData?.clients?.map((client: any) => (\n                                                                    <option key={client.id} value={client.id} style={{ backgroundColor: '#2a2a2a', color: '#E5E5E5' }}>\n                                                                        {client.businessName ? `${client.businessName} - ` : \"\"}\n                                                                        {client.fName} {client.lName} ({client.email})\n                                                                    </option>\n                                                                ))}\n                                                            </Select>\n                                                            <Button\n                                                                size=\"sm\"\n                                                                colorScheme=\"green\"\n                                                                onClick={handleAddMember}\n                                                                isDisabled={!selectedClientId}\n                                                            >\n                                                                Add\n                                                            </Button>\n                                                            <Button\n                                                                size=\"sm\"\n                                                                variant=\"ghost\"\n                                                                onClick={() => {\n                                                                    setIsAddingMember(false);\n                                                                    setSelectedClientId(\"\");\n                                                                }}\n                                                            >\n                                                                Cancel\n                                                            </Button>\n                                                        </HStack>\n                                                    </VStack>\n                                                )}\n\n                                                {project.members.length === 0 && (\n                                                    <Text fontSize=\"sm\" color={textMuted} textAlign=\"center\" py={4}>\n                                                        No team members assigned to this project\n                                                    </Text>\n                                                )}\n                                            </VStack>\n                                        </Box>\n                                    </VStack>\n\n                                    {/* Right Column - Compact Stats */}\n                                    <VStack align=\"stretch\" spacing={3}>\n                                        <HStack \n                                            justify=\"space-between\" \n                                            p={4} \n                                            bg=\"linear-gradient(135deg, rgba(0, 122, 255, 0.08) 0%, rgba(0, 122, 255, 0.03) 100%)\"\n                                            backdropFilter=\"blur(10px)\"\n                                            borderRadius=\"lg\" \n                                            border=\"2px\" \n                                            borderColor=\"rgba(0, 122, 255, 0.2)\"\n                                            transition=\"all 0.3s\"\n                                            _hover={{ \n                                                borderColor: \"rgba(0, 122, 255, 0.4)\",\n                                                transform: \"translateY(-2px)\",\n                                                boxShadow: \"0 4px 12px rgba(0, 122, 255, 0.1)\"\n                                            }}\n                                        >\n                                            <HStack spacing={3}>\n                                                <Box p={2} bg=\"rgba(0, 122, 255, 0.2)\" borderRadius=\"md\">\n                                                    <Icon as={FiUsers} boxSize={4} color={getColor(\"primary\")} />\n                                                </Box>\n                                                <Text fontSize=\"sm\" color={textSecondary} fontFamily={brandConfig.fonts.body}>Team Size</Text>\n                                            </HStack>\n                                            <VStack spacing={0} align=\"end\">\n                                                <Text fontWeight=\"bold\" fontSize=\"2xl\" color={textPrimary} fontFamily={brandConfig.fonts.body}>\n                                                    {project.members.length + 1}\n                                                </Text>\n                                                <Text fontSize=\"xs\" color={textMuted}>members</Text>\n                                            </VStack>\n                                        </HStack>\n                                        \n                                        <HStack \n                                            justify=\"space-between\" \n                                            p={4} \n                                            bg=\"linear-gradient(135deg, rgba(34, 197, 94, 0.08) 0%, rgba(34, 197, 94, 0.03) 100%)\"\n                                            backdropFilter=\"blur(10px)\"\n                                            borderRadius=\"lg\" \n                                            border=\"2px\" \n                                            borderColor=\"rgba(34, 197, 94, 0.2)\"\n                                            transition=\"all 0.3s\"\n                                            _hover={{ \n                                                borderColor: \"rgba(34, 197, 94, 0.4)\",\n                                                transform: \"translateY(-2px)\",\n                                                boxShadow: \"0 4px 12px rgba(34, 197, 94, 0.1)\"\n                                            }}\n                                        >\n                                            <HStack spacing={3}>\n                                                <Box p={2} bg=\"rgba(34, 197, 94, 0.2)\" borderRadius=\"md\">\n                                                    <Icon as={FiCheckCircle} boxSize={4} color=\"green.400\" />\n                                                </Box>\n                                                <Text fontSize=\"sm\" color={textSecondary} fontFamily={brandConfig.fonts.body}>Progress</Text>\n                                            </HStack>\n                                            <VStack spacing={0} align=\"end\">\n                                                <Text fontWeight=\"bold\" fontSize=\"2xl\" color={textPrimary} fontFamily={brandConfig.fonts.body}>\n                                                    {project.tasks.filter((t: Task) => t.status === \"COMPLETED\").length}/{project.tasks.length}\n                                                </Text>\n                                                <Text fontSize=\"xs\" color={textMuted}>tasks done</Text>\n                                            </VStack>\n                                        </HStack>\n                                    </VStack>\n                                </SimpleGrid>\n\n                                <Box mt={4} p={4}>\n                                    <HStack mb={2} justify=\"space-between\">\n                                        <Text fontWeight=\"semibold\" color={textPrimary} fontFamily={brandConfig.fonts.body}>\n                                            Overall Progress\n                                        </Text>\n                                        {isAdmin && (\n                                            <Select\n                                                size=\"sm\"\n                                                value={project.progress || 0}\n                                                onChange={async (e) => {\n                                                    const newProgress = parseInt(e.target.value);\n                                                    try {\n                                                        await updateProjectProgress({\n                                                            variables: {\n                                                                id,\n                                                                input: { progress: newProgress }\n                                                            }\n                                                        });\n                                                    } catch (error) {\n                                                        console.error(\"Error updating progress:\", error);\n                                                    }\n                                                }}\n                                                width=\"100px\"\n                                                bg={getComponent(\"form\", \"fieldBg\")}\n                                                border=\"1px\"\n                                                borderColor={getComponent(\"form\", \"fieldBorder\")}\n                                                borderRadius=\"lg\"\n                                                _focus={{\n                                                    borderColor: getComponent(\"form\", \"fieldBorderFocus\"),\n                                                    boxShadow: getComponent(\"form\", \"fieldShadowFocus\")\n                                                }}\n                                                fontFamily={brandConfig.fonts.body}\n                                            >\n                                                {Array.from({ length: 11 }, (_, i) => i * 10).map(value => (\n                                                    <option key={value} value={value}>{value}%</option>\n                                                ))}\n                                            </Select>\n                                        )}\n                                    </HStack>\n                                    <Progress\n                                        value={project.progress || 0}\n                                        size=\"lg\"\n                                        borderRadius=\"full\"\n                                        colorScheme=\"green\"\n                                        hasStripe\n                                        isAnimated\n                                    />\n                                    <Text mt={2} fontSize=\"sm\" color={textSecondary} textAlign=\"right\" fontFamily={brandConfig.fonts.body}>\n                                        {project.progress || 0}% Complete\n                                    </Text>\n                                </Box>\n                            </CardBody>\n                        </Card>\n\n                        {/* Add Task Button for Admins - More prominent and inviting */}\n                        {isAdmin && (\n                            <Box\n                                textAlign=\"center\"\n                                py={8}\n                                px={4}\n                                position=\"relative\"\n                                bg=\"linear-gradient(135deg, rgba(0, 122, 255, 0.1) 0%, rgba(90, 200, 250, 0.05) 100%)\"\n                                borderRadius=\"xl\"\n                                border=\"2px dashed\"\n                                borderColor=\"rgba(0, 122, 255, 0.3)\"\n                                transition=\"all 0.3s\"\n                                _hover={{\n                                    borderColor: \"rgba(0, 122, 255, 0.5)\",\n                                    bg: \"linear-gradient(135deg, rgba(0, 122, 255, 0.15) 0%, rgba(90, 200, 250, 0.08) 100%)\",\n                                    transform: \"scale(1.02)\"\n                                }}\n                            >\n                                <VStack spacing={3}>\n                                    <Text fontSize=\"2xl\" color={getColor(\"primary\")}>➕</Text>\n                                    <Button\n                                        bg={getComponent(\"button\", \"primaryBg\")}\n                                        color={getColor(\"text.inverse\")}\n                                        _hover={{ \n                                            bg: getComponent(\"button\", \"primaryHover\"),\n                                            transform: \"translateY(-2px)\",\n                                            boxShadow: \"0 8px 24px rgba(0, 122, 255, 0.4)\"\n                                        }}\n                                        size=\"lg\"\n                                        width={{ base: \"full\", md: \"60%\" }}\n                                        height=\"65px\"\n                                        fontSize=\"xl\"\n                                        fontWeight=\"bold\"\n                                        leftIcon={<FiCheckCircle size={24} />}\n                                        onClick={() => {\n                                            setSelectedTask(null);\n                                            setIsTaskModalOpen(true);\n                                        }}\n                                        boxShadow=\"0 4px 16px rgba(0, 122, 255, 0.3)\"\n                                        fontFamily={brandConfig.fonts.body}\n                                        transition=\"all 0.3s\"\n                                    >\n                                        Add Your First Task\n                                    </Button>\n                                    <Text \n                                        fontSize=\"md\" \n                                        color={textPrimary} \n                                        fontFamily={brandConfig.fonts.body}\n                                        fontWeight=\"medium\"\n                                    >\n                                        Break down your project into actionable steps\n                                    </Text>\n                                    <Text \n                                        fontSize=\"sm\" \n                                        color={textSecondary} \n                                        fontFamily={brandConfig.fonts.body}\n                                    >\n                                        Each task can have its own status, media attachments, and progress tracking\n                                    </Text>\n                                </VStack>\n                            </Box>\n                        )}\n\n                        {/* Tasks Section - Enhanced visual hierarchy */}\n                        <Card \n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"xl\"\n                            overflow=\"hidden\"\n                        >\n                            <CardHeader \n                                borderBottom=\"2px\" \n                                borderColor={cardBorder}\n                                bg=\"rgba(0, 122, 255, 0.05)\"\n                                py={5}\n                            >\n                                <VStack align=\"stretch\" spacing={3}>\n                                    <HStack justify=\"space-between\">\n                                        <HStack spacing={3}>\n                                            <Text fontSize=\"2xl\">📋</Text>\n                                            <VStack align=\"start\" spacing={0}>\n                                                <Heading size=\"lg\" color={textPrimary}>Project Tasks</Heading>\n                                                <Text fontSize=\"sm\" color={textSecondary}>Track your progress and manage deliverables</Text>\n                                            </VStack>\n                                        </HStack>\n                                        {isAdmin && orderedTasks.length > 0 && (\n                                            <>\n                                                <Button\n                                                    size=\"sm\"\n                                                    bg=\"rgba(0, 122, 255, 0.2)\"\n                                                    color={getColor(\"primary\")}\n                                                    border=\"1px\"\n                                                    borderColor=\"rgba(0, 122, 255, 0.3)\"\n                                                    _hover={{\n                                                        bg: \"rgba(0, 122, 255, 0.3)\",\n                                                        borderColor: getColor(\"primary\")\n                                                    }}\n                                                    leftIcon={<FiPlus />}\n                                                    onClick={() => {\n                                                        setSelectedTask(null);\n                                                        setIsTaskModalOpen(true);\n                                                    }}\n                                                >\n                                                    Add Task\n                                                </Button>\n                                                <Tooltip label=\"Export all tasks to markdown file for bulk editing\">\n                                                    <Button\n                                                        size=\"sm\"\n                                                        bg=\"rgba(168, 85, 247, 0.2)\"\n                                                        color=\"purple.400\"\n                                                        border=\"1px\"\n                                                        borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                        _hover={{\n                                                            bg: \"rgba(168, 85, 247, 0.3)\",\n                                                            borderColor: \"purple.400\"\n                                                        }}\n                                                        leftIcon={<DownloadIcon />}\n                                                        onClick={() => exportProjectTasks({ variables: { projectId: id } })}\n                                                        isLoading={exportingTasks}\n                                                    >\n                                                        Export Tasks (.md)\n                                                    </Button>\n                                                </Tooltip>\n                                                <input\n                                                    type=\"file\"\n                                                    ref={fileInputRef}\n                                                    onChange={handleFileImport}\n                                                    accept=\".md\"\n                                                    style={{ display: 'none' }}\n                                                />\n                                                <Tooltip label=\"Import tasks from markdown file (REPLACES all existing tasks)\">\n                                                    <Button\n                                                        size=\"sm\"\n                                                        bg=\"rgba(168, 85, 247, 0.2)\"\n                                                        color=\"purple.400\"\n                                                        border=\"1px\"\n                                                        borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                        _hover={{\n                                                            bg: \"rgba(168, 85, 247, 0.3)\",\n                                                            borderColor: \"purple.400\"\n                                                        }}\n                                                        leftIcon={<DownloadIcon transform=\"rotate(180deg)\" />}\n                                                        onClick={() => fileInputRef.current?.click()}\n                                                        isLoading={importingFile}\n                                                    >\n                                                        Import (.md)\n                                                    </Button>\n                                                </Tooltip>\n                                                <input\n                                                    type=\"file\"\n                                                    ref={appendFileInputRef}\n                                                    onChange={handleFileAppend}\n                                                    accept=\".md\"\n                                                    style={{ display: 'none' }}\n                                                />\n                                                <Tooltip label=\"Import additional tasks from markdown file (ADDS to existing tasks)\">\n                                                    <Button\n                                                        size=\"sm\"\n                                                        bg=\"rgba(59, 130, 246, 0.2)\"\n                                                        color=\"blue.400\"\n                                                        border=\"1px\"\n                                                        borderColor=\"rgba(59, 130, 246, 0.3)\"\n                                                        _hover={{\n                                                            bg: \"rgba(59, 130, 246, 0.3)\",\n                                                            borderColor: \"blue.400\"\n                                                        }}\n                                                        leftIcon={<FiPlus />}\n                                                        onClick={() => appendFileInputRef.current?.click()}\n                                                        isLoading={appendingFile}\n                                                    >\n                                                        Import Additional (.md)\n                                                    </Button>\n                                                </Tooltip>\n                                                <Tooltip label=\"Download markdown format specification guide\">\n                                                    <Button\n                                                        size=\"sm\"\n                                                        bg=\"rgba(168, 85, 247, 0.2)\"\n                                                        color=\"purple.400\"\n                                                        border=\"1px\"\n                                                        borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                        _hover={{\n                                                            bg: \"rgba(168, 85, 247, 0.3)\",\n                                                            borderColor: \"purple.400\"\n                                                        }}\n                                                        leftIcon={<ViewIcon />}\n                                                        onClick={() => {\n                                                            downloadMarkdownFile(FORMAT_SPEC_CONTENT, 'FORMAT_SPEC.md');\n                                                            toast({\n                                                                title: 'Format guide downloaded',\n                                                                description: 'Downloaded FORMAT_SPEC.md',\n                                                                status: 'success',\n                                                                duration: 3000,\n                                                                isClosable: true,\n                                                            });\n                                                        }}\n                                                    >\n                                                        Format Guide\n                                                    </Button>\n                                                </Tooltip>\n                                                <Tooltip label=\"Download blank markdown template\">\n                                                    <Button\n                                                        size=\"sm\"\n                                                        bg=\"rgba(168, 85, 247, 0.2)\"\n                                                        color=\"purple.400\"\n                                                        border=\"1px\"\n                                                        borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                        _hover={{\n                                                            bg: \"rgba(168, 85, 247, 0.3)\",\n                                                            borderColor: \"purple.400\"\n                                                        }}\n                                                        leftIcon={<DownloadIcon />}\n                                                        onClick={() => {\n                                                            downloadMarkdownFile(BILL_TEMPLATE_CONTENT, 'bill_template.md');\n                                                            toast({\n                                                                title: 'Template downloaded',\n                                                                description: 'Downloaded bill_template.md',\n                                                                status: 'success',\n                                                                duration: 3000,\n                                                                isClosable: true,\n                                                            });\n                                                        }}\n                                                    >\n                                                        Template\n                                                    </Button>\n                                                </Tooltip>\n                                            </>\n                                        )}\n                                    </HStack>\n                                    {isAdmin && orderedTasks.length > 0 && (\n                                        <HStack \n                                            fontSize=\"xs\" \n                                            color={textMuted}\n                                            bg=\"rgba(255, 255, 255, 0.05)\"\n                                            px={3}\n                                            py={2}\n                                            borderRadius=\"md\"\n                                        >\n                                            <Icon as={FiInfo} />\n                                            <Text>Tip: Use the arrow buttons to reorder tasks by priority</Text>\n                                        </HStack>\n                                    )}\n                                </VStack>\n                            </CardHeader>\n                            <CardBody p={6}>\n                                <VStack spacing={5} align=\"stretch\">\n                                    {/* Empty state when no tasks */}\n                                    {orderedTasks.length === 0 && (\n                                        <Box \n                                            textAlign=\"center\" \n                                            py={12}\n                                            bg=\"rgba(0, 122, 255, 0.02)\"\n                                            borderRadius=\"xl\"\n                                            border=\"1px dashed\"\n                                            borderColor=\"rgba(0, 122, 255, 0.2)\"\n                                        >\n                                            <VStack spacing={4}>\n                                                <Text fontSize=\"4xl\" opacity={0.5}>📝</Text>\n                                                <Heading size=\"md\" color={textPrimary}>No tasks yet</Heading>\n                                                <Text color={textSecondary}>Start by adding your first task to get organized</Text>\n                                                {isAdmin && (\n                                                    <Button\n                                                        bg={getComponent(\"button\", \"primaryBg\")}\n                                                        color=\"white\"\n                                                        _hover={{ \n                                                            bg: getComponent(\"button\", \"primaryHover\"),\n                                                            transform: \"translateY(-2px)\"\n                                                        }}\n                                                        size=\"lg\"\n                                                        leftIcon={<FiPlus />}\n                                                        onClick={() => {\n                                                            setSelectedTask(null);\n                                                            setIsTaskModalOpen(true);\n                                                        }}\n                                                        boxShadow=\"0 4px 12px rgba(0, 122, 255, 0.2)\"\n                                                    >\n                                                        Create First Task\n                                                    </Button>\n                                                )}\n                                            </VStack>\n                                        </Box>\n                                    )}\n                                    \n                                    {/* Progress indicators for tasks */}\n                                    {orderedTasks.length > 0 && (\n                                        <HStack \n                                            spacing={4} \n                                            p={4} \n                                            bg=\"rgba(0, 122, 255, 0.05)\"\n                                            borderRadius=\"lg\"\n                                            border=\"1px\"\n                                            borderColor=\"rgba(0, 122, 255, 0.1)\"\n                                        >\n                                            <VStack flex={1} align=\"center\">\n                                                <Text fontSize=\"2xl\" fontWeight=\"bold\" color=\"gray.500\">\n                                                    {orderedTasks.filter(t => t.status === \"PENDING\").length}\n                                                </Text>\n                                                <Text fontSize=\"sm\" color={textSecondary}>To Do</Text>\n                                            </VStack>\n                                            <Divider orientation=\"vertical\" height=\"50px\" borderColor={cardBorder} />\n                                            <VStack flex={1} align=\"center\">\n                                                <Text fontSize=\"2xl\" fontWeight=\"bold\" color={getColor(\"primary\")}>\n                                                    {orderedTasks.filter(t => t.status === \"IN_PROGRESS\").length}\n                                                </Text>\n                                                <Text fontSize=\"sm\" color={textSecondary}>In Progress</Text>\n                                            </VStack>\n                                            <Divider orientation=\"vertical\" height=\"50px\" borderColor={cardBorder} />\n                                            <VStack flex={1} align=\"center\">\n                                                <Text fontSize=\"2xl\" fontWeight=\"bold\" color=\"green.400\">\n                                                    {orderedTasks.filter(t => t.status === \"COMPLETED\").length}\n                                                </Text>\n                                                <Text fontSize=\"sm\" color={textSecondary}>Completed</Text>\n                                            </VStack>\n                                        </HStack>\n                                    )}\n                                    \n                                    {/* Task cards */}\n                                    {orderedTasks.map((task, index) => (\n                                        <Card\n                                            key={task.id}\n                                            p={{ base: 5, md: 6 }}\n                                            variant=\"outline\"\n                                            borderLeft=\"5px\"\n                                            borderLeftColor={\n                                                task.status === \"COMPLETED\" ? \"green.400\" :\n                                                    task.status === \"IN_PROGRESS\" ? getColor(\"primary\") : \"gray.400\"\n                                            }\n                                            bg={\n                                                task.status === \"COMPLETED\" ? \"linear-gradient(135deg, rgba(34, 197, 94, 0.08) 0%, rgba(34, 197, 94, 0.03) 100%)\" :\n                                                    task.status === \"IN_PROGRESS\" ? \"linear-gradient(135deg, rgba(0, 122, 255, 0.12) 0%, rgba(0, 122, 255, 0.05) 100%)\" : \n                                                    \"rgba(255, 255, 255, 0.02)\"\n                                            }\n                                            position=\"relative\"\n                                            border=\"1px\"\n                                            borderColor={\n                                                task.status === \"IN_PROGRESS\" ? \"rgba(0, 122, 255, 0.3)\" : \n                                                task.status === \"COMPLETED\" ? \"rgba(34, 197, 94, 0.2)\" : \n                                                cardBorder\n                                            }\n                                            boxShadow={\n                                                task.status === \"IN_PROGRESS\" ? \"0 4px 20px rgba(0, 122, 255, 0.15)\" : \n                                                task.status === \"COMPLETED\" ? \"0 2px 8px rgba(34, 197, 94, 0.1)\" : \n                                                \"0 2px 8px rgba(0, 0, 0, 0.1)\"\n                                            }\n                                            transition=\"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\"\n                                            _hover={{ \n                                                boxShadow: \n                                                    task.status === \"IN_PROGRESS\" ? \"0 8px 30px rgba(0, 122, 255, 0.25)\" : \n                                                    task.status === \"COMPLETED\" ? \"0 4px 16px rgba(34, 197, 94, 0.15)\" : \n                                                    \"0 4px 16px rgba(255, 255, 255, 0.05)\",\n                                                transform: \"translateY(-3px) scale(1.01)\",\n                                                borderColor: \n                                                    task.status === \"IN_PROGRESS\" ? getColor(\"primary\") :\n                                                    task.status === \"COMPLETED\" ? \"green.400\" : \n                                                    textSecondary,\n                                                bg: \n                                                    task.status === \"IN_PROGRESS\" ? \"linear-gradient(135deg, rgba(0, 122, 255, 0.15) 0%, rgba(0, 122, 255, 0.08) 100%)\" :\n                                                    task.status === \"COMPLETED\" ? \"linear-gradient(135deg, rgba(34, 197, 94, 0.1) 0%, rgba(34, 197, 94, 0.05) 100%)\" :\n                                                    \"rgba(255, 255, 255, 0.04)\"\n                                            }}\n                                            _before={{\n                                                content: '\"\"',\n                                                position: \"absolute\",\n                                                top: 0,\n                                                left: 0,\n                                                right: 0,\n                                                height: \"3px\",\n                                                bg: task.status === \"IN_PROGRESS\" ? \n                                                    \"linear-gradient(90deg, transparent, rgba(0, 122, 255, 0.5), transparent)\" : \n                                                    \"transparent\",\n                                                animation: task.status === \"IN_PROGRESS\" ? \"shimmer 2s infinite\" : \"none\"\n                                            }}\n                                        >\n                                            {isAdmin && (\n                                                <Flex\n                                                    position=\"absolute\"\n                                                    left={{ base: 1, md: 2 }}\n                                                    top={{ base: 2, md: 4 }}\n                                                    direction=\"column\"\n                                                    bg=\"rgba(0, 0, 0, 0.3)\"\n                                                    backdropFilter=\"blur(10px)\"\n                                                    borderRadius=\"md\"\n                                                    border=\"1px\"\n                                                    borderColor={cardBorder}\n                                                    p={{ base: 0.5, md: 1 }}\n                                                    zIndex={2}\n                                                    display={{ base: \"none\", sm: \"flex\" }}\n                                                >\n                                                    <IconButton\n                                                        aria-label=\"Move task up\"\n                                                        icon={<FiArrowUp />}\n                                                        size=\"xs\"\n                                                        variant=\"ghost\"\n                                                        color={textPrimary}\n                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                                                        isDisabled={index === 0}\n                                                        onClick={() => moveTaskUp(task.id, index)}\n                                                        mb={1}\n                                                    />\n                                                    <IconButton\n                                                        aria-label=\"Move task down\"\n                                                        icon={<FiArrowDown />}\n                                                        size=\"xs\"\n                                                        variant=\"ghost\"\n                                                        color={textPrimary}\n                                                        _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                                                        isDisabled={index === orderedTasks.length - 1}\n                                                        onClick={() => moveTaskDown(task.id, index)}\n                                                    />\n                                                </Flex>\n                                            )}\n                                            <VStack align=\"stretch\" spacing={4} pl={{ base: isAdmin ? 8 : 0, md: isAdmin ? 12 : 0 }}>\n                                                <HStack spacing={{ base: 2, md: 4 }} align=\"start\" justify=\"space-between\" flexWrap={{ base: \"wrap\", md: \"nowrap\" }}>\n                                                    <VStack align=\"start\" spacing={3} flex={1} minW={0} w=\"full\">\n                                                        {/* Task Description with better typography */}\n                                                        <HStack align=\"start\" spacing={3} w=\"full\">\n                                                            {task.status === \"COMPLETED\" && (\n                                                                <Icon \n                                                                    as={FiCheckCircle} \n                                                                    color=\"green.400\" \n                                                                    boxSize={{ base: 5, md: 6 }}\n                                                                    mt={1}\n                                                                    flexShrink={0}\n                                                                />\n                                                            )}\n                                                            <Text\n                                                                fontSize={{ base: \"md\", md: \"xl\" }}\n                                                                fontWeight={task.status === \"COMPLETED\" ? \"medium\" : \"semibold\"}\n                                                                color={\n                                                                    task.status === \"COMPLETED\" ? textSecondary :\n                                                                        task.status === \"IN_PROGRESS\" ? getColor(\"primary\") : textPrimary\n                                                                }\n                                                                lineHeight=\"tall\"\n                                                                opacity={task.status === \"COMPLETED\" ? 0.85 : 1}\n                                                                transition=\"all 0.3s\"\n                                                                wordBreak=\"break-word\"\n                                                                overflowWrap=\"anywhere\"\n                                                            >\n                                                                {task.description}\n                                                            </Text>\n                                                        </HStack>\n                                                        <HStack spacing={3} flexWrap=\"wrap\" width=\"full\">\n                                                            {/* Edit and Delete buttons - moved here */}\n                                                            {isAdmin && (\n                                                                <>\n                                                                    <IconButton\n                                                                        aria-label=\"Edit task\"\n                                                                        icon={<EditIcon />}\n                                                                        size=\"sm\"\n                                                                        colorScheme=\"blue\"\n                                                                        variant=\"ghost\"\n                                                                        onClick={() => {\n                                                                            setSelectedTask(task);\n                                                                            setIsTaskModalOpen(true);\n                                                                        }}\n                                                                    />\n                                                                    <IconButton\n                                                                        aria-label=\"Delete task\"\n                                                                        icon={<DeleteIcon />}\n                                                                        size=\"sm\"\n                                                                        colorScheme=\"red\"\n                                                                        variant=\"ghost\"\n                                                                        onClick={async () => {\n                                                                            if (window.confirm(\"Are you sure you want to delete this task?\")) {\n                                                                                try {\n                                                                                    await deleteTask({\n                                                                                        variables: { id: task.id },\n                                                                                        refetchQueries: [{ query: GET_PROJECT, variables: { id } }]\n                                                                                    });\n\n                                                                                    toast({\n                                                                                        title: \"Task deleted\",\n                                                                                        status: \"success\",\n                                                                                        duration: 3000,\n                                                                                        isClosable: true,\n                                                                                    });\n                                                                                } catch (error) {\n                                                                                    toast({\n                                                                                        title: \"Error deleting task\",\n                                                                                        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                                                                                        status: \"error\",\n                                                                                        duration: 5000,\n                                                                                        isClosable: true,\n                                                                                    });\n                                                                                }\n                                                                            }\n                                                                        }}\n                                                                    />\n                                                                </>\n                                                            )}\n                                                            \n                                                            {/* Status dropdown - smaller and more subtle */}\n                                                            {isAdmin ? (\n                                                                <Select\n                                                                    size=\"sm\"\n                                                                    value={task.status}\n                                                                    onChange={async (e) => {\n                                                                        try {\n                                                                            await updateTaskStatus({\n                                                                                variables: {\n                                                                                    taskId: task.id,\n                                                                                    status: e.target.value\n                                                                                }\n                                                                            });\n                                                                            // No need to refetch - cache is updated automatically\n                                                                        } catch (error) {\n                                                                            toast({\n                                                                                title: \"Error updating status\",\n                                                                                description: error instanceof Error ? error.message : \"Unknown error\",\n                                                                                status: \"error\",\n                                                                                duration: 3000,\n                                                                            });\n                                                                        }\n                                                                    }}\n                                                                    width=\"140px\"\n                                                                    variant=\"filled\"\n                                                                    bg=\"rgba(0, 0, 0, 0.3)\"\n                                                                    color={textPrimary}\n                                                                    border=\"1px\"\n                                                                    borderColor={\n                                                                        task.status === \"COMPLETED\" ? \"green.400\" :\n                                                                            task.status === \"IN_PROGRESS\" ? getColor(\"primary\") : cardBorder\n                                                                    }\n                                                                    fontSize=\"sm\"\n                                                                    _hover={{ borderColor: textSecondary }}\n                                                                >\n                                                                    <option value=\"PENDING\" style={{ backgroundColor: '#2a2a2a', color: '#E5E5E5' }}>⏳ Pending</option>\n                                                                    <option value=\"IN_PROGRESS\" style={{ backgroundColor: '#2a2a2a', color: '#E5E5E5' }}>🚀 In Progress</option>\n                                                                    <option value=\"COMPLETED\" style={{ backgroundColor: '#2a2a2a', color: '#E5E5E5' }}>✅ Completed</option>\n                                                                </Select>\n                                                            ) : (\n                                                                <Badge\n                                                                    px={3}\n                                                                    py={1}\n                                                                    borderRadius=\"full\"\n                                                                    colorScheme={\n                                                                        task.status === \"COMPLETED\" ? \"green\" :\n                                                                            task.status === \"IN_PROGRESS\" ? \"blue\" : \"gray\"\n                                                                    }\n                                                                    fontSize=\"sm\"\n                                                                >\n                                                                    {task.status === \"COMPLETED\" ? \"✅ Completed\" :\n                                                                        task.status === \"IN_PROGRESS\" ? \"🚀 In Progress\" : \"⏳ Pending\"}\n                                                                </Badge>\n                                                            )}\n                                                            \n                                                            {/* Billing badges */}\n                                                            {task.billable === false ? (\n                                                                <Badge \n                                                                    colorScheme=\"gray\" \n                                                                    px={3} \n                                                                    py={1} \n                                                                    borderRadius=\"full\" \n                                                                    fontSize=\"sm\"\n                                                                    bg=\"rgba(107, 114, 128, 0.2)\"\n                                                                    color=\"gray.400\"\n                                                                    border=\"1px dashed\"\n                                                                    borderColor=\"gray.500\"\n                                                                >\n                                                                    🚫 Non-Billable\n                                                                </Badge>\n                                                            ) : task.billed ? (\n                                                                <Badge colorScheme=\"purple\" px={3} py={1} borderRadius=\"full\" fontSize=\"sm\">\n                                                                    💰 Billed\n                                                                </Badge>\n                                                            ) : (\n                                                                <Badge \n                                                                    colorScheme=\"green\" \n                                                                    px={3} \n                                                                    py={1} \n                                                                    borderRadius=\"full\" \n                                                                    fontSize=\"sm\"\n                                                                    variant=\"outline\"\n                                                                >\n                                                                    💵 Billable\n                                                                </Badge>\n                                                            )}\n                                                            {task.media && task.media.length > 0 && (\n                                                                <Badge colorScheme=\"teal\" px={3} py={1} borderRadius=\"full\" fontSize=\"sm\">\n                                                                    📸 {task.media.length} {task.media.length === 1 ? 'file' : 'files'}\n                                                                </Badge>\n                                                            )}\n                                                            {task.assignedTo?.[0] && (\n                                                                <HStack spacing={2}>\n                                                                    <Avatar\n                                                                        size=\"xs\"\n                                                                        name={`${task.assignedTo[0].fName} ${task.assignedTo[0].lName}`}\n                                                                        src={(task.assignedTo[0] as any).profilePhoto ? normalizeMediaUrl((task.assignedTo[0] as any).profilePhoto) : undefined}\n                                                                        bg={getColor(\"primary\")}\n                                                                    />\n                                                                    <Badge colorScheme=\"orange\" px={3} py={1} borderRadius=\"full\" fontSize=\"sm\">\n                                                                        {task.assignedTo[0].fName} {task.assignedTo[0].lName}\n                                                                    </Badge>\n                                                                </HStack>\n                                                            )}\n                                                        </HStack>\n                                                    </VStack>\n                                                    \n                                                    {/* Enhanced Checkbox with 3D effect - Admin only */}\n                                                    <Box\n                                                        role=\"group\"\n                                                        as={isAdmin ? \"button\" : \"div\"}\n                                                        onClick={isAdmin ? async () => {\n                                                            try {\n                                                                const newStatus = task.status === \"COMPLETED\" ? \"PENDING\" : \"COMPLETED\";\n                                                                await updateTaskStatus({\n                                                                    variables: {\n                                                                        taskId: task.id,\n                                                                        status: newStatus\n                                                                    }\n                                                                });\n                                                                // No need to refetch - cache is updated automatically\n                                                                toast({\n                                                                    title: newStatus === \"COMPLETED\" ? \"Task completed! 🎉\" : \"Task marked as pending 📋\",\n                                                                    status: \"success\",\n                                                                    duration: 2000,\n                                                                    isClosable: true,\n                                                                });\n                                                            } catch (error) {\n                                                                toast({\n                                                                    title: \"Error updating status\",\n                                                                    description: error instanceof Error ? error.message : \"Unknown error\",\n                                                                    status: \"error\",\n                                                                    duration: 3000,\n                                                                });\n                                                            }\n                                                        } : undefined}\n                                                        position=\"relative\"\n                                                        width={{ base: \"48px\", md: \"56px\" }}\n                                                        height={{ base: \"48px\", md: \"56px\" }}\n                                                        minWidth={{ base: \"48px\", md: \"56px\" }}\n                                                        borderRadius=\"12px\"\n                                                        border=\"3px solid\"\n                                                        borderColor={task.status === \"COMPLETED\" ? \"green.400\" : getColor(\"border.darkCard\")}\n                                                        bg={task.status === \"COMPLETED\" \n                                                            ? \"linear-gradient(135deg, #48bb78 0%, #38a169 100%)\" \n                                                            : \"linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%)\"}\n                                                        display=\"flex\"\n                                                        alignItems=\"center\"\n                                                        justifyContent=\"center\"\n                                                        cursor={isAdmin ? \"pointer\" : \"not-allowed\"}\n                                                        opacity={isAdmin ? 1 : 0.7}\n                                                        transition=\"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\"\n                                                        boxShadow={task.status === \"COMPLETED\" \n                                                            ? \"0 8px 25px rgba(72, 187, 120, 0.5), inset 0 2px 0 rgba(255, 255, 255, 0.3), inset 0 -2px 0 rgba(0, 0, 0, 0.1)\" \n                                                            : \"0 4px 15px rgba(0, 0, 0, 0.15), inset 0 2px 0 rgba(255, 255, 255, 0.1), inset 0 -2px 0 rgba(0, 0, 0, 0.1)\"}\n                                                        _hover={isAdmin ? {\n                                                            borderColor: task.status === \"COMPLETED\" ? \"green.500\" : getColor(\"primary\"),\n                                                            transform: \"translateY(-3px) scale(1.1)\",\n                                                            boxShadow: task.status === \"COMPLETED\"\n                                                                ? \"0 12px 35px rgba(72, 187, 120, 0.6), inset 0 2px 0 rgba(255, 255, 255, 0.4)\"\n                                                                : \"0 8px 25px rgba(102, 126, 234, 0.4), inset 0 2px 0 rgba(255, 255, 255, 0.2)\",\n                                                            bg: task.status === \"COMPLETED\"\n                                                                ? \"linear-gradient(135deg, #68d391 0%, #48bb78 100%)\"\n                                                                : \"linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(102, 126, 234, 0.1) 100%)\"\n                                                        } : {}}\n                                                        _active={isAdmin ? {\n                                                            transform: \"translateY(1px) scale(0.98)\",\n                                                            boxShadow: task.status === \"COMPLETED\"\n                                                                ? \"0 2px 10px rgba(72, 187, 120, 0.4), inset 0 1px 0 rgba(0, 0, 0, 0.1)\"\n                                                                : \"0 2px 8px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(0, 0, 0, 0.05)\"\n                                                        } : {}}\n                                                        _before={{\n                                                            content: '\"\"',\n                                                            position: \"absolute\",\n                                                            top: \"50%\",\n                                                            left: \"50%\",\n                                                            transform: \"translate(-50%, -50%)\",\n                                                            width: task.status === \"COMPLETED\" ? \"100%\" : \"0%\",\n                                                            height: task.status === \"COMPLETED\" ? \"100%\" : \"0%\",\n                                                            borderRadius: \"12px\",\n                                                            bg: \"rgba(255, 255, 255, 0.1)\",\n                                                            animation: task.status === \"COMPLETED\" ? `${pulse} 2s infinite` : \"none\",\n                                                            pointerEvents: \"none\"\n                                                        }}\n                                                        flexShrink={0}\n                                                        alignSelf={{ base: \"center\", md: \"flex-start\" }}\n                                                        mt={{ base: 2, md: 1 }}\n                                                        ml={{ base: 2, md: 0 }}\n                                                    >\n                                                        {task.status === \"COMPLETED\" ? (\n                                                            <Icon \n                                                                as={FiCheckCircle} \n                                                                boxSize={8} \n                                                                color=\"white\"\n                                                                filter=\"drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2))\"\n                                                            />\n                                                        ) : isAdmin ? (\n                                                            <Box\n                                                                width=\"24px\"\n                                                                height=\"24px\"\n                                                                borderRadius=\"6px\"\n                                                                border=\"2px dashed\"\n                                                                borderColor={getColor(\"text.mutedDark\")}\n                                                                opacity={0.4}\n                                                                transition=\"all 0.2s\"\n                                                                _groupHover={{ \n                                                                    opacity: 0.6,\n                                                                    borderColor: getColor(\"primary\")\n                                                                }}\n                                                            />\n                                                        ) : (\n                                                            <Icon\n                                                                as={FiLock}\n                                                                boxSize={5}\n                                                                color={getColor(\"text.mutedDark\")}\n                                                                opacity={0.5}\n                                                            />\n                                                        )}\n                                                    </Box>\n                                                </HStack>\n\n                                                {task.media && task.media.length > 0 && (\n                                                    <Box>\n                                                        <Text fontWeight=\"bold\" mb={2}>\n                                                            Task Evidence ({task.media.length})\n                                                        </Text>\n                                                        {(() => {\n                                                            console.log(\"Task media:\", {\n                                                                taskId: task.id,\n                                                                media: task.media.map(m => ({\n                                                                    url: m.url,\n                                                                    fileType: m.fileType,\n                                                                    isPDF: m.fileType === \"application/pdf\" || m.url.toLowerCase().includes(\"pdf\"),\n                                                                    isVideo: m.fileType === \"video/mp4\" || m.url.endsWith(\".mp4\")\n                                                                }))\n                                                            });\n                                                            return null;\n                                                        })()}\n                                                        <SimpleGrid\n                                                            columns={{ base: 1, sm: 2, md: 3, lg: 4 }}\n                                                            spacing={{ base: 2, md: 4 }}\n                                                        >\n                                                            {task.media.map((media, index) => {\n                                                                console.log(\"Rendering media item:\", {\n                                                                    index,\n                                                                    url: media.url,\n                                                                    fileType: media.fileType,\n                                                                    isPDF: media.fileType === \"application/pdf\" || media.url.toLowerCase().includes(\"pdf\"),\n                                                                    isVideo: media.fileType === \"video/mp4\" || media.url.endsWith(\".mp4\")\n                                                                });\n\n                                                                return (\n                                                                    <Box\n                                                                        key={index}\n                                                                        position=\"relative\"\n                                                                        cursor=\"pointer\"\n                                                                        borderRadius=\"md\"\n                                                                        overflow=\"hidden\"\n                                                                        boxShadow=\"sm\"\n                                                                        border=\"1px solid\"\n                                                                        borderColor={task.status === \"COMPLETED\" ? \"green.200\" : \"gray.200\"}\n                                                                    >\n                                                                        {(media.fileType === \"application/pdf\" || media.url.toLowerCase().includes(\"pdf\")) ? (\n                                                                            <Box maxH=\"150px\" overflow=\"hidden\" position=\"relative\">\n                                                                                <Document \n                                                                                    file={normalizeMediaUrl(media.url)}\n                                                                                    onLoadSuccess={({ numPages }) => {\n                                                                                        console.log(\"ProjectPage PDF loaded successfully:\", { \n                                                                                            url: media.url, \n                                                                                            normalizedUrl: normalizeMediaUrl(media.url),\n                                                                                            numPages \n                                                                                        });\n                                                                                    }}\n                                                                                    onLoadError={(error) => {\n                                                                                        console.error(\"ProjectPage PDF load error:\", error, {\n                                                                                            originalUrl: media.url,\n                                                                                            normalizedUrl: normalizeMediaUrl(media.url),\n                                                                                            fileType: media.fileType\n                                                                                        });\n                                                                                    }}\n                                                                                    loading={\n                                                                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height=\"150px\">\n                                                                                            <Spinner size=\"md\" color=\"blue.500\" />\n                                                                                            <Text ml={2} fontSize=\"sm\">Loading PDF...</Text>\n                                                                                        </Box>\n                                                                                    }\n                                                                                    error={\n                                                                                        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" height=\"150px\" bg=\"red.50\" p={4}>\n                                                                                            <Text fontSize=\"sm\" color=\"red.600\" textAlign=\"center\">\n                                                                                                Failed to load PDF\n                                                                                            </Text>\n                                                                                            <Button \n                                                                                                size=\"sm\" \n                                                                                                mt={2} \n                                                                                                colorScheme=\"blue\" \n                                                                                                variant=\"outline\"\n                                                                                                onClick={() => window.open(normalizeMediaUrl(media.url), \"_blank\")}\n                                                                                            >\n                                                                                                Open Direct\n                                                                                            </Button>\n                                                                                        </Box>\n                                                                                    }\n                                                                                >\n                                                                                    <Page pageNumber={1} width={200} />\n                                                                                </Document>\n                                                                                <Button\n                                                                                    position=\"absolute\"\n                                                                                    bottom={2}\n                                                                                    right={2}\n                                                                                    size=\"sm\"\n                                                                                    onClick={() => window.open(normalizeMediaUrl(media.url), \"_blank\")}\n                                                                                >\n                                                                                    Download PDF\n                                                                                </Button>\n                                                                            </Box>\n                                                                        ) : (media.fileType === \"video/mp4\" || media.url.endsWith(\".mp4\")) ? (\n                                                                            <Box maxH=\"150px\" overflow=\"hidden\">\n                                                                                {(() => {\n                                                                                    console.log(\"Rendering video:\", normalizeMediaUrl(media.url));\n                                                                                    return null;\n                                                                                })()}\n                                                                                <video\n                                                                                    src={normalizeMediaUrl(media.url)}\n                                                                                    controls\n                                                                                    style={{ width: \"100%\", maxHeight: \"150px\", objectFit: \"cover\" }}\n                                                                                    onClick={(e) => e.stopPropagation()}\n                                                                                >\n                                                                                    Your browser does not support the video tag.\n                                                                                </video>\n                                                                            </Box>\n                                                                        ) : (\n                                                                            <>\n                                                                                {(() => {\n                                                                                    console.log(\"Rendering image:\", normalizeMediaUrl(media.url));\n                                                                                    return null;\n                                                                                })()}\n                                                                                <Image\n                                                                                    src={normalizeMediaUrl(media.url)}\n                                                                                    alt={media.description || `Evidence ${index + 1}`}\n                                                                                    height=\"150px\"\n                                                                                    width=\"100%\"\n                                                                                    objectFit=\"cover\"\n                                                                                    onClick={() => setSelectedImage({ ...media, url: normalizeMediaUrl(media.url) })}\n                                                                                />\n                                                                            </>\n                                                                        )}\n                                                                        <Badge\n                                                                            position=\"absolute\"\n                                                                            top={2}\n                                                                            left={2}\n                                                                            colorScheme={task.status === \"COMPLETED\" ? \"green\" : \"gray\"}\n                                                                            fontSize=\"xs\"\n                                                                        >\n                                                                            {media.description ? \"Proof of Work\" : \"Screenshot\"}\n                                                                        </Badge>\n                                                                        {isAdmin && (\n                                                                            <IconButton\n                                                                                aria-label=\"Delete evidence\"\n                                                                                icon={<DeleteIcon />}\n                                                                                size=\"sm\"\n                                                                                position=\"absolute\"\n                                                                                right={2}\n                                                                                top={2}\n                                                                                zIndex={2}\n                                                                                colorScheme=\"red\"\n                                                                                opacity={0.7}\n                                                                                _hover={{ opacity: 1 }}\n                                                                                onClick={async (e) => {\n                                                                                    e.stopPropagation();\n                                                                                    try {\n                                                                                        await deleteTaskMedia({\n                                                                                            variables: {\n                                                                                                taskId: task.id,\n                                                                                                photoUrl: media.url\n                                                                                            }\n                                                                                        });\n                                                                                        toast({\n                                                                                            title: \"Media deleted\",\n                                                                                        status: \"success\",\n                                                                                        duration: 3000,\n                                                                                        isClosable: true,\n                                                                                    });\n                                                                                    refetch();\n                                                                                } catch (error) {\n                                                                                    toast({\n                                                                                        title: \"Error deleting photo\",\n                                                                                        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                                                                                        status: \"error\",\n                                                                                        duration: 5000,\n                                                                                        isClosable: true,\n                                                                                    });\n                                                                                }\n                                                                            }}\n                                                                            />\n                                                                        )}\n                                                                    </Box>\n                                                                );\n                                                            })}\n                                                        </SimpleGrid>\n                                                    </Box>\n                                                )}\n                                            </VStack>\n                                        </Card>\n                                    ))}\n\n                                    {/* Magical Surprise - Only shows when all tasks are complete */}\n                                    {orderedTasks.length > 0 && (\n                                        <Card\n                                            p={{ base: 5, md: 6 }}\n                                            bg={\n                                                orderedTasks.every(task => task.status === \"COMPLETED\")\n                                                    ? \"linear-gradient(135deg, rgba(255, 215, 0, 0.15) 0%, rgba(255, 184, 0, 0.1) 50%, rgba(255, 215, 0, 0.15) 100%)\"\n                                                    : cardGradientBg\n                                            }\n                                            backdropFilter=\"blur(10px)\"\n                                            borderWidth=\"2px\"\n                                            borderStyle=\"dashed\"\n                                            borderColor={\n                                                orderedTasks.every(task => task.status === \"COMPLETED\")\n                                                    ? \"gold\"\n                                                    : \"rgba(255, 215, 0, 0.2)\"\n                                            }\n                                            borderRadius=\"xl\"\n                                            boxShadow={\n                                                orderedTasks.every(task => task.status === \"COMPLETED\")\n                                                    ? \"0 10px 40px rgba(255, 215, 0, 0.3), inset 0 0 60px rgba(255, 215, 0, 0.1)\"\n                                                    : \"0 4px 20px 0 rgba(0, 0, 0, 0.1)\"\n                                            }\n                                            position=\"relative\"\n                                            overflow=\"hidden\"\n                                            transition=\"all 0.5s cubic-bezier(0.4, 0, 0.2, 1)\"\n                                            _before={{\n                                                content: '\"\"',\n                                                position: \"absolute\",\n                                                top: 0,\n                                                left: 0,\n                                                right: 0,\n                                                bottom: 0,\n                                                background: orderedTasks.every(task => task.status === \"COMPLETED\")\n                                                    ? \"radial-gradient(circle at 50% 50%, rgba(255, 215, 0, 0.2) 0%, transparent 70%)\"\n                                                    : \"none\",\n                                                animation: orderedTasks.every(task => task.status === \"COMPLETED\")\n                                                    ? `${pulse} 3s infinite`\n                                                    : \"none\",\n                                                pointerEvents: \"none\"\n                                            }}\n                                        >\n                                            <VStack spacing={4} align=\"center\" position=\"relative\">\n                                                {orderedTasks.every(task => task.status === \"COMPLETED\") ? (\n                                                    <>\n                                                        <Text fontSize=\"4xl\" textAlign=\"center\">\n                                                            🏆✨💰\n                                                        </Text>\n                                                        <Heading \n                                                            size=\"lg\" \n                                                            color=\"gold\"\n                                                            textAlign=\"center\"\n                                                            textShadow=\"0 2px 10px rgba(255, 215, 0, 0.5)\"\n                                                        >\n                                                            Congratulations! You've Found the Treasure!\n                                                        </Heading>\n                                                        <Text \n                                                            color={textPrimary} \n                                                            fontSize=\"lg\"\n                                                            textAlign=\"center\"\n                                                            fontWeight=\"semibold\"\n                                                        >\n                                                            All tasks completed! Your dedication has unlocked the golden achievement.\n                                                        </Text>\n                                                        <HStack spacing={4} mt={4}>\n                                                            <Badge \n                                                                colorScheme=\"yellow\" \n                                                                fontSize=\"md\" \n                                                                px={4} \n                                                                py={2}\n                                                                borderRadius=\"full\"\n                                                                boxShadow=\"0 4px 20px rgba(255, 215, 0, 0.4)\"\n                                                            >\n                                                                🌟 Project Champion\n                                                            </Badge>\n                                                            <Badge \n                                                                colorScheme=\"green\" \n                                                                fontSize=\"md\" \n                                                                px={4} \n                                                                py={2}\n                                                                borderRadius=\"full\"\n                                                                boxShadow=\"0 4px 20px rgba(72, 187, 120, 0.4)\"\n                                                            >\n                                                                💎 100% Complete\n                                                            </Badge>\n                                                        </HStack>\n                                                        {isAdmin && (\n                                                            <Button\n                                                                size=\"lg\"\n                                                                colorScheme=\"yellow\"\n                                                                mt={4}\n                                                                onClick={() => window.open(`/bills/new?projectId=${id}`, '_blank')}\n                                                                leftIcon={<Text>🎉</Text>}\n                                                                rightIcon={<Text>💰</Text>}\n                                                                boxShadow=\"0 6px 30px rgba(255, 215, 0, 0.4)\"\n                                                                _hover={{\n                                                                    transform: \"translateY(-2px)\",\n                                                                    boxShadow: \"0 8px 40px rgba(255, 215, 0, 0.5)\"\n                                                                }}\n                                                            >\n                                                                Create Victory Bill\n                                                            </Button>\n                                                        )}\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <Text \n                                                            fontSize=\"3xl\" \n                                                            opacity={0.3}\n                                                            filter=\"grayscale(100%)\"\n                                                        >\n                                                            🏆\n                                                        </Text>\n                                                        <Heading \n                                                            size=\"md\" \n                                                            color={textSecondary}\n                                                            opacity={0.6}\n                                                            textAlign=\"center\"\n                                                        >\n                                                            A Mystery Awaits...\n                                                        </Heading>\n                                                        <Text \n                                                            color={textMuted} \n                                                            fontSize=\"sm\"\n                                                            textAlign=\"center\"\n                                                            fontStyle=\"italic\"\n                                                        >\n                                                            Complete all tasks to reveal the golden treasure\n                                                        </Text>\n                                                        <Progress \n                                                            value={(orderedTasks.filter(t => t.status === \"COMPLETED\").length / orderedTasks.length) * 100}\n                                                            colorScheme=\"yellow\"\n                                                            size=\"sm\"\n                                                            width=\"full\"\n                                                            borderRadius=\"full\"\n                                                            bg=\"rgba(255, 215, 0, 0.1)\"\n                                                            mt={2}\n                                                        />\n                                                        <Text fontSize=\"xs\" color={textMuted}>\n                                                            {orderedTasks.filter(t => t.status === \"COMPLETED\").length} of {orderedTasks.length} tasks completed\n                                                        </Text>\n                                                    </>\n                                                )}\n                                            </VStack>\n                                        </Card>\n                                    )}\n\n                                    {/* Empty state when no tasks */}\n                                    {orderedTasks.length === 0 && (\n                                        <Box\n                                            textAlign=\"center\"\n                                            py={10}\n                                            px={6}\n                                            borderWidth=\"1px\"\n                                            borderRadius=\"lg\"\n                                            borderStyle=\"dashed\"\n                                            borderColor=\"gray.300\"\n                                        >\n                                            <Icon as={FiCheckCircle} boxSize={12} color=\"blue.500\" mb={4} />\n                                            <Heading as=\"h4\" size=\"md\" mb={2}>\n                                                No tasks yet\n                                            </Heading>\n                                            <Text color=\"gray.500\" mb={4}>\n                                                Start adding tasks to break down your project work\n                                            </Text>\n                                            {isAdmin && (\n                                                <Button\n                                                    colorScheme=\"blue\"\n                                                    onClick={() => {\n                                                        setSelectedTask(null);\n                                                        setIsTaskModalOpen(true);\n                                                    }}\n                                                >\n                                                    Add First Task\n                                                </Button>\n                                            )}\n                                        </Box>\n                                    )}\n                                </VStack>\n                            </CardBody>\n                        </Card>\n                    </VStack>\n                </motion.div>\n            </Container>\n            <FooterWithFourColumns />\n            {\n                id && <TaskModal\n                    isOpen={isTaskModalOpen}\n                    onClose={() => {\n                        setIsTaskModalOpen(false);\n                        setSelectedTask(null);\n                    }}\n                    projectId={id}\n                    existingTask={selectedTask ? {\n                        id: selectedTask.id,\n                        description: selectedTask.description,\n                        status: selectedTask.status,\n                        assignedTo: selectedTask.assignedTo,\n                        media: selectedTask.media,\n                        billed: selectedTask.billed || false,\n                        billable: selectedTask.billable\n                    } : undefined}\n                    onTaskUpdated={() => {\n                        refetch();\n                    }}\n                />\n            }\n            <Modal isOpen={!!selectedImage} onClose={() => setSelectedImage(null)} size=\"6xl\">\n                <ModalOverlay onClick={() => setSelectedImage(null)} />\n                <ModalContent>\n                    <ModalCloseButton zIndex=\"popover\" />\n                    <ModalBody p={0}>\n                        <Image\n                            src={selectedImage?.url ? normalizeMediaUrl(selectedImage.url) : ''}\n                            alt={selectedImage?.description || \"Task evidence\"}\n                            width=\"100%\"\n                            height=\"auto\"\n                            maxH=\"90vh\"\n                            objectFit=\"contain\"\n                            cursor=\"pointer\"\n                            onClick={() => setSelectedImage(null)}\n                        />\n                        {selectedImage?.description && (\n                            <Text p={4} textAlign=\"center\">\n                                {selectedImage.description}\n                            </Text>\n                        )}\n                    </ModalBody>\n                </ModalContent>\n            </Modal>\n            \n            {/* Add Member Modal */}\n            <AddMemberModal\n                isOpen={isAddMemberModalOpen}\n                onClose={() => setIsAddMemberModalOpen(false)}\n                projectId={id || \"\"}\n                onMemberAdded={() => {\n                    refetch(); // Refresh project data to show new member\n                    toast({\n                        title: \"Member added successfully\",\n                        description: \"New team member has been created and added to the project\",\n                        status: \"success\",\n                        duration: 5000,\n                        isClosable: true,\n                    });\n                }}\n            />\n        </Box>\n        </>\n    );\n};\n\nexport default ProjectPage;"],"names":["downloadMarkdownFile","content","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","pdfjs","workerSrc","concat","CREATE_TASK","gql","_templateObject","_taggedTemplateLiteral","UPDATE_TASK","_templateObject2","UPLOAD_FILE","_templateObject3","GET_CLIENTS","_templateObject4","IMPROVE_DESCRIPTION","_templateObject5","IMPROVE_TAGLINE","_templateObject6","TaskModal","_ref","_existingTask$media","_clientsData$clients","isOpen","onClose","projectId","onTaskUpdated","existingTask","console","log","isNewTask","user","useAuth","defaultClientId","assignedToIds","setAssignedToIds","useState","assignedTo","map","id","description","setDescription","status","setStatus","photos","setPhotos","media","normalizeMediaUrl","fileType","billed","setBilled","billable","setBillable","undefined","isImprovingDescription","setIsImprovingDescription","improvingFileDescription","setImprovingFileDescription","toast","useToast","createTask","loading","createLoading","useMutation","updateTask","updateLoading","uploadFile","improveDescriptionMutation","improveTaglineMutation","isUploading","setIsUploading","uploadProgress","setUploadProgress","data","clientsData","clientsLoading","useQuery","selectedPDF","setSelectedPDF","useEffect","_existingTask$assigne","_existingTask$media2","handleClose","cleanAIResponse","text","cleaned","trim","startsWith","endsWith","slice","patterns","pattern","replace","getDescriptionContext","value","getFileDescriptionContext","renderFilePreview","photo","index","_photo$fileType","normalizedUrl","urlAnalysis","isPDF","toLowerCase","includes","isVideo","isImage","hasFileType","fileTypeValue","urlPatterns","endsWithPDF","endsWithMP4","endsWithJPG","endsWithPNG","endsWithGIF","containsIPFS","containsGateway","_jsx","Box","maxH","overflow","cursor","onClick","_objectSpread","children","Document","file","onLoadSuccess","_ref2","numPages","onLoadError","error","errorMessage","message","Page","pageNumber","height","scale","src","controls","style","width","maxHeight","objectFit","onLoadStart","onLoadedData","onError","e","event","target","currentTarget","willRenderAs","Image","alt","onLoad","imgElement","originalUrl","imgSrc","imgComplete","complete","imgNaturalWidth","naturalWidth","imgNaturalHeight","naturalHeight","suggestions","_jsxs","Modal","size","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","VStack","spacing","FormControl","isRequired","HStack","justify","align","mb","FormLabel","Tooltip","label","p","maxW","Text","fontWeight","fontSize","whiteSpace","placement","hasArrow","bg","color","Button","variant","colorScheme","isDisabled","isLoading","async","context","variables","improveDescription","title","duration","Error","leftIcon","IconButton","icon","navigator","clipboard","writeText","Textarea","onChange","placeholder","rows","Select","borderColor","backgroundColor","clients","client","businessName","fName","lName","email","Input","accept","files","progressInterval","setInterval","prev","clearInterval","uploadToPinata","newPhoto","disabled","FormHelperText","mt","toFixed","Progress","length","SimpleGrid","columns","w","_photo$description","_photo$description2","borderWidth","borderRadius","position","handlePhotoDescriptionChange","newPhotos","flex","resize","currentDescription","handleImproveFileDescription","minW","px","_photo$description3","CloseIcon","right","top","filter","_","i","removePhoto","_hover","Switch","isChecked","checked","input","zIndex","window","innerWidth","COUNTRY_CODES","name","code","flag","CREATE_CLIENT","UPDATE_PROJECT","GET_PROJECT","AddMemberModal","onMemberAdded","getColor","cardBorder","textPrimary","textSecondary","textMuted","selectedCountry","setSelectedCountry","localPhoneNumber","setLocalPhoneNumber","formattedPhoneNumber","setFormattedPhoneNumber","formData","setFormData","firstName","lastName","phoneNumber","createClient","refetchQueries","updateProject","projectData","skip","cleanedLocal","substring","countryCodeWithoutPlus","completeNumber","handleChange","resetForm","backdropFilter","border","boxShadow","borderBottom","fontFamily","brandConfig","fonts","heading","as","_placeholder","_focus","countryCode","country","find","c","handleCountryChange","InputGroup","InputLeftAddon","pt","transform","test","match","_projectData$project","_projectData$project$","clientData","updatedMemberIds","project","members","member","loadingText","pulse","keyframes","PUBLIC_GET_PROJECT","UPDATE_TASK_STATUS","CREATE_DRAFT_BILL_WITH_TASKS","_templateObject7","DELETE_TASK","_templateObject8","UPDATE_PROJECT_PROGRESS","_templateObject9","_templateObject0","_templateObject1","UPDATE_TASK_ORDER","_templateObject10","_templateObject11","DELETE_TASK_MEDIA","_templateObject12","EXPORT_PROJECT_TASKS_TO_MARKDOWN","_templateObject13","IMPORT_TASKS_FROM_MARKDOWN","_templateObject14","APPEND_TASKS_FROM_MARKDOWN","_templateObject15","ProjectPage","_user$permissions","_clientsData$clients2","usePageTitle","useParams","authLoading","isAuthenticated","useNavigate","isLoginModalOpen","setIsLoginModalOpen","isTaskModalOpen","setIsTaskModalOpen","selectedImage","setSelectedImage","isEditing","setIsEditing","editedName","setEditedName","editedGoal","setEditedGoal","editedDescription","setEditedDescription","selectedTask","setSelectedTask","tempOrder","setTempOrder","orderedTasks","setOrderedTasks","selectedClientId","setSelectedClientId","isAddingMember","setIsAddingMember","isAddMemberModalOpen","setIsAddMemberModalOpen","isImprovingGoal","setIsImprovingGoal","cardGradientBg","projectQuery","refetch","onCompleted","publicProject","tasks","sort","a","b","order","isAdmin","permissions","exportProjectTasks","exportingTasks","useLazyQuery","fetchPolicy","exportProjectTasksToMarkdown","markdown","projectName","fileName","isClosable","fileInputRef","useRef","appendFileInputRef","importingFile","setImportingFile","appendingFile","setAppendingFile","importTasksFromMarkdown","appendTasksFromMarkdown","improveTagline","deleteTaskMedia","updateTaskStatus","update","cache","updatedTask","existingData","readQuery","query","updatedTasks","task","writeQuery","prevTasks","createDraftBill","deleteTask","updateProjectProgress","updateTaskOrder","projectGoal","projectDescription","getProjectGoalContext","goal","getProjectDescriptionContext","minHeight","display","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","projectsModuleConfig","Container","py","Center","h","Spinner","thickness","FooterWithFourColumns","_Fragment","wrap","Link","to","FiClock","motion","div","initial","opacity","y","animate","transition","Card","CardHeader","base","md","Heading","wordBreak","pr","CheckIcon","EditIcon","flexShrink","flexWrap","gap","Badge","Date","createdAt","toLocaleDateString","open","CardBody","colors","inverse","getComponent","billingClient","newClientId","sx","option","Avatar","FiUsers","ml","DeleteIcon","confirm","_project$members3","memberId","handleRemoveMember","_project$members","some","_project$members2","textAlign","Icon","boxSize","FiCheckCircle","t","progress","newProgress","parseInt","Array","from","hasStripe","isAnimated","FiPlus","DownloadIcon","ref","_event$target$files","reader","FileReader","onload","_e$target","result","readAsText","_fileInputRef$current","current","_event$target$files2","_e$target2","_appendFileInputRef$c","ViewIcon","FiInfo","Divider","orientation","_task$assignedTo","borderLeft","borderLeftColor","_before","left","animation","Flex","direction","sm","FiArrowUp","taskId","currentIndex","newOrderedTasks","currentTask","prevTask","currentOrder","prevOrder","updatedCurrentTask","updatedPrevTask","moveTaskUp","FiArrowDown","nextTask","nextOrder","updatedNextTask","moveTaskDown","pl","lineHeight","overflowWrap","profilePhoto","role","newStatus","minWidth","alignItems","justifyContent","_active","pointerEvents","alignSelf","_groupHover","FiLock","m","lg","bottom","stopPropagation","photoUrl","every","borderStyle","background","textShadow","rightIcon","fontStyle"],"sourceRoot":""}