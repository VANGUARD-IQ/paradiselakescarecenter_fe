{"version":3,"file":"static/js/5725.1d8bef4d.chunk.js","mappings":"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","sources":["pages/emails/hooks/useEmailAccounts.ts","pages/emails/EmailsList.tsx"],"sourcesContent":["import { useQuery, gql } from '@apollo/client';\n\nconst MY_EMAIL_ACCOUNTS_QUERY = gql`\n    query MyEmailAccounts {\n        myEmailAddresses {\n            id\n            email\n            name\n            type\n            isVerified\n            associatedClients\n        }\n        hasAssignedEmailAddress\n    }\n`;\n\nexport function useEmailAccounts() {\n    const { data, loading, error } = useQuery(MY_EMAIL_ACCOUNTS_QUERY, {\n        fetchPolicy: 'network-only' // Force fresh data fetch\n    });\n\n    // Add debugging\n    console.log('📧 useEmailAccounts hook:', {\n        loading,\n        error: error?.message,\n        errorDetails: error,\n        data,\n        emailAddresses: data?.myEmailAddresses,\n        count: data?.myEmailAddresses?.length,\n        hasAssigned: data?.hasAssignedEmailAddress\n    });\n\n    // Log the full error if present\n    if (error) {\n        console.error('📧 useEmailAccounts error details:', error);\n    }\n\n    // Use either the email addresses array or the hasAssignedEmailAddress boolean\n    const hasEmailAccounts = !loading && !error && (\n        (data?.myEmailAddresses && data.myEmailAddresses.length > 0) ||\n        data?.hasAssignedEmailAddress === true\n    );\n    const emailAccounts = data?.myEmailAddresses || [];\n    const defaultAccount = emailAccounts[0]; // Just use the first account as default\n\n    return {\n        emailAccounts,\n        defaultAccount,\n        hasEmailAccounts,\n        loading,\n        error\n    };\n}","import React, { useState, useMemo, useEffect } from 'react';\nimport {\n    Box,\n    Container,\n    Heading,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Button,\n    Badge,\n    IconButton,\n    useToast,\n    Tabs,\n    TabList,\n    TabPanels,\n    Tab,\n    TabPanel,\n    HStack,\n    VStack,\n    Text,\n    useColorModeValue,\n    useColorMode,\n    Spinner,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogContent,\n    AlertDialogOverlay,\n    useDisclosure,\n    Card,\n    CardBody,\n    SimpleGrid,\n    Icon,\n    Center,\n    Input,\n    InputGroup,\n    InputLeftElement,\n    Select,\n    Collapse,\n    Divider,\n    Tooltip,\n    Progress,\n    Tag,\n    TagLabel,\n    TagCloseButton,\n    Wrap,\n    WrapItem,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    ModalCloseButton,\n    Checkbox,\n    ButtonGroup\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiEdit, FiTrash2, FiSend, FiCopy, FiMoreVertical, FiEye, FiMail, FiClock, FiCheckCircle, FiInbox, FiStar, FiPaperclip, FiSearch, FiFilter, FiCalendar, FiChevronLeft, FiChevronRight, FiArchive, FiAlertCircle, FiTag } from 'react-icons/fi';\nimport { formatDistanceToNow, subDays, subWeeks, startOfWeek, endOfWeek, isWithinInterval, format } from 'date-fns';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport emailsModuleConfig from './moduleConfig';\nimport { useEmailAccounts } from \"./hooks/useEmailAccounts\";\nimport { FiAlertTriangle } from 'react-icons/fi';\nimport { useAuth } from '../../contexts/AuthContext';\n\n// GraphQL query to check user's personal email\nconst ME_WITH_EMAIL_QUERY = gql`\n    query GetMeWithEmail {\n        me {\n            id\n            fName\n            lName\n        }\n    }\n`;\n\n// Query to get all accessible email addresses\nconst MY_EMAIL_ADDRESSES_QUERY = gql`\n    query GetMyAccessibleEmailAddresses {\n        myAccessibleEmailAddresses {\n            email\n            displayName\n            type\n            unreadCount\n            totalCount\n            isDefault\n            recordId\n        }\n    }\n`;\n\n// Updated query with email address filter - using InboundEmail fields\nconst INBOUND_EMAILS_BY_ADDRESS_QUERY = gql`\n    query GetInboundEmailsByAddress($emailAddress: String, $limit: Int, $offset: Int) {\n        emailInboxPaginated(emailAddress: $emailAddress, limit: $limit, offset: $offset) {\n            emails {\n                id\n                from\n                fromName\n                fromFull\n                to\n                toFull\n                subject\n                date\n                textBody\n                htmlBody\n                isRead\n                isStarred\n                isSpam\n                attachments {\n                    name\n                    contentType\n                    contentLength\n                    ipfsUrl\n                }\n                labels\n                folder\n                isAssigned\n                assignedClients\n                isArchived\n                tasks {\n                    id\n                    status\n                    priority\n                    dueDate\n                }\n            }\n            totalCount\n            hasMore\n            currentPage\n            totalPages\n        }\n    }\n`;\n\n// Split into separate queries for better performance\nconst INBOUND_EMAILS_ONLY_QUERY = gql`\n    query GetInboundEmailsOnly {\n        inboundEmails {\n            id\n            from\n            fromName\n            fromFull\n            to\n            toFull\n            subject\n            date\n            textBody\n            htmlBody\n            isRead\n            isStarred\n            isSpam\n            attachments {\n                name\n                contentType\n                contentLength\n                ipfsUrl\n            }\n            labels\n            folder\n            isAssigned\n            assignedClients\n            isArchived\n            tasks {\n                id\n                status\n                priority\n                dueDate\n            }\n        }\n    }\n`;\n\n// Only load outbound emails when specifically needed\nconst OUTBOUND_EMAILS_ONLY_QUERY = gql`\n    query GetOutboundEmailsOnly {\n        emails {\n            id\n            subject\n            to\n            from\n            status\n            createdAt\n            sentAt\n            opens\n            clicks\n            attachments {\n                name\n            }\n        }\n    }\n`;\n\nconst DRAFT_EMAILS_QUERY = gql`\n    query GetDraftEmails {\n        emailsDraft {\n            id\n            subject\n            to\n            from\n            status\n            createdAt\n            attachments {\n                name\n            }\n        }\n    }\n`;\n\nconst SENT_EMAILS_QUERY = gql`\n    query GetSentEmails {\n        emailsSent {\n            id\n            subject\n            to\n            from\n            status\n            sentAt\n            opens\n            clicks\n            messageId\n            attachments {\n                name\n            }\n        }\n    }\n`;\n\nconst INBOUND_EMAILS_QUERY = gql`\n    query GetInboundEmails($folder: String) {\n        inboundEmails(folder: $folder) {\n            id\n            subject\n            from\n            fromFull\n            to\n            date\n            textBody\n            htmlBody\n            isRead\n            isStarred\n            folder\n            labels\n            attachments {\n                name\n            }\n            tasks {\n                id\n                status\n                priority\n                dueDate\n            }\n        }\n    }\n`;\n\nconst UNREAD_COUNT_QUERY = gql`\n    query GetUnreadCount {\n        unreadInboundEmailCount\n    }\n`;\n\nconst ADD_EMAIL_LABEL_MUTATION = gql`\n    mutation AddInboundEmailLabel($emailId: String!, $label: String!) {\n        addInboundEmailLabel(emailId: $emailId, label: $label) {\n            id\n            labels\n        }\n    }\n`;\n\nconst REMOVE_EMAIL_LABEL_MUTATION = gql`\n    mutation RemoveInboundEmailLabel($emailId: String!, $label: String!) {\n        removeInboundEmailLabel(emailId: $emailId, label: $label) {\n            id\n            labels\n        }\n    }\n`;\n\nconst AVAILABLE_LABELS_QUERY = gql`\n    query AvailableInboundEmailLabels {\n        availableInboundEmailLabels\n    }\n`;\n\nconst DELETE_EMAIL_MUTATION = gql`\n    mutation DeleteEmail($id: ID!) {\n        deleteEmail(id: $id)\n    }\n`;\n\nconst DUPLICATE_EMAIL_MUTATION = gql`\n    mutation DuplicateEmail($id: ID!) {\n        duplicateEmail(id: $id) {\n            id\n        }\n    }\n`;\n\nconst ARCHIVE_INBOUND_EMAIL_MUTATION = gql`\n    mutation ArchiveInboundEmail($id: ID!) {\n        moveInboundEmailToFolder(id: $id, folder: \"Archived\") {\n            id\n            folder\n        }\n    }\n`;\n\nconst UNARCHIVE_INBOUND_EMAIL_MUTATION = gql`\n    mutation UnarchiveInboundEmail($id: ID!) {\n        moveInboundEmailToFolder(id: $id, folder: \"Inbox\") {\n            id\n            folder\n        }\n    }\n`;\n\nconst ARCHIVE_MULTIPLE_EMAILS_MUTATION = gql`\n    mutation ArchiveMultipleEmails($ids: [String!]!) {\n        archiveMultipleInboundEmails(ids: $ids)\n    }\n`;\n\nconst UNARCHIVE_MULTIPLE_EMAILS_MUTATION = gql`\n    mutation UnarchiveMultipleEmails($ids: [String!]!) {\n        unarchiveMultipleInboundEmails(ids: $ids)\n    }\n`;\n\nconst InboundEmailCard = ({ email, onArchive, onManageTags, isSelected, onSelectChange }: {\n    email: any;\n    onArchive?: (id: string) => void;\n    onManageTags?: (email: any) => void;\n    isSelected?: boolean;\n    onSelectChange?: (id: string, selected: boolean) => void;\n}) => {\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n\n    // Consistent styling from brandConfig\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    const handleArchive = (e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent card click navigation\n        if (onArchive) {\n            onArchive(email.id);\n        }\n    };\n    \n    const handleTagClick = (e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent card click navigation\n        if (onManageTags) {\n            onManageTags(email);\n        }\n    };\n\n    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        e.stopPropagation();\n        if (onSelectChange) {\n            onSelectChange(email.id, e.target.checked);\n        }\n    };\n\n    const handleCardClick = (e: React.MouseEvent) => {\n        // Don't navigate if clicking on checkbox or its label\n        const target = e.target as HTMLElement;\n        if (target.closest('.checkbox-wrapper')) {\n            return;\n        }\n        navigate(`/inbox/${email.id}`);\n    };\n\n    const selectedBg = useColorModeValue('blue.50', 'blue.900');\n\n    return (\n        <Card\n            bg={isSelected ? selectedBg : cardGradientBg}\n            border=\"1px solid\"\n            borderColor={isSelected ? getColor('primaryBlue') : (email.isRead ? cardBorder : getColor('primaryBlue'))}\n            borderRadius=\"xl\"\n            overflow=\"hidden\"\n            mx={{ base: 0, md: 0 }}\n            transition=\"all 0.3s ease\"\n            _hover={{\n                transform: \"translateY(-4px)\",\n                boxShadow: getComponent('card', 'hoverShadow'),\n                borderColor: getColor('primaryBlue'),\n            }}\n            cursor=\"pointer\"\n            onClick={handleCardClick}\n            opacity={email.isRead ? 0.8 : 1}\n            position=\"relative\"\n        >\n            <CardBody p={{ base: 3, md: 4 }}>\n                <VStack align=\"stretch\" spacing={{ base: 3, md: 4 }}>\n                    <HStack justify=\"space-between\">\n                        <HStack spacing={3} align=\"start\">\n                            <Box className=\"checkbox-wrapper\" onClick={(e) => e.stopPropagation()}>\n                                <Checkbox\n                                    isChecked={isSelected}\n                                    onChange={handleCheckboxChange}\n                                    size=\"lg\"\n                                    colorScheme=\"blue\"\n                                />\n                            </Box>\n                            <VStack align=\"start\" spacing={1} flex={1}>\n                            <HStack>\n                                {!email.isRead && (\n                                    <Badge colorScheme=\"blue\" size=\"sm\">NEW</Badge>\n                                )}\n                                {email.isStarred && (\n                                    <Icon as={FiStar} color={getColor('starYellow')} />\n                                )}\n                                {email.attachments && email.attachments.length > 0 && (\n                                    <HStack spacing={1}>\n                                        <Icon as={FiPaperclip} color={textMuted} boxSize={4} />\n                                        <Text fontSize=\"xs\" color={textMuted}>\n                                            {email.attachments.length}\n                                        </Text>\n                                    </HStack>\n                                )}\n                                {(() => {\n                                    if (!email.tasks || email.tasks.length === 0) {\n                                        return (\n                                            <Tooltip \n                                                label=\"No tasks assigned\"\n                                                placement=\"top\"\n                                            >\n                                                <Badge \n                                                    variant=\"subtle\" \n                                                    colorScheme=\"gray\"\n                                                    fontSize=\"xs\"\n                                                >\n                                                    0/0\n                                                </Badge>\n                                            </Tooltip>\n                                        );\n                                    } else {\n                                        const totalTasks = email.tasks.length;\n                                        const completedTasks = email.tasks.filter((t: any) => t.status === 'COMPLETED').length;\n                                        const hasPendingTasks = completedTasks < totalTasks;\n                                        const hasUrgentTasks = email.tasks.some((t: any) => t.priority === 'URGENT' && t.status !== 'COMPLETED');\n                                        const hasOverdueTasks = email.tasks.some((t: any) => \n                                            t.dueDate && new Date(t.dueDate) < new Date() && t.status !== 'COMPLETED'\n                                        );\n                                        \n                                        return (\n                                            <Tooltip \n                                                label={`${completedTasks}/${totalTasks} tasks completed${hasOverdueTasks ? ' (overdue!)' : ''}`}\n                                                placement=\"top\"\n                                            >\n                                                <HStack spacing={1}>\n                                                    <Icon \n                                                        as={hasPendingTasks ? FiAlertCircle : FiCheckCircle} \n                                                        color={hasOverdueTasks ? 'red.500' : (hasPendingTasks ? (hasUrgentTasks ? 'orange.500' : 'yellow.500') : 'green.500')} \n                                                        boxSize={4} \n                                                    />\n                                                    <Text \n                                                        fontSize=\"xs\" \n                                                        color={hasOverdueTasks ? 'red.500' : (hasPendingTasks ? (hasUrgentTasks ? 'orange.500' : 'yellow.500') : 'green.500')}\n                                                        fontWeight=\"bold\"\n                                                    >\n                                                        {completedTasks}/{totalTasks}\n                                                    </Text>\n                                                </HStack>\n                                            </Tooltip>\n                                        );\n                                    }\n                                })()}\n                                <Heading size={{ base: \"sm\", md: \"md\" }} color={textPrimary} noOfLines={1} fontWeight={email.isRead ? \"normal\" : \"bold\"}>\n                                    {email.subject}\n                                </Heading>\n                            </HStack>\n                            {email.labels && email.labels.length > 0 && (\n                                <Wrap spacing={1} mt={1}>\n                                    {email.labels.map((label: string) => (\n                                        <WrapItem key={label}>\n                                            <Tag\n                                                size=\"sm\"\n                                                bg=\"rgba(168, 85, 247, 0.2)\"\n                                                color=\"#A855F7\"\n                                                border=\"1px solid\"\n                                                borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                            >\n                                                <TagLabel fontSize=\"xs\">{label}</TagLabel>\n                                            </Tag>\n                                        </WrapItem>\n                                    ))}\n                                </Wrap>\n                            )}\n                            <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted} noOfLines={1}>\n                                From: {email.fromFull || email.from}\n                            </Text>\n                            <Text fontSize={{ base: \"xs\", md: \"xs\" }} color={textMuted} noOfLines={1}>\n                                To: {Array.isArray(email.to) ? email.to.join(', ') : email.to}\n                            </Text>\n                        </VStack>\n                        </HStack>\n                        <VStack align=\"end\" spacing={2} display={{ base: \"none\", md: \"flex\" }}>\n                            <Text fontSize=\"xs\" color={textMuted}>\n                                {formatDistanceToNow(new Date(email.date), { addSuffix: true })}\n                            </Text>\n                            <HStack spacing={1}>\n                                <Tooltip \n                                    label=\"Manage tags\"\n                                    placement=\"left\"\n                                    bg={getColor('primaryBlue')}\n                                    color=\"white\"\n                                    fontSize=\"sm\"\n                                    px={3}\n                                    py={2}\n                                    borderRadius=\"md\"\n                                    hasArrow\n                                >\n                                    <IconButton\n                                        aria-label=\"Manage tags\"\n                                        icon={<FiTag />}\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        color={textMuted}\n                                        _hover={{ \n                                            bg: cardGradientBg, \n                                            color: getColor('primaryBlue'),\n                                            transform: \"scale(1.1)\"\n                                        }}\n                                        onClick={handleTagClick}\n                                    />\n                                </Tooltip>\n                                <Tooltip \n                                    label={email.folder === 'Archived' \n                                        ? \"Move back to Inbox if tasks are not completed\" \n                                        : \"Archive email when all tasks are done\"} \n                                    placement=\"left\"\n                                    bg={getColor('primaryBlue')}\n                                    color=\"white\"\n                                    fontSize=\"sm\"\n                                    px={3}\n                                    py={2}\n                                    borderRadius=\"md\"\n                                    hasArrow\n                                >\n                                    <IconButton\n                                        aria-label={email.folder === 'Archived' ? \"Unarchive\" : \"Archive\"}\n                                        icon={<FiArchive />}\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        color={email.folder === 'Archived' ? getColor('primaryBlue') : textMuted}\n                                        _hover={{ \n                                            bg: cardGradientBg, \n                                            color: getColor('primaryBlue'),\n                                            transform: \"scale(1.1)\"\n                                        }}\n                                        onClick={handleArchive}\n                                    />\n                                </Tooltip>\n                            </HStack>\n                        </VStack>\n                    </HStack>\n\n                    {email.textBody && (\n                        <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textSecondary} noOfLines={2}>\n                            {email.textBody}\n                        </Text>\n                    )}\n                    \n                    {/* Task Progress Bar - Only show if there are tasks */}\n                    {email.tasks && email.tasks.length > 0 && (() => {\n                        const totalTasks = email.tasks.length;\n                        const completedTasks = email.tasks.filter((t: any) => t.status === 'COMPLETED').length;\n                        const progressPercentage = (completedTasks / totalTasks) * 100;\n                        const hasOverdueTasks = email.tasks.some((t: any) => \n                            t.dueDate && new Date(t.dueDate) < new Date() && t.status !== 'COMPLETED'\n                        );\n                        \n                        return (\n                            <Box mt={{ base: 2, md: 3 }}>\n                                <HStack justify=\"space-between\" mb={1}>\n                                    <Text fontSize=\"xs\" color={textMuted} fontWeight=\"medium\" display={{ base: \"none\", sm: \"block\" }}>\n                                        Task Progress\n                                    </Text>\n                                    <Text fontSize=\"xs\" color={hasOverdueTasks ? 'red.500' : textMuted}>\n                                        {completedTasks} of {totalTasks} complete\n                                        {hasOverdueTasks && ' ⚠️'}\n                                    </Text>\n                                </HStack>\n                                <Progress \n                                    value={progressPercentage} \n                                    size=\"xs\" \n                                    colorScheme={hasOverdueTasks ? 'red' : (progressPercentage === 100 ? 'green' : 'blue')}\n                                    borderRadius=\"full\"\n                                    bg={cardBorder}\n                                />\n                            </Box>\n                        );\n                    })()}\n                </VStack>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst UnifiedEmailCard = ({ email, isInbound = false, isSelected = false, onSelect }: {\n    email: any;\n    isInbound?: boolean;\n    isSelected?: boolean;\n    onSelect?: (id: string) => void;\n}) => {\n    const navigate = useNavigate();\n    const { colorMode } = useColorMode();\n\n    // Consistent styling from brandConfig\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    const handleClick = () => {\n        if (onSelect) {\n            onSelect(email.id);\n        }\n        if (isInbound) {\n            navigate(`/inbox/${email.id}`);\n        } else {\n            navigate(`/email/${email.id}`);\n        }\n    };\n\n    const getStatusColor = (status: string) => {\n        const colors: Record<string, string> = {\n            DRAFT: getColor('status.draft'),\n            SENT: getColor('status.sent'),\n            FAILED: getColor('status.failed'),\n            SCHEDULED: getColor('status.scheduled'),\n            INBOUND: getColor('status.inbound')\n        };\n        return colors[status] || getColor('status.draft');\n    };\n\n    const emailDate = isInbound ? email.date : (email.sentAt || email.createdAt);\n    const emailStatus = isInbound ? 'INBOUND' : email.status;\n\n    // Use subtle brand colors for selection\n    const selectedBg = useColorModeValue(\n        `${getColor('primaryBlue')}10`,\n        `${getColor('primaryBlue')}15`\n    );\n    const selectedHoverBg = useColorModeValue(\n        `${getColor('primaryBlue')}15`,\n        `${getColor('primaryBlue')}20`\n    );\n\n    return (\n        <Card\n            bg={isSelected ? selectedBg : cardGradientBg}\n            border=\"2px solid\"\n            borderColor={isSelected ? getColor('primaryBlue') : (isInbound && !email.isRead ? getColor('primaryBlue') : cardBorder)}\n            borderRadius=\"xl\"\n            overflow=\"hidden\"\n            transition=\"all 0.3s ease\"\n            _hover={{\n                transform: \"translateY(-2px)\",\n                boxShadow: getComponent('card', 'hoverShadow'),\n                borderColor: getColor('primaryBlue'),\n                bg: isSelected ? selectedHoverBg : `${getColor('primaryBlue')}05`\n            }}\n            cursor=\"pointer\"\n            onClick={handleClick}\n            opacity={isInbound && email.isRead && !isSelected ? 0.8 : 1}\n            width=\"100%\"\n        >\n            <CardBody p={{ base: 3, md: 4 }}>\n                <HStack spacing={{ base: 3, md: 4 }} align=\"start\">\n                    {/* Left side - Icon/Status */}\n                    <VStack spacing={1}>\n                        <Icon \n                            as={isInbound ? FiInbox : FiSend} \n                            color={isInbound && !email.isRead ? getColor('primaryBlue') : textMuted}\n                            boxSize={{ base: 5, md: 6 }}\n                        />\n                        <Badge \n                            size=\"sm\"\n                            bg={`${getStatusColor(emailStatus)}20`}\n                            color={getStatusColor(emailStatus)}\n                            border=\"1px solid\"\n                            borderColor={`${getStatusColor(emailStatus)}30`}\n                            px={2}\n                            py={0.5}\n                            borderRadius=\"full\"\n                            fontSize=\"xs\"\n                        >\n                            {emailStatus}\n                        </Badge>\n                    </VStack>\n\n                    {/* Middle - Content */}\n                    <VStack align=\"start\" spacing={{ base: 1, md: 2 }} flex={1}>\n                        <HStack width=\"100%\" justify=\"space-between\">\n                            <VStack align=\"start\" spacing={0} flex={1}>\n                                <HStack>\n                                    {isInbound && !email.isRead && (\n                                        <Badge colorScheme=\"blue\" size=\"sm\">NEW</Badge>\n                                    )}\n                                    {isInbound && email.isStarred && (\n                                        <Icon as={FiStar} color={getColor('starYellow')} boxSize={4} />\n                                    )}\n                                    {email.attachments && email.attachments.length > 0 && (\n                                        <HStack spacing={1}>\n                                            <Icon as={FiPaperclip} color={textMuted} boxSize={3} />\n                                            <Text fontSize=\"xs\" color={textMuted}>\n                                                {email.attachments.length}\n                                            </Text>\n                                        </HStack>\n                                    )}\n                                    <Heading \n                                        size={{ base: \"sm\", md: \"md\" }} \n                                        color={textPrimary} \n                                        noOfLines={1}\n                                        fontWeight={isInbound && !email.isRead ? \"bold\" : \"normal\"}\n                                    >\n                                        {email.subject}\n                                    </Heading>\n                                </HStack>\n                                {email.labels && email.labels.length > 0 && (\n                                    <Wrap spacing={1} mt={1}>\n                                        {email.labels.map((label: string) => (\n                                            <WrapItem key={label}>\n                                                <Tag\n                                                    size=\"sm\"\n                                                    bg=\"rgba(168, 85, 247, 0.2)\"\n                                                    color=\"#A855F7\"\n                                                    border=\"1px solid\"\n                                                    borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                >\n                                                    <TagLabel fontSize=\"xs\">{label}</TagLabel>\n                                                </Tag>\n                                            </WrapItem>\n                                        ))}\n                                    </Wrap>\n                                )}\n                                <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textMuted} noOfLines={1}>\n                                    {isInbound ? `From: ${email.fromFull || email.from}` : `To: ${Array.isArray(email.to) ? email.to.join(', ') : email.to}`}\n                                </Text>\n                            </VStack>\n                            <Text fontSize=\"xs\" color={textMuted} display={{ base: \"none\", md: \"block\" }}>\n                                {formatDistanceToNow(new Date(emailDate), { addSuffix: true })}\n                            </Text>\n                        </HStack>\n                        \n                        {/* Email preview */}\n                        {(email.textBody || email.htmlBody) && (\n                            <Text fontSize={{ base: \"xs\", md: \"sm\" }} color={textSecondary} noOfLines={{ base: 1, md: 2 }}>\n                                {email.textBody || email.htmlBody?.replace(/<[^>]*>/g, '')}\n                            </Text>\n                        )}\n\n                        {/* Mobile date */}\n                        <Text fontSize=\"xs\" color={textMuted} display={{ base: \"block\", md: \"none\" }}>\n                            {formatDistanceToNow(new Date(emailDate), { addSuffix: true })}\n                        </Text>\n                        \n                        {/* Task Progress Bar - Only show if there are tasks */}\n                        {isInbound && email.tasks && email.tasks.length > 0 && (() => {\n                            const totalTasks = email.tasks.length;\n                            const completedTasks = email.tasks.filter((t: any) => t.status === 'COMPLETED').length;\n                            const progressPercentage = (completedTasks / totalTasks) * 100;\n                            const hasOverdueTasks = email.tasks.some((t: any) => \n                                t.dueDate && new Date(t.dueDate) < new Date() && t.status !== 'COMPLETED'\n                            );\n                            \n                            return (\n                                <Box mt={{ base: 2, md: 3 }} width=\"100%\">\n                                    <HStack justify=\"space-between\" mb={1}>\n                                        <Text fontSize=\"xs\" color={textMuted} fontWeight=\"medium\">\n                                            Tasks\n                                        </Text>\n                                        <Text fontSize=\"xs\" color={hasOverdueTasks ? 'red.500' : textMuted}>\n                                            {completedTasks}/{totalTasks}\n                                            {hasOverdueTasks && ' ⚠️'}\n                                        </Text>\n                                    </HStack>\n                                    <Progress \n                                        value={progressPercentage} \n                                        size=\"xs\" \n                                        colorScheme={hasOverdueTasks ? 'red' : (progressPercentage === 100 ? 'green' : 'blue')}\n                                        borderRadius=\"full\"\n                                        bg={cardBorder}\n                                    />\n                                </Box>\n                            );\n                        })()}\n                    </VStack>\n\n                    {/* Right side - Stats (for sent emails) */}\n                    {!isInbound && email.status === 'SENT' && (\n                        <HStack spacing={3} display={{ base: \"none\", lg: \"flex\" }}>\n                            <VStack spacing={0}>\n                                <Icon as={FiEye} color={getColor(\"successGreen\")} boxSize={4} />\n                                <Text fontWeight=\"bold\" fontSize=\"sm\" color={textPrimary}>{email.opens || 0}</Text>\n                                <Text fontSize=\"xs\" color={textMuted}>Opens</Text>\n                            </VStack>\n                            <VStack spacing={0}>\n                                <Icon as={FiCheckCircle} color={getColor('purpleAccent')} boxSize={4} />\n                                <Text fontWeight=\"bold\" fontSize=\"sm\" color={textPrimary}>{email.clicks || 0}</Text>\n                                <Text fontSize=\"xs\" color={textMuted}>Clicks</Text>\n                            </VStack>\n                        </HStack>\n                    )}\n                </HStack>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst EmailsList: React.FC = () => {\n    usePageTitle(\"Emails\");\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const { isOpen: isFilterOpen, onToggle: onFilterToggle } = useDisclosure();\n    const [deleteEmailId, setDeleteEmailId] = useState<string | null>(null);\n    const cancelRef = React.useRef<HTMLButtonElement>(null);\n\n    // State for managing multiple inboxes\n    const [selectedEmailAddress, setSelectedEmailAddress] = useState<string | null>(null);\n    const [activeInboxTab, setActiveInboxTab] = useState(0);\n    const [selectedEmailId, setSelectedEmailId] = useState<string | null>(null);\n\n    // State for multi-select functionality\n    const [selectedEmailIds, setSelectedEmailIds] = useState<Set<string>>(new Set());\n\n    // State for main tab navigation\n    const [activeMainTab, setActiveMainTab] = useState(0);\n\n    // Check if user has email accounts\n    const { hasEmailAccounts, loading: loadingEmailAccounts } = useEmailAccounts();\n\n    // Fetch all accessible email addresses\n    const { data: emailAddressesData, loading: loadingEmailAddresses, refetch: refetchEmailAddresses, error: emailAddressesError } = useQuery(MY_EMAIL_ADDRESSES_QUERY);\n\n    // Debug logging for email addresses query\n    if (emailAddressesData?.myAccessibleEmailAddresses) {\n        console.log('📧 [MY_EMAIL_ADDRESSES_QUERY] Full data structure:', JSON.stringify(emailAddressesData.myAccessibleEmailAddresses, null, 2));\n    }\n    console.log('📧 [MY_EMAIL_ADDRESSES_QUERY] Result:', {\n        loading: loadingEmailAddresses,\n        error: emailAddressesError,\n        data: emailAddressesData,\n        addresses: emailAddressesData?.myAccessibleEmailAddresses,\n        firstAddress: emailAddressesData?.myAccessibleEmailAddresses?.[0],\n        secondAddress: emailAddressesData?.myAccessibleEmailAddresses?.[1]\n    });\n\n    // Check for personal email\n    const { data: meData, loading: loadingMe, refetch: refetchMe } = useQuery(ME_WITH_EMAIL_QUERY);\n\n    // Set default email on load - prioritize personal inbox, then shared\n    useEffect(() => {\n        if (emailAddressesData?.myAccessibleEmailAddresses && emailAddressesData.myAccessibleEmailAddresses.length > 0 && !selectedEmailAddress) {\n            // Find personal email first\n            const personalEmail = emailAddressesData.myAccessibleEmailAddresses.find((e: any) => e.type === 'PERSONAL');\n\n            if (personalEmail) {\n                // Set personal email as default\n                setSelectedEmailAddress(personalEmail.email);\n                const index = emailAddressesData.myAccessibleEmailAddresses.indexOf(personalEmail);\n                setActiveInboxTab(index);\n                console.log('📧 [AUTO-SELECT] Selected personal inbox by default:', personalEmail.email);\n            } else {\n                // No personal email, select first shared inbox\n                const firstEmail = emailAddressesData.myAccessibleEmailAddresses[0];\n                setSelectedEmailAddress(firstEmail.email);\n                setActiveInboxTab(0);\n                console.log('📧 [AUTO-SELECT] Selected first shared inbox by default:', firstEmail.email);\n            }\n        }\n    }, [emailAddressesData, selectedEmailAddress]);\n\n    // Get tenant domain for display\n    const domain = window.location.hostname.replace('localhost', 'tommillerservices.com');\n\n    // Debug logging for personal email\n    React.useEffect(() => {\n        if (!loadingMe && meData) {\n            console.log('📧 [EmailsList] ME_WITH_EMAIL query result:', {\n                hasData: !!meData.me,\n                user: meData.me ? {\n                    id: meData.me.id,\n                    email: meData.me.email,\n                    personalEmail: meData.me.personalEmail || 'NOT SET',\n                    fName: meData.me.fName,\n                    lName: meData.me.lName\n                } : 'NO USER'\n            });\n        }\n    }, [meData, loadingMe]);\n\n    // Search and filter states\n    const [searchTerm, setSearchTerm] = useState('');\n    const [dateFilter, setDateFilter] = useState('all');\n    const [customStartDate, setCustomStartDate] = useState('');\n    const [customEndDate, setCustomEndDate] = useState('');\n    const [itemsPerPage, setItemsPerPage] = useState(20); // Default to 20 items per page\n    const [selectedLabels, setSelectedLabels] = useState<string[]>([]);\n    const [newLabel, setNewLabel] = useState('');\n    const [currentEmailForLabeling, setCurrentEmailForLabeling] = useState<any | null>(null);\n    const { isOpen: isLabelPopoverOpen, onOpen: onLabelPopoverOpen, onClose: onLabelPopoverClose } = useDisclosure();\n\n    // Pagination states - moved here to be available for queries\n    const [currentPages, setCurrentPages] = useState({\n        inbox: 1,\n        sent: 1,\n        drafts: 1,\n        all: 1,\n        archived: 1\n    });\n\n    // Consistent styling from brandConfig\n    const bg = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n    // Load inbound emails based on selected email address\n    console.log('📧 [EMAIL FILTERING] Selected email address:', selectedEmailAddress);\n    console.log('📧 [EMAIL FILTERING] Using query:', selectedEmailAddress ? 'INBOUND_EMAILS_BY_ADDRESS_QUERY' : 'INBOUND_EMAILS_ONLY_QUERY');\n\n    const { data: inboundEmailsData, loading: loadingInboundOnly, refetch: refetchInboundOnly, error: inboundError } = useQuery(\n        selectedEmailAddress ? INBOUND_EMAILS_BY_ADDRESS_QUERY : INBOUND_EMAILS_ONLY_QUERY,\n        {\n            variables: selectedEmailAddress ? {\n                emailAddress: selectedEmailAddress,\n                limit: itemsPerPage,\n                offset: (currentPages.inbox - 1) * itemsPerPage\n            } : {},\n            skip: false, // Always load emails, even when no specific address is selected\n            fetchPolicy: 'cache-and-network', // Show cached data while fetching new\n            onCompleted: (data) => {\n                console.log('✅ [EMAIL FILTERING] Query completed successfully');\n                const emails = selectedEmailAddress\n                    ? (data?.emailInboxPaginated?.emails || [])\n                    : (data?.inboundEmails || []);\n                const totalCount = selectedEmailAddress\n                    ? (data?.emailInboxPaginated?.totalCount || 0)\n                    : emails.length;\n                console.log(`📊 [EMAIL FILTERING] Loaded ${emails.length} of ${totalCount} emails for ${selectedEmailAddress || 'all inboxes'}`);\n                if (selectedEmailAddress && data?.emailInboxPaginated) {\n                    console.log('📄 [EMAIL FILTERING] Pagination info:', {\n                        currentPage: data.emailInboxPaginated.currentPage,\n                        totalPages: data.emailInboxPaginated.totalPages,\n                        totalCount: data.emailInboxPaginated.totalCount,\n                        hasMore: data.emailInboxPaginated.hasMore\n                    });\n                }\n            },\n            onError: (error) => {\n                console.error('❌ [EMAIL FILTERING] Query error:', error);\n                console.error('❌ [EMAIL FILTERING] Error details:', error.graphQLErrors);\n            }\n        }\n    );\n\n    // Log any errors\n    if (inboundError) {\n        console.error('❌ [EMAIL FILTERING] Inbound query error:', inboundError);\n    }\n    \n    // Only load outbound emails when 'All' tab is selected\n    const [shouldLoadOutbound, setShouldLoadOutbound] = useState(false);\n    const { data: outboundEmailsData, loading: loadingOutbound, refetch: refetchOutbound } = useQuery(OUTBOUND_EMAILS_ONLY_QUERY, {\n        skip: !shouldLoadOutbound, // Only load when needed\n        fetchPolicy: 'cache-and-network'\n    });\n    \n    // Combine data for 'All' tab\n    const allEmails = useMemo(() => {\n        if (!inboundEmailsData && !outboundEmailsData) return null;\n        // Handle both query types - emailInboxPaginated (filtered) or inboundEmails (all)\n        const inboundEmails = selectedEmailAddress\n            ? (inboundEmailsData?.emailInboxPaginated?.emails || [])\n            : (inboundEmailsData?.inboundEmails || []);\n        return {\n            emails: outboundEmailsData?.emails || [],\n            inboundEmails: inboundEmails\n        };\n    }, [inboundEmailsData, outboundEmailsData, selectedEmailAddress]);\n    \n    const loadingAll = loadingInboundOnly || (shouldLoadOutbound && loadingOutbound);\n    const refetchAll = () => {\n        refetchInboundOnly();\n        if (shouldLoadOutbound) refetchOutbound();\n    };\n    const { data: draftEmails, loading: loadingDrafts, refetch: refetchDrafts } = useQuery(DRAFT_EMAILS_QUERY, {\n        skip: !selectedEmailAddress // Only load when an inbox is selected\n    });\n    const { data: sentEmails, loading: loadingSent, refetch: refetchSent } = useQuery(SENT_EMAILS_QUERY, {\n        skip: !selectedEmailAddress // Only load when an inbox is selected\n    });\n    const { data: inboundEmails, loading: loadingInbound, refetch: refetchInbound } = useQuery(INBOUND_EMAILS_QUERY, {\n        variables: { folder: 'Inbox' }, // Get only Inbox emails\n        fetchPolicy: 'network-only', // Always fetch fresh data\n        skip: true // Not needed - we use inboundEmailsData instead\n    });\n    const { data: archivedEmails, loading: loadingArchived, refetch: refetchArchived } = useQuery(INBOUND_EMAILS_QUERY, {\n        variables: { folder: 'Archived' },\n        skip: activeMainTab !== 3 // Only load when archived tab is active (index 3)\n    });\n    const { data: unreadCount } = useQuery(UNREAD_COUNT_QUERY, {\n        skip: !selectedEmailAddress // Only load when an inbox is selected\n    });\n    const { data: availableLabelsData } = useQuery(AVAILABLE_LABELS_QUERY);\n\n    const [addLabel] = useMutation(ADD_EMAIL_LABEL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Label added',\n                status: 'success',\n                duration: 2000,\n            });\n            refetchInbound();\n            refetchAll();\n            setNewLabel('');\n        },\n    });\n\n    const [removeLabel] = useMutation(REMOVE_EMAIL_LABEL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Label removed',\n                status: 'success',\n                duration: 2000,\n            });\n            refetchInbound();\n            refetchAll();\n        },\n    });\n\n    const [deleteEmail] = useMutation(DELETE_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email deleted',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            refetchAll();\n            refetchDrafts();\n            onClose();\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error deleting email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [archiveMultipleEmails] = useMutation(ARCHIVE_MULTIPLE_EMAILS_MUTATION, {\n        onCompleted: (data) => {\n            toast({\n                title: `Archived ${data.archiveMultipleInboundEmails} emails`,\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            refetchInboundOnly(); // Refetch the correct query\n            setSelectedEmailIds(new Set());\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error archiving emails',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [unarchiveMultipleEmails] = useMutation(UNARCHIVE_MULTIPLE_EMAILS_MUTATION, {\n        onCompleted: (data) => {\n            toast({\n                title: `Unarchived ${data.unarchiveMultipleInboundEmails} emails`,\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            refetchArchived();\n            setSelectedEmailIds(new Set());\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error unarchiving emails',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [duplicateEmail] = useMutation(DUPLICATE_EMAIL_MUTATION, {\n        onCompleted: (data) => {\n            toast({\n                title: 'Email duplicated',\n                status: 'success',\n                duration: 3000,\n                isClosable: true,\n            });\n            refetchAll();\n            refetchDrafts();\n            navigate(`/email/${data.duplicateEmail.id}`);\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error duplicating email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const handleManageTags = (email: any) => {\n        setCurrentEmailForLabeling(email);\n        onLabelPopoverOpen();\n    };\n\n    const handleAddLabel = async () => {\n        if (newLabel && currentEmailForLabeling) {\n            await addLabel({\n                variables: {\n                    emailId: currentEmailForLabeling.id,\n                    label: newLabel\n                }\n            });\n            setNewLabel('');\n        }\n    };\n\n    const handleRemoveLabel = async (label: string) => {\n        if (currentEmailForLabeling) {\n            await removeLabel({\n                variables: {\n                    emailId: currentEmailForLabeling.id,\n                    label: label\n                }\n            });\n        }\n    };\n\n    const [archiveEmail] = useMutation(ARCHIVE_INBOUND_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email archived',\n                description: 'Email has been moved to archive',\n                status: 'success',\n                duration: 2000,\n                isClosable: true,\n            });\n            refetchInbound();\n            refetchArchived();\n            refetchInboundOnly();\n            refetchEmailAddresses(); // Refresh unread counts\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error archiving email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n    const [unarchiveEmail] = useMutation(UNARCHIVE_INBOUND_EMAIL_MUTATION, {\n        onCompleted: () => {\n            toast({\n                title: 'Email restored',\n                description: 'Email has been moved back to inbox',\n                status: 'success',\n                duration: 2000,\n                isClosable: true,\n            });\n            refetchInbound();\n            refetchArchived();\n            refetchInboundOnly();\n            refetchEmailAddresses(); // Refresh unread counts\n        },\n        onError: (error) => {\n            toast({\n                title: 'Error restoring email',\n                description: error.message,\n                status: 'error',\n                duration: 5000,\n                isClosable: true,\n            });\n        }\n    });\n\n\n    const handleDelete = () => {\n        if (deleteEmailId) {\n            deleteEmail({ variables: { id: deleteEmailId } });\n        }\n    };\n\n    const _confirmDelete = (id: string) => {\n        setDeleteEmailId(id);\n        onOpen();\n    };\n\n    // Filter emails based on search and date filters\n    const filterEmails = (emails: any[]) => {\n        if (!emails) return [];\n        \n        let filtered = [...emails];\n        \n        // Apply search filter\n        if (searchTerm) {\n            const search = searchTerm.toLowerCase();\n            filtered = filtered.filter(email => {\n                const subject = (email.subject || '').toLowerCase();\n                const from = (email.from || '').toLowerCase();\n                const fromFull = (email.fromFull || '').toLowerCase();\n                const to = Array.isArray(email.to) ? email.to.join(' ').toLowerCase() : (email.to || '').toLowerCase();\n                const body = (email.textBody || '').toLowerCase() + (email.htmlBody || '').toLowerCase();\n                \n                return subject.includes(search) || \n                       from.includes(search) || \n                       fromFull.includes(search) ||\n                       to.includes(search) ||\n                       body.includes(search);\n            });\n        }\n\n        // Apply label filter\n        if (selectedLabels.length > 0) {\n            filtered = filtered.filter(email => \n                email.labels && selectedLabels.some(label => email.labels.includes(label))\n            );\n        }\n        \n        // Apply date filter\n        if (dateFilter !== 'all') {\n            const now = new Date();\n            let startDate: Date;\n            let endDate: Date = now;\n            \n            switch (dateFilter) {\n                case 'today':\n                    startDate = new Date(now.setHours(0, 0, 0, 0));\n                    break;\n                case 'yesterday':\n                    startDate = new Date(now.setDate(now.getDate() - 1));\n                    startDate.setHours(0, 0, 0, 0);\n                    endDate = new Date(startDate);\n                    endDate.setHours(23, 59, 59, 999);\n                    break;\n                case 'lastWeek':\n                    startDate = subWeeks(now, 1);\n                    break;\n                case 'last7Days':\n                    startDate = subDays(now, 7);\n                    break;\n                case 'last30Days':\n                    startDate = subDays(now, 30);\n                    break;\n                case 'thisMonth':\n                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n                    break;\n                case 'lastMonth':\n                    startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n                    endDate = new Date(now.getFullYear(), now.getMonth(), 0);\n                    break;\n                case 'custom':\n                    if (customStartDate && customEndDate) {\n                        startDate = new Date(customStartDate);\n                        endDate = new Date(customEndDate);\n                        endDate.setHours(23, 59, 59, 999);\n                    } else {\n                        return filtered;\n                    }\n                    break;\n                default:\n                    return filtered;\n            }\n            \n            filtered = filtered.filter(email => {\n                const emailDate = new Date(email.date || email.sentAt || email.createdAt);\n                return isWithinInterval(emailDate, { start: startDate, end: endDate });\n            });\n        }\n        \n        return filtered;\n    };\n\n    // Paginate emails\n    const paginateEmails = (emails: any[], page: number) => {\n        const startIndex = (page - 1) * itemsPerPage;\n        const endIndex = startIndex + itemsPerPage;\n        return {\n            paginatedEmails: emails.slice(startIndex, endIndex),\n            totalCount: emails.length,\n            totalPages: Math.ceil(emails.length / itemsPerPage),\n            hasMore: endIndex < emails.length,\n            currentPage: page\n        };\n    };\n\n    // Reset pagination when filters or items per page change\n    const resetPagination = () => {\n        setCurrentPages({\n            inbox: 1,\n            sent: 1,\n            drafts: 1,\n            all: 1,\n            archived: 1\n        });\n    };\n\n    // Handle archive/unarchive\n    const handleArchiveEmail = (emailId: string, isArchived: boolean = false) => {\n        if (isArchived) {\n            unarchiveEmail({ variables: { id: emailId } });\n        } else {\n            archiveEmail({ variables: { id: emailId } });\n        }\n    };\n\n    // Handle email selection\n    const handleEmailSelectionChange = (emailId: string, selected: boolean) => {\n        const newSelection = new Set(selectedEmailIds);\n        if (selected) {\n            newSelection.add(emailId);\n        } else {\n            newSelection.delete(emailId);\n        }\n        setSelectedEmailIds(newSelection);\n    };\n\n    // Handle select all/unselect all\n    const handleSelectAll = (emails: any[]) => {\n        const allIds = new Set(emails.map(e => e.id));\n        setSelectedEmailIds(allIds);\n    };\n\n    const handleUnselectAll = () => {\n        setSelectedEmailIds(new Set());\n    };\n\n    // Handle mass archive\n    const handleMassArchive = () => {\n        if (selectedEmailIds.size > 0) {\n            archiveMultipleEmails({\n                variables: { ids: Array.from(selectedEmailIds) }\n            });\n        }\n    };\n\n    // Handle mass unarchive\n    const handleMassUnarchive = () => {\n        if (selectedEmailIds.size > 0) {\n            unarchiveMultipleEmails({\n                variables: { ids: Array.from(selectedEmailIds) }\n            });\n        }\n    };\n\n    return (\n        <Box minH=\"100vh\" bg={bg} display=\"flex\" flexDirection=\"column\" overflowX=\"hidden\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={emailsModuleConfig} />\n            \n            <Container maxW={{ base: \"100%\", md: \"container.md\", lg: \"container.xl\" }} px={{ base: 3, md: 8 }} py={{ base: 4, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 8 }} align=\"stretch\">\n                    <VStack align=\"stretch\" spacing={{ base: 3, md: 0 }}>\n                        <VStack align=\"start\" spacing={1}>\n                            <Heading size={{ base: \"lg\", md: \"xl\", lg: \"2xl\" }} color={textPrimary}>\n                                Email\n                            </Heading>\n                            <Text fontSize={{ base: \"sm\", md: \"md\" }} color={textMuted}>\n                                {!loadingEmailAccounts && !hasEmailAccounts\n                                    ? \"Email access not configured - Please contact your administrator\"\n                                    : \"Compose and send branded emails to your clients\"}\n                            </Text>\n                        </VStack>\n                        <Box display=\"flex\" justifyContent={{ base: \"stretch\", md: \"flex-end\" }} mt={{ base: 3, md: 0 }}>\n                            <Button\n                                colorScheme=\"blue\"\n                                onClick={() => navigate('/emails/new')}\n                                size={{ base: \"md\", md: \"lg\" }}\n                                bg={getColor('primaryBlue')}\n                                _hover={{ bg: getColor('primaryBlueHover') }}\n                                width={{ base: \"100%\", md: \"auto\" }}\n                            >\n                                Compose Email\n                            </Button>\n                        </Box>\n                    </VStack>\n\n\n                    {/* Show warning if no email accounts assigned */}\n                    {/* Multi-stage Loading Progress */}\n                    {(loadingEmailAddresses || loadingInboundOnly) && (\n                        <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder} mb={4}>\n                            <CardBody>\n                                <VStack spacing={4} align=\"stretch\">\n                                    {/* Stage 1: Loading Email Accounts */}\n                                    <VStack align=\"stretch\" spacing={2}>\n                                        <HStack justify=\"space-between\">\n                                            <Text color={textPrimary} fontWeight=\"medium\">\n                                                {loadingEmailAddresses ? '📧 Querying your email accounts...' : '✅ Email accounts loaded'}\n                                            </Text>\n                                            {loadingEmailAddresses && <Spinner size=\"sm\" color={getColor('primaryBlue')} />}\n                                            {!loadingEmailAddresses && <Text color=\"green.500\">✓</Text>}\n                                        </HStack>\n                                        <Progress\n                                            value={loadingEmailAddresses ? 50 : 100}\n                                            size=\"sm\"\n                                            colorScheme=\"blue\"\n                                            isIndeterminate={loadingEmailAddresses}\n                                            borderRadius=\"full\"\n                                        />\n                                    </VStack>\n\n                                    {/* Stage 2: Loading Emails */}\n                                    {!loadingEmailAddresses && (\n                                        <VStack align=\"stretch\" spacing={2}>\n                                            <HStack justify=\"space-between\">\n                                                <Text color={textPrimary} fontWeight=\"medium\">\n                                                    {loadingInboundOnly ? '📬 Loading most recent emails...' : '✅ Emails loaded'}\n                                                </Text>\n                                                {loadingInboundOnly && <Spinner size=\"sm\" color={getColor('primaryBlue')} />}\n                                                {!loadingInboundOnly && <Text color=\"green.500\">✓</Text>}\n                                            </HStack>\n                                            <Progress\n                                                value={loadingInboundOnly ? 50 : 100}\n                                                size=\"sm\"\n                                                colorScheme=\"green\"\n                                                isIndeterminate={loadingInboundOnly}\n                                                borderRadius=\"full\"\n                                            />\n                                        </VStack>\n                                    )}\n                                </VStack>\n                            </CardBody>\n                        </Card>\n                    )}\n\n                    {!loadingEmailAccounts && !hasEmailAccounts && (\n                        <Card\n                            bg=\"orange.50\"\n                            border=\"1px solid\"\n                            borderColor=\"orange.200\"\n                            _dark={{ bg: \"orange.900\", borderColor: \"orange.700\" }}\n                        >\n                            <CardBody>\n                                <HStack spacing={3} align=\"start\">\n                                    <Icon\n                                        as={FiAlertTriangle}\n                                        color=\"orange.500\"\n                                        boxSize={5}\n                                        mt={0.5}\n                                    />\n                                    <VStack align=\"start\" spacing={2} flex={1}>\n                                        <Text fontWeight=\"bold\" color=\"orange.800\" _dark={{ color: \"orange.200\" }}>\n                                            No Email Address Assigned\n                                        </Text>\n                                        <Text fontSize=\"sm\" color=\"orange.700\" _dark={{ color: \"orange.300\" }}>\n                                            You don't have any email addresses assigned to your account on the Email List page.\n                                        </Text>\n                                        <Text fontSize=\"sm\" color=\"orange.700\" _dark={{ color: \"orange.300\" }}>\n                                            Please contact your system administrator to have an email address assigned to you before you can send or receive emails.\n                                        </Text>\n                                    </VStack>\n                                </HStack>\n                            </CardBody>\n                        </Card>\n                    )}\n\n                    {/* Email Address Selector - Show which inboxes are being monitored */}\n                    {!loadingEmailAddresses && emailAddressesData?.myAccessibleEmailAddresses && emailAddressesData.myAccessibleEmailAddresses.length > 0 && (\n                        <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder} mb={4}>\n                            <CardBody>\n                                <VStack spacing={4} align=\"stretch\">\n                                    <HStack justify=\"space-between\">\n                                        <Heading size=\"md\" color={textPrimary}>\n                                            📧 Your Email Inboxes\n                                        </Heading>\n                                        <Badge colorScheme=\"blue\" variant=\"subtle\" fontSize=\"md\" px={3} py={1}>\n                                            {emailAddressesData.myAccessibleEmailAddresses.length} {emailAddressesData.myAccessibleEmailAddresses.length === 1 ? 'Inbox' : 'Inboxes'}\n                                        </Badge>\n                                    </HStack>\n\n                                    <Tabs\n                                        index={activeInboxTab}\n                                        onChange={(index) => {\n                                            console.log(`🔄 [TAB CHANGE] Tab clicked - Index: ${index}`);\n                                            setActiveInboxTab(index);\n\n                                            const email = emailAddressesData.myAccessibleEmailAddresses[index];\n                                            console.log('📧 [TAB CHANGE] Selected specific inbox:', {\n                                                email: email.email,\n                                                displayName: email.displayName,\n                                                type: email.type,\n                                                recordId: email.recordId\n                                            });\n                                            setSelectedEmailAddress(email.email);\n\n                                            // Reset pagination when switching inboxes\n                                            console.log('📄 [TAB CHANGE] Resetting pagination to page 1');\n                                            setCurrentPages(prev => ({ ...prev, inbox: 1 }));\n\n                                            console.log('🔄 [TAB CHANGE] Triggering email refetch...');\n                                            refetchInboundOnly();\n                                        }}\n                                        variant=\"soft-rounded\"\n                                    >\n                                        <TabList flexWrap=\"wrap\" sx={{\n                                            '& .chakra-tabs__tab[aria-selected=true]': {\n                                                bg: `${getColor('primaryBlue')}20`,\n                                                color: getColor('primaryBlue'),\n                                                fontWeight: 'bold',\n                                                borderColor: getColor('primaryBlue'),\n                                                border: '2px solid'\n                                            },\n                                            '& .chakra-tabs__tab': {\n                                                color: textMuted,\n                                                border: '1px solid',\n                                                borderColor: 'transparent',\n                                                _hover: {\n                                                    bg: `${getColor('primaryBlue')}10`,\n                                                    color: getColor('primaryBlue')\n                                                }\n                                            }\n                                        }}>\n                                            {emailAddressesData.myAccessibleEmailAddresses.map((emailAddr: any, _index: number) => (\n                                                <Tooltip\n                                                    key={emailAddr.email}\n                                                    label={\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            <Text fontSize=\"xs\">\n                                                                <strong>Source:</strong> {emailAddr.type === 'PERSONAL' ?\n                                                                    (emailAddr.recordId?.startsWith('client_') ? 'Client Record' : 'Email Account') :\n                                                                    'Email Address Collection'}\n                                                            </Text>\n                                                            <Text fontSize=\"xs\">\n                                                                <strong>ID:</strong> {emailAddr.recordId}\n                                                            </Text>\n                                                        </VStack>\n                                                    }\n                                                    placement=\"bottom\"\n                                                    hasArrow\n                                                >\n                                                    <Tab>\n                                                        <VStack spacing={0} align=\"center\">\n                                                            <HStack spacing={2}>\n                                                                <Text fontSize=\"md\" fontWeight=\"medium\">{emailAddr.displayName}</Text>\n                                                                {emailAddr.unreadCount > 0 && (\n                                                                    <Badge colorScheme=\"red\" variant=\"solid\" fontSize=\"sm\">\n                                                                        {emailAddr.unreadCount}\n                                                                    </Badge>\n                                                                )}\n                                                            </HStack>\n                                                            <Text fontSize=\"sm\" color={textMuted}>\n                                                                {emailAddr.email}\n                                                            </Text>\n                                                            {/* Commented out type badge\n                                                            <Badge\n                                                                colorScheme={emailAddr.type === 'PERSONAL' ? 'green' : 'purple'}\n                                                                variant=\"subtle\"\n                                                                fontSize=\"xs\"\n                                                                mt={1}\n                                                            >\n                                                                {emailAddr.type === 'PERSONAL' ? 'Personal' : 'Shared'}\n                                                            </Badge>\n                                                            */}\n                                                        </VStack>\n                                                    </Tab>\n                                                </Tooltip>\n                                            ))}\n                                        </TabList>\n                                    </Tabs>\n\n                                    {selectedEmailAddress && (\n                                        <Box p={3} bg={bg} borderRadius=\"md\" border=\"1px solid\" borderColor={cardBorder}>\n                                            <Text fontSize=\"sm\" color={textSecondary}>\n                                                <strong>Currently viewing:</strong> {selectedEmailAddress}\n                                            </Text>\n                                        </Box>\n                                    )}\n\n                                    {!selectedEmailAddress && (\n                                        <Box p={3} bg={bg} borderRadius=\"md\" border=\"1px solid\" borderColor={cardBorder}>\n                                            <Text fontSize=\"sm\" color={textSecondary}>\n                                                <strong>Currently viewing:</strong> All accessible email inboxes\n                                            </Text>\n                                        </Box>\n                                    )}\n                                </VStack>\n                            </CardBody>\n                        </Card>\n                    )}\n\n                    {/* Search and Filter Bar */}\n                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                        <CardBody>\n                            <VStack spacing={4}>\n                                <VStack width=\"100%\" spacing={{ base: 3, md: 4 }} align=\"stretch\">\n                                    <InputGroup width=\"100%\">\n                                        <InputLeftElement pointerEvents=\"none\">\n                                            <Icon as={FiSearch} color={textMuted} />\n                                        </InputLeftElement>\n                                        <Input\n                                            placeholder=\"Search emails...\"\n                                            value={searchTerm}\n                                            onChange={(e) => setSearchTerm(e.target.value)}\n                                            bg={bg}\n                                            border=\"1px solid\"\n                                            borderColor={cardBorder}\n                                            color={textPrimary}\n                                            _placeholder={{ color: textMuted }}\n                                            _hover={{ borderColor: getColor('primaryBlue') }}\n                                            _focus={{ borderColor: getColor('primaryBlue'), boxShadow: \"0 0 0 1px #3B82F6\" }}\n                                            fontSize={{ base: \"sm\", md: \"md\" }}\n                                        />\n                                    </InputGroup>\n                                    \n                                    <HStack width=\"100%\" spacing={{ base: 2, md: 4 }}>\n                                    <Select\n                                        flex={{ base: 1, md: \"none\" }}\n                                        width={{ base: \"100%\", md: \"200px\" }}\n                                        value={dateFilter}\n                                        onChange={(e) => {\n                                            setDateFilter(e.target.value);\n                                            resetPagination();\n                                        }}\n                                        bg={bg}\n                                        border=\"1px solid\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _hover={{ borderColor: getColor('primaryBlue') }}\n                                        _focus={{ borderColor: getColor('primaryBlue'), boxShadow: \"0 0 0 1px #3B82F6\" }}\n                                    >\n                                        <option value=\"all\">All Time</option>\n                                        <option value=\"today\">Today</option>\n                                        <option value=\"yesterday\">Yesterday</option>\n                                        <option value=\"last7Days\">Last 7 Days</option>\n                                        <option value=\"lastWeek\">Last Week</option>\n                                        <option value=\"last30Days\">Last 30 Days</option>\n                                        <option value=\"thisMonth\">This Month</option>\n                                        <option value=\"lastMonth\">Last Month</option>\n                                        <option value=\"custom\">Custom Range</option>\n                                    </Select>\n                                    \n                                    <Select\n                                        flex={{ base: 1, md: \"none\" }}\n                                        width={{ base: \"100%\", md: \"120px\" }}\n                                        value={itemsPerPage}\n                                        onChange={(e) => {\n                                            setItemsPerPage(Number(e.target.value));\n                                            resetPagination();\n                                        }}\n                                        bg={bg}\n                                        border=\"1px solid\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _hover={{ borderColor: getColor('primaryBlue') }}\n                                        _focus={{ borderColor: getColor('primaryBlue'), boxShadow: \"0 0 0 1px #3B82F6\" }}\n                                    >\n                                        <option value=\"5\">5 per page</option>\n                                        <option value=\"10\">10 per page</option>\n                                        <option value=\"20\">20 per page</option>\n                                        <option value=\"50\">50 per page</option>\n                                        <option value=\"100\">100 per page</option>\n                                    </Select>\n                                    </HStack>\n                                    \n                                    <Button\n                                        leftIcon={<FiFilter />}\n                                        variant=\"outline\"\n                                        onClick={onFilterToggle}\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                        _hover={{ bg: cardGradientBg }}\n                                        width={{ base: \"100%\", md: \"auto\" }}\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                    >\n                                        {isFilterOpen ? 'Hide' : 'Show'} Filters\n                                    </Button>\n                                </VStack>\n                                \n                                <Collapse in={isFilterOpen} animateOpacity>\n                                    <VStack spacing={4} width=\"100%\" align=\"stretch\">\n                                        {/* Tag Filters */}\n                                        <Box>\n                                            <Text fontSize=\"sm\" color={textSecondary} mb={2} fontWeight=\"medium\">\n                                                Filter by Tags:\n                                            </Text>\n                                            <Wrap spacing={2}>\n                                                {availableLabelsData?.availableInboundEmailLabels?.map((label: string) => (\n                                                    <WrapItem key={label}>\n                                                        <Tag\n                                                            size=\"md\"\n                                                            cursor=\"pointer\"\n                                                            bg={selectedLabels.includes(label) ? \"rgba(168, 85, 247, 0.3)\" : \"rgba(168, 85, 247, 0.1)\"}\n                                                            color=\"#A855F7\"\n                                                            border=\"1px solid\"\n                                                            borderColor={selectedLabels.includes(label) ? \"#A855F7\" : \"rgba(168, 85, 247, 0.3)\"}\n                                                            onClick={() => {\n                                                                if (selectedLabels.includes(label)) {\n                                                                    setSelectedLabels(selectedLabels.filter(l => l !== label));\n                                                                } else {\n                                                                    setSelectedLabels([...selectedLabels, label]);\n                                                                }\n                                                            }}\n                                                            _hover={{ bg: \"rgba(168, 85, 247, 0.2)\" }}\n                                                        >\n                                                            <TagLabel>{label}</TagLabel>\n                                                            {selectedLabels.includes(label) && (\n                                                                <TagCloseButton />\n                                                            )}\n                                                        </Tag>\n                                                    </WrapItem>\n                                                ))}\n                                                {(!availableLabelsData?.availableInboundEmailLabels || availableLabelsData.availableInboundEmailLabels.length === 0) && (\n                                                    <Text fontSize=\"sm\" color={textMuted}>No tags available yet</Text>\n                                                )}\n                                            </Wrap>\n                                        </Box>\n\n                                        {/* Date Range for Custom */}\n                                        {dateFilter === 'custom' && (\n                                            <HStack spacing={4} width=\"100%\">\n                                                <InputGroup size=\"md\">\n                                                    <InputLeftElement pointerEvents=\"none\">\n                                                        <Icon as={FiCalendar} color={textMuted} />\n                                                    </InputLeftElement>\n                                                    <Input\n                                                        type=\"date\"\n                                                        placeholder=\"Start Date\"\n                                                        value={customStartDate}\n                                                        onChange={(e) => setCustomStartDate(e.target.value)}\n                                                        bg={bg}\n                                                        border=\"1px solid\"\n                                                        borderColor={cardBorder}\n                                                        color={textPrimary}\n                                                        _hover={{ borderColor: getColor('primaryBlue') }}\n                                                        _focus={{ borderColor: getColor('primaryBlue'), boxShadow: \"0 0 0 1px #3B82F6\" }}\n                                                    />\n                                                </InputGroup>\n                                                \n                                                <Text color={textMuted}>to</Text>\n                                        \n                                        <InputGroup size=\"md\">\n                                            <InputLeftElement pointerEvents=\"none\">\n                                                <Icon as={FiCalendar} color={textMuted} />\n                                            </InputLeftElement>\n                                            <Input\n                                                type=\"date\"\n                                                placeholder=\"End Date\"\n                                                value={customEndDate}\n                                                onChange={(e) => setCustomEndDate(e.target.value)}\n                                                bg={bg}\n                                                border=\"1px solid\"\n                                                borderColor={cardBorder}\n                                                color={textPrimary}\n                                                _hover={{ borderColor: getColor('primaryBlue') }}\n                                                _focus={{ borderColor: getColor('primaryBlue'), boxShadow: \"0 0 0 1px #3B82F6\" }}\n                                            />\n                                        </InputGroup>\n                                            </HStack>\n                                        )}\n                                    </VStack>\n                                </Collapse>\n                                \n                                {(searchTerm || dateFilter !== 'all' || selectedLabels.length > 0) && (\n                                    <HStack width=\"100%\" justify=\"space-between\">\n                                        <Text fontSize=\"sm\" color={textMuted}>\n                                            Filtering emails \n                                            {searchTerm && ` containing \"${searchTerm}\"`} \n                                            {searchTerm && (dateFilter !== 'all' || selectedLabels.length > 0) && ' and '}\n                                            {selectedLabels.length > 0 && `tagged with ${selectedLabels.join(', ')}`}\n                                            {selectedLabels.length > 0 && dateFilter !== 'all' && ' and '}\n                                            {dateFilter !== 'all' && dateFilter !== 'custom' && `from ${dateFilter.replace(/([A-Z])/g, ' $1').toLowerCase()}`}\n                                            {dateFilter === 'custom' && customStartDate && customEndDate && \n                                                `from ${format(new Date(customStartDate), 'MMM dd, yyyy')} to ${format(new Date(customEndDate), 'MMM dd, yyyy')}`}\n                                        </Text>\n                                        <Button\n                                            size=\"sm\"\n                                            variant=\"ghost\"\n                                            onClick={() => {\n                                                setSearchTerm('');\n                                                setDateFilter('all');\n                                                setCustomStartDate('');\n                                                setCustomEndDate('');\n                                                setSelectedLabels([]);\n                                            }}\n                                            color={textMuted}\n                                            _hover={{ color: textPrimary }}\n                                        >\n                                            Clear Filters\n                                        </Button>\n                                    </HStack>\n                                )}\n                            </VStack>\n                        </CardBody>\n                    </Card>\n\n                    <Tabs\n                        variant=\"soft-rounded\"\n                        colorScheme=\"blue\"\n                        index={activeMainTab}\n                        onChange={(index) => {\n                            setActiveMainTab(index);\n                            // Load outbound emails only when \"All Emails\" tab is selected (index 3)\n                            if (index === 3 && !shouldLoadOutbound) {\n                                setShouldLoadOutbound(true);\n                            }\n                        }}\n                    >\n                        <TabList bg={cardGradientBg} p={{ base: 1, md: 2 }} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder} overflowX=\"auto\" whiteSpace=\"nowrap\">\n                            <Tab color={textMuted} _selected={{ bg: getColor('primaryBlue'), color: \"white\" }} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 3 }}>\n                                <HStack spacing={1}>\n                                    <Text>{selectedEmailAddress ? selectedEmailAddress.split('@')[0] : 'Inbox'}</Text>\n                                    {(() => {\n                                        // Only show badge when data is loaded\n                                        if (!emailAddressesData?.myAccessibleEmailAddresses && !unreadCount) {\n                                            return null; // Don't show anything while loading\n                                        }\n\n                                        // Get unread count for selected email or total if no email selected\n                                        const unreadCountToShow = selectedEmailAddress\n                                            ? emailAddressesData?.myAccessibleEmailAddresses?.find((e: any) => e.email === selectedEmailAddress)?.unreadCount\n                                            : unreadCount?.unreadInboundEmailCount;\n\n                                        return unreadCountToShow && unreadCountToShow > 0 ? (\n                                            <Badge colorScheme=\"red\" borderRadius=\"full\" size=\"sm\">\n                                                {unreadCountToShow}\n                                            </Badge>\n                                        ) : null;\n                                    })()}\n                                </HStack>\n                            </Tab>\n                            <Tab color={textMuted} _selected={{ bg: getColor('primaryBlue'), color: \"white\" }} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 3 }}>Sent</Tab>\n                            <Tab color={textMuted} _selected={{ bg: getColor('primaryBlue'), color: \"white\" }} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 3 }}>Drafts</Tab>\n                            <Tooltip \n                                label=\"Completed emails - Move back to Inbox if tasks are incomplete\" \n                                placement=\"top\"\n                                bg={getColor('darkCardBg')}\n                                color=\"white\"\n                                fontSize=\"sm\"\n                                px={4}\n                                py={2}\n                                borderRadius=\"md\"\n                                hasArrow\n                                border=\"1px solid\"\n                                borderColor={getColor('primaryBlue')}\n                            >\n                                <Tab color={textMuted} _selected={{ bg: getColor('primaryBlue'), color: \"white\" }} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 3 }}>\n                                    <HStack spacing={1}>\n                                        <Icon as={FiArchive} boxSize={{ base: 3, md: 4 }} />\n                                        <Text>Archived</Text>\n                                    </HStack>\n                                </Tab>\n                            </Tooltip>\n                            <Tab color={textMuted} _selected={{ bg: getColor('primaryBlue'), color: \"white\" }} fontSize={{ base: \"xs\", md: \"sm\" }} px={{ base: 2, md: 3 }}>All</Tab>\n                        </TabList>\n\n                        <TabPanels>\n                            {/* Inbox Panel - First */}\n                            <TabPanel px={0}>\n                                {loadingInbound ? (\n                                    <Center py={10}>\n                                        <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                                    </Center>\n                                ) : (\n                                    <>\n                                        {(() => {\n                                            // Use server-side paginated data when email address is selected\n                                            const emailData = selectedEmailAddress\n                                                ? (inboundEmailsData?.emailInboxPaginated?.emails || [])\n                                                : (inboundEmailsData?.inboundEmails || []);\n                                            const totalCount = selectedEmailAddress\n                                                ? (inboundEmailsData?.emailInboxPaginated?.totalCount || 0)\n                                                : emailData.length;\n                                            const totalPages = selectedEmailAddress\n                                                ? (inboundEmailsData?.emailInboxPaginated?.totalPages || 1)\n                                                : Math.ceil(totalCount / itemsPerPage);\n\n                                            // Apply client-side filtering to displayed emails\n                                            const filtered = filterEmails(emailData);\n\n                                            if (filtered.length > 0) {\n                                                return (\n                                                    <>\n                                                        {/* Mass action buttons */}\n                                                        <HStack spacing={3} mb={4} p={4} bg={cardGradientBg} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                                                            {selectedEmailIds.size > 0 ? (\n                                                                <>\n                                                                    <Text fontSize=\"sm\" fontWeight=\"bold\" color={textPrimary}>\n                                                                        {selectedEmailIds.size} email{selectedEmailIds.size > 1 ? 's' : ''} selected\n                                                                    </Text>\n                                                                    <ButtonGroup size=\"sm\">\n                                                                        <Button\n                                                                            onClick={handleUnselectAll}\n                                                                            variant=\"outline\"\n                                                                            borderColor={cardBorder}\n                                                                        >\n                                                                            Unselect All\n                                                                        </Button>\n                                                                        <Button\n                                                                            leftIcon={<FiArchive />}\n                                                                            onClick={handleMassArchive}\n                                                                            colorScheme=\"blue\"\n                                                                            bg={getColor('primaryBlue')}\n                                                                            _hover={{ bg: getColor('primaryBlueHover') }}\n                                                                        >\n                                                                            Archive Selected\n                                                                        </Button>\n                                                                    </ButtonGroup>\n                                                                </>\n                                                            ) : (\n                                                                <Button\n                                                                    onClick={() => handleSelectAll(filtered)}\n                                                                    size=\"sm\"\n                                                                    variant=\"outline\"\n                                                                    borderColor={cardBorder}\n                                                                    leftIcon={<Checkbox size=\"sm\" />}\n                                                                >\n                                                                    Select All ({filtered.length})\n                                                                </Button>\n                                                            )}\n                                                        </HStack>\n\n                                                        <VStack spacing={4} align=\"stretch\">\n                                                            {filtered.map((email: any) => (\n                                                                <InboundEmailCard\n                                                                    key={email.id}\n                                                                    email={email}\n                                                                    onManageTags={handleManageTags}\n                                                                    onArchive={(id) => handleArchiveEmail(id, false)}\n                                                                    isSelected={selectedEmailIds.has(email.id)}\n                                                                    onSelectChange={handleEmailSelectionChange}\n                                                                />\n                                                            ))}\n                                                        </VStack>\n\n                                                        {/* Pagination Controls */}\n                                                        {totalPages > 1 && (\n                                                            <HStack justify=\"space-between\" mt={6} p={4} bg={cardGradientBg} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                                    Showing {((currentPages.inbox - 1) * itemsPerPage) + 1}-{Math.min(currentPages.inbox * itemsPerPage, totalCount)} of {totalCount} emails\n                                                                </Text>\n                                                                <HStack spacing={2}>\n                                                                    <IconButton\n                                                                        aria-label=\"Previous page\"\n                                                                        icon={<FiChevronLeft />}\n                                                                        size=\"sm\"\n                                                                        isDisabled={currentPages.inbox === 1}\n                                                                        onClick={() => setCurrentPages(prev => ({ ...prev, inbox: prev.inbox - 1 }))}\n                                                                        variant=\"outline\"\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                        _hover={{ bg: cardGradientBg }}\n                                                                    />\n\n                                                                    {/* Page numbers */}\n                                                                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                                                                        const pageNum = Math.max(1, Math.min(currentPages.inbox - 2 + i, totalPages - 4)) + i;\n                                                                        if (pageNum > totalPages) return null;\n                                                                        return (\n                                                                            <Button\n                                                                                key={pageNum}\n                                                                                size=\"sm\"\n                                                                                onClick={() => setCurrentPages(prev => ({ ...prev, inbox: pageNum }))}\n                                                                                variant={currentPages.inbox === pageNum ? \"solid\" : \"outline\"}\n                                                                                bg={currentPages.inbox === pageNum ? getColor('primaryBlue') : \"transparent\"}\n                                                                                color={currentPages.inbox === pageNum ? \"white\" : textPrimary}\n                                                                                borderColor={cardBorder}\n                                                                                _hover={{ bg: currentPages.inbox === pageNum ? getColor('primaryBlueHover') : cardGradientBg }}\n                                                                            >\n                                                                                {pageNum}\n                                                                            </Button>\n                                                                        );\n                                                                    }).filter(Boolean)}\n                                                                    \n                                                                    <IconButton\n                                                                        aria-label=\"Next page\"\n                                                                        icon={<FiChevronRight />}\n                                                                        size=\"sm\"\n                                                                        isDisabled={currentPages.inbox === totalPages}\n                                                                        onClick={() => setCurrentPages(prev => ({ ...prev, inbox: prev.inbox + 1 }))}\n                                                                        variant=\"outline\"\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                        _hover={{ bg: cardGradientBg }}\n                                                                    />\n                                                                </HStack>\n                                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                                    Page {currentPages.inbox} of {totalPages}\n                                                                </Text>\n                                                            </HStack>\n                                                        )}\n                                                    </>\n                                                );\n                                            } else if (filtered.length === 0 && inboundEmails?.inboundEmails?.length > 0) {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiSearch} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        No emails match your search criteria.\n                                                                    </Text>\n                                                                    <Button \n                                                                        variant=\"ghost\"\n                                                                        onClick={() => {\n                                                                            setSearchTerm('');\n                                                                            setDateFilter('all');\n                                                                            resetPagination();\n                                                                        }}\n                                                                        color={getColor('primaryBlue')}\n                                                                    >\n                                                                        Clear Filters\n                                                                    </Button>\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            } else {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiInbox} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        {!loadingEmailAccounts && !hasEmailAccounts\n                                                                            ? \"No Email Address Assigned\"\n                                                                            : \"No incoming emails found.\"}\n                                                                    </Text>\n                                                                    {!loadingEmailAccounts && !hasEmailAccounts && (\n                                                                        <Text color={textMuted} fontSize=\"sm\" textAlign=\"center\" maxW=\"md\">\n                                                                            Please contact your system administrator to have an email address assigned before you can receive emails.\n                                                                        </Text>\n                                                                    )}\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            }\n                                        })()}\n                                    </>\n                                )}\n                            </TabPanel>\n\n                            {/* Sent Panel - Second */}\n                            <TabPanel px={0}>\n                                {loadingSent ? (\n                                    <Center py={10}>\n                                        <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                                    </Center>\n                                ) : (\n                                    <>\n                                        {(() => {\n                                            const filtered = filterEmails(sentEmails?.emailsSent || []);\n                                            if (filtered.length > 0) {\n                                                return (\n                                                    <VStack spacing={4} align=\"stretch\">\n                                                        {filtered.map((email: any) => (\n                                                            <UnifiedEmailCard\n                                                                key={email.id}\n                                                                email={email}\n                                                                isInbound={false}\n                                                                isSelected={selectedEmailId === email.id}\n                                                                onSelect={setSelectedEmailId}\n                                                            />\n                                                        ))}\n                                                    </VStack>\n                                                );\n                                            } else if (sentEmails?.emailsSent?.length > 0) {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiSearch} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        No emails match your search criteria.\n                                                                    </Text>\n                                                                    <Button \n                                                                        variant=\"ghost\"\n                                                                        onClick={() => {\n                                                                            setSearchTerm('');\n                                                                            setDateFilter('all');\n                                                                        }}\n                                                                        color={getColor('primaryBlue')}\n                                                                    >\n                                                                        Clear Filters\n                                                                    </Button>\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            } else {\n                                                return null;\n                                            }\n                                        })() || (\n                                            <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                <CardBody>\n                                                    <Center py={10}>\n                                                        <VStack spacing={4}>\n                                                            <Icon as={FiSend} boxSize={12} color={textMuted} />\n                                                            <Text color={textMuted} fontSize=\"lg\">\n                                                                No sent emails found.\n                                                            </Text>\n                                                        </VStack>\n                                                    </Center>\n                                                </CardBody>\n                                            </Card>\n                                        )}\n                                    </>\n                                )}\n                            </TabPanel>\n\n                            {/* Drafts Panel - Third */}\n                            <TabPanel px={0}>\n                                {loadingDrafts ? (\n                                    <Center py={10}>\n                                        <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                                    </Center>\n                                ) : (\n                                    <>\n                                        {(() => {\n                                            const filtered = filterEmails(draftEmails?.emailsDraft || []);\n                                            if (filtered.length > 0) {\n                                                return (\n                                                    <VStack spacing={4} align=\"stretch\">\n                                                        {filtered.map((email: any) => (\n                                                            <UnifiedEmailCard\n                                                                key={email.id}\n                                                                email={email}\n                                                                isInbound={false}\n                                                                isSelected={selectedEmailId === email.id}\n                                                                onSelect={setSelectedEmailId}\n                                                            />\n                                                        ))}\n                                                    </VStack>\n                                                );\n                                            } else if (draftEmails?.emailsDraft?.length > 0) {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiSearch} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        No emails match your search criteria.\n                                                                    </Text>\n                                                                    <Button \n                                                                        variant=\"ghost\"\n                                                                        onClick={() => {\n                                                                            setSearchTerm('');\n                                                                            setDateFilter('all');\n                                                                        }}\n                                                                        color={getColor('primaryBlue')}\n                                                                    >\n                                                                        Clear Filters\n                                                                    </Button>\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            } else {\n                                                return null;\n                                            }\n                                        })() || (\n                                            <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                <CardBody>\n                                                    <Center py={10}>\n                                                        <VStack spacing={4}>\n                                                            <Icon as={FiEdit} boxSize={12} color={textMuted} />\n                                                            <Text color={textMuted} fontSize=\"lg\">\n                                                                No draft emails found.\n                                                            </Text>\n                                                        </VStack>\n                                                    </Center>\n                                                </CardBody>\n                                            </Card>\n                                        )}\n                                    </>\n                                )}\n                            </TabPanel>\n\n                            {/* Archived Panel - Fourth */}\n                            <TabPanel px={0}>\n                                {loadingArchived ? (\n                                    <Center py={10}>\n                                        <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                                    </Center>\n                                ) : (\n                                    <>\n                                        {(() => {\n                                            const filtered = filterEmails(archivedEmails?.inboundEmails || []);\n                                            const paginated = paginateEmails(filtered, currentPages.archived);\n                                            \n                                            if (paginated.paginatedEmails.length > 0) {\n                                                return (\n                                                    <>\n                                                        {/* Mass action buttons for archived emails */}\n                                                        <HStack spacing={3} mb={4} p={4} bg={cardGradientBg} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                                                            {selectedEmailIds.size > 0 ? (\n                                                                <>\n                                                                    <Text fontSize=\"sm\" fontWeight=\"bold\" color={textPrimary}>\n                                                                        {selectedEmailIds.size} email{selectedEmailIds.size > 1 ? 's' : ''} selected\n                                                                    </Text>\n                                                                    <ButtonGroup size=\"sm\">\n                                                                        <Button\n                                                                            onClick={handleUnselectAll}\n                                                                            variant=\"outline\"\n                                                                            borderColor={cardBorder}\n                                                                        >\n                                                                            Unselect All\n                                                                        </Button>\n                                                                        <Button\n                                                                            leftIcon={<FiInbox />}\n                                                                            onClick={handleMassUnarchive}\n                                                                            colorScheme=\"green\"\n                                                                            bg=\"green.500\"\n                                                                            _hover={{ bg: \"green.600\" }}\n                                                                        >\n                                                                            Unarchive Selected\n                                                                        </Button>\n                                                                    </ButtonGroup>\n                                                                </>\n                                                            ) : (\n                                                                <Button\n                                                                    onClick={() => handleSelectAll(paginated.paginatedEmails)}\n                                                                    size=\"sm\"\n                                                                    variant=\"outline\"\n                                                                    borderColor={cardBorder}\n                                                                    leftIcon={<Checkbox size=\"sm\" />}\n                                                                >\n                                                                    Select All ({paginated.paginatedEmails.length})\n                                                                </Button>\n                                                            )}\n                                                        </HStack>\n\n                                                        <VStack spacing={4} align=\"stretch\">\n                                                            {paginated.paginatedEmails.map((email: any) => (\n                                                                <InboundEmailCard\n                                                                    key={email.id}\n                                                                    email={email}\n                                                                    onManageTags={handleManageTags}\n                                                                    onArchive={(id) => handleArchiveEmail(id, true)}\n                                                                    isSelected={selectedEmailIds.has(email.id)}\n                                                                    onSelectChange={handleEmailSelectionChange}\n                                                                />\n                                                            ))}\n                                                        </VStack>\n                                                        \n                                                        {/* Pagination Controls */}\n                                                        {paginated.totalPages > 1 && (\n                                                            <HStack justify=\"space-between\" mt={6} p={4} bg={cardGradientBg} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                                    Showing {((currentPages.archived - 1) * itemsPerPage) + 1}-{Math.min(currentPages.archived * itemsPerPage, paginated.totalCount)} of {paginated.totalCount} emails\n                                                                </Text>\n                                                                <HStack spacing={2}>\n                                                                    <IconButton\n                                                                        aria-label=\"Previous page\"\n                                                                        icon={<FiChevronLeft />}\n                                                                        size=\"sm\"\n                                                                        isDisabled={currentPages.archived === 1}\n                                                                        onClick={() => setCurrentPages(prev => ({ ...prev, archived: prev.archived - 1 }))}\n                                                                        variant=\"outline\"\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                        _hover={{ bg: cardGradientBg }}\n                                                                    />\n                                                                    \n                                                                    {/* Page numbers */}\n                                                                    {Array.from({ length: Math.min(5, paginated.totalPages) }, (_, i) => {\n                                                                        const pageNum = Math.max(1, Math.min(currentPages.archived - 2 + i, paginated.totalPages - 4)) + i;\n                                                                        if (pageNum > paginated.totalPages) return null;\n                                                                        return (\n                                                                            <Button\n                                                                                key={pageNum}\n                                                                                size=\"sm\"\n                                                                                onClick={() => setCurrentPages(prev => ({ ...prev, archived: pageNum }))}\n                                                                                variant={currentPages.archived === pageNum ? \"solid\" : \"outline\"}\n                                                                                bg={currentPages.archived === pageNum ? getColor('primaryBlue') : \"transparent\"}\n                                                                                color={currentPages.archived === pageNum ? \"white\" : textPrimary}\n                                                                                borderColor={cardBorder}\n                                                                                _hover={{ bg: currentPages.archived === pageNum ? getColor('primaryBlueHover') : cardGradientBg }}\n                                                                            >\n                                                                                {pageNum}\n                                                                            </Button>\n                                                                        );\n                                                                    }).filter(Boolean)}\n                                                                    \n                                                                    <IconButton\n                                                                        aria-label=\"Next page\"\n                                                                        icon={<FiChevronRight />}\n                                                                        size=\"sm\"\n                                                                        isDisabled={currentPages.archived === paginated.totalPages}\n                                                                        onClick={() => setCurrentPages(prev => ({ ...prev, archived: prev.archived + 1 }))}\n                                                                        variant=\"outline\"\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                        _hover={{ bg: cardGradientBg }}\n                                                                    />\n                                                                </HStack>\n                                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                                    Page {currentPages.archived} of {paginated.totalPages}\n                                                                </Text>\n                                                            </HStack>\n                                                        )}\n                                                    </>\n                                                );\n                                            } else if (filtered.length === 0 && archivedEmails?.inboundEmails?.length > 0) {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiSearch} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        No archived emails match your search criteria.\n                                                                    </Text>\n                                                                    <Button \n                                                                        variant=\"ghost\"\n                                                                        onClick={() => {\n                                                                            setSearchTerm('');\n                                                                            setDateFilter('all');\n                                                                            resetPagination();\n                                                                        }}\n                                                                        color={getColor('primaryBlue')}\n                                                                    >\n                                                                        Clear Filters\n                                                                    </Button>\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            } else {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiArchive} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        No archived emails yet.\n                                                                    </Text>\n                                                                    <Text color={textMuted} fontSize=\"sm\">\n                                                                        Archived emails will appear here after you archive them from your inbox.\n                                                                    </Text>\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            }\n                                        })()}\n                                    </>\n                                )}\n                            </TabPanel>\n\n                            {/* All Emails Panel - Fifth */}\n                            <TabPanel px={0}>\n                                {loadingAll ? (\n                                    <Center py={10}>\n                                        <Spinner size=\"xl\" color={getColor('primaryBlue')} />\n                                    </Center>\n                                ) : (\n                                    <>\n                                        {(() => {\n                                            const combined = [\n                                                ...(allEmails?.emails || []).map((e: any) => ({ ...e, isInbound: false })),\n                                                ...(allEmails?.inboundEmails || []).map((e: any) => ({ ...e, isInbound: true }))\n                                            ];\n                                            const filtered = filterEmails(combined);\n\n                                            if (filtered.length > 0) {\n                                                const sorted = filtered.sort((a, b) => {\n                                                    const dateA = new Date(a.isInbound ? a.date : (a.sentAt || a.createdAt));\n                                                    const dateB = new Date(b.isInbound ? b.date : (b.sentAt || b.createdAt));\n                                                    return dateB.getTime() - dateA.getTime();\n                                                });\n\n                                                // Apply pagination\n                                                const paginated = paginateEmails(sorted, currentPages.all);\n\n                                                return (\n                                                    <>\n                                                        <VStack spacing={4} align=\"stretch\">\n                                                            {paginated.paginatedEmails.map((email: any) => (\n                                                                <UnifiedEmailCard\n                                                                    key={`${email.isInbound ? 'inbound' : 'outbound'}-${email.id}`}\n                                                                    email={email}\n                                                                    isInbound={email.isInbound}\n                                                                    isSelected={selectedEmailId === email.id}\n                                                                    onSelect={setSelectedEmailId}\n                                                                />\n                                                            ))}\n                                                        </VStack>\n\n                                                        {/* Pagination Controls */}\n                                                        {paginated.totalPages > 1 && (\n                                                            <HStack justify=\"space-between\" mt={6} p={4} bg={cardGradientBg} borderRadius=\"lg\" border=\"1px solid\" borderColor={cardBorder}>\n                                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                                    Showing {((currentPages.all - 1) * itemsPerPage) + 1}-{Math.min(currentPages.all * itemsPerPage, paginated.totalCount)} of {paginated.totalCount} emails\n                                                                </Text>\n                                                                <HStack spacing={2}>\n                                                                    <IconButton\n                                                                        aria-label=\"Previous page\"\n                                                                        icon={<FiChevronLeft />}\n                                                                        size=\"sm\"\n                                                                        isDisabled={currentPages.all === 1}\n                                                                        onClick={() => setCurrentPages(prev => ({ ...prev, all: prev.all - 1 }))}\n                                                                        variant=\"outline\"\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                        _hover={{ bg: cardGradientBg }}\n                                                                    />\n\n                                                                    {/* Page numbers */}\n                                                                    {Array.from({ length: Math.min(5, paginated.totalPages) }, (_, i) => {\n                                                                        const pageNum = Math.max(1, Math.min(currentPages.all - 2 + i, paginated.totalPages - 4)) + i;\n                                                                        if (pageNum > paginated.totalPages) return null;\n                                                                        return (\n                                                                            <Button\n                                                                                key={pageNum}\n                                                                                size=\"sm\"\n                                                                                onClick={() => setCurrentPages(prev => ({ ...prev, all: pageNum }))}\n                                                                                variant={currentPages.all === pageNum ? \"solid\" : \"outline\"}\n                                                                                bg={currentPages.all === pageNum ? getColor('primaryBlue') : \"transparent\"}\n                                                                                color={currentPages.all === pageNum ? \"white\" : textPrimary}\n                                                                                borderColor={cardBorder}\n                                                                                _hover={{ bg: currentPages.all === pageNum ? getColor('primaryBlueHover') : cardGradientBg }}\n                                                                            >\n                                                                                {pageNum}\n                                                                            </Button>\n                                                                        );\n                                                                    })}\n\n                                                                    <IconButton\n                                                                        aria-label=\"Next page\"\n                                                                        icon={<FiChevronRight />}\n                                                                        size=\"sm\"\n                                                                        isDisabled={currentPages.all === paginated.totalPages}\n                                                                        onClick={() => setCurrentPages(prev => ({ ...prev, all: prev.all + 1 }))}\n                                                                        variant=\"outline\"\n                                                                        borderColor={cardBorder}\n                                                                        color={textPrimary}\n                                                                        _hover={{ bg: cardGradientBg }}\n                                                                    />\n                                                                </HStack>\n                                                                <Text fontSize=\"sm\" color={textMuted}>\n                                                                    Page {currentPages.all} of {paginated.totalPages}\n                                                                </Text>\n                                                            </HStack>\n                                                        )}\n                                                    </>\n                                                );\n                                            } else if (combined.length > 0) {\n                                                return (\n                                                    <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                        <CardBody>\n                                                            <Center py={10}>\n                                                                <VStack spacing={4}>\n                                                                    <Icon as={FiSearch} boxSize={12} color={textMuted} />\n                                                                    <Text color={textMuted} fontSize=\"lg\">\n                                                                        No emails match your search criteria.\n                                                                    </Text>\n                                                                    <Button\n                                                                        variant=\"ghost\"\n                                                                        onClick={() => {\n                                                                            setSearchTerm('');\n                                                                            setDateFilter('all');\n                                                                        }}\n                                                                        color={getColor('primaryBlue')}\n                                                                    >\n                                                                        Clear Filters\n                                                                    </Button>\n                                                                </VStack>\n                                                            </Center>\n                                                        </CardBody>\n                                                    </Card>\n                                                );\n                                            } else {\n                                                return null;\n                                            }\n                                        })() || (\n                                            <Card bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                                                <CardBody>\n                                                    <Center py={10}>\n                                                        <VStack spacing={4}>\n                                                            <Icon as={FiMail} boxSize={12} color={textMuted} />\n                                                            <Text color={textMuted} fontSize=\"lg\">\n                                                                No emails found. Create your first email to get started.\n                                                            </Text>\n                                                            <Button\n                                                                colorScheme=\"blue\"\n                                                                onClick={() => navigate('/emails/new')}\n                                                                bg={getColor('primaryBlue')}\n                                                                _hover={{ bg: getColor('primaryBlueHover') }}\n                                                            >\n                                                                Compose Your First Email\n                                                            </Button>\n                                                        </VStack>\n                                                    </Center>\n                                                </CardBody>\n                                            </Card>\n                                        )}\n                                    </>\n                                )}\n                            </TabPanel>\n                        </TabPanels>\n                    </Tabs>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n\n            <AlertDialog\n                isOpen={isOpen}\n                leastDestructiveRef={cancelRef}\n                onClose={onClose}\n            >\n                <AlertDialogOverlay>\n                    <AlertDialogContent bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                        <AlertDialogHeader fontSize='lg' fontWeight='bold' color={textPrimary}>\n                            Delete Email\n                        </AlertDialogHeader>\n\n                        <AlertDialogBody color={textSecondary}>\n                            Are you sure you want to delete this email? This action cannot be undone.\n                        </AlertDialogBody>\n\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={onClose} variant=\"ghost\">\n                                Cancel\n                            </Button>\n                            <Button colorScheme='red' onClick={handleDelete} ml={3}>\n                                Delete\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n\n            <Modal isOpen={isLabelPopoverOpen} onClose={onLabelPopoverClose} size=\"md\">\n                <ModalOverlay bg=\"blackAlpha.800\" backdropFilter=\"blur(5px)\" />\n                <ModalContent bg={cardGradientBg} border=\"1px solid\" borderColor={cardBorder}>\n                    <ModalHeader color={textPrimary}>\n                        Manage Tags for Email\n                    </ModalHeader>\n                    <ModalCloseButton color={textMuted} />\n                    <ModalBody>\n                        <VStack spacing={4} align=\"stretch\">\n                            {currentEmailForLabeling && (\n                                <>\n                                    <Text fontSize=\"sm\" color={textSecondary} noOfLines={2}>\n                                        <strong>Subject:</strong> {currentEmailForLabeling.subject}\n                                    </Text>\n                                    \n                                    {currentEmailForLabeling.labels && currentEmailForLabeling.labels.length > 0 && (\n                                        <Box>\n                                            <Text fontSize=\"sm\" color={textMuted} mb={2}>Current tags:</Text>\n                                            <Wrap spacing={2}>\n                                                {currentEmailForLabeling.labels.map((label: string) => (\n                                                    <WrapItem key={label}>\n                                                        <Tag\n                                                            size=\"md\"\n                                                            bg=\"rgba(168, 85, 247, 0.2)\"\n                                                            color=\"#A855F7\"\n                                                            border=\"1px solid\"\n                                                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                                                        >\n                                                            <TagLabel>{label}</TagLabel>\n                                                            <TagCloseButton \n                                                                onClick={() => handleRemoveLabel(label)}\n                                                            />\n                                                        </Tag>\n                                                    </WrapItem>\n                                                ))}\n                                            </Wrap>\n                                        </Box>\n                                    )}\n                                    \n                                    <Box>\n                                        <Text fontSize=\"sm\" color={textMuted} mb={2}>Add new tag:</Text>\n                                        <HStack>\n                                            <Input\n                                                value={newLabel}\n                                                onChange={(e) => setNewLabel(e.target.value)}\n                                                placeholder=\"Enter tag name\"\n                                                size=\"sm\"\n                                                bg={bg}\n                                                color={textPrimary}\n                                                borderColor={cardBorder}\n                                                _placeholder={{ color: textMuted }}\n                                                onKeyPress={(e) => {\n                                                    if (e.key === 'Enter') {\n                                                        handleAddLabel();\n                                                    }\n                                                }}\n                                            />\n                                            <Button\n                                                size=\"sm\"\n                                                onClick={handleAddLabel}\n                                                bg={getColor('primaryBlue')}\n                                                color=\"white\"\n                                                _hover={{ bg: getColor('primaryBlueHover') }}\n                                                isDisabled={!newLabel.trim()}\n                                            >\n                                                Add\n                                            </Button>\n                                        </HStack>\n                                    </Box>\n                                    \n                                    {availableLabelsData?.availableInboundEmailLabels && availableLabelsData.availableInboundEmailLabels.length > 0 && (\n                                        <Box>\n                                            <Text fontSize=\"sm\" color={textMuted} mb={2}>Quick add from existing tags:</Text>\n                                            <Wrap spacing={2}>\n                                                {availableLabelsData.availableInboundEmailLabels\n                                                    .filter((label: string) => \n                                                        !currentEmailForLabeling.labels?.includes(label)\n                                                    )\n                                                    .map((label: string) => (\n                                                        <WrapItem key={label}>\n                                                            <Tag\n                                                                size=\"sm\"\n                                                                cursor=\"pointer\"\n                                                                bg={cardBorder}\n                                                                color={textSecondary}\n                                                                _hover={{ \n                                                                    bg: \"rgba(168, 85, 247, 0.2)\",\n                                                                    color: \"#A855F7\"\n                                                                }}\n                                                                onClick={() => {\n                                                                    setNewLabel(label);\n                                                                    handleAddLabel();\n                                                                }}\n                                                            >\n                                                                <TagLabel>{label}</TagLabel>\n                                                            </Tag>\n                                                        </WrapItem>\n                                                    ))}\n                                            </Wrap>\n                                        </Box>\n                                    )}\n                                </>\n                            )}\n                        </VStack>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"ghost\" onClick={onLabelPopoverClose} color={textMuted}>\n                            Done\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </Box>\n    );\n};\n\nexport default EmailsList;"],"names":["MY_EMAIL_ACCOUNTS_QUERY","gql","_templateObject","_taggedTemplateLiteral","ME_WITH_EMAIL_QUERY","MY_EMAIL_ADDRESSES_QUERY","_templateObject2","INBOUND_EMAILS_BY_ADDRESS_QUERY","_templateObject3","INBOUND_EMAILS_ONLY_QUERY","_templateObject4","OUTBOUND_EMAILS_ONLY_QUERY","_templateObject5","DRAFT_EMAILS_QUERY","_templateObject6","SENT_EMAILS_QUERY","_templateObject7","INBOUND_EMAILS_QUERY","_templateObject8","UNREAD_COUNT_QUERY","_templateObject9","ADD_EMAIL_LABEL_MUTATION","_templateObject0","REMOVE_EMAIL_LABEL_MUTATION","_templateObject1","AVAILABLE_LABELS_QUERY","_templateObject10","DELETE_EMAIL_MUTATION","_templateObject11","DUPLICATE_EMAIL_MUTATION","_templateObject12","ARCHIVE_INBOUND_EMAIL_MUTATION","_templateObject13","UNARCHIVE_INBOUND_EMAIL_MUTATION","_templateObject14","ARCHIVE_MULTIPLE_EMAILS_MUTATION","_templateObject15","UNARCHIVE_MULTIPLE_EMAILS_MUTATION","_templateObject16","InboundEmailCard","_ref","email","onArchive","onManageTags","isSelected","onSelectChange","navigate","useNavigate","colorMode","useToast","useColorMode","cardGradientBg","getColor","cardBorder","textPrimary","textSecondary","textMuted","selectedBg","useColorModeValue","_jsx","Card","bg","border","borderColor","isRead","borderRadius","overflow","mx","base","md","transition","_hover","transform","boxShadow","getComponent","cursor","onClick","e","target","closest","concat","id","opacity","position","children","CardBody","p","_jsxs","VStack","align","spacing","HStack","justify","Box","className","stopPropagation","Checkbox","isChecked","onChange","checked","size","colorScheme","flex","Badge","isStarred","Icon","as","FiStar","color","attachments","length","FiPaperclip","boxSize","Text","fontSize","tasks","totalTasks","completedTasks","filter","t","status","hasPendingTasks","hasUrgentTasks","some","priority","hasOverdueTasks","dueDate","Date","Tooltip","label","placement","FiAlertCircle","FiCheckCircle","fontWeight","variant","Heading","noOfLines","subject","labels","Wrap","mt","map","WrapItem","Tag","TagLabel","fromFull","from","Array","isArray","to","join","display","formatDistanceToNow","date","addSuffix","px","py","hasArrow","IconButton","icon","FiTag","folder","FiArchive","textBody","progressPercentage","mb","sm","Progress","value","UnifiedEmailCard","_ref2","_email$htmlBody","isInbound","onSelect","getStatusColor","DRAFT","SENT","FAILED","SCHEDULED","INBOUND","emailDate","sentAt","createdAt","emailStatus","selectedHoverBg","handleClick","width","FiInbox","FiSend","htmlBody","replace","lg","FiEye","opens","clicks","EmailsList","_emailAddressesData$m","_emailAddressesData$m2","_availableLabelsData$","usePageTitle","toast","isOpen","onOpen","onClose","useDisclosure","isFilterOpen","onToggle","onFilterToggle","deleteEmailId","setDeleteEmailId","useState","cancelRef","React","selectedEmailAddress","setSelectedEmailAddress","activeInboxTab","setActiveInboxTab","selectedEmailId","setSelectedEmailId","selectedEmailIds","setSelectedEmailIds","Set","activeMainTab","setActiveMainTab","hasEmailAccounts","loading","loadingEmailAccounts","_data$myEmailAddresse","data","error","useQuery","fetchPolicy","console","log","message","errorDetails","emailAddresses","myEmailAddresses","count","hasAssigned","hasAssignedEmailAddress","emailAccounts","defaultAccount","useEmailAccounts","emailAddressesData","loadingEmailAddresses","refetch","refetchEmailAddresses","emailAddressesError","myAccessibleEmailAddresses","JSON","stringify","addresses","firstAddress","secondAddress","meData","loadingMe","refetchMe","useEffect","personalEmail","find","type","index","indexOf","firstEmail","window","location","hostname","hasData","me","user","fName","lName","searchTerm","setSearchTerm","dateFilter","setDateFilter","customStartDate","setCustomStartDate","customEndDate","setCustomEndDate","itemsPerPage","setItemsPerPage","selectedLabels","setSelectedLabels","newLabel","setNewLabel","currentEmailForLabeling","setCurrentEmailForLabeling","isLabelPopoverOpen","onLabelPopoverOpen","onLabelPopoverClose","currentPages","setCurrentPages","inbox","sent","drafts","all","archived","inboundEmailsData","loadingInboundOnly","refetchInboundOnly","inboundError","variables","emailAddress","limit","offset","skip","onCompleted","_data$emailInboxPagin","_data$emailInboxPagin2","emails","emailInboxPaginated","inboundEmails","totalCount","currentPage","totalPages","hasMore","onError","graphQLErrors","shouldLoadOutbound","setShouldLoadOutbound","outboundEmailsData","loadingOutbound","refetchOutbound","allEmails","useMemo","_inboundEmailsData$em","loadingAll","refetchAll","draftEmails","loadingDrafts","refetchDrafts","sentEmails","loadingSent","refetchSent","loadingInbound","refetchInbound","archivedEmails","loadingArchived","refetchArchived","unreadCount","availableLabelsData","addLabel","useMutation","title","duration","removeLabel","deleteEmail","isClosable","description","archiveMultipleEmails","archiveMultipleInboundEmails","unarchiveMultipleEmails","unarchiveMultipleInboundEmails","duplicateEmail","handleManageTags","handleAddLabel","async","emailId","archiveEmail","unarchiveEmail","filterEmails","filtered","search","toLowerCase","body","includes","now","startDate","endDate","setHours","setDate","getDate","subWeeks","subDays","getFullYear","getMonth","isWithinInterval","start","end","paginateEmails","page","startIndex","endIndex","paginatedEmails","slice","Math","ceil","resetPagination","handleArchiveEmail","arguments","undefined","handleEmailSelectionChange","selected","newSelection","add","delete","handleSelectAll","allIds","handleUnselectAll","handleMassArchive","ids","handleMassUnarchive","minH","flexDirection","overflowX","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","emailsModuleConfig","Container","maxW","justifyContent","Button","Spinner","isIndeterminate","_dark","FiAlertTriangle","Tabs","displayName","recordId","prev","_objectSpread","TabList","flexWrap","sx","emailAddr","_index","_emailAddr$recordId","startsWith","Tab","InputGroup","InputLeftElement","pointerEvents","FiSearch","Input","placeholder","_placeholder","_focus","Select","Number","leftIcon","FiFilter","Collapse","in","animateOpacity","availableInboundEmailLabels","l","TagCloseButton","FiCalendar","format","whiteSpace","_selected","split","_emailAddressesData$m3","_emailAddressesData$m4","unreadCountToShow","unreadInboundEmailCount","TabPanels","TabPanel","Center","_Fragment","_inboundEmailsData$em2","_inboundEmailsData$em3","_inboundEmailsData$em4","_inboundEmails$inboun","emailData","ButtonGroup","has","min","FiChevronLeft","isDisabled","_","i","pageNum","max","Boolean","FiChevronRight","textAlign","_sentEmails$emailsSen","emailsSent","_draftEmails$emailsDr","emailsDraft","FiEdit","_archivedEmails$inbou","paginated","combined","sorted","sort","a","b","dateA","getTime","FiMail","FooterWithFourColumns","AlertDialog","leastDestructiveRef","AlertDialogOverlay","AlertDialogContent","AlertDialogHeader","AlertDialogBody","AlertDialogFooter","ref","handleDelete","ml","Modal","ModalOverlay","backdropFilter","ModalContent","ModalHeader","ModalCloseButton","ModalBody","handleRemoveLabel","onKeyPress","key","trim","_currentEmailForLabel","ModalFooter"],"sourceRoot":""}