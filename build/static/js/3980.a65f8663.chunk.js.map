{"version":3,"file":"static/js/3980.a65f8663.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/dist/esm/ViewOff.mjs","pages/passwords/MyPasswords.tsx"],"sourcesContent":["import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" })\n  ] })\n});\n\nexport { ViewOffIcon };\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Table,\n    Thead,\n    Tbody,\n    Tr,\n    Th,\n    Td,\n    Text,\n    Card,\n    CardBody,\n    Spinner,\n    Alert,\n    AlertIcon,\n    Button,\n    Input,\n    InputGroup,\n    InputLeftElement,\n    HStack,\n    VStack,\n    Badge,\n    IconButton,\n    useToast,\n    Tooltip,\n    useClipboard,\n    Icon,\n    useColorMode\n} from \"@chakra-ui/react\";\nimport { SearchIcon, ViewIcon, ViewOffIcon, CopyIcon, ExternalLinkIcon, LockIcon } from \"@chakra-ui/icons\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport passwordsModuleConfig from \"./moduleConfig\";\nimport { format } from \"date-fns\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { Password } from \"../../generated/graphql\";\n\nconst GET_MY_PASSWORDS = gql`\n    query GetMyPasswords {\n        myPasswords {\n            id\n            serviceName\n            loginUrl\n            dashboardUrl\n            username\n            email\n            password\n            twoFactorSecret\n            twoFactorBackupCodes\n            notes\n            isActive\n            expiresAt\n            createdAt\n            createdBy {\n                id\n                fName\n                lName\n            }\n            company {\n                id\n                name\n            }\n            sharedWithEmployees\n            sharedWithExternal\n        }\n    }\n`;\n\n\nconst MyPasswords: React.FC = () => {\n    usePageTitle(\"My Passwords\");\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [showPasswords, setShowPasswords] = useState<{ [key: string]: boolean }>({});\n    \n    // Brand styling\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n    const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n    const primaryColor = getColor(\"primary\", colorMode);\n    const primaryHover = getColor(\"primaryHover\", colorMode);\n    const successGreen = getColor(\"successGreen\", colorMode);\n    const errorRed = getColor(\"status.error\", colorMode);\n    const warningColor = getColor(\"status.warning\", colorMode);\n\n    const { data, loading, error } = useQuery(GET_MY_PASSWORDS);\n\n    const togglePasswordVisibility = (passwordId: string) => {\n        setShowPasswords(prev => ({\n            ...prev,\n            [passwordId]: !prev[passwordId]\n        }));\n    };\n\n    const copyToClipboard = (text: string, label: string) => {\n        navigator.clipboard.writeText(text);\n        toast({\n            title: `${label} copied`,\n            status: \"success\",\n            duration: 2000,\n            isClosable: true,\n        });\n    };\n\n    const openPasswordDetails = (passwordId: string) => {\n        navigate(`/passwords/${passwordId}`);\n    };\n\n    const filteredPasswords = data?.myPasswords?.filter((password: Password) =>\n        password.serviceName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        password.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        password.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    const isExpired = (expiresAt?: string) => {\n        if (!expiresAt) return false;\n        return new Date(expiresAt) < new Date();\n    };\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={passwordsModuleConfig} />\n\n            <Container maxW={{ base: \"container.sm\", lg: \"container.xl\" }} px={{ base: 4, md: 8 }} py={{ base: 6, md: 8 }} flex=\"1\">\n                <VStack spacing={{ base: 4, md: 6 }} align=\"stretch\">\n                    <VStack spacing={4} align=\"stretch\">\n                        <VStack align=\"start\" spacing={2}>\n                            <Heading \n                                color={textPrimary} \n                                fontFamily={brandConfig.fonts.heading}\n                                size={{ base: \"md\", md: \"lg\" }}\n                            >\n                                My Passwords\n                            </Heading>\n                            <Badge \n                                colorScheme=\"purple\" \n                                fontSize={{ base: \"sm\", md: \"md\" }}\n                                px={3} \n                                py={1}\n                                borderRadius=\"md\"\n                            >\n                                {filteredPasswords?.length || 0} Passwords\n                            </Badge>\n                        </VStack>\n                    </VStack>\n\n                    <InputGroup maxW={{ base: \"100%\", md: \"400px\" }}>\n                        <InputLeftElement pointerEvents=\"none\">\n                            <SearchIcon color={textMuted} />\n                        </InputLeftElement>\n                        <Input\n                            placeholder=\"Search passwords...\"\n                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                            borderColor={cardBorder}\n                            color={textPrimary}\n                            _placeholder={{ color: textMuted }}\n                            value={searchTerm}\n                            onChange={(e) => setSearchTerm(e.target.value)}\n                        />\n                    </InputGroup>\n\n                    {loading && (\n                        <Box textAlign=\"center\" py={8}>\n                            <Spinner size=\"xl\" color={primaryColor} />\n                        </Box>\n                    )}\n\n                    {error && (\n                        <Alert status=\"error\" borderRadius=\"md\">\n                            <AlertIcon />\n                            Error loading passwords: {error.message}\n                        </Alert>\n                    )}\n                    \n                    {data && (\n                        <Card\n                            bg={cardGradientBg}\n                            backdropFilter=\"blur(10px)\"\n                            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                            border=\"1px\"\n                            borderColor={cardBorder}\n                            borderRadius=\"lg\"\n                            overflow=\"hidden\"\n                        >\n                            <CardBody p={0}>\n                                <Box overflowX=\"auto\" width=\"100%\">\n                                    <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\" }} minWidth=\"800px\">\n                                        <Thead position=\"sticky\" top={0} bg={cardGradientBg}>\n                                            <Tr borderBottom=\"1px\" borderColor={cardBorder}>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"140px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Service</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"140px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", md: \"table-cell\" }}>Login Info</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"120px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Password</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"100px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }} display={{ base: \"none\", lg: \"table-cell\" }}>Status</Th>\n                                                <Th color={textMuted} borderColor={cardBorder} minW=\"100px\" px={{ base: 2, md: 4 }} fontSize={{ base: \"xs\", md: \"sm\" }}>Actions</Th>\n                                            </Tr>\n                                        </Thead>\n                                        <Tbody>\n                                            {filteredPasswords?.map((password: Password) => (\n                                                <Tr \n                                                    key={password.id}\n                                                    _hover={{ bg: \"rgba(255, 255, 255, 0.02)\" }}\n                                                    borderBottom=\"1px\"\n                                                    borderColor={cardBorder}\n                                                >\n                                                    <Td borderColor={cardBorder} px={{ base: 2, md: 4 }}>\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            <Text color={textPrimary} fontWeight=\"bold\" fontSize={{ base: \"xs\", md: \"sm\" }}>\n                                                                {password.serviceName}\n                                                            </Text>\n                                                            <HStack spacing={1}>\n                                                                <Tooltip label=\"Go to login page\">\n                                                                    <IconButton\n                                                                        size=\"xs\"\n                                                                        variant=\"ghost\"\n                                                                        aria-label=\"Login\"\n                                                                        icon={<ExternalLinkIcon />}\n                                                                        onClick={() => window.open(password.loginUrl || '', '_blank')}\n                                                                        color={primaryColor}\n                                                                        minW=\"32px\"\n                                                                        minH=\"32px\"\n                                                                    />\n                                                                </Tooltip>\n                                                                {password.dashboardUrl && (\n                                                                    <Tooltip label=\"Go to dashboard\">\n                                                                        <IconButton\n                                                                            size=\"xs\"\n                                                                            variant=\"ghost\"\n                                                                            aria-label=\"Dashboard\"\n                                                                            icon={<Icon as={ExternalLinkIcon} />}\n                                                                            onClick={() => window.open(password.dashboardUrl || '', '_blank')}\n                                                                            color={successGreen}\n                                                                            minW=\"32px\"\n                                                                            minH=\"32px\"\n                                                                        />\n                                                                    </Tooltip>\n                                                                )}\n                                                            </HStack>\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td borderColor={cardBorder} px={{ base: 2, md: 4 }} display={{ base: \"none\", md: \"table-cell\" }}>\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            {password.email && (\n                                                                <HStack>\n                                                                    <Text color={textSecondary} fontSize=\"xs\" noOfLines={1}>\n                                                                        {password.email}\n                                                                    </Text>\n                                                                    <IconButton\n                                                                        size=\"xs\"\n                                                                        variant=\"ghost\"\n                                                                        aria-label=\"Copy email\"\n                                                                        icon={<CopyIcon />}\n                                                                        onClick={() => copyToClipboard(password.email!, \"Email\")}\n                                                                        minW=\"32px\"\n                                                                        minH=\"32px\"\n                                                                    />\n                                                                </HStack>\n                                                            )}\n                                                            {password.username && (\n                                                                <HStack>\n                                                                    <Text color={textSecondary} fontSize=\"xs\" noOfLines={1}>\n                                                                        {password.username}\n                                                                    </Text>\n                                                                    <IconButton\n                                                                        size=\"xs\"\n                                                                        variant=\"ghost\"\n                                                                        aria-label=\"Copy username\"\n                                                                        icon={<CopyIcon />}\n                                                                        onClick={() => copyToClipboard(password.username!, \"Username\")}\n                                                                        minW=\"32px\"\n                                                                        minH=\"32px\"\n                                                                    />\n                                                                </HStack>\n                                                            )}\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td borderColor={cardBorder} px={{ base: 2, md: 4 }}>\n                                                        <VStack spacing={1}>\n                                                            <Text color={textPrimary} fontFamily=\"mono\" fontSize={{ base: \"xs\", md: \"sm\" }}>\n                                                                {showPasswords[password.id] \n                                                                    ? password.password \n                                                                    : \"••••••••\"}\n                                                            </Text>\n                                                            <HStack spacing={1}>\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Toggle password\"\n                                                                    icon={showPasswords[password.id] ? <ViewOffIcon /> : <ViewIcon />}\n                                                                    onClick={() => togglePasswordVisibility(password.id)}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                                <IconButton\n                                                                    size=\"xs\"\n                                                                    variant=\"ghost\"\n                                                                    aria-label=\"Copy password\"\n                                                                    icon={<CopyIcon />}\n                                                                    onClick={() => copyToClipboard(password.password, \"Password\")}\n                                                                    minW=\"32px\"\n                                                                    minH=\"32px\"\n                                                                />\n                                                            </HStack>\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td borderColor={cardBorder} px={{ base: 2, md: 4 }} display={{ base: \"none\", lg: \"table-cell\" }}>\n                                                        <VStack align=\"start\" spacing={1}>\n                                                            {password.expiresAt && (\n                                                                <Badge \n                                                                    colorScheme={isExpired(password.expiresAt) ? \"red\" : \"green\"}\n                                                                    fontSize=\"xs\"\n                                                                >\n                                                                    {isExpired(password.expiresAt) \n                                                                        ? \"Expired\" \n                                                                        : `Expires ${format(new Date(password.expiresAt), \"MMM dd, yyyy\")}`}\n                                                                </Badge>\n                                                            )}\n                                                            {password.twoFactorSecret && (\n                                                                <Badge colorScheme=\"blue\" fontSize=\"xs\">\n                                                                    2FA Enabled\n                                                                </Badge>\n                                                            )}\n                                                        </VStack>\n                                                    </Td>\n                                                    <Td borderColor={cardBorder} px={{ base: 2, md: 4 }}>\n                                                        <Button\n                                                            size={{ base: \"xs\", md: \"sm\" }}\n                                                            bg={primaryColor}\n                                                            color=\"white\"\n                                                            _hover={{ bg: primaryHover }}\n                                                            onClick={() => openPasswordDetails(password.id)}\n                                                            leftIcon={<LockIcon />}\n                                                            width={{ base: \"100%\", md: \"auto\" }}\n                                                            minW={{ md: \"100px\" }}\n                                                            fontSize={{ base: \"xs\", md: \"sm\" }}\n                                                        >\n                                                            Details\n                                                        </Button>\n                                                    </Td>\n                                                </Tr>\n                                            ))}\n                                        </Tbody>\n                                    </Table>\n                                </Box>\n                                {filteredPasswords?.length === 0 && (\n                                    <Box textAlign=\"center\" py={8}>\n                                        <Text color={textMuted}>No passwords found</Text>\n                                    </Box>\n                                )}\n                            </CardBody>\n                        </Card>\n                    )}\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default MyPasswords;"],"names":["ViewOffIcon","createIcon","displayName","path","jsxs","fill","children","jsx","d","GET_MY_PASSWORDS","gql","_templateObject","_taggedTemplateLiteral","MyPasswords","_data$myPasswords","usePageTitle","navigate","useNavigate","toast","useToast","colorMode","useColorMode","searchTerm","setSearchTerm","useState","showPasswords","setShowPasswords","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","successGreen","data","loading","error","useQuery","copyToClipboard","text","label","navigator","clipboard","writeText","title","concat","status","duration","isClosable","filteredPasswords","myPasswords","filter","password","_password$username","_password$email","serviceName","toLowerCase","includes","username","email","isExpired","expiresAt","Date","_jsxs","Box","bg","minH","display","flexDirection","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","passwordsModuleConfig","Container","maxW","base","lg","px","md","py","flex","VStack","spacing","align","Heading","color","fontFamily","brandConfig","fonts","heading","size","Badge","colorScheme","fontSize","borderRadius","length","InputGroup","InputLeftElement","pointerEvents","SearchIcon","Input","placeholder","borderColor","_placeholder","value","onChange","e","target","textAlign","Spinner","Alert","AlertIcon","message","Card","backdropFilter","boxShadow","border","overflow","CardBody","p","overflowX","width","Table","variant","minWidth","Thead","position","top","Tr","borderBottom","Th","minW","Tbody","map","_hover","Td","Text","fontWeight","HStack","Tooltip","IconButton","icon","ExternalLinkIcon","onClick","window","open","loginUrl","dashboardUrl","Icon","as","noOfLines","CopyIcon","id","ViewIcon","togglePasswordVisibility","passwordId","prev","_objectSpread","format","twoFactorSecret","Button","openPasswordDetails","leftIcon","LockIcon","FooterWithFourColumns"],"sourceRoot":""}