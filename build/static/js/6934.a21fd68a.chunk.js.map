{"version":3,"file":"static/js/6934.a21fd68a.chunk.js","mappings":"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","sources":["components/opportunities/OpportunityTasks.tsx","components/opportunities/OpportunityMeetings.tsx","components/opportunities/OpportunityNotes.tsx","pages/opportunities/OpportunityMembers.tsx","pages/opportunities/PaymentSplits.tsx","pages/opportunities/OpportunityDetail.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Button,\n  Badge,\n  IconButton,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  Checkbox,\n  Spinner,\n} from '@chakra-ui/react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiPlus, FiEdit, FiTrash2, FiCheck, FiClock, FiAlertCircle, FiCalendar } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport { getColor } from \"../../brandConfig\";\n\n// GraphQL Queries and Mutations\nconst GET_OPPORTUNITY_TASKS = gql`\n  query GetOpportunityTasks($opportunityId: String!) {\n    opportunityTasks(opportunityId: $opportunityId) {\n      id\n      title\n      description\n      type\n      priority\n      status\n      dueDate\n      assignedTo\n      assignedToName\n      notes\n      isBlocking\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst CREATE_OPPORTUNITY_TASK = gql`\n  mutation CreateOpportunityTask($input: OpportunityTaskInput!) {\n    createOpportunityTask(input: $input) {\n      id\n      title\n      status\n    }\n  }\n`;\n\nconst UPDATE_OPPORTUNITY_TASK = gql`\n  mutation UpdateOpportunityTask($id: String!, $input: OpportunityTaskUpdateInput!) {\n    updateOpportunityTask(id: $id, input: $input) {\n      id\n      title\n      status\n    }\n  }\n`;\n\nconst DELETE_OPPORTUNITY_TASK = gql`\n  mutation DeleteOpportunityTask($id: String!) {\n    deleteOpportunityTask(id: $id)\n  }\n`;\n\ninterface OpportunityTasksProps {\n  opportunityId: string;\n}\n\nexport const OpportunityTasks: React.FC<OpportunityTasksProps> = ({ opportunityId }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'OTHER',\n    priority: 'MEDIUM',\n    dueDate: '',\n    assignedTo: '',\n    notes: '',\n    isBlocking: false,\n  });\n\n  const toast = useToast();\n\n  // Color scheme\n  const primaryColor = getColor(\"blue.500\");\n  const cardBorder = \"rgba(255, 255, 255, 0.1)\";\n  const textPrimary = \"white\";\n  const textMuted = \"gray.400\";\n  const cardGradientBg = \"linear-gradient(135deg, rgba(31, 37, 89, 0.8) 0%, rgba(17, 21, 51, 0.8) 100%)\";\n\n  // Queries\n  const { loading, data, refetch } = useQuery(GET_OPPORTUNITY_TASKS, {\n    variables: { opportunityId },\n  });\n\n  // Mutations\n  const [createTask] = useMutation(CREATE_OPPORTUNITY_TASK, {\n    onCompleted: () => {\n      toast({\n        title: 'Task created',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating task',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [updateTask] = useMutation(UPDATE_OPPORTUNITY_TASK, {\n    onCompleted: () => {\n      toast({\n        title: 'Task updated',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating task',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [deleteTask] = useMutation(DELETE_OPPORTUNITY_TASK, {\n    onCompleted: () => {\n      toast({\n        title: 'Task deleted',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting task',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const handleOpenModal = (task?: any) => {\n    if (task) {\n      setEditingTask(task);\n      setFormData({\n        title: task.title,\n        description: task.description || '',\n        type: task.type,\n        priority: task.priority,\n        dueDate: task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '',\n        assignedTo: task.assignedTo || '',\n        notes: task.notes || '',\n        isBlocking: task.isBlocking || false,\n      });\n    } else {\n      setEditingTask(null);\n      setFormData({\n        title: '',\n        description: '',\n        type: 'OTHER',\n        priority: 'MEDIUM',\n        dueDate: '',\n        assignedTo: '',\n        notes: '',\n        isBlocking: false,\n      });\n    }\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingTask(null);\n  };\n\n  const handleSaveTask = async () => {\n    const input: any = {\n      ...formData,\n      opportunityId,\n    };\n\n    if (formData.dueDate) {\n      input.dueDate = new Date(formData.dueDate);\n    }\n\n    if (editingTask) {\n      await updateTask({\n        variables: {\n          id: editingTask.id,\n          input: {\n            ...formData,\n            dueDate: formData.dueDate ? new Date(formData.dueDate) : null,\n          },\n        },\n      });\n    } else {\n      await createTask({\n        variables: { input },\n      });\n    }\n  };\n\n  const handleDeleteTask = async (taskId: string) => {\n    if (window.confirm('Are you sure you want to delete this task?')) {\n      await deleteTask({\n        variables: { id: taskId },\n      });\n    }\n  };\n\n  const handleStatusChange = async (taskId: string, newStatus: string) => {\n    await updateTask({\n      variables: {\n        id: taskId,\n        input: { status: newStatus },\n      },\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'URGENT': return 'red';\n      case 'HIGH': return 'orange';\n      case 'MEDIUM': return 'yellow';\n      case 'LOW': return 'green';\n      default: return 'gray';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'COMPLETED': return 'green';\n      case 'IN_PROGRESS': return 'blue';\n      case 'PENDING': return 'gray';\n      case 'CANCELLED': return 'red';\n      case 'DEFERRED': return 'purple';\n      default: return 'gray';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" py={8}>\n        <Spinner size=\"xl\" color={primaryColor} />\n      </Box>\n    );\n  }\n\n  const tasks = data?.opportunityTasks || [];\n\n  return (\n    <Box>\n      <HStack justify=\"space-between\" mb={4}>\n        <Text fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n          Tasks ({tasks.length})\n        </Text>\n        <Button\n          leftIcon={<FiPlus />}\n          onClick={() => handleOpenModal()}\n          size=\"sm\"\n          bg={primaryColor}\n          color=\"white\"\n          _hover={{ opacity: 0.8 }}\n        >\n          Add Task\n        </Button>\n      </HStack>\n\n      <VStack spacing={3} align=\"stretch\">\n        {tasks.length === 0 ? (\n          <Text color={textMuted} textAlign=\"center\" py={4}>\n            No tasks yet. Create your first task to track activities for this opportunity.\n          </Text>\n        ) : (\n          tasks.map((task: any) => (\n            <Box\n              key={task.id}\n              p={4}\n              bg={cardGradientBg}\n              borderRadius=\"md\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <HStack justify=\"space-between\" mb={2}>\n                <HStack spacing={3}>\n                  <IconButton\n                    aria-label=\"Complete task\"\n                    icon={<FiCheck />}\n                    size=\"sm\"\n                    variant={task.status === 'COMPLETED' ? 'solid' : 'outline'}\n                    colorScheme={task.status === 'COMPLETED' ? 'green' : 'gray'}\n                    onClick={() => handleStatusChange(task.id, task.status === 'COMPLETED' ? 'PENDING' : 'COMPLETED')}\n                  />\n                  <VStack align=\"start\" spacing={0}>\n                    <Text fontWeight=\"bold\" color={textPrimary}>\n                      {task.title}\n                    </Text>\n                    {task.description && (\n                      <Text fontSize=\"sm\" color={textMuted}>\n                        {task.description}\n                      </Text>\n                    )}\n                  </VStack>\n                </HStack>\n                <HStack>\n                  <IconButton\n                    aria-label=\"Edit task\"\n                    icon={<FiEdit />}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    color={textMuted}\n                    onClick={() => handleOpenModal(task)}\n                  />\n                  <IconButton\n                    aria-label=\"Delete task\"\n                    icon={<FiTrash2 />}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    color=\"red.400\"\n                    onClick={() => handleDeleteTask(task.id)}\n                  />\n                </HStack>\n              </HStack>\n\n              <HStack spacing={2} flexWrap=\"wrap\">\n                <Badge colorScheme={getPriorityColor(task.priority)} size=\"sm\">\n                  {task.priority}\n                </Badge>\n                <Badge colorScheme={getStatusColor(task.status)} size=\"sm\">\n                  {task.status}\n                </Badge>\n                <Badge colorScheme=\"purple\" size=\"sm\">\n                  {task.type}\n                </Badge>\n                {task.isBlocking && (\n                  <Badge colorScheme=\"red\" size=\"sm\">\n                    <FiAlertCircle style={{ marginRight: '4px' }} />\n                    BLOCKING\n                  </Badge>\n                )}\n                {task.dueDate && (\n                  <Badge colorScheme=\"blue\" size=\"sm\">\n                    <FiCalendar style={{ marginRight: '4px' }} />\n                    {format(new Date(task.dueDate), 'MMM d, yyyy')}\n                  </Badge>\n                )}\n                {task.assignedToName && (\n                  <Badge colorScheme=\"cyan\" size=\"sm\">\n                    Assigned to: {task.assignedToName}\n                  </Badge>\n                )}\n              </HStack>\n            </Box>\n          ))\n        )}\n      </VStack>\n\n      {/* Task Modal */}\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent bg=\"gray.800\" borderColor={cardBorder}>\n          <ModalHeader color={textPrimary}>\n            {editingTask ? 'Edit Task' : 'New Task'}\n          </ModalHeader>\n          <ModalCloseButton color={textMuted} />\n          <ModalBody>\n            <VStack spacing={4}>\n              <FormControl isRequired>\n                <FormLabel color={textMuted}>Title</FormLabel>\n                <Input\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Task title\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Description</FormLabel>\n                <Textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Task description\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <HStack spacing={4} width=\"100%\">\n                <FormControl>\n                  <FormLabel color={textMuted}>Type</FormLabel>\n                  <Select\n                    value={formData.type}\n                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    <option value=\"CALL\">Call</option>\n                    <option value=\"EMAIL\">Email</option>\n                    <option value=\"MEETING\">Meeting</option>\n                    <option value=\"DEMO\">Demo</option>\n                    <option value=\"PROPOSAL\">Proposal</option>\n                    <option value=\"FOLLOW_UP\">Follow Up</option>\n                    <option value=\"RESEARCH\">Research</option>\n                    <option value=\"DOCUMENT\">Document</option>\n                    <option value=\"INTERNAL\">Internal</option>\n                    <option value=\"OTHER\">Other</option>\n                  </Select>\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textMuted}>Priority</FormLabel>\n                  <Select\n                    value={formData.priority}\n                    onChange={(e) => setFormData({ ...formData, priority: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    <option value=\"LOW\">Low</option>\n                    <option value=\"MEDIUM\">Medium</option>\n                    <option value=\"HIGH\">High</option>\n                    <option value=\"URGENT\">Urgent</option>\n                  </Select>\n                </FormControl>\n              </HStack>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Due Date</FormLabel>\n                <Input\n                  type=\"date\"\n                  value={formData.dueDate}\n                  onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Notes</FormLabel>\n                <Textarea\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  placeholder=\"Additional notes\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <Checkbox\n                  isChecked={formData.isBlocking}\n                  onChange={(e) => setFormData({ ...formData, isBlocking: e.target.checked })}\n                  colorScheme=\"blue\"\n                  color={textMuted}\n                >\n                  This task blocks opportunity progression\n                </Checkbox>\n              </FormControl>\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={handleCloseModal} color={textMuted}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSaveTask}\n              bg={primaryColor}\n            >\n              {editingTask ? 'Update' : 'Create'} Task\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};","import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Button,\n  Badge,\n  IconButton,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  Spinner,\n  Divider,\n  Link,\n} from '@chakra-ui/react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiPlus, FiEdit, FiTrash2, FiVideo, FiPhone, FiMapPin, FiCalendar, FiClock, FiUsers, FiLink } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport { getColor } from \"../../brandConfig\";\n\n// GraphQL Queries and Mutations\nconst GET_OPPORTUNITY_MEETINGS = gql`\n  query GetOpportunityMeetings($opportunityId: String!) {\n    opportunityMeetings(opportunityId: $opportunityId) {\n      id\n      title\n      description\n      type\n      status\n      format\n      scheduledDate\n      duration\n      location\n      address\n      meetingUrl\n      attendees {\n        name\n        email\n        role\n        company\n        isInternal\n        attended\n      }\n      objectives\n      notes\n      outcome\n      nextSteps\n      followUpDate\n      createdAt\n      organizerName\n    }\n  }\n`;\n\nconst CREATE_OPPORTUNITY_MEETING = gql`\n  mutation CreateOpportunityMeeting($input: OpportunityMeetingInput!) {\n    createOpportunityMeeting(input: $input) {\n      id\n      title\n      status\n    }\n  }\n`;\n\nconst UPDATE_OPPORTUNITY_MEETING = gql`\n  mutation UpdateOpportunityMeeting($id: String!, $input: OpportunityMeetingUpdateInput!) {\n    updateOpportunityMeeting(id: $id, input: $input) {\n      id\n      title\n      status\n    }\n  }\n`;\n\nconst DELETE_OPPORTUNITY_MEETING = gql`\n  mutation DeleteOpportunityMeeting($id: String!) {\n    deleteOpportunityMeeting(id: $id)\n  }\n`;\n\ninterface OpportunityMeetingsProps {\n  opportunityId: string;\n}\n\nexport const OpportunityMeetings: React.FC<OpportunityMeetingsProps> = ({ opportunityId }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingMeeting, setEditingMeeting] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    type: 'OTHER',\n    format: 'VIDEO_CALL',\n    scheduledDate: '',\n    duration: 60,\n    location: '',\n    address: '',\n    meetingUrl: '',\n    objectives: '',\n    preparationNotes: '',\n    notes: '',\n    outcome: '',\n    nextSteps: '',\n  });\n\n  const toast = useToast();\n\n  // Color scheme\n  const primaryColor = getColor(\"blue.500\");\n  const cardBorder = \"rgba(255, 255, 255, 0.1)\";\n  const textPrimary = \"white\";\n  const textMuted = \"gray.400\";\n  const cardGradientBg = \"linear-gradient(135deg, rgba(31, 37, 89, 0.8) 0%, rgba(17, 21, 51, 0.8) 100%)\";\n\n  // Queries\n  const { loading, data, refetch } = useQuery(GET_OPPORTUNITY_MEETINGS, {\n    variables: { opportunityId },\n  });\n\n  // Mutations\n  const [createMeeting] = useMutation(CREATE_OPPORTUNITY_MEETING, {\n    onCompleted: () => {\n      toast({\n        title: 'Meeting scheduled',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating meeting',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [updateMeeting] = useMutation(UPDATE_OPPORTUNITY_MEETING, {\n    onCompleted: () => {\n      toast({\n        title: 'Meeting updated',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating meeting',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [deleteMeeting] = useMutation(DELETE_OPPORTUNITY_MEETING, {\n    onCompleted: () => {\n      toast({\n        title: 'Meeting deleted',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting meeting',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const handleOpenModal = (meeting?: any) => {\n    if (meeting) {\n      setEditingMeeting(meeting);\n      const scheduledDate = new Date(meeting.scheduledDate);\n      const dateStr = scheduledDate.toISOString().slice(0, 16); // Format for datetime-local input\n\n      setFormData({\n        title: meeting.title,\n        description: meeting.description || '',\n        type: meeting.type,\n        format: meeting.format,\n        scheduledDate: dateStr,\n        duration: meeting.duration,\n        location: meeting.location || '',\n        address: meeting.address || '',\n        meetingUrl: meeting.meetingUrl || '',\n        objectives: meeting.objectives || '',\n        preparationNotes: meeting.preparationNotes || '',\n        notes: meeting.notes || '',\n        outcome: meeting.outcome || '',\n        nextSteps: meeting.nextSteps || '',\n      });\n    } else {\n      setEditingMeeting(null);\n      setFormData({\n        title: '',\n        description: '',\n        type: 'OTHER',\n        format: 'VIDEO_CALL',\n        scheduledDate: '',\n        duration: 60,\n        location: '',\n        address: '',\n        meetingUrl: '',\n        objectives: '',\n        preparationNotes: '',\n        notes: '',\n        outcome: '',\n        nextSteps: '',\n      });\n    }\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingMeeting(null);\n  };\n\n  const handleSaveMeeting = async () => {\n    const input: any = {\n      ...formData,\n      opportunityId,\n      scheduledDate: new Date(formData.scheduledDate),\n      duration: Number(formData.duration),\n    };\n\n    if (editingMeeting) {\n      const updateInput: any = {\n        ...formData,\n        scheduledDate: new Date(formData.scheduledDate),\n        duration: Number(formData.duration),\n      };\n\n      await updateMeeting({\n        variables: {\n          id: editingMeeting.id,\n          input: updateInput,\n        },\n      });\n    } else {\n      await createMeeting({\n        variables: { input },\n      });\n    }\n  };\n\n  const handleDeleteMeeting = async (meetingId: string) => {\n    if (window.confirm('Are you sure you want to delete this meeting?')) {\n      await deleteMeeting({\n        variables: { id: meetingId },\n      });\n    }\n  };\n\n  const handleStatusChange = async (meetingId: string, newStatus: string) => {\n    await updateMeeting({\n      variables: {\n        id: meetingId,\n        input: { status: newStatus },\n      },\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'SCHEDULED': return 'blue';\n      case 'IN_PROGRESS': return 'yellow';\n      case 'COMPLETED': return 'green';\n      case 'CANCELLED': return 'red';\n      case 'NO_SHOW': return 'orange';\n      case 'RESCHEDULED': return 'purple';\n      default: return 'gray';\n    }\n  };\n\n  const getFormatIcon = (format: string) => {\n    switch (format) {\n      case 'VIDEO_CALL': return <FiVideo />;\n      case 'PHONE_CALL': return <FiPhone />;\n      case 'IN_PERSON': return <FiMapPin />;\n      default: return <FiUsers />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" py={8}>\n        <Spinner size=\"xl\" color={primaryColor} />\n      </Box>\n    );\n  }\n\n  const meetings = data?.opportunityMeetings || [];\n\n  return (\n    <Box>\n      <HStack justify=\"space-between\" mb={4}>\n        <Text fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n          Meetings ({meetings.length})\n        </Text>\n        <Button\n          leftIcon={<FiPlus />}\n          onClick={() => handleOpenModal()}\n          size=\"sm\"\n          bg={primaryColor}\n          color=\"white\"\n          _hover={{ opacity: 0.8 }}\n        >\n          Schedule Meeting\n        </Button>\n      </HStack>\n\n      <VStack spacing={3} align=\"stretch\">\n        {meetings.length === 0 ? (\n          <Text color={textMuted} textAlign=\"center\" py={4}>\n            No meetings scheduled yet. Schedule your first meeting to track discussions with this opportunity.\n          </Text>\n        ) : (\n          meetings.map((meeting: any) => (\n            <Box\n              key={meeting.id}\n              p={4}\n              bg={cardGradientBg}\n              borderRadius=\"md\"\n              border=\"1px\"\n              borderColor={cardBorder}\n            >\n              <HStack justify=\"space-between\" mb={3}>\n                <VStack align=\"start\" spacing={1}>\n                  <HStack>\n                    <Box color={primaryColor}>{getFormatIcon(meeting.format)}</Box>\n                    <Text fontWeight=\"bold\" color={textPrimary} fontSize=\"lg\">\n                      {meeting.title}\n                    </Text>\n                  </HStack>\n                  {meeting.description && (\n                    <Text fontSize=\"sm\" color={textMuted}>\n                      {meeting.description}\n                    </Text>\n                  )}\n                </VStack>\n                <HStack>\n                  <IconButton\n                    aria-label=\"Edit meeting\"\n                    icon={<FiEdit />}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    color={textMuted}\n                    onClick={() => handleOpenModal(meeting)}\n                  />\n                  <IconButton\n                    aria-label=\"Delete meeting\"\n                    icon={<FiTrash2 />}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    color=\"red.400\"\n                    onClick={() => handleDeleteMeeting(meeting.id)}\n                  />\n                </HStack>\n              </HStack>\n\n              <VStack align=\"stretch\" spacing={2}>\n                <HStack spacing={3} flexWrap=\"wrap\">\n                  <Badge colorScheme={getStatusColor(meeting.status)} size=\"sm\">\n                    {meeting.status}\n                  </Badge>\n                  <Badge colorScheme=\"purple\" size=\"sm\">\n                    {meeting.type}\n                  </Badge>\n                  <HStack spacing={1}>\n                    <FiCalendar size=\"14\" color={textMuted} />\n                    <Text fontSize=\"sm\" color={textMuted}>\n                      {format(new Date(meeting.scheduledDate), 'MMM d, yyyy h:mm a')}\n                    </Text>\n                  </HStack>\n                  <HStack spacing={1}>\n                    <FiClock size=\"14\" color={textMuted} />\n                    <Text fontSize=\"sm\" color={textMuted}>\n                      {meeting.duration} mins\n                    </Text>\n                  </HStack>\n                </HStack>\n\n                {(meeting.location || meeting.meetingUrl) && (\n                  <HStack spacing={3}>\n                    {meeting.location && (\n                      <Text fontSize=\"sm\" color={textMuted}>\n                        <FiMapPin style={{ display: 'inline', marginRight: '4px' }} />\n                        {meeting.location}\n                      </Text>\n                    )}\n                    {meeting.meetingUrl && (\n                      <Link href={meeting.meetingUrl} isExternal color={primaryColor} fontSize=\"sm\">\n                        <FiLink style={{ display: 'inline', marginRight: '4px' }} />\n                        Join Meeting\n                      </Link>\n                    )}\n                  </HStack>\n                )}\n\n                {meeting.objectives && (\n                  <Box>\n                    <Text fontSize=\"xs\" color={textMuted} fontWeight=\"bold\" mb={1}>\n                      Objectives:\n                    </Text>\n                    <Text fontSize=\"sm\" color={textPrimary}>\n                      {meeting.objectives}\n                    </Text>\n                  </Box>\n                )}\n\n                {meeting.outcome && (\n                  <Box>\n                    <Text fontSize=\"xs\" color={textMuted} fontWeight=\"bold\" mb={1}>\n                      Outcome:\n                    </Text>\n                    <Text fontSize=\"sm\" color={textPrimary}>\n                      {meeting.outcome}\n                    </Text>\n                  </Box>\n                )}\n\n                {meeting.attendees && meeting.attendees.length > 0 && (\n                  <Box>\n                    <Text fontSize=\"xs\" color={textMuted} fontWeight=\"bold\" mb={1}>\n                      Attendees ({meeting.attendees.length}):\n                    </Text>\n                    <HStack spacing={2} flexWrap=\"wrap\">\n                      {meeting.attendees.map((attendee: any, index: number) => (\n                        <Badge\n                          key={index}\n                          colorScheme={attendee.isInternal ? 'blue' : 'green'}\n                          size=\"sm\"\n                        >\n                          {attendee.name} {attendee.role && `(${attendee.role})`}\n                        </Badge>\n                      ))}\n                    </HStack>\n                  </Box>\n                )}\n              </VStack>\n            </Box>\n          ))\n        )}\n      </VStack>\n\n      {/* Meeting Modal */}\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal} size=\"xl\">\n        <ModalOverlay />\n        <ModalContent bg=\"gray.800\" borderColor={cardBorder}>\n          <ModalHeader color={textPrimary}>\n            {editingMeeting ? 'Edit Meeting' : 'Schedule Meeting'}\n          </ModalHeader>\n          <ModalCloseButton color={textMuted} />\n          <ModalBody>\n            <VStack spacing={4}>\n              <FormControl isRequired>\n                <FormLabel color={textMuted}>Meeting Title</FormLabel>\n                <Input\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"e.g., Product Demo Call\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Description</FormLabel>\n                <Textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Meeting description\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <HStack spacing={4} width=\"100%\">\n                <FormControl>\n                  <FormLabel color={textMuted}>Meeting Type</FormLabel>\n                  <Select\n                    value={formData.type}\n                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    <option value=\"INITIAL_CALL\">Initial Call</option>\n                    <option value=\"DISCOVERY\">Discovery</option>\n                    <option value=\"DEMO\">Demo</option>\n                    <option value=\"PROPOSAL_PRESENTATION\">Proposal Presentation</option>\n                    <option value=\"NEGOTIATION\">Negotiation</option>\n                    <option value=\"CLOSING\">Closing</option>\n                    <option value=\"CHECK_IN\">Check In</option>\n                    <option value=\"REVIEW\">Review</option>\n                    <option value=\"OTHER\">Other</option>\n                  </Select>\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textMuted}>Format</FormLabel>\n                  <Select\n                    value={formData.format}\n                    onChange={(e) => setFormData({ ...formData, format: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    <option value=\"VIDEO_CALL\">Video Call</option>\n                    <option value=\"PHONE_CALL\">Phone Call</option>\n                    <option value=\"IN_PERSON\">In Person</option>\n                    <option value=\"HYBRID\">Hybrid</option>\n                  </Select>\n                </FormControl>\n              </HStack>\n\n              <HStack spacing={4} width=\"100%\">\n                <FormControl isRequired>\n                  <FormLabel color={textMuted}>Date & Time</FormLabel>\n                  <Input\n                    type=\"datetime-local\"\n                    value={formData.scheduledDate}\n                    onChange={(e) => setFormData({ ...formData, scheduledDate: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textMuted}>Duration (minutes)</FormLabel>\n                  <Input\n                    type=\"number\"\n                    value={formData.duration}\n                    onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) || 60 })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  />\n                </FormControl>\n              </HStack>\n\n              {formData.format === 'IN_PERSON' || formData.format === 'HYBRID' ? (\n                <FormControl>\n                  <FormLabel color={textMuted}>Location</FormLabel>\n                  <Input\n                    value={formData.location}\n                    onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                    placeholder=\"Meeting location\"\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  />\n                </FormControl>\n              ) : (\n                <FormControl>\n                  <FormLabel color={textMuted}>Meeting Link</FormLabel>\n                  <Input\n                    value={formData.meetingUrl}\n                    onChange={(e) => setFormData({ ...formData, meetingUrl: e.target.value })}\n                    placeholder=\"https://zoom.us/j/...\"\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  />\n                </FormControl>\n              )}\n\n              <FormControl>\n                <FormLabel color={textMuted}>Objectives</FormLabel>\n                <Textarea\n                  value={formData.objectives}\n                  onChange={(e) => setFormData({ ...formData, objectives: e.target.value })}\n                  placeholder=\"What do you want to achieve in this meeting?\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              {editingMeeting && (\n                <>\n                  <Divider borderColor={cardBorder} />\n                  <FormControl>\n                    <FormLabel color={textMuted}>Meeting Notes</FormLabel>\n                    <Textarea\n                      value={formData.notes}\n                      onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                      placeholder=\"Notes from the meeting\"\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                      minH=\"100px\"\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={textMuted}>Outcome</FormLabel>\n                    <Textarea\n                      value={formData.outcome}\n                      onChange={(e) => setFormData({ ...formData, outcome: e.target.value })}\n                      placeholder=\"What was the outcome of the meeting?\"\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={textMuted}>Next Steps</FormLabel>\n                    <Textarea\n                      value={formData.nextSteps}\n                      onChange={(e) => setFormData({ ...formData, nextSteps: e.target.value })}\n                      placeholder=\"What are the next steps?\"\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                    />\n                  </FormControl>\n                </>\n              )}\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={handleCloseModal} color={textMuted}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSaveMeeting}\n              bg={primaryColor}\n            >\n              {editingMeeting ? 'Update' : 'Schedule'} Meeting\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};","import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Button,\n  Badge,\n  IconButton,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  Spinner,\n  Card,\n  CardBody,\n  Checkbox,\n  Divider,\n} from '@chakra-ui/react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiPlus, FiEdit, FiTrash2, FiBookmark, FiAlertCircle, FiTrendingUp, FiTrendingDown, FiCheckCircle, FiUser } from 'react-icons/fi';\nimport { format } from 'date-fns';\nimport { getColor } from \"../../brandConfig\";\n\n// GraphQL Queries and Mutations\nconst GET_OPPORTUNITY_NOTES = gql`\n  query GetOpportunityNotes($opportunityId: String!) {\n    opportunityNotes(opportunityId: $opportunityId) {\n      id\n      title\n      content\n      type\n      priority\n      visibility\n      isPinned\n      isActionable\n      isDecisionFactor\n      isRisk\n      isOpportunity\n      sentiment\n      contactPerson\n      contactEmail\n      followUpRequired\n      followUpDate\n      followUpAction\n      followUpCompleted\n      tags\n      category\n      createdAt\n      createdByName\n      lastEditedAt\n      lastEditedByName\n    }\n  }\n`;\n\nconst CREATE_OPPORTUNITY_NOTE = gql`\n  mutation CreateOpportunityNote($input: OpportunityNoteInput!) {\n    createOpportunityNote(input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst UPDATE_OPPORTUNITY_NOTE = gql`\n  mutation UpdateOpportunityNote($id: String!, $input: OpportunityNoteUpdateInput!) {\n    updateOpportunityNote(id: $id, input: $input) {\n      id\n      title\n    }\n  }\n`;\n\nconst DELETE_OPPORTUNITY_NOTE = gql`\n  mutation DeleteOpportunityNote($id: String!) {\n    deleteOpportunityNote(id: $id)\n  }\n`;\n\ninterface OpportunityNotesProps {\n  opportunityId: string;\n}\n\nexport const OpportunityNotes: React.FC<OpportunityNotesProps> = ({ opportunityId }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingNote, setEditingNote] = useState<any>(null);\n  const [expandedNotes, setExpandedNotes] = useState<Set<string>>(new Set());\n  const [formData, setFormData] = useState({\n    title: '',\n    content: '',\n    type: 'GENERAL',\n    priority: 'MEDIUM',\n    visibility: 'PUBLIC',\n    contactPerson: '',\n    contactEmail: '',\n    isPinned: false,\n    isActionable: false,\n    isDecisionFactor: false,\n    isRisk: false,\n    isOpportunity: false,\n    sentiment: '',\n    followUpRequired: false,\n    followUpDate: '',\n    followUpAction: '',\n    tags: [] as string[],\n    category: '',\n  });\n\n  const toast = useToast();\n\n  // Color scheme\n  const primaryColor = getColor(\"blue.500\");\n  const cardBorder = \"rgba(255, 255, 255, 0.1)\";\n  const textPrimary = \"white\";\n  const textMuted = \"gray.400\";\n  const cardGradientBg = \"linear-gradient(135deg, rgba(31, 37, 89, 0.8) 0%, rgba(17, 21, 51, 0.8) 100%)\";\n\n  // Queries\n  const { loading, data, refetch } = useQuery(GET_OPPORTUNITY_NOTES, {\n    variables: { opportunityId },\n  });\n\n  // Mutations\n  const [createNote] = useMutation(CREATE_OPPORTUNITY_NOTE, {\n    onCompleted: () => {\n      toast({\n        title: 'Note created',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error creating note',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [updateNote] = useMutation(UPDATE_OPPORTUNITY_NOTE, {\n    onCompleted: () => {\n      toast({\n        title: 'Note updated',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n      handleCloseModal();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error updating note',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const [deleteNote] = useMutation(DELETE_OPPORTUNITY_NOTE, {\n    onCompleted: () => {\n      toast({\n        title: 'Note deleted',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n      refetch();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting note',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    },\n  });\n\n  const handleOpenModal = (note?: any) => {\n    if (note) {\n      setEditingNote(note);\n      setFormData({\n        title: note.title,\n        content: note.content,\n        type: note.type,\n        priority: note.priority,\n        visibility: note.visibility,\n        contactPerson: note.contactPerson || '',\n        contactEmail: note.contactEmail || '',\n        isPinned: note.isPinned || false,\n        isActionable: note.isActionable || false,\n        isDecisionFactor: note.isDecisionFactor || false,\n        isRisk: note.isRisk || false,\n        isOpportunity: note.isOpportunity || false,\n        sentiment: note.sentiment || '',\n        followUpRequired: note.followUpRequired || false,\n        followUpDate: note.followUpDate ? new Date(note.followUpDate).toISOString().split('T')[0] : '',\n        followUpAction: note.followUpAction || '',\n        tags: note.tags || [],\n        category: note.category || '',\n      });\n    } else {\n      setEditingNote(null);\n      setFormData({\n        title: '',\n        content: '',\n        type: 'GENERAL',\n        priority: 'MEDIUM',\n        visibility: 'PUBLIC',\n        contactPerson: '',\n        contactEmail: '',\n        isPinned: false,\n        isActionable: false,\n        isDecisionFactor: false,\n        isRisk: false,\n        isOpportunity: false,\n        sentiment: '',\n        followUpRequired: false,\n        followUpDate: '',\n        followUpAction: '',\n        tags: [],\n        category: '',\n      });\n    }\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingNote(null);\n  };\n\n  const handleSaveNote = async () => {\n    const input: any = {\n      ...formData,\n      opportunityId,\n    };\n\n    if (formData.followUpDate) {\n      input.followUpDate = new Date(formData.followUpDate);\n    }\n\n    if (editingNote) {\n      await updateNote({\n        variables: {\n          id: editingNote.id,\n          input: {\n            ...formData,\n            followUpDate: formData.followUpDate ? new Date(formData.followUpDate) : null,\n          },\n        },\n      });\n    } else {\n      await createNote({\n        variables: { input },\n      });\n    }\n  };\n\n  const handleDeleteNote = async (noteId: string) => {\n    if (window.confirm('Are you sure you want to delete this note?')) {\n      await deleteNote({\n        variables: { id: noteId },\n      });\n    }\n  };\n\n  const toggleNoteExpansion = (noteId: string) => {\n    const newExpanded = new Set(expandedNotes);\n    if (newExpanded.has(noteId)) {\n      newExpanded.delete(noteId);\n    } else {\n      newExpanded.add(noteId);\n    }\n    setExpandedNotes(newExpanded);\n  };\n\n  const togglePin = async (note: any) => {\n    await updateNote({\n      variables: {\n        id: note.id,\n        input: { isPinned: !note.isPinned },\n      },\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'CRITICAL': return 'red';\n      case 'HIGH': return 'orange';\n      case 'MEDIUM': return 'yellow';\n      case 'LOW': return 'green';\n      default: return 'gray';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'CALL_NOTES': return 'blue';\n      case 'MEETING_NOTES': return 'purple';\n      case 'EMAIL_SUMMARY': return 'cyan';\n      case 'CUSTOMER_FEEDBACK': return 'green';\n      case 'COMPETITOR_INTEL': return 'red';\n      case 'PRICING_DISCUSSION': return 'orange';\n      case 'RISK_ASSESSMENT': return 'red';\n      case 'WIN_LOSS_ANALYSIS': return 'yellow';\n      default: return 'gray';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" py={8}>\n        <Spinner size=\"xl\" color={primaryColor} />\n      </Box>\n    );\n  }\n\n  const notes = data?.opportunityNotes || [];\n  const pinnedNotes = notes.filter((n: any) => n.isPinned);\n  const unpinnedNotes = notes.filter((n: any) => !n.isPinned);\n  const sortedNotes = [...pinnedNotes, ...unpinnedNotes];\n\n  return (\n    <Box>\n      <HStack justify=\"space-between\" mb={4}>\n        <Text fontSize=\"lg\" fontWeight=\"bold\" color={textPrimary}>\n          Notes ({notes.length})\n        </Text>\n        <Button\n          leftIcon={<FiPlus />}\n          onClick={() => handleOpenModal()}\n          size=\"sm\"\n          bg={primaryColor}\n          color=\"white\"\n          _hover={{ opacity: 0.8 }}\n        >\n          Add Note\n        </Button>\n      </HStack>\n\n      <VStack spacing={3} align=\"stretch\">\n        {sortedNotes.length === 0 ? (\n          <Text color={textMuted} textAlign=\"center\" py={4}>\n            No notes yet. Add notes to capture important information about this opportunity.\n          </Text>\n        ) : (\n          sortedNotes.map((note: any) => {\n            const isExpanded = expandedNotes.has(note.id);\n            const truncatedContent = note.content.length > 150 && !isExpanded\n              ? note.content.substring(0, 150) + '...'\n              : note.content;\n\n            return (\n              <Card\n                key={note.id}\n                bg={cardGradientBg}\n                borderRadius=\"md\"\n                border=\"1px\"\n                borderColor={note.isPinned ? primaryColor : cardBorder}\n                position=\"relative\"\n              >\n                <CardBody>\n                  {note.isPinned && (\n                    <Badge\n                      position=\"absolute\"\n                      top={2}\n                      right={2}\n                      colorScheme=\"blue\"\n                      variant=\"solid\"\n                    >\n                      <FiBookmark style={{ marginRight: '4px' }} />\n                      Pinned\n                    </Badge>\n                  )}\n\n                  <VStack align=\"stretch\" spacing={3}>\n                    <HStack justify=\"space-between\">\n                      <VStack align=\"start\" spacing={1} flex=\"1\">\n                        <Text fontWeight=\"bold\" color={textPrimary} fontSize=\"lg\">\n                          {note.title}\n                        </Text>\n                        <HStack spacing={2} flexWrap=\"wrap\">\n                          <Badge colorScheme={getPriorityColor(note.priority)} size=\"sm\">\n                            {note.priority}\n                          </Badge>\n                          <Badge colorScheme={getTypeColor(note.type)} size=\"sm\">\n                            {note.type.replace(/_/g, ' ')}\n                          </Badge>\n                          {note.isActionable && (\n                            <Badge colorScheme=\"orange\" size=\"sm\">\n                              <FiCheckCircle style={{ marginRight: '2px' }} />\n                              Actionable\n                            </Badge>\n                          )}\n                          {note.isRisk && (\n                            <Badge colorScheme=\"red\" size=\"sm\">\n                              <FiAlertCircle style={{ marginRight: '2px' }} />\n                              Risk\n                            </Badge>\n                          )}\n                          {note.isOpportunity && (\n                            <Badge colorScheme=\"green\" size=\"sm\">\n                              <FiTrendingUp style={{ marginRight: '2px' }} />\n                              Opportunity\n                            </Badge>\n                          )}\n                          {note.isDecisionFactor && (\n                            <Badge colorScheme=\"purple\" size=\"sm\">\n                              Decision Factor\n                            </Badge>\n                          )}\n                        </HStack>\n                      </VStack>\n                      <HStack>\n                        <IconButton\n                          aria-label=\"Pin note\"\n                          icon={<FiBookmark />}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          color={note.isPinned ? primaryColor : textMuted}\n                          onClick={() => togglePin(note)}\n                        />\n                        <IconButton\n                          aria-label=\"Edit note\"\n                          icon={<FiEdit />}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          color={textMuted}\n                          onClick={() => handleOpenModal(note)}\n                        />\n                        <IconButton\n                          aria-label=\"Delete note\"\n                          icon={<FiTrash2 />}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          color=\"red.400\"\n                          onClick={() => handleDeleteNote(note.id)}\n                        />\n                      </HStack>\n                    </HStack>\n\n                    <Text color={textPrimary} whiteSpace=\"pre-wrap\">\n                      {truncatedContent}\n                    </Text>\n\n                    {note.content.length > 150 && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"link\"\n                        color={primaryColor}\n                        onClick={() => toggleNoteExpansion(note.id)}\n                      >\n                        {isExpanded ? 'Show less' : 'Read more'}\n                      </Button>\n                    )}\n\n                    {note.contactPerson && (\n                      <HStack>\n                        <FiUser color={textMuted} />\n                        <Text fontSize=\"sm\" color={textMuted}>\n                          Contact: {note.contactPerson}\n                          {note.contactEmail && ` (${note.contactEmail})`}\n                        </Text>\n                      </HStack>\n                    )}\n\n                    {note.followUpRequired && (\n                      <Box p={2} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\">\n                        <Text fontSize=\"sm\" color=\"orange.300\" fontWeight=\"bold\">\n                          Follow-up Required\n                        </Text>\n                        {note.followUpDate && (\n                          <Text fontSize=\"sm\" color={textMuted}>\n                            Due: {format(new Date(note.followUpDate), 'MMM d, yyyy')}\n                          </Text>\n                        )}\n                        {note.followUpAction && (\n                          <Text fontSize=\"sm\" color={textMuted}>\n                            Action: {note.followUpAction}\n                          </Text>\n                        )}\n                      </Box>\n                    )}\n\n                    <Divider borderColor={cardBorder} />\n\n                    <HStack justify=\"space-between\">\n                      <Text fontSize=\"xs\" color={textMuted}>\n                        Created by {note.createdByName} on {format(new Date(note.createdAt), 'MMM d, yyyy h:mm a')}\n                      </Text>\n                      {note.lastEditedAt && (\n                        <Text fontSize=\"xs\" color={textMuted}>\n                          Edited by {note.lastEditedByName}\n                        </Text>\n                      )}\n                    </HStack>\n                  </VStack>\n                </CardBody>\n              </Card>\n            );\n          })\n        )}\n      </VStack>\n\n      {/* Note Modal */}\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal} size=\"xl\">\n        <ModalOverlay />\n        <ModalContent bg=\"gray.800\" borderColor={cardBorder} maxH=\"90vh\" overflowY=\"auto\">\n          <ModalHeader color={textPrimary}>\n            {editingNote ? 'Edit Note' : 'New Note'}\n          </ModalHeader>\n          <ModalCloseButton color={textMuted} />\n          <ModalBody>\n            <VStack spacing={4}>\n              <FormControl isRequired>\n                <FormLabel color={textMuted}>Title</FormLabel>\n                <Input\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Note title\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl isRequired>\n                <FormLabel color={textMuted}>Content</FormLabel>\n                <Textarea\n                  value={formData.content}\n                  onChange={(e) => setFormData({ ...formData, content: e.target.value })}\n                  placeholder=\"Write your note here...\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  minH=\"150px\"\n                />\n              </FormControl>\n\n              <HStack spacing={4} width=\"100%\">\n                <FormControl>\n                  <FormLabel color={textMuted}>Type</FormLabel>\n                  <Select\n                    value={formData.type}\n                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    <option value=\"GENERAL\">General</option>\n                    <option value=\"CALL_NOTES\">Call Notes</option>\n                    <option value=\"MEETING_NOTES\">Meeting Notes</option>\n                    <option value=\"EMAIL_SUMMARY\">Email Summary</option>\n                    <option value=\"INTERNAL\">Internal</option>\n                    <option value=\"CUSTOMER_FEEDBACK\">Customer Feedback</option>\n                    <option value=\"COMPETITOR_INTEL\">Competitor Intel</option>\n                    <option value=\"TECHNICAL_REQUIREMENTS\">Technical Requirements</option>\n                    <option value=\"PRICING_DISCUSSION\">Pricing Discussion</option>\n                    <option value=\"DECISION_CRITERIA\">Decision Criteria</option>\n                    <option value=\"RISK_ASSESSMENT\">Risk Assessment</option>\n                    <option value=\"WIN_LOSS_ANALYSIS\">Win/Loss Analysis</option>\n                    <option value=\"OTHER\">Other</option>\n                  </Select>\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textMuted}>Priority</FormLabel>\n                  <Select\n                    value={formData.priority}\n                    onChange={(e) => setFormData({ ...formData, priority: e.target.value })}\n                    bg=\"rgba(255, 255, 255, 0.05)\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                  >\n                    <option value=\"LOW\">Low</option>\n                    <option value=\"MEDIUM\">Medium</option>\n                    <option value=\"HIGH\">High</option>\n                    <option value=\"CRITICAL\">Critical</option>\n                  </Select>\n                </FormControl>\n              </HStack>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Contact Person</FormLabel>\n                <Input\n                  value={formData.contactPerson}\n                  onChange={(e) => setFormData({ ...formData, contactPerson: e.target.value })}\n                  placeholder=\"Name of contact person\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Contact Email</FormLabel>\n                <Input\n                  type=\"email\"\n                  value={formData.contactEmail}\n                  onChange={(e) => setFormData({ ...formData, contactEmail: e.target.value })}\n                  placeholder=\"contact@example.com\"\n                  bg=\"rgba(255, 255, 255, 0.05)\"\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel color={textMuted}>Flags</FormLabel>\n                <VStack align=\"start\" spacing={2}>\n                  <Checkbox\n                    isChecked={formData.isPinned}\n                    onChange={(e) => setFormData({ ...formData, isPinned: e.target.checked })}\n                    colorScheme=\"blue\"\n                    color={textMuted}\n                  >\n                    Pin to top\n                  </Checkbox>\n                  <Checkbox\n                    isChecked={formData.isActionable}\n                    onChange={(e) => setFormData({ ...formData, isActionable: e.target.checked })}\n                    colorScheme=\"orange\"\n                    color={textMuted}\n                  >\n                    Requires action\n                  </Checkbox>\n                  <Checkbox\n                    isChecked={formData.isDecisionFactor}\n                    onChange={(e) => setFormData({ ...formData, isDecisionFactor: e.target.checked })}\n                    colorScheme=\"purple\"\n                    color={textMuted}\n                  >\n                    Influences buying decision\n                  </Checkbox>\n                  <Checkbox\n                    isChecked={formData.isRisk}\n                    onChange={(e) => setFormData({ ...formData, isRisk: e.target.checked })}\n                    colorScheme=\"red\"\n                    color={textMuted}\n                  >\n                    Represents a risk\n                  </Checkbox>\n                  <Checkbox\n                    isChecked={formData.isOpportunity}\n                    onChange={(e) => setFormData({ ...formData, isOpportunity: e.target.checked })}\n                    colorScheme=\"green\"\n                    color={textMuted}\n                  >\n                    Upsell/expansion opportunity\n                  </Checkbox>\n                </VStack>\n              </FormControl>\n\n              <FormControl>\n                <Checkbox\n                  isChecked={formData.followUpRequired}\n                  onChange={(e) => setFormData({ ...formData, followUpRequired: e.target.checked })}\n                  colorScheme=\"orange\"\n                  color={textMuted}\n                >\n                  Follow-up required\n                </Checkbox>\n              </FormControl>\n\n              {formData.followUpRequired && (\n                <>\n                  <FormControl>\n                    <FormLabel color={textMuted}>Follow-up Date</FormLabel>\n                    <Input\n                      type=\"date\"\n                      value={formData.followUpDate}\n                      onChange={(e) => setFormData({ ...formData, followUpDate: e.target.value })}\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                    />\n                  </FormControl>\n                  <FormControl>\n                    <FormLabel color={textMuted}>Follow-up Action</FormLabel>\n                    <Input\n                      value={formData.followUpAction}\n                      onChange={(e) => setFormData({ ...formData, followUpAction: e.target.value })}\n                      placeholder=\"What action needs to be taken?\"\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                    />\n                  </FormControl>\n                </>\n              )}\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={handleCloseModal} color={textMuted}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSaveNote}\n              bg={primaryColor}\n            >\n              {editingNote ? 'Update' : 'Create'} Note\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Button,\n  Text,\n  useToast,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Badge,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  IconButton,\n  Tooltip,\n  useDisclosure,\n  Flex,\n  Spacer,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { EditIcon, DeleteIcon, AddIcon } from '@chakra-ui/icons';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { getColor } from \"../../brandConfig\";\n\nconst GET_OPPORTUNITY_MEMBERS = gql`\n  query GetOpportunityMembers($opportunityId: String!) {\n    opportunityMembers(opportunityId: $opportunityId) {\n      id\n      clientId\n      clientName\n      clientEmail\n      role\n      notes\n      isActive\n      totalEarned\n      totalPending\n    }\n  }\n`;\n\nconst GET_CLIENTS = gql`\n  query GetClients {\n    clients {\n      id\n      fName\n      lName\n      email\n    }\n  }\n`;\n\nconst ADD_OPPORTUNITY_MEMBER = gql`\n  mutation AddOpportunityMember($opportunityId: String!, $input: OpportunityMemberInput!) {\n    addOpportunityMember(opportunityId: $opportunityId, input: $input) {\n      id\n      clientId\n      clientName\n    }\n  }\n`;\n\nconst UPDATE_OPPORTUNITY_MEMBER = gql`\n  mutation UpdateOpportunityMember($id: String!, $input: OpportunityMemberUpdateInput!) {\n    updateOpportunityMember(id: $id, input: $input) {\n      id\n      role\n    }\n  }\n`;\n\nconst REMOVE_OPPORTUNITY_MEMBER = gql`\n  mutation RemoveOpportunityMember($id: String!) {\n    removeOpportunityMember(id: $id)\n  }\n`;\n\n\ninterface OpportunityMembersProps {\n  opportunityId: string;\n  onMembersUpdate?: () => void;\n}\n\nconst OpportunityMembers: React.FC<OpportunityMembersProps> = ({\n  opportunityId,\n  onMembersUpdate,\n}) => {\n  usePageTitle(\"Opportunity Members\");\n\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [selectedMember, setSelectedMember] = useState<any>(null);\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  // Brand styling\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    clientId: '',\n    role: '',\n    notes: '',\n  });\n\n  // Queries\n  const { data: membersData, refetch: refetchMembers } = useQuery(GET_OPPORTUNITY_MEMBERS, {\n    variables: { opportunityId },\n    skip: !opportunityId,\n  });\n\n  const { data: clientsData } = useQuery(GET_CLIENTS);\n\n  // Mutations\n  const [addMember] = useMutation(ADD_OPPORTUNITY_MEMBER);\n  const [updateMember] = useMutation(UPDATE_OPPORTUNITY_MEMBER);\n  const [removeMember] = useMutation(REMOVE_OPPORTUNITY_MEMBER);\n\n  const members = membersData?.opportunityMembers || [];\n  const clients = clientsData?.clients || [];\n\n  // Filter out clients that are already members\n  const availableClients = clients.filter(\n    (client: any) => !members.some((member: any) => member.clientId === client.id)\n  );\n\n\n  const handleOpenModal = (member?: any) => {\n    if (member) {\n      setSelectedMember(member);\n      setFormData({\n        clientId: member.clientId,\n        role: member.role || '',\n        notes: member.notes || '',\n      });\n      setIsEditMode(true);\n    } else {\n      setSelectedMember(null);\n      setFormData({\n        clientId: '',\n        role: '',\n        notes: '',\n      });\n      setIsEditMode(false);\n    }\n    onOpen();\n  };\n\n  const handleSave = async () => {\n    try {\n      if (isEditMode && selectedMember) {\n        await updateMember({\n          variables: {\n            id: selectedMember.id,\n            input: {\n              role: formData.role,\n              notes: formData.notes,\n            },\n          },\n        });\n        toast({\n          title: 'Member updated',\n          status: 'success',\n          duration: 3000,\n        });\n      } else {\n        await addMember({\n          variables: {\n            opportunityId,\n            input: formData,\n          },\n        });\n        toast({\n          title: 'Member added',\n          status: 'success',\n          duration: 3000,\n        });\n      }\n      refetchMembers();\n      onMembersUpdate?.();\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  const handleRemove = async (memberId: string) => {\n    if (window.confirm('Are you sure you want to remove this member?')) {\n      try {\n        await removeMember({ variables: { id: memberId } });\n        toast({\n          title: 'Member removed',\n          status: 'success',\n          duration: 3000,\n        });\n        refetchMembers();\n        onMembersUpdate?.();\n      } catch (error: any) {\n        toast({\n          title: 'Error removing member',\n          description: error.message,\n          status: 'error',\n          duration: 5000,\n        });\n      }\n    }\n  };\n\n\n  return (\n    <Box bg={cardGradientBg} p={6} borderRadius=\"lg\" border=\"1px\" borderColor={cardBorder}>\n      <Flex mb={4} align=\"center\">\n        <Text fontSize=\"lg\" fontWeight=\"bold\">\n          Team Members\n        </Text>\n        <Spacer />\n        <Button\n          leftIcon={<AddIcon />}\n          colorScheme=\"blue\"\n          size=\"sm\"\n          onClick={() => handleOpenModal()}\n        >\n          Add Member\n        </Button>\n      </Flex>\n\n\n      {members.length === 0 ? (\n        <Box p={8} textAlign=\"center\">\n          <Text color={textSecondary}>No team members added yet</Text>\n          <Text fontSize=\"sm\" mt={2} color={textMuted}>\n            Add members to configure commission splits per payment type\n          </Text>\n        </Box>\n      ) : (\n        <Table variant=\"simple\" size=\"sm\">\n          <Thead>\n            <Tr>\n              <Th>Member</Th>\n              <Th>Role</Th>\n              <Th isNumeric>Total Earned</Th>\n              <Th isNumeric>Pending</Th>\n              <Th>Actions</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {members.map((member: any) => (\n              <Tr key={member.id}>\n                <Td>\n                  <VStack align=\"start\" spacing={0}>\n                    <Text fontWeight=\"medium\" color={textPrimary}>{member.clientName}</Text>\n                    <Text fontSize=\"xs\" color={textMuted}>\n                      {member.clientEmail}\n                    </Text>\n                  </VStack>\n                </Td>\n                <Td>\n                  <Badge colorScheme=\"blue\">{member.role || 'Team Member'}</Badge>\n                </Td>\n                <Td isNumeric>\n                  ${(member.totalEarned || 0).toLocaleString()}\n                </Td>\n                <Td isNumeric>\n                  ${(member.totalPending || 0).toLocaleString()}\n                </Td>\n                <Td>\n                  <HStack spacing={1}>\n                    <Tooltip label=\"Edit member\">\n                      <IconButton\n                        aria-label=\"Edit\"\n                        icon={<EditIcon />}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleOpenModal(member)}\n                      />\n                    </Tooltip>\n                    <Tooltip label=\"Remove member\">\n                      <IconButton\n                        aria-label=\"Remove\"\n                        icon={<DeleteIcon />}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        colorScheme=\"red\"\n                        onClick={() => handleRemove(member.id)}\n                      />\n                    </Tooltip>\n                  </HStack>\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      )}\n\n      {/* Add/Edit Member Modal */}\n      <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>{isEditMode ? 'Edit Member' : 'Add Team Member'}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack spacing={4}>\n              {!isEditMode && (\n                <FormControl isRequired>\n                  <FormLabel>Select Client</FormLabel>\n                  <Select\n                    value={formData.clientId}\n                    onChange={(e) => setFormData({ ...formData, clientId: e.target.value })}\n                    placeholder=\"Choose a client\"\n                  >\n                    {availableClients.map((client: any) => (\n                      <option key={client.id} value={client.id}>\n                        {client.fName} {client.lName} - {client.email}\n                      </option>\n                    ))}\n                  </Select>\n                </FormControl>\n              )}\n\n              <FormControl>\n                <FormLabel>Role</FormLabel>\n                <Select\n                  value={formData.role}\n                  onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n                  placeholder=\"Select role\"\n                >\n                  <option value=\"Sales\">Sales</option>\n                  <option value=\"Account Manager\">Account Manager</option>\n                  <option value=\"Technical Lead\">Technical Lead</option>\n                  <option value=\"Project Manager\">Project Manager</option>\n                  <option value=\"Consultant\">Consultant</option>\n                  <option value=\"Partner\">Partner</option>\n                </Select>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel>Notes</FormLabel>\n                <Input\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  placeholder=\"Additional notes about this member\"\n                />\n              </FormControl>\n            </VStack>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleSave}\n              isDisabled={!isEditMode && !formData.clientId}\n            >\n              {isEditMode ? 'Update' : 'Add Member'}\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default OpportunityMembers;","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Text,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Input,\n  Badge,\n  Alert,\n  AlertIcon,\n  Button,\n  Select,\n  useToast,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  Flex,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { CheckIcon, ChevronDownIcon } from '@chakra-ui/icons';\nimport { format } from 'date-fns';\nimport { useMutation, gql } from '@apollo/client';\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { getColor } from \"../../brandConfig\";\n\nconst UPDATE_PAYMENT_STATUS = gql`\n  mutation UpdatePaymentStatus($opportunityId: String!, $paymentType: String!, $status: String!, $receivedDate: DateTime) {\n    updatePaymentStatus(opportunityId: $opportunityId, paymentType: $paymentType, status: $status, receivedDate: $receivedDate) {\n      id\n      valuePaymentStatus\n      valueReceivedDate\n    }\n  }\n`;\n\nconst UPDATE_PAYOUT_STATUS = gql`\n  mutation UpdatePayoutStatus($opportunityId: String!, $paymentType: String!, $clientId: String!, $status: String!, $paidOutDate: DateTime, $transactionId: String) {\n    updatePayoutStatus(opportunityId: $opportunityId, paymentType: $paymentType, clientId: $clientId, status: $status, paidOutDate: $paidOutDate, transactionId: $transactionId) {\n      id\n    }\n  }\n`;\n\ninterface MemberSplit {\n  clientId: string;\n  clientName?: string;\n  percentage: number;\n  payoutDelayDays?: number;\n  payoutDate?: Date | string;\n  payoutNotes?: string;\n  amount?: number;\n  payoutStatus?: string;\n  paidOutDate?: Date | string;\n  transactionId?: string;\n}\n\ninterface PaymentSplitsProps {\n  opportunityId: string;\n  paymentType: 'oneoff' | 'recurring' | 'schedule';\n  paymentAmount: number;\n  paymentLabel?: string;\n  paymentStatus?: string;\n  receivedDate?: Date | string;\n  members: any[];\n  currentSplits?: MemberSplit[];\n  onSplitsUpdate: (splits: MemberSplit[]) => void;\n  onPaymentStatusUpdate?: () => void;\n}\n\nconst PaymentSplits: React.FC<PaymentSplitsProps> = ({\n  opportunityId,\n  paymentType,\n  paymentAmount,\n  paymentLabel,\n  paymentStatus = 'PENDING',\n  receivedDate,\n  members,\n  currentSplits = [],\n  onSplitsUpdate,\n  onPaymentStatusUpdate,\n}) => {\n  usePageTitle(\"Payment Splits\");\n\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n  const [splits, setSplits] = useState<MemberSplit[]>([]);\n  const [updatePaymentStatus] = useMutation(UPDATE_PAYMENT_STATUS);\n  const [updatePayoutStatus] = useMutation(UPDATE_PAYOUT_STATUS);\n\n  // Brand styling\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n\n  useEffect(() => {\n    // Initialize splits with current data or create default splits for all members\n    if (currentSplits && currentSplits.length > 0) {\n      // Use existing splits for this specific payment type\n      setSplits(currentSplits.map(split => ({\n        ...split,\n        amount: (paymentAmount * (split.percentage || 0)) / 100,\n      })));\n    } else if (members.length > 0) {\n      // Create new splits based on member defaults + unallocated\n      const defaultSplits = [\n        ...members.map((member) => ({\n          clientId: member.clientId,\n          clientName: member.clientName,\n          percentage: 0, // Start with 0% - user must explicitly set\n          payoutDelayDays: 7, // Default to 7 days, configurable per payment\n          amount: 0,\n        })),\n        // Add unallocated entry\n        {\n          clientId: 'unallocated',\n          clientName: 'Unallocated (Company)',\n          percentage: 100, // Start with 100% unallocated\n          payoutDelayDays: 0,\n          amount: paymentAmount,\n        }\n      ];\n      setSplits(defaultSplits);\n    }\n  }, [members, currentSplits, paymentAmount, paymentType]);\n\n  const totalPercentage = splits.reduce((sum, split) => sum + (split.percentage || 0), 0);\n  const isValid = Math.abs(totalPercentage - 100) < 0.01;\n\n  const handlePercentageChange = (index: number, value: number) => {\n    const newSplits = [...splits];\n    newSplits[index].percentage = value;\n    newSplits[index].amount = (paymentAmount * value) / 100;\n\n    // Auto-adjust unallocated percentage\n    const unallocatedIndex = newSplits.findIndex(s => s.clientId === 'unallocated');\n    if (unallocatedIndex !== -1 && index !== unallocatedIndex) {\n      const allocatedTotal = newSplits.reduce((sum, split, idx) =>\n        idx !== unallocatedIndex ? sum + (split.percentage || 0) : sum, 0\n      );\n      const remaining = Math.max(0, 100 - allocatedTotal);\n      newSplits[unallocatedIndex].percentage = remaining;\n      newSplits[unallocatedIndex].amount = (paymentAmount * remaining) / 100;\n    }\n\n    setSplits(newSplits);\n  };\n\n  const handlePayoutDelayChange = (index: number, value: number) => {\n    const newSplits = [...splits];\n    newSplits[index].payoutDelayDays = value;\n    newSplits[index].payoutDate = undefined; // Clear date if setting delay\n    setSplits(newSplits);\n  };\n\n  const handlePayoutDateChange = (index: number, value: string) => {\n    const newSplits = [...splits];\n    newSplits[index].payoutDate = value;\n    newSplits[index].payoutDelayDays = undefined; // Clear delay if setting date\n    setSplits(newSplits);\n  };\n\n  const handleNotesChange = (index: number, value: string) => {\n    const newSplits = [...splits];\n    newSplits[index].payoutNotes = value;\n    setSplits(newSplits);\n  };\n\n  const autoDistribute = () => {\n    if (splits.length === 0) return;\n\n    // Distribute equally among actual members (not unallocated)\n    const actualMembers = splits.filter(s => s.clientId !== 'unallocated');\n    if (actualMembers.length === 0) return;\n\n    const equalPercentage = 100 / actualMembers.length;\n    const newSplits = splits.map((split) => ({\n      ...split,\n      percentage: split.clientId === 'unallocated' ? 0 : equalPercentage,\n      amount: split.clientId === 'unallocated' ? 0 : (paymentAmount * equalPercentage) / 100,\n    }));\n    setSplits(newSplits);\n  };\n\n  const saveSplits = () => {\n    if (!isValid) {\n      toast({\n        title: 'Invalid splits',\n        description: 'Total percentage must equal 100%',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    // Filter splits to only include fields expected by the backend MemberSplitInput\n    // Note: paidOutDate and transactionId are read-only fields from the backend\n    // and should not be sent in mutations\n    const splitsForBackend = splits.map(split => ({\n      clientId: split.clientId,\n      percentage: split.percentage,\n      payoutDelayDays: split.payoutDelayDays,\n      payoutDate: split.payoutDate,\n      payoutNotes: split.payoutNotes,\n      payoutStatus: split.payoutStatus,\n      // Excluded fields: paidOutDate and transactionId are managed by the backend\n    }));\n\n    onSplitsUpdate(splitsForBackend);\n    toast({\n      title: `${getPaymentTypeLabel()} splits saved`,\n      status: 'success',\n      duration: 2000,\n    });\n  };\n\n  const handlePaymentStatusChange = async (newStatus: string) => {\n    try {\n      const paymentTypeKey = paymentType === 'oneoff' ? 'oneoff' :\n                            paymentType === 'recurring' ? 'recurring' :\n                            `schedule-${paymentLabel}`;\n\n      await updatePaymentStatus({\n        variables: {\n          opportunityId,\n          paymentType: paymentTypeKey,\n          status: newStatus,\n          receivedDate: newStatus === 'RECEIVED' ? new Date() : null,\n        },\n      });\n\n      toast({\n        title: 'Payment status updated',\n        status: 'success',\n        duration: 3000,\n      });\n\n      onPaymentStatusUpdate?.();\n    } catch (error: any) {\n      toast({\n        title: 'Error updating payment status',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  const handlePayoutStatusChange = async (clientId: string, newStatus: string) => {\n    try {\n      const paymentTypeKey = paymentType === 'oneoff' ? 'oneoff' :\n                            paymentType === 'recurring' ? 'recurring' :\n                            `schedule-${paymentLabel}`;\n\n      await updatePayoutStatus({\n        variables: {\n          opportunityId,\n          paymentType: paymentTypeKey,\n          clientId,\n          status: newStatus,\n          paidOutDate: newStatus === 'PAID' ? new Date() : null,\n        },\n      });\n\n      toast({\n        title: 'Payout status updated',\n        status: 'success',\n        duration: 3000,\n      });\n\n      onPaymentStatusUpdate?.();\n    } catch (error: any) {\n      toast({\n        title: 'Error updating payout status',\n        description: error.message,\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'gray';\n      case 'RECEIVED':\n        return 'green';\n      case 'DISTRIBUTED':\n        return 'blue';\n      case 'CANCELLED':\n        return 'red';\n      default:\n        return 'gray';\n    }\n  };\n\n  const getPayoutStatusColor = (status: string) => {\n    switch (status) {\n      case 'PENDING':\n        return 'gray';\n      case 'SCHEDULED':\n        return 'yellow';\n      case 'PROCESSING':\n        return 'orange';\n      case 'PAID':\n        return 'green';\n      case 'FAILED':\n        return 'red';\n      case 'CANCELLED':\n        return 'red';\n      default:\n        return 'gray';\n    }\n  };\n\n  const getPaymentTypeColor = () => {\n    switch (paymentType) {\n      case 'oneoff':\n        return 'blue';\n      case 'recurring':\n        return 'green';\n      case 'schedule':\n        return 'purple';\n      default:\n        return 'gray';\n    }\n  };\n\n  const getPaymentTypeLabel = () => {\n    switch (paymentType) {\n      case 'oneoff':\n        return 'One-off Payment';\n      case 'recurring':\n        return 'Recurring Payment';\n      case 'schedule':\n        return paymentLabel || 'Scheduled Payment';\n      default:\n        return 'Payment';\n    }\n  };\n\n  if (members.length === 0) {\n    return (\n      <Alert status=\"info\" borderRadius=\"md\">\n        <AlertIcon />\n        <Text>Add team members to configure payment splits</Text>\n      </Alert>\n    );\n  }\n\n  return (\n    <Box bg={cardGradientBg} p={4} borderRadius=\"md\" border=\"1px\" borderColor={cardBorder}>\n      <VStack spacing={4} align=\"stretch\">\n        <Flex justify=\"space-between\" align=\"center\" wrap=\"wrap\" gap={2}>\n          <HStack>\n            <Badge colorScheme={getPaymentTypeColor()} fontSize=\"sm\">\n              {getPaymentTypeLabel()}\n            </Badge>\n            <Text fontWeight=\"bold\" fontSize=\"lg\">\n              ${paymentAmount.toLocaleString()}\n            </Text>\n            <Menu>\n              <MenuButton\n                as={Button}\n                rightIcon={<ChevronDownIcon />}\n                size=\"sm\"\n                colorScheme={getPaymentStatusColor(paymentStatus)}\n                variant=\"outline\"\n              >\n                Payment: {paymentStatus}\n              </MenuButton>\n              <MenuList>\n                <MenuItem onClick={() => handlePaymentStatusChange('PENDING')}>\n                  Mark as Pending\n                </MenuItem>\n                <MenuItem onClick={() => handlePaymentStatusChange('RECEIVED')}>\n                  Mark as Received\n                </MenuItem>\n                <MenuItem onClick={() => handlePaymentStatusChange('DISTRIBUTED')}>\n                  Mark as Distributed\n                </MenuItem>\n                <MenuItem onClick={() => handlePaymentStatusChange('CANCELLED')}>\n                  Mark as Cancelled\n                </MenuItem>\n              </MenuList>\n            </Menu>\n            {receivedDate && (\n              <Text fontSize=\"sm\" color={textMuted}>\n                Received: {format(new Date(receivedDate), 'MMM d, yyyy')}\n              </Text>\n            )}\n          </HStack>\n          <Button size=\"sm\" variant=\"outline\" onClick={autoDistribute}>\n            Distribute Equally\n          </Button>\n        </Flex>\n\n        <Alert\n          status={isValid ? 'success' : 'warning'}\n          size=\"sm\"\n          borderRadius=\"md\"\n        >\n          <AlertIcon />\n          <Text fontSize=\"sm\">\n            Total: {totalPercentage.toFixed(1)}%\n            {!isValid && ` (${(100 - totalPercentage).toFixed(1)}% ${totalPercentage > 100 ? 'over' : 'remaining'})`}\n          </Text>\n        </Alert>\n\n        <Table variant=\"simple\" size=\"sm\">\n          <Thead>\n            <Tr>\n              <Th>Member</Th>\n              <Th isNumeric>Split %</Th>\n              <Th isNumeric>Amount</Th>\n              <Th>Payout Schedule</Th>\n              <Th>Payout Status</Th>\n              <Th>Notes</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {splits.map((split, index) => {\n              const member = members.find(m => m.clientId === split.clientId);\n              const displayName = split.clientName || member?.clientName || 'Unknown Member';\n              const isUnallocated = split.clientId === 'unallocated';\n              return (\n              <Tr key={split.clientId} bg={isUnallocated ? getColor('background.overlay', colorMode) : undefined}>\n                <Td>\n                  <Text fontWeight=\"medium\" color={isUnallocated ? textMuted : textPrimary}>\n                    {displayName}\n                  </Text>\n                </Td>\n                <Td isNumeric>\n                  <NumberInput\n                    value={split.percentage}\n                    onChange={(_, value) => handlePercentageChange(index, value)}\n                    min={0}\n                    max={100}\n                    precision={2}\n                    size=\"sm\"\n                    width=\"100px\"\n                  >\n                    <NumberInputField />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </Td>\n                <Td isNumeric>\n                  <Text fontWeight=\"bold\" color=\"green.600\">\n                    ${(split.amount || 0).toLocaleString()}\n                  </Text>\n                </Td>\n                <Td>\n                  <VStack spacing={1} align=\"start\">\n                    <Select\n                      size=\"sm\"\n                      value={split.payoutDate ? 'date' : 'delay'}\n                      onChange={(e) => {\n                        if (e.target.value === 'delay') {\n                          handlePayoutDelayChange(index, split.payoutDelayDays || 7);\n                        }\n                      }}\n                    >\n                      <option value=\"delay\">Days after payment</option>\n                      <option value=\"date\">Specific date</option>\n                    </Select>\n                    {split.payoutDate ? (\n                      <Input\n                        type=\"date\"\n                        size=\"sm\"\n                        value={split.payoutDate as string}\n                        onChange={(e) => handlePayoutDateChange(index, e.target.value)}\n                      />\n                    ) : (\n                      <HStack>\n                        <NumberInput\n                          value={split.payoutDelayDays || 7}\n                          onChange={(_, value) => handlePayoutDelayChange(index, value)}\n                          min={0}\n                          max={365}\n                          size=\"sm\"\n                          width=\"80px\"\n                        >\n                          <NumberInputField />\n                        </NumberInput>\n                        <Text fontSize=\"sm\" color={textMuted}>days</Text>\n                      </HStack>\n                    )}\n                  </VStack>\n                </Td>\n                <Td>\n                  {!isUnallocated && (\n                    <Menu>\n                      <MenuButton\n                        as={Button}\n                        size=\"xs\"\n                        colorScheme={getPayoutStatusColor(split.payoutStatus || 'PENDING')}\n                        variant=\"outline\"\n                        isDisabled={paymentStatus !== 'RECEIVED'}\n                      >\n                        {split.payoutStatus || 'PENDING'}\n                      </MenuButton>\n                      <MenuList>\n                        <MenuItem onClick={() => handlePayoutStatusChange(split.clientId, 'PENDING')}>\n                          Pending\n                        </MenuItem>\n                        <MenuItem onClick={() => handlePayoutStatusChange(split.clientId, 'SCHEDULED')}>\n                          Scheduled\n                        </MenuItem>\n                        <MenuItem onClick={() => handlePayoutStatusChange(split.clientId, 'PROCESSING')}>\n                          Processing\n                        </MenuItem>\n                        <MenuItem onClick={() => handlePayoutStatusChange(split.clientId, 'PAID')}>\n                          Paid\n                        </MenuItem>\n                        <MenuItem onClick={() => handlePayoutStatusChange(split.clientId, 'FAILED')}>\n                          Failed\n                        </MenuItem>\n                      </MenuList>\n                    </Menu>\n                  )}\n                </Td>\n                <Td>\n                  <Input\n                    size=\"sm\"\n                    placeholder=\"Notes\"\n                    value={split.payoutNotes || ''}\n                    onChange={(e) => handleNotesChange(index, e.target.value)}\n                  />\n                </Td>\n              </Tr>\n              );\n            })}\n          </Tbody>\n        </Table>\n\n        <HStack justify=\"flex-end\">\n          <Button\n            colorScheme=\"blue\"\n            size=\"sm\"\n            leftIcon={<CheckIcon />}\n            onClick={saveSplits}\n            isDisabled={!isValid}\n          >\n            Save Splits\n          </Button>\n        </HStack>\n      </VStack>\n    </Box>\n  );\n};\n\nexport default PaymentSplits;","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  Button,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Card,\n  CardBody,\n  CardHeader,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Grid,\n  GridItem,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Progress,\n  Input,\n  Textarea,\n  Select,\n  FormControl,\n  FormLabel,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  InputGroup,\n  InputLeftAddon,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  IconButton,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { FiArrowLeft, FiEdit, FiCheck, FiTrash2, FiUser, FiMail, FiPhone, FiDollarSign, FiCalendar, FiRefreshCcw, FiCheckCircle, FiPlus } from 'react-icons/fi';\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport { OpportunityTasks } from \"../../components/opportunities/OpportunityTasks\";\nimport { OpportunityMeetings } from \"../../components/opportunities/OpportunityMeetings\";\nimport { OpportunityNotes } from \"../../components/opportunities/OpportunityNotes\";\nimport OpportunityMembers from \"./OpportunityMembers\";\nimport PaymentSplits from \"./PaymentSplits\";\nimport opportunitiesModuleConfig from \"./moduleConfig\";\nimport { getColor } from \"../../brandConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\n\n// GraphQL Queries and Mutations\nconst GET_ALL_CLIENTS = gql`\n  query GetAllClients {\n    clients {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n    }\n  }\n`;\n\nconst GET_OPPORTUNITY = gql`\n  query GetOpportunity($id: String!) {\n    opportunity(id: $id) {\n      id\n      title\n      description\n      clientId\n      clientName\n      clientEmail\n      clientPhone\n      value\n      valuePaymentStatus\n      valueReceivedDate\n      stage\n      status\n      priority\n      probability\n      expectedCloseDate\n      source\n      campaign\n      internalNotes\n      products\n      services\n      tags\n      assignedTo\n      assignedToName\n      expectedRevenue\n      createdAt\n      updatedAt\n      lastActivityDate\n      taskCount\n      meetingCount\n      emailCount\n      callCount\n      noteCount\n      paymentSchedule {\n        description\n        amount\n        dueDate\n        status\n        paymentStatus\n        receivedDate\n        paidDate\n        notes\n        memberSplits {\n          clientId\n          clientName\n          percentage\n          amount\n          payoutDelayDays\n          payoutDate\n          payoutNotes\n          payoutStatus\n          paidOutDate\n          transactionId\n        }\n      }\n      recurringPayment {\n        monthlyAmount\n        probability\n        description\n        startDate\n        endDate\n        paymentStatus\n        lastPaymentDate\n        nextPaymentDate\n        memberSplits {\n          clientId\n          clientName\n          percentage\n          amount\n          payoutDelayDays\n          payoutDate\n          payoutNotes\n          payoutStatus\n          paidOutDate\n          transactionId\n        }\n      }\n      valueMemberSplits {\n        clientId\n        clientName\n        percentage\n        amount\n        payoutDelayDays\n        payoutDate\n        payoutNotes\n        payoutStatus\n        paidOutDate\n        transactionId\n      }\n      memberCount\n      totalScheduledAmount\n      totalPaidAmount\n      projectedTotalValue\n    }\n  }\n`;\n\nconst UPDATE_OPPORTUNITY = gql`\n  mutation UpdateOpportunity($id: String!, $input: OpportunityUpdateInput!) {\n    updateOpportunity(id: $id, input: $input) {\n      id\n      title\n      description\n      value\n      stage\n      priority\n      probability\n      expectedCloseDate\n      source\n      campaign\n      internalNotes\n      paymentSchedule {\n        description\n        amount\n        dueDate\n        status\n        paidDate\n        notes\n      }\n      recurringPayment {\n        monthlyAmount\n        probability\n        description\n        startDate\n        endDate\n      }\n    }\n  }\n`;\n\nconst UPDATE_PAYMENT_STATUS = gql`\n  mutation UpdateOpportunityPaymentStatus($opportunityId: String!, $paymentIndex: Int!, $status: PaymentScheduleStatus!) {\n    updateOpportunityPaymentStatus(opportunityId: $opportunityId, paymentIndex: $paymentIndex, status: $status) {\n      id\n      paymentSchedule {\n        description\n        amount\n        dueDate\n        status\n        paidDate\n        notes\n      }\n      totalPaidAmount\n      expectedRevenue\n    }\n  }\n`;\n\nconst DELETE_OPPORTUNITY = gql`\n  mutation DeleteOpportunity($id: String!) {\n    deleteOpportunity(id: $id)\n  }\n`;\n\nconst GET_OPPORTUNITY_MEMBERS = gql`\n  query GetOpportunityMembers($opportunityId: String!) {\n    opportunityMembers(opportunityId: $opportunityId) {\n      id\n      clientId\n      clientName\n      clientEmail\n      role\n      notes\n      isActive\n    }\n  }\n`;\n\nconst GET_OPPORTUNITY_STAGES = gql`\n  query GetOpportunityStages {\n    opportunityStages {\n      id\n      name\n      code\n      order\n      color\n      defaultProbability\n    }\n  }\n`;\n\nconst OpportunityDetail: React.FC = () => {\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { id } = useParams<{ id: string }>();\n  const [isEditing, setIsEditing] = useState(false);\n  const [isEditingPayments, setIsEditingPayments] = useState(false);\n  const [formData, setFormData] = useState<any>({});\n  const [paymentFormData, setPaymentFormData] = useState<any>({\n    paymentSchedule: [],\n    recurringPayment: {\n      monthlyAmount: 0,\n      probability: 100,\n      description: '',\n      startDate: '',\n      endDate: ''\n    }\n  });\n  const { colorMode } = useColorMode();\n\n  // Brand styling variables\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardHeaderBg = getColor(\"background.cardHeader\", colorMode) || (colorMode === 'light' ? \"gray.50\" : \"gray.800\");\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n\n  // Queries\n  const { data, loading, error, refetch } = useQuery(GET_OPPORTUNITY, {\n    variables: { id },\n    skip: !id,\n  });\n\n  const { data: stagesData } = useQuery(GET_OPPORTUNITY_STAGES);\n  const stages = stagesData?.opportunityStages || [];\n\n  const { data: clientsData, loading: loadingClients } = useQuery(GET_ALL_CLIENTS);\n  const clients = clientsData?.clients || [];\n\n  // Debug: Log clients data\n  useEffect(() => {\n    if (clientsData) {\n      console.log('Clients loaded:', clients.length, clients);\n    }\n  }, [clientsData, clients]);\n\n  // Update page title based on opportunity name\n  usePageTitle(data?.opportunity?.title ? `${data.opportunity.title} - Opportunity Details` : 'Opportunity Details');\n\n  const { data: membersData, refetch: refetchMembers } = useQuery(GET_OPPORTUNITY_MEMBERS, {\n    variables: { opportunityId: id },\n    skip: !id,\n  });\n\n  // Mutations\n  const [updateOpportunity] = useMutation(UPDATE_OPPORTUNITY);\n  const [deleteOpportunity, { loading: deleting }] = useMutation(DELETE_OPPORTUNITY);\n  const [updatePaymentStatus] = useMutation(UPDATE_PAYMENT_STATUS);\n\n  const opportunity = data?.opportunity;\n\n  // Initialize form data when opportunity loads\n  useEffect(() => {\n    if (opportunity) {\n      setFormData({\n        title: opportunity.title || '',\n        description: opportunity.description || '',\n        clientId: opportunity.clientId || '',\n        value: opportunity.value || 0,\n        stage: opportunity.stage || 'LEAD',\n        priority: opportunity.priority || 'MEDIUM',\n        probability: opportunity.probability || 0,\n        expectedCloseDate: opportunity.expectedCloseDate || '',\n        source: opportunity.source || '',\n        campaign: opportunity.campaign || '',\n        internalNotes: opportunity.internalNotes || '',\n      });\n\n      // Initialize payment form data\n      setPaymentFormData({\n        paymentSchedule: opportunity.paymentSchedule || [],\n        recurringPayment: opportunity.recurringPayment || {\n          monthlyAmount: 0,\n          probability: 100,\n          description: '',\n          startDate: '',\n          endDate: ''\n        }\n      });\n    }\n  }, [opportunity]);\n\n  const handleSave = async () => {\n    try {\n      // Helper function to convert date string to ISO format\n      const formatDateToISO = (dateStr: string) => {\n        if (!dateStr) return undefined;\n        // Convert YYYY-MM-DD to ISO 8601 format with time\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return undefined;\n        return date.toISOString();\n      };\n\n      // Prepare input without clientId (not updatable)\n      const { clientId, ...updateInput } = formData;\n\n      await updateOpportunity({\n        variables: {\n          id,\n          input: {\n            ...updateInput,\n            value: parseFloat(formData.value.toString()),\n            expectedCloseDate: formatDateToISO(formData.expectedCloseDate)\n          }\n        }\n      });\n\n      toast({\n        title: 'Opportunity updated',\n        description: 'Changes have been saved successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      setIsEditing(false);\n      refetch();\n    } catch (error: any) {\n      toast({\n        title: 'Update failed',\n        description: error.message || 'Failed to update opportunity',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData((prev: any) => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleCancel = () => {\n    if (opportunity) {\n      setFormData({\n        title: opportunity.title || '',\n        description: opportunity.description || '',\n        clientId: opportunity.clientId || '',\n        value: opportunity.value || 0,\n        stage: opportunity.stage || 'LEAD',\n        priority: opportunity.priority || 'MEDIUM',\n        probability: opportunity.probability || 0,\n        expectedCloseDate: opportunity.expectedCloseDate || '',\n        source: opportunity.source || '',\n        campaign: opportunity.campaign || '',\n        internalNotes: opportunity.internalNotes || '',\n      });\n    }\n    setIsEditing(false);\n  };\n\n  const handleSavePayments = async () => {\n    try {\n      // Helper function to convert date string to ISO format\n      const formatDateToISO = (dateStr: string) => {\n        if (!dateStr) return undefined;\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return undefined;\n        return date.toISOString();\n      };\n\n      await updateOpportunity({\n        variables: {\n          id,\n          input: {\n            paymentSchedule: paymentFormData.paymentSchedule\n              .filter((p: any) => p.description && p.amount > 0)\n              .map((p: any) => ({\n                description: p.description,\n                amount: parseFloat(p.amount.toString()),\n                dueDate: formatDateToISO(p.dueDate) || new Date().toISOString(),\n                status: p.status || 'PENDING',\n                paidDate: p.paidDate ? formatDateToISO(p.paidDate) : undefined,\n                notes: p.notes\n              })),\n            recurringPayment: paymentFormData.recurringPayment.monthlyAmount > 0 ? {\n              monthlyAmount: parseFloat(paymentFormData.recurringPayment.monthlyAmount.toString()),\n              probability: paymentFormData.recurringPayment.probability,\n              description: paymentFormData.recurringPayment.description,\n              startDate: formatDateToISO(paymentFormData.recurringPayment.startDate) || new Date().toISOString(),\n              endDate: formatDateToISO(paymentFormData.recurringPayment.endDate)\n            } : undefined\n          }\n        }\n      });\n\n      toast({\n        title: 'Payment details updated',\n        description: 'Changes have been saved successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      setIsEditingPayments(false);\n      refetch();\n    } catch (error: any) {\n      toast({\n        title: 'Update failed',\n        description: error.message || 'Failed to update payment details',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleCancelPayments = () => {\n    if (opportunity) {\n      setPaymentFormData({\n        paymentSchedule: opportunity.paymentSchedule || [],\n        recurringPayment: opportunity.recurringPayment || {\n          monthlyAmount: 0,\n          probability: 100,\n          description: '',\n          startDate: '',\n          endDate: ''\n        }\n      });\n    }\n    setIsEditingPayments(false);\n  };\n\n  // Payment schedule functions\n  const addPaymentScheduleItem = () => {\n    setPaymentFormData((prev: any) => ({\n      ...prev,\n      paymentSchedule: [\n        ...prev.paymentSchedule,\n        {\n          description: '',\n          amount: 0,\n          dueDate: '',\n          status: 'PENDING',\n          notes: ''\n        }\n      ]\n    }));\n  };\n\n  const updatePaymentScheduleItem = (index: number, field: string, value: any) => {\n    setPaymentFormData((prev: any) => ({\n      ...prev,\n      paymentSchedule: prev.paymentSchedule.map((item: any, i: number) =>\n        i === index ? { ...item, [field]: value } : item\n      )\n    }));\n  };\n\n  const removePaymentScheduleItem = (index: number) => {\n    setPaymentFormData((prev: any) => ({\n      ...prev,\n      paymentSchedule: prev.paymentSchedule.filter((_: any, i: number) => i !== index)\n    }));\n  };\n\n  const updateRecurringPayment = (field: string, value: any) => {\n    setPaymentFormData((prev: any) => ({\n      ...prev,\n      recurringPayment: {\n        ...prev.recurringPayment,\n        [field]: value\n      }\n    }));\n  };\n\n  const handleDelete = async () => {\n    if (!window.confirm('Are you sure you want to delete this opportunity?')) {\n      return;\n    }\n\n    try {\n      await deleteOpportunity({\n        variables: { id }\n      });\n\n      toast({\n        title: 'Opportunity deleted',\n        description: 'The opportunity has been deleted successfully',\n        status: 'success',\n        duration: 3000,\n        isClosable: true,\n      });\n\n      navigate('/opportunities');\n    } catch (error: any) {\n      toast({\n        title: 'Failed to delete opportunity',\n        description: error.message || 'An error occurred',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const getStageColor = (stage: string) => {\n    const colors: { [key: string]: string } = {\n      LEAD: 'blue',\n      QUALIFIED: 'cyan',\n      PROPOSAL: 'orange',\n      NEGOTIATION: 'yellow',\n      CLOSED_WON: 'green',\n      CLOSED_LOST: 'red',\n    };\n    return colors[stage] || 'gray';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const colors: { [key: string]: string } = {\n      LOW: 'gray',\n      MEDIUM: 'blue',\n      HIGH: 'orange',\n      CRITICAL: 'red',\n    };\n    return colors[priority] || 'gray';\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-AU', {\n      style: 'currency',\n      currency: 'AUD',\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    if (!date) return 'Not set';\n    return new Date(date).toLocaleDateString('en-AU', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  if (loading) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n        <Container maxW=\"4xl\" py={8} flex=\"1\">\n          <HStack justify=\"center\" py={20}>\n            <Spinner size=\"xl\" color={primaryColor} />\n            <Text color={textPrimary}>Loading opportunity...</Text>\n          </HStack>\n        </Container>\n        <Box position=\"sticky\" bottom={0} zIndex={10}>\n          <FooterWithFourColumns />\n        </Box>\n      </Box>\n    );\n  }\n\n  if (error || !opportunity) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n        <Container maxW=\"4xl\" py={8} flex=\"1\">\n          <Alert status=\"error\" borderRadius=\"md\">\n            <AlertIcon />\n            {error ? error.message : 'Opportunity not found'}\n          </Alert>\n          <Button\n            mt={4}\n            bg=\"rgba(255, 255, 255, 0.1)\"\n            color={textPrimary}\n            leftIcon={<FiArrowLeft />}\n            onClick={() => navigate('/opportunities')}\n            _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n          >\n            Back to Opportunities\n          </Button>\n        </Container>\n        <Box position=\"sticky\" bottom={0} zIndex={10}>\n          <FooterWithFourColumns />\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={opportunitiesModuleConfig} />\n\n      <Container maxW=\"6xl\" py={8} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header */}\n          <VStack spacing={4} align=\"stretch\">\n            <HStack>\n              <Button\n                bg=\"rgba(255, 255, 255, 0.1)\"\n                color={textPrimary}\n                leftIcon={<FiArrowLeft />}\n                onClick={() => navigate('/opportunities')}\n                _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n                transition=\"all 0.2s\"\n                size={{ base: 'sm', md: 'md' }}\n              >\n                Back\n              </Button>\n            </HStack>\n\n            <VStack spacing={2} align=\"stretch\">\n              {isEditing ? (\n                <Input\n                  value={formData.title}\n                  onChange={(e) => handleInputChange('title', e.target.value)}\n                  fontSize={{ base: 'lg', md: '2xl' }}\n                  fontWeight=\"bold\"\n                  bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _hover={{ borderColor: textSecondary }}\n                  _focus={{\n                    borderColor: primaryColor,\n                    boxShadow: `0 0 0 1px ${primaryColor}`,\n                  }}\n                />\n              ) : (\n                <Heading size={{ base: 'md', md: 'lg' }} color={textPrimary}>{opportunity.title}</Heading>\n              )}\n\n              <HStack spacing={2} flexWrap=\"wrap\">\n                {isEditing ? (\n                  <>\n                    <Select\n                      value={formData.stage}\n                      onChange={(e) => handleInputChange('stage', e.target.value)}\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                      size=\"sm\"\n                      width=\"auto\"\n                      minW=\"120px\"\n                      _hover={{ borderColor: textSecondary }}\n                      _focus={{\n                        borderColor: primaryColor,\n                        boxShadow: `0 0 0 1px ${primaryColor}`,\n                      }}\n                    >\n                      {stages.map((stage: any) => (\n                        <option key={stage.code} value={stage.code}>\n                          {stage.name}\n                        </option>\n                      ))}\n                    </Select>\n                    <Select\n                      value={formData.priority}\n                      onChange={(e) => handleInputChange('priority', e.target.value)}\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={cardBorder}\n                      color={textPrimary}\n                      size=\"sm\"\n                      width=\"auto\"\n                      minW=\"120px\"\n                      _hover={{ borderColor: textSecondary }}\n                      _focus={{\n                        borderColor: primaryColor,\n                        boxShadow: `0 0 0 1px ${primaryColor}`,\n                      }}\n                    >\n                      <option value=\"LOW\">Low</option>\n                      <option value=\"MEDIUM\">Medium</option>\n                      <option value=\"HIGH\">High</option>\n                      <option value=\"CRITICAL\">Critical</option>\n                    </Select>\n                  </>\n                ) : (\n                  <>\n                    <Badge colorScheme={getStageColor(opportunity.stage)}>\n                      {opportunity.stage}\n                    </Badge>\n                    <Badge colorScheme={getPriorityColor(opportunity.priority)}>\n                      {opportunity.priority}\n                    </Badge>\n                  </>\n                )}\n              </HStack>\n            </VStack>\n\n            <HStack spacing={2} flexWrap=\"wrap\">\n              {isEditing ? (\n                <>\n                  <Button\n                    onClick={handleCancel}\n                    variant=\"outline\"\n                    borderColor={cardBorder}\n                    color={textPrimary}\n                    size={{ base: 'sm', md: 'md' }}\n                    _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    leftIcon={<FiCheck />}\n                    onClick={handleSave}\n                    bg={primaryColor}\n                    color=\"white\"\n                    size={{ base: 'sm', md: 'md' }}\n                    _hover={{ bg: primaryHover }}\n                  >\n                    Save\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  leftIcon={<FiEdit />}\n                  onClick={() => setIsEditing(true)}\n                  bg=\"rgba(255, 255, 255, 0.1)\"\n                  color={textPrimary}\n                  size={{ base: 'sm', md: 'md' }}\n                  _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n                >\n                  Edit\n                </Button>\n              )}\n              <Button\n                leftIcon={<FiTrash2 />}\n                onClick={handleDelete}\n                isLoading={deleting}\n                colorScheme=\"red\"\n                variant=\"outline\"\n                size={{ base: 'sm', md: 'md' }}\n              >\n                Delete\n              </Button>\n            </HStack>\n          </VStack>\n\n          {/* Stats Cards */}\n          <Grid templateColumns={{ base: \"repeat(1, 1fr)\", sm: \"repeat(2, 1fr)\", md: \"repeat(4, 1fr)\" }} gap={4}>\n            <GridItem>\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n              >\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>Value</StatLabel>\n                    {isEditing ? (\n                      <InputGroup size=\"lg\">\n                        <InputLeftAddon bg=\"rgba(255, 255, 255, 0.1)\" borderColor={cardBorder} color={textPrimary}>$</InputLeftAddon>\n                        <NumberInput\n                          value={formData.value}\n                          onChange={(_, value) => handleInputChange('value', value || 0)}\n                          min={0}\n                          flex=\"1\"\n                        >\n                          <NumberInputField\n                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                            borderColor={cardBorder}\n                            color={textPrimary}\n                            _hover={{ borderColor: textSecondary }}\n                            _focus={{\n                              borderColor: primaryColor,\n                              boxShadow: `0 0 0 1px ${primaryColor}`,\n                            }}\n                          />\n                        </NumberInput>\n                      </InputGroup>\n                    ) : (\n                      <StatNumber color={textPrimary}>\n                        {formatCurrency(opportunity.value)}\n                      </StatNumber>\n                    )}\n                  </Stat>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem>\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n              >\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>Expected Revenue</StatLabel>\n                    {isEditing ? (\n                      <VStack align=\"stretch\" spacing={2}>\n                        <HStack>\n                          <Text color={textPrimary} fontWeight=\"bold\" fontSize=\"2xl\">{formData.probability}%</Text>\n                        </HStack>\n                        <Slider\n                          value={formData.probability}\n                          onChange={(value) => handleInputChange('probability', value)}\n                          min={0}\n                          max={100}\n                          step={5}\n                        >\n                          <SliderTrack bg={colorMode === 'light' ? 'gray.200' : 'rgba(255, 255, 255, 0.1)'}>\n                            <SliderFilledTrack bg={primaryColor} />\n                          </SliderTrack>\n                          <SliderThumb boxSize={6}>\n                            <Box color={primaryColor} as={FiDollarSign} />\n                          </SliderThumb>\n                        </Slider>\n                        <Text fontSize=\"sm\" color={textMuted}>\n                          Expected: {formatCurrency(formData.value * formData.probability / 100)}\n                        </Text>\n                      </VStack>\n                    ) : (\n                      <>\n                        <StatNumber color={textPrimary}>\n                          {formatCurrency(opportunity.expectedRevenue)}\n                        </StatNumber>\n                        <StatHelpText color={textMuted}>\n                          <VStack align=\"start\" spacing={0}>\n                            <Text>{opportunity.probability}% win probability</Text>\n                            <Text fontSize=\"xs\" opacity={0.8}>\n                              {formatCurrency(opportunity.value)} × {opportunity.probability}%\n                              {opportunity.paymentSchedule?.length > 0 && ` + scheduled`}\n                              {opportunity.recurringPayment?.monthlyAmount > 0 && ` + recurring`}\n                            </Text>\n                          </VStack>\n                        </StatHelpText>\n                      </>\n                    )}\n                  </Stat>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem>\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n              >\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>Expected Close</StatLabel>\n                    {isEditing ? (\n                      <Input\n                        type=\"date\"\n                        value={formData.expectedCloseDate ? new Date(formData.expectedCloseDate).toISOString().split('T')[0] : ''}\n                        onChange={(e) => handleInputChange('expectedCloseDate', e.target.value)}\n                        bg=\"rgba(255, 255, 255, 0.05)\"\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        _hover={{ borderColor: textSecondary }}\n                        _focus={{\n                          borderColor: primaryColor,\n                          boxShadow: `0 0 0 1px ${primaryColor}`,\n                        }}\n                      />\n                    ) : (\n                      <StatNumber fontSize=\"lg\" color={textPrimary}>\n                        {formatDate(opportunity.expectedCloseDate)}\n                      </StatNumber>\n                    )}\n                  </Stat>\n                </CardBody>\n              </Card>\n            </GridItem>\n            <GridItem>\n              <Card\n                bg={cardGradientBg}\n                backdropFilter=\"blur(10px)\"\n                boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                border=\"1px\"\n                borderColor={cardBorder}\n                borderRadius=\"lg\"\n              >\n                <CardBody>\n                  <Stat>\n                    <StatLabel color={textMuted}>Activities</StatLabel>\n                    <StatNumber color={textPrimary}>\n                      {opportunity.taskCount + opportunity.meetingCount + opportunity.emailCount + opportunity.callCount}\n                    </StatNumber>\n                    <StatHelpText color={textMuted}>\n                      <VStack align=\"start\" spacing={0}>\n                        <Text fontSize=\"xs\">Tasks: {opportunity.taskCount || 0}</Text>\n                        <Text fontSize=\"xs\">Meetings: {opportunity.meetingCount || 0}</Text>\n                        <Text fontSize=\"xs\">Emails: {opportunity.emailCount || 0}</Text>\n                        <Text fontSize=\"xs\">Calls: {opportunity.callCount || 0}</Text>\n                      </VStack>\n                    </StatHelpText>\n                  </Stat>\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n\n          {/* Main Content Tabs */}\n          <Tabs colorScheme=\"blue\" isLazy>\n            <TabList borderBottomColor={cardBorder} overflowX=\"auto\" overflowY=\"hidden\">\n              <Tab color={textSecondary} fontSize={{ base: 'sm', md: 'md' }} _selected={{ color: primaryColor, borderColor: primaryColor }}>Overview</Tab>\n              <Tab color={textSecondary} fontSize={{ base: 'sm', md: 'md' }} _selected={{ color: primaryColor, borderColor: primaryColor }}>Payment</Tab>\n              <Tab color={textSecondary} fontSize={{ base: 'sm', md: 'md' }} _selected={{ color: primaryColor, borderColor: primaryColor }}>Team</Tab>\n              <Tab color={textSecondary} fontSize={{ base: 'sm', md: 'md' }} _selected={{ color: primaryColor, borderColor: primaryColor }}>\n                Activities ({opportunity.taskCount + opportunity.meetingCount + opportunity.emailCount + opportunity.callCount})\n              </Tab>\n              <Tab color={textSecondary} fontSize={{ base: 'sm', md: 'md' }} _selected={{ color: primaryColor, borderColor: primaryColor }}>\n                Notes ({opportunity.noteCount || 0})\n              </Tab>\n            </TabList>\n\n            <TabPanels>\n              {/* Overview Tab */}\n              <TabPanel px={0}>\n                <Grid templateColumns={{ base: \"repeat(1, 1fr)\", md: \"repeat(2, 1fr)\" }} gap={6}>\n                  {/* Client Information */}\n                  <GridItem>\n                    <Card\n                      bg={cardGradientBg}\n                      backdropFilter=\"blur(10px)\"\n                      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                      border=\"1px\"\n                      borderColor={cardBorder}\n                      borderRadius=\"lg\"\n                    >\n                      <CardHeader>\n                        <Text fontWeight=\"bold\" color={textPrimary}>Client Information</Text>\n                      </CardHeader>\n                      <CardBody>\n                        <VStack align=\"stretch\" spacing={3}>\n                          <HStack>\n                            <FiUser color={textSecondary} />\n                            <Text color={textPrimary}>{opportunity.clientName}</Text>\n                          </HStack>\n                          {opportunity.clientEmail && (\n                            <HStack>\n                              <FiMail color={textSecondary} />\n                              <Text color={textSecondary}>{opportunity.clientEmail}</Text>\n                            </HStack>\n                          )}\n                          {opportunity.clientPhone && (\n                            <HStack>\n                              <FiPhone color={textSecondary} />\n                              <Text color={textSecondary}>{opportunity.clientPhone}</Text>\n                            </HStack>\n                          )}\n                          {isEditing && (\n                            <Text color={textMuted} fontSize=\"xs\" fontStyle=\"italic\">\n                              Note: Client cannot be changed after opportunity creation\n                            </Text>\n                          )}\n                        </VStack>\n                      </CardBody>\n                    </Card>\n                  </GridItem>\n\n                  {/* Opportunity Details */}\n                  <GridItem>\n                    <Card\n                      bg={cardGradientBg}\n                      backdropFilter=\"blur(10px)\"\n                      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                      border=\"1px\"\n                      borderColor={cardBorder}\n                      borderRadius=\"lg\"\n                    >\n                      <CardHeader>\n                        <Text fontWeight=\"bold\" color={textPrimary}>Details</Text>\n                      </CardHeader>\n                      <CardBody>\n                        <VStack align=\"stretch\" spacing={3}>\n                          <HStack justify=\"space-between\">\n                            <Text color={textMuted}>Source:</Text>\n                            {isEditing ? (\n                              <Select\n                                value={formData.source}\n                                onChange={(e) => handleInputChange('source', e.target.value)}\n                                size=\"sm\"\n                                bg=\"rgba(255, 255, 255, 0.05)\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                _hover={{ borderColor: textSecondary }}\n                                _focus={{\n                                  borderColor: primaryColor,\n                                  boxShadow: `0 0 0 1px ${primaryColor}`,\n                                }}\n                              >\n                                <option value=\"\">None</option>\n                                <option value=\"Website\">Website</option>\n                                <option value=\"Referral\">Referral</option>\n                                <option value=\"Cold Call\">Cold Call</option>\n                                <option value=\"Email\">Email Campaign</option>\n                                <option value=\"Social Media\">Social Media</option>\n                                <option value=\"Event\">Event</option>\n                                <option value=\"Partner\">Partner</option>\n                                <option value=\"Other\">Other</option>\n                              </Select>\n                            ) : (\n                              <Text color={textPrimary}>{opportunity.source || 'Not set'}</Text>\n                            )}\n                          </HStack>\n                          <HStack justify=\"space-between\">\n                            <Text color={textMuted}>Campaign:</Text>\n                            {isEditing ? (\n                              <Input\n                                value={formData.campaign}\n                                onChange={(e) => handleInputChange('campaign', e.target.value)}\n                                placeholder=\"Campaign name\"\n                                size=\"sm\"\n                                bg=\"rgba(255, 255, 255, 0.05)\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                                _placeholder={{ color: textMuted }}\n                                _hover={{ borderColor: textSecondary }}\n                                _focus={{\n                                  borderColor: primaryColor,\n                                  boxShadow: `0 0 0 1px ${primaryColor}`,\n                                }}\n                              />\n                            ) : (\n                              <Text color={textPrimary}>{opportunity.campaign || 'Not set'}</Text>\n                            )}\n                          </HStack>\n                          <HStack justify=\"space-between\">\n                            <Text color={textMuted}>Assigned to:</Text>\n                            <Text color={textPrimary}>{opportunity.assignedToName || 'Unassigned'}</Text>\n                          </HStack>\n                          <HStack justify=\"space-between\">\n                            <Text color={textMuted}>Last activity:</Text>\n                            <Text color={textPrimary}>{formatDate(opportunity.lastActivityDate)}</Text>\n                          </HStack>\n                        </VStack>\n                      </CardBody>\n                    </Card>\n                  </GridItem>\n\n                  {/* Description */}\n                  <GridItem colSpan={{ base: 1, md: 2 }}>\n                    <Card\n                      bg={cardGradientBg}\n                      backdropFilter=\"blur(10px)\"\n                      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                      border=\"1px\"\n                      borderColor={cardBorder}\n                      borderRadius=\"lg\"\n                    >\n                      <CardHeader>\n                        <Text fontWeight=\"bold\" color={textPrimary}>Description</Text>\n                      </CardHeader>\n                      <CardBody>\n                        {isEditing ? (\n                          <Textarea\n                            value={formData.description}\n                            onChange={(e) => handleInputChange('description', e.target.value)}\n                            placeholder=\"Describe the opportunity...\"\n                            rows={4}\n                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                            borderColor={cardBorder}\n                            color={textPrimary}\n                            _placeholder={{ color: textMuted }}\n                            _hover={{ borderColor: textSecondary }}\n                            _focus={{\n                              borderColor: primaryColor,\n                              boxShadow: `0 0 0 1px ${primaryColor}`,\n                            }}\n                          />\n                        ) : (\n                          <Text color={textSecondary}>\n                            {opportunity.description || 'No description provided'}\n                          </Text>\n                        )}\n                      </CardBody>\n                    </Card>\n                  </GridItem>\n\n                  {/* Internal Notes */}\n                  <GridItem colSpan={{ base: 1, md: 2 }}>\n                    <Card\n                      bg={cardGradientBg}\n                      backdropFilter=\"blur(10px)\"\n                      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                      border=\"1px\"\n                      borderColor={cardBorder}\n                      borderRadius=\"lg\"\n                    >\n                      <CardHeader>\n                        <Text fontWeight=\"bold\" color={textPrimary}>Internal Notes</Text>\n                      </CardHeader>\n                      <CardBody>\n                        {isEditing ? (\n                          <Textarea\n                            value={formData.internalNotes}\n                            onChange={(e) => handleInputChange('internalNotes', e.target.value)}\n                            placeholder=\"Notes for internal use only...\"\n                            rows={3}\n                            bg={colorMode === 'light' ? 'white' : 'rgba(255, 255, 255, 0.05)'}\n                            borderColor={cardBorder}\n                            color={textPrimary}\n                            _placeholder={{ color: textMuted }}\n                            _hover={{ borderColor: textSecondary }}\n                            _focus={{\n                              borderColor: primaryColor,\n                              boxShadow: `0 0 0 1px ${primaryColor}`,\n                            }}\n                          />\n                        ) : (\n                          <Text color={textSecondary}>\n                            {opportunity.internalNotes || 'No internal notes'}\n                          </Text>\n                        )}\n                      </CardBody>\n                    </Card>\n                  </GridItem>\n\n                  {/* Win Probability */}\n                  <GridItem colSpan={{ base: 1, md: 2 }}>\n                    <Card\n                      bg={cardGradientBg}\n                      backdropFilter=\"blur(10px)\"\n                      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                      border=\"1px\"\n                      borderColor={cardBorder}\n                      borderRadius=\"lg\"\n                    >\n                      <CardHeader>\n                        <Text fontWeight=\"bold\" color={textPrimary}>Win Probability</Text>\n                      </CardHeader>\n                      <CardBody>\n                        <VStack align=\"stretch\">\n                          <HStack justify=\"space-between\">\n                            <Text color={textSecondary}>Chance of closing</Text>\n                            <Text fontWeight=\"bold\" color={textPrimary}>{opportunity.probability}%</Text>\n                          </HStack>\n                          <Progress\n                            value={opportunity.probability}\n                            colorScheme=\"blue\"\n                            borderRadius=\"full\"\n                            bg={colorMode === 'light' ? 'gray.200' : 'rgba(255, 255, 255, 0.1)'}\n                          />\n                        </VStack>\n                      </CardBody>\n                    </Card>\n                  </GridItem>\n                </Grid>\n              </TabPanel>\n\n              {/* Payment Tracking Tab */}\n              <TabPanel px={0}>\n                <VStack spacing={6} align=\"stretch\">\n                  {/* Edit/Save/Cancel Buttons */}\n                  <HStack justify=\"flex-end\" spacing={2}>\n                    {isEditingPayments ? (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          borderColor={cardBorder}\n                          color={textPrimary}\n                          onClick={handleCancelPayments}\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          leftIcon={<FiCheck />}\n                          bg={primaryColor}\n                          color=\"white\"\n                          _hover={{ bg: primaryHover }}\n                          onClick={handleSavePayments}\n                        >\n                          Save Changes\n                        </Button>\n                      </>\n                    ) : (\n                      <Button\n                        size=\"sm\"\n                        leftIcon={<FiEdit />}\n                        bg=\"rgba(255, 255, 255, 0.1)\"\n                        color={textPrimary}\n                        _hover={{ bg: \"rgba(255, 255, 255, 0.2)\" }}\n                        onClick={() => setIsEditingPayments(true)}\n                      >\n                        Edit Payment Details\n                      </Button>\n                    )}\n                  </HStack>\n\n                  {/* Payment Schedule */}\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <HStack justify=\"space-between\">\n                        <Text fontWeight=\"bold\" color={textPrimary}>Payment Schedule</Text>\n                        {!isEditingPayments && opportunity.totalScheduledAmount > 0 && (\n                          <Badge colorScheme=\"green\" fontSize=\"md\" px={3} py={1}>\n                            Total: ${opportunity.totalScheduledAmount?.toLocaleString()}\n                          </Badge>\n                        )}\n                      </HStack>\n                    </CardHeader>\n                    <CardBody>\n                      {isEditingPayments ? (\n                        <VStack spacing={4} align=\"stretch\">\n                          {paymentFormData.paymentSchedule.map((payment: any, index: number) => (\n                            <Box key={index} p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" border=\"1px\" borderColor={cardBorder}>\n                              <VStack spacing={3}>\n                                <HStack width=\"full\" justify=\"space-between\">\n                                  <Text color={textPrimary} fontWeight=\"semibold\">Payment #{index + 1}</Text>\n                                  <IconButton\n                                    aria-label=\"Remove payment\"\n                                    icon={<FiTrash2 />}\n                                    size=\"sm\"\n                                    colorScheme=\"red\"\n                                    variant=\"ghost\"\n                                    onClick={() => removePaymentScheduleItem(index)}\n                                  />\n                                </HStack>\n                                <Input\n                                  placeholder=\"Description (e.g., Initial deposit)\"\n                                  value={payment.description}\n                                  onChange={(e) => updatePaymentScheduleItem(index, 'description', e.target.value)}\n                                  bg=\"rgba(255, 255, 255, 0.05)\"\n                                  borderColor={cardBorder}\n                                  color={textPrimary}\n                                />\n                                <HStack spacing={4} width=\"full\">\n                                  <InputGroup flex=\"1\">\n                                    <InputLeftAddon bg=\"rgba(255, 255, 255, 0.1)\" borderColor={cardBorder} color={textPrimary}>$</InputLeftAddon>\n                                    <NumberInput\n                                      value={payment.amount}\n                                      onChange={(_, value) => updatePaymentScheduleItem(index, 'amount', value || 0)}\n                                      min={0}\n                                      width=\"full\"\n                                    >\n                                      <NumberInputField\n                                        bg=\"rgba(255, 255, 255, 0.05)\"\n                                        borderColor={cardBorder}\n                                        color={textPrimary}\n                                      />\n                                    </NumberInput>\n                                  </InputGroup>\n                                  <Input\n                                    type=\"date\"\n                                    value={payment.dueDate ? new Date(payment.dueDate).toISOString().split('T')[0] : ''}\n                                    onChange={(e) => updatePaymentScheduleItem(index, 'dueDate', e.target.value)}\n                                    flex=\"1\"\n                                    bg=\"rgba(255, 255, 255, 0.05)\"\n                                    borderColor={cardBorder}\n                                    color={textPrimary}\n                                  />\n                                </HStack>\n                                <Textarea\n                                  placeholder=\"Notes (optional)\"\n                                  value={payment.notes || ''}\n                                  onChange={(e) => updatePaymentScheduleItem(index, 'notes', e.target.value)}\n                                  rows={2}\n                                  bg=\"rgba(255, 255, 255, 0.05)\"\n                                  borderColor={cardBorder}\n                                  color={textPrimary}\n                                />\n                              </VStack>\n                            </Box>\n                          ))}\n                          <Button\n                            onClick={addPaymentScheduleItem}\n                            leftIcon={<FiPlus />}\n                            variant=\"outline\"\n                            borderColor={primaryColor}\n                            color={primaryColor}\n                            _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                          >\n                            Add Payment\n                          </Button>\n                        </VStack>\n                      ) : opportunity.paymentSchedule && opportunity.paymentSchedule.length > 0 ? (\n                        <VStack spacing={4} align=\"stretch\">\n                          {opportunity.paymentSchedule.map((payment: any, index: number) => (\n                            <Box key={index} p={4} bg=\"rgba(255, 255, 255, 0.05)\" borderRadius=\"md\" border=\"1px\" borderColor={cardBorder}>\n                              <HStack justify=\"space-between\" mb={3}>\n                                <VStack align=\"start\" spacing={1}>\n                                  <Text color={textPrimary} fontWeight=\"bold\">{payment.description}</Text>\n                                  <HStack spacing={4}>\n                                    <HStack>\n                                      <FiDollarSign color={textSecondary} />\n                                      <Text color={textPrimary} fontSize=\"lg\">${payment.amount.toLocaleString()}</Text>\n                                    </HStack>\n                                    <HStack>\n                                      <FiCalendar color={textSecondary} />\n                                      <Text color={textSecondary}>Due: {new Date(payment.dueDate).toLocaleDateString()}</Text>\n                                    </HStack>\n                                  </HStack>\n                                  {payment.notes && <Text color={textMuted} fontSize=\"sm\">{payment.notes}</Text>}\n                                </VStack>\n                                <VStack align=\"end\">\n                                  <Badge\n                                    colorScheme={\n                                      payment.status === 'PAID' ? 'green' :\n                                      payment.status === 'OVERDUE' ? 'red' :\n                                      payment.status === 'CANCELLED' ? 'gray' :\n                                      'yellow'\n                                    }\n                                    fontSize=\"sm\"\n                                    px={2}\n                                    py={1}\n                                  >\n                                    {payment.status}\n                                  </Badge>\n                                  {payment.paidDate && (\n                                    <Text color={textMuted} fontSize=\"xs\">\n                                      Paid: {new Date(payment.paidDate).toLocaleDateString()}\n                                    </Text>\n                                  )}\n                                  {payment.status !== 'PAID' && payment.status !== 'CANCELLED' && (\n                                    <Button\n                                      size=\"sm\"\n                                      leftIcon={<FiCheckCircle />}\n                                      colorScheme=\"green\"\n                                      variant=\"outline\"\n                                      onClick={async () => {\n                                        try {\n                                          await updatePaymentStatus({\n                                            variables: {\n                                              opportunityId: opportunity.id,\n                                              paymentIndex: index,\n                                              status: 'PAID'\n                                            }\n                                          });\n                                          toast({\n                                            title: 'Payment marked as paid',\n                                            status: 'success',\n                                            duration: 3000,\n                                            isClosable: true,\n                                          });\n                                          refetch();\n                                        } catch (error: any) {\n                                          toast({\n                                            title: 'Failed to update payment status',\n                                            description: error.message || 'An error occurred',\n                                            status: 'error',\n                                            duration: 5000,\n                                            isClosable: true,\n                                          });\n                                        }\n                                      }}\n                                    >\n                                      Mark as Paid\n                                    </Button>\n                                  )}\n                                </VStack>\n                              </HStack>\n                            </Box>\n                          ))}\n\n                          {opportunity.totalPaidAmount > 0 && (\n                            <HStack justify=\"space-between\" pt={3} borderTop=\"1px\" borderColor={cardBorder}>\n                              <Text color={textPrimary} fontWeight=\"bold\">Total Paid:</Text>\n                              <Text color=\"green.400\" fontSize=\"lg\" fontWeight=\"bold\">\n                                ${opportunity.totalPaidAmount?.toLocaleString()}\n                              </Text>\n                            </HStack>\n                          )}\n                        </VStack>\n                      ) : (\n                        <Text color={textMuted} textAlign=\"center\">No payment schedule defined</Text>\n                      )}\n                    </CardBody>\n                  </Card>\n\n                  {/* Recurring Subscription */}\n                  <Card\n                    bg={cardGradientBg}\n                    backdropFilter=\"blur(10px)\"\n                    boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                    border=\"1px\"\n                    borderColor={cardBorder}\n                    borderRadius=\"lg\"\n                  >\n                    <CardHeader>\n                      <HStack>\n                        <FiRefreshCcw color={primaryColor} />\n                        <Text fontWeight=\"bold\" color={textPrimary}>Recurring Subscription</Text>\n                      </HStack>\n                    </CardHeader>\n                    <CardBody>\n                      {isEditingPayments ? (\n                        <VStack spacing={4} align=\"stretch\">\n                          <FormControl>\n                            <FormLabel color={textPrimary}>Monthly Amount (AUD)</FormLabel>\n                            <InputGroup>\n                              <InputLeftAddon bg=\"rgba(255, 255, 255, 0.1)\" borderColor={cardBorder} color={textPrimary}>$</InputLeftAddon>\n                              <NumberInput\n                                value={paymentFormData.recurringPayment.monthlyAmount}\n                                onChange={(_, value) => updateRecurringPayment('monthlyAmount', value || 0)}\n                                min={0}\n                                width=\"full\"\n                              >\n                                <NumberInputField\n                                  bg=\"rgba(255, 255, 255, 0.05)\"\n                                  borderColor={cardBorder}\n                                  color={textPrimary}\n                                />\n                              </NumberInput>\n                            </InputGroup>\n                          </FormControl>\n                          <FormControl>\n                            <FormLabel color={textPrimary}>\n                              Subscription Probability: {paymentFormData.recurringPayment.probability}%\n                            </FormLabel>\n                            <Slider\n                              value={paymentFormData.recurringPayment.probability}\n                              onChange={(value) => updateRecurringPayment('probability', value)}\n                              min={0}\n                              max={100}\n                              step={5}\n                            >\n                              <SliderTrack>\n                                <SliderFilledTrack bg={primaryColor} />\n                              </SliderTrack>\n                              <SliderThumb boxSize={6}>\n                                <Box color={primaryColor} as={FiRefreshCcw} />\n                              </SliderThumb>\n                            </Slider>\n                          </FormControl>\n                          <FormControl>\n                            <FormLabel color={textPrimary}>Description</FormLabel>\n                            <Input\n                              value={paymentFormData.recurringPayment.description}\n                              onChange={(e) => updateRecurringPayment('description', e.target.value)}\n                              placeholder=\"e.g., Monthly maintenance\"\n                              bg=\"rgba(255, 255, 255, 0.05)\"\n                              borderColor={cardBorder}\n                              color={textPrimary}\n                            />\n                          </FormControl>\n                          <HStack spacing={4}>\n                            <FormControl flex=\"1\">\n                              <FormLabel color={textPrimary}>Start Date</FormLabel>\n                              <Input\n                                type=\"date\"\n                                value={paymentFormData.recurringPayment.startDate ? new Date(paymentFormData.recurringPayment.startDate).toISOString().split('T')[0] : ''}\n                                onChange={(e) => updateRecurringPayment('startDate', e.target.value)}\n                                bg=\"rgba(255, 255, 255, 0.05)\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                              />\n                            </FormControl>\n                            <FormControl flex=\"1\">\n                              <FormLabel color={textPrimary}>End Date (Optional)</FormLabel>\n                              <Input\n                                type=\"date\"\n                                value={paymentFormData.recurringPayment.endDate ? new Date(paymentFormData.recurringPayment.endDate).toISOString().split('T')[0] : ''}\n                                onChange={(e) => updateRecurringPayment('endDate', e.target.value)}\n                                bg=\"rgba(255, 255, 255, 0.05)\"\n                                borderColor={cardBorder}\n                                color={textPrimary}\n                              />\n                            </FormControl>\n                          </HStack>\n                        </VStack>\n                      ) : opportunity.recurringPayment && opportunity.recurringPayment.monthlyAmount > 0 ? (\n                        <VStack align=\"stretch\" spacing={4}>\n                          <HStack justify=\"space-between\">\n                            <Text color={textMuted}>Monthly Amount:</Text>\n                            <Text color={textPrimary} fontSize=\"lg\" fontWeight=\"bold\">\n                              ${opportunity.recurringPayment.monthlyAmount.toLocaleString()}/month\n                            </Text>\n                          </HStack>\n\n                          {opportunity.recurringPayment.description && (\n                            <HStack justify=\"space-between\">\n                              <Text color={textMuted}>Description:</Text>\n                              <Text color={textPrimary}>{opportunity.recurringPayment.description}</Text>\n                            </HStack>\n                          )}\n\n                          <HStack justify=\"space-between\">\n                            <Text color={textMuted}>Probability:</Text>\n                            <Badge colorScheme=\"blue\" fontSize=\"sm\">\n                              {opportunity.recurringPayment.probability}%\n                            </Badge>\n                          </HStack>\n\n                          {opportunity.recurringPayment.startDate && (\n                            <HStack justify=\"space-between\">\n                              <Text color={textMuted}>Start Date:</Text>\n                              <Text color={textPrimary}>\n                                {new Date(opportunity.recurringPayment.startDate).toLocaleDateString()}\n                              </Text>\n                            </HStack>\n                          )}\n\n                          {opportunity.recurringPayment.endDate && (\n                            <HStack justify=\"space-between\">\n                              <Text color={textMuted}>End Date:</Text>\n                              <Text color={textPrimary}>\n                                {new Date(opportunity.recurringPayment.endDate).toLocaleDateString()}\n                              </Text>\n                            </HStack>\n                          )}\n\n                          <Box pt={3} borderTop=\"1px\" borderColor={cardBorder}>\n                            <Text color={textMuted} fontSize=\"sm\">\n                              Projected Annual Value: ${(opportunity.recurringPayment.monthlyAmount * 12 * opportunity.recurringPayment.probability / 100).toLocaleString()}\n                            </Text>\n                          </Box>\n                        </VStack>\n                      ) : (\n                        <Text color={textMuted} textAlign=\"center\">No recurring subscription defined</Text>\n                      )}\n                    </CardBody>\n                  </Card>\n\n                  {/* Total Value Summary */}\n                  {opportunity.projectedTotalValue > 0 && (\n                    <Card\n                      bg={primaryColor}\n                      bgGradient=\"linear(to-r, brand.500, brand.600)\"\n                      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n                      borderRadius=\"lg\"\n                    >\n                      <CardBody>\n                        <VStack align=\"start\" spacing={3}>\n                          <Text color=\"white\" fontWeight=\"bold\" fontSize=\"xl\">\n                            Total Projected Value\n                          </Text>\n                          <Text color=\"white\" fontSize=\"3xl\" fontWeight=\"bold\">\n                            ${opportunity.projectedTotalValue?.toLocaleString()}\n                          </Text>\n                          <VStack align=\"start\" spacing={1}>\n                            <Text color=\"whiteAlpha.900\" fontSize=\"sm\">\n                              • One-off: ${(opportunity.value * opportunity.probability / 100).toLocaleString()}\n                            </Text>\n                            {opportunity.totalScheduledAmount > 0 && (\n                              <Text color=\"whiteAlpha.900\" fontSize=\"sm\">\n                                • Scheduled: ${opportunity.totalScheduledAmount.toLocaleString()}\n                              </Text>\n                            )}\n                            {opportunity.recurringPayment?.monthlyAmount > 0 && (\n                              <Text color=\"whiteAlpha.900\" fontSize=\"sm\">\n                                • Recurring: ${(opportunity.recurringPayment.monthlyAmount * 12).toLocaleString()}/year\n                              </Text>\n                            )}\n                          </VStack>\n                        </VStack>\n                      </CardBody>\n                    </Card>\n                  )}\n                </VStack>\n              </TabPanel>\n\n              {/* Team & Splits Tab */}\n              <TabPanel px={0}>\n                <VStack spacing={6} align=\"stretch\">\n                  {/* Team Members Management */}\n                  <OpportunityMembers\n                    opportunityId={id!}\n                    onMembersUpdate={() => {\n                      refetch();\n                      refetchMembers();\n                    }}\n                  />\n\n                  {/* One-off Payment Value Split - Always Show if there's a value */}\n                  {opportunity.value > 0 && (\n                    <Card\n                      bg={cardGradientBg}\n                      borderColor={cardBorder}\n                      borderWidth=\"1px\"\n                      boxShadow=\"sm\"\n                      overflow=\"hidden\"\n                    >\n                      <CardHeader bg={cardHeaderBg} borderBottom={`1px solid ${cardBorder}`}>\n                        <HStack justify=\"space-between\">\n                          <Heading size=\"md\" color={textPrimary}>\n                            One-off Payment Commission Split\n                          </Heading>\n                          <Badge colorScheme=\"blue\" fontSize=\"md\">\n                            ${opportunity.value.toLocaleString()}\n                          </Badge>\n                        </HStack>\n                      </CardHeader>\n                      <CardBody>\n                        {membersData?.opportunityMembers && membersData.opportunityMembers.length > 0 ? (\n                          <PaymentSplits\n                            opportunityId={id || ''}\n                            paymentType=\"oneoff\"\n                            paymentAmount={opportunity.value}\n                            paymentStatus={opportunity.valuePaymentStatus}\n                            receivedDate={opportunity.valueReceivedDate}\n                            members={membersData.opportunityMembers}\n                            currentSplits={opportunity.valueMemberSplits}\n                            onSplitsUpdate={(splits) => {\n                              updateOpportunity({\n                                variables: {\n                                  id,\n                                  input: { valueMemberSplits: splits }\n                                }\n                              }).then(() => {\n                                refetch();\n                              });\n                            }}\n                            onPaymentStatusUpdate={() => {\n                              refetch();\n                            }}\n                          />\n                        ) : (\n                          <Alert status=\"info\" borderRadius=\"md\">\n                            <AlertIcon />\n                            <Text>Add team members above to configure commission splits for this payment</Text>\n                          </Alert>\n                        )}\n                      </CardBody>\n                    </Card>\n                  )}\n\n                  {/* Other Payment Types Splits - Will implement later */}\n                  {(opportunity.paymentSchedule?.length > 0 ||\n                    opportunity.recurringPayment) && (\n                    <Card\n                      bg={cardGradientBg}\n                      borderColor={cardBorder}\n                      borderWidth=\"1px\"\n                      boxShadow=\"sm\"\n                      overflow=\"hidden\"\n                    >\n                      <CardHeader bg={cardHeaderBg} borderBottom={`1px solid ${cardBorder}`}>\n                        <Heading size=\"md\" color={textPrimary}>Other Payment Types</Heading>\n                      </CardHeader>\n                      <CardBody>\n                        <VStack spacing={4} align=\"stretch\">\n                          {/* Payment Schedule Splits */}\n                          {opportunity.paymentSchedule?.map((payment: any, index: number) => (\n                            <PaymentSplits\n                              key={index}\n                              opportunityId={id || ''}\n                              paymentType=\"schedule\"\n                              paymentAmount={payment.amount}\n                              paymentLabel={`${index}`}\n                              paymentStatus={payment.paymentStatus}\n                              receivedDate={payment.receivedDate}\n                              members={membersData?.opportunityMembers || []}\n                              currentSplits={payment.memberSplits}\n                              onSplitsUpdate={(splits) => {\n                                const updatedSchedule = opportunity.paymentSchedule.map((p: any, i: number) => {\n                                  if (i === index) {\n                                    // Only include fields expected by PaymentScheduleInput\n                                    return {\n                                      description: p.description,\n                                      amount: p.amount,\n                                      dueDate: p.dueDate,\n                                      status: p.status,\n                                      paidDate: p.paidDate,\n                                      notes: p.notes,\n                                      memberSplits: splits\n                                    };\n                                  }\n                                  // Keep other payments with only expected fields\n                                  return {\n                                    description: p.description,\n                                    amount: p.amount,\n                                    dueDate: p.dueDate,\n                                    status: p.status,\n                                    paidDate: p.paidDate,\n                                    notes: p.notes,\n                                    memberSplits: p.memberSplits\n                                  };\n                                });\n                                updateOpportunity({\n                                  variables: {\n                                    id,\n                                    input: { paymentSchedule: updatedSchedule }\n                                  }\n                                }).then(() => {\n                                  refetch();\n                                });\n                              }}\n                              onPaymentStatusUpdate={() => {\n                                refetch();\n                              }}\n                            />\n                          ))}\n\n                          {/* Recurring Payment Split */}\n                          {opportunity.recurringPayment && (\n                            <PaymentSplits\n                              opportunityId={id || ''}\n                              paymentType=\"recurring\"\n                              paymentAmount={opportunity.recurringPayment.monthlyAmount}\n                              paymentStatus={opportunity.recurringPayment.paymentStatus}\n                              receivedDate={opportunity.recurringPayment.lastPaymentDate}\n                              members={membersData?.opportunityMembers || []}\n                              currentSplits={opportunity.recurringPayment.memberSplits}\n                              onSplitsUpdate={(splits) => {\n                                updateOpportunity({\n                                  variables: {\n                                    id,\n                                    input: {\n                                      recurringPayment: {\n                                        monthlyAmount: opportunity.recurringPayment.monthlyAmount,\n                                        probability: opportunity.recurringPayment.probability,\n                                        description: opportunity.recurringPayment.description,\n                                        startDate: opportunity.recurringPayment.startDate,\n                                        endDate: opportunity.recurringPayment.endDate,\n                                        memberSplits: splits\n                                      }\n                                    }\n                                  }\n                                }).then(() => {\n                                  refetch();\n                                });\n                              }}\n                              onPaymentStatusUpdate={() => {\n                                refetch();\n                              }}\n                            />\n                          )}\n\n                          {/* No payments configured */}\n                          {!opportunity.value &&\n                           (!opportunity.paymentSchedule || opportunity.paymentSchedule.length === 0) &&\n                           !opportunity.recurringPayment && (\n                            <Alert status=\"info\" borderRadius=\"md\">\n                              <AlertIcon />\n                              <Text>Configure payment details in the Payment Tracking tab to set up commission splits</Text>\n                            </Alert>\n                          )}\n                        </VStack>\n                      </CardBody>\n                    </Card>\n                  )}\n                </VStack>\n              </TabPanel>\n\n              {/* Activities Tab */}\n              <TabPanel px={0}>\n                <Tabs variant=\"soft-rounded\" colorScheme=\"blue\">\n                  <TabList mb={4}>\n                    <Tab>Tasks</Tab>\n                    <Tab>Meetings</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel px={0}>\n                      <OpportunityTasks opportunityId={opportunity.id} />\n                    </TabPanel>\n                    <TabPanel px={0}>\n                      <OpportunityMeetings opportunityId={opportunity.id} />\n                    </TabPanel>\n                  </TabPanels>\n                </Tabs>\n              </TabPanel>\n\n              {/* Notes Tab */}\n              <TabPanel px={0}>\n                <OpportunityNotes opportunityId={opportunity.id} />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default OpportunityDetail;"],"names":["GET_OPPORTUNITY_TASKS","gql","_templateObject","_taggedTemplateLiteral","CREATE_OPPORTUNITY_TASK","_templateObject2","UPDATE_OPPORTUNITY_TASK","_templateObject3","DELETE_OPPORTUNITY_TASK","_templateObject4","OpportunityTasks","_ref","opportunityId","isModalOpen","setIsModalOpen","useState","editingTask","setEditingTask","formData","setFormData","title","description","type","priority","dueDate","assignedTo","notes","isBlocking","toast","useToast","primaryColor","getColor","cardBorder","textPrimary","textMuted","loading","data","refetch","useQuery","variables","createTask","useMutation","onCompleted","status","duration","isClosable","handleCloseModal","onError","error","message","updateTask","deleteTask","handleOpenModal","task","Date","toISOString","split","getPriorityColor","getStatusColor","_jsx","Box","display","justifyContent","py","children","Spinner","size","color","tasks","opportunityTasks","_jsxs","HStack","justify","mb","Text","fontSize","fontWeight","length","Button","leftIcon","FiPlus","onClick","bg","_hover","opacity","VStack","spacing","align","textAlign","map","p","borderRadius","border","borderColor","IconButton","icon","FiCheck","variant","colorScheme","async","taskId","newStatus","id","input","handleStatusChange","FiEdit","FiTrash2","window","confirm","handleDeleteTask","flexWrap","Badge","FiAlertCircle","style","marginRight","FiCalendar","format","assignedToName","Modal","isOpen","onClose","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","FormControl","isRequired","FormLabel","Input","value","onChange","e","_objectSpread","target","placeholder","Textarea","width","Select","Checkbox","isChecked","checked","ModalFooter","mr","GET_OPPORTUNITY_MEETINGS","CREATE_OPPORTUNITY_MEETING","UPDATE_OPPORTUNITY_MEETING","DELETE_OPPORTUNITY_MEETING","OpportunityMeetings","editingMeeting","setEditingMeeting","scheduledDate","location","address","meetingUrl","objectives","preparationNotes","outcome","nextSteps","createMeeting","updateMeeting","deleteMeeting","meeting","dateStr","slice","getFormatIcon","FiVideo","FiPhone","FiMapPin","FiUsers","meetings","opportunityMeetings","meetingId","handleDeleteMeeting","FiClock","Link","href","isExternal","FiLink","attendees","attendee","index","isInternal","name","role","concat","parseInt","_Fragment","Divider","minH","Number","updateInput","GET_OPPORTUNITY_NOTES","CREATE_OPPORTUNITY_NOTE","UPDATE_OPPORTUNITY_NOTE","DELETE_OPPORTUNITY_NOTE","OpportunityNotes","editingNote","setEditingNote","expandedNotes","setExpandedNotes","Set","content","visibility","contactPerson","contactEmail","isPinned","isActionable","isDecisionFactor","isRisk","isOpportunity","sentiment","followUpRequired","followUpDate","followUpAction","tags","category","createNote","updateNote","deleteNote","note","getTypeColor","opportunityNotes","sortedNotes","filter","n","isExpanded","has","truncatedContent","substring","Card","position","CardBody","top","right","FiBookmark","flex","replace","FiCheckCircle","FiTrendingUp","togglePin","noteId","handleDeleteNote","whiteSpace","newExpanded","delete","add","toggleNoteExpansion","FiUser","createdByName","createdAt","lastEditedAt","lastEditedByName","maxH","overflowY","GET_OPPORTUNITY_MEMBERS","GET_CLIENTS","ADD_OPPORTUNITY_MEMBER","UPDATE_OPPORTUNITY_MEMBER","REMOVE_OPPORTUNITY_MEMBER","_templateObject5","onMembersUpdate","usePageTitle","colorMode","useColorMode","onOpen","useDisclosure","selectedMember","setSelectedMember","isEditMode","setIsEditMode","cardGradientBg","textSecondary","clientId","membersData","refetchMembers","skip","clientsData","addMember","updateMember","removeMember","members","opportunityMembers","availableClients","clients","client","some","member","Flex","Spacer","AddIcon","mt","Table","Thead","Tr","Th","isNumeric","Tbody","Td","clientName","clientEmail","totalEarned","toLocaleString","totalPending","Tooltip","label","EditIcon","DeleteIcon","memberId","handleRemove","fName","lName","email","isDisabled","UPDATE_PAYMENT_STATUS","UPDATE_PAYOUT_STATUS","paymentType","paymentAmount","paymentLabel","paymentStatus","receivedDate","currentSplits","onSplitsUpdate","onPaymentStatusUpdate","splits","setSplits","updatePaymentStatus","updatePayoutStatus","useEffect","amount","percentage","defaultSplits","payoutDelayDays","totalPercentage","reduce","sum","isValid","Math","abs","handlePayoutDelayChange","newSplits","payoutDate","undefined","handlePaymentStatusChange","paymentTypeKey","handlePayoutStatusChange","paidOutDate","getPayoutStatusColor","getPaymentTypeLabel","Alert","AlertIcon","wrap","gap","getPaymentTypeColor","Menu","MenuButton","as","rightIcon","ChevronDownIcon","getPaymentStatusColor","MenuList","MenuItem","autoDistribute","actualMembers","s","equalPercentage","toFixed","find","m","displayName","isUnallocated","NumberInput","_","handlePercentageChange","unallocatedIndex","findIndex","allocatedTotal","idx","remaining","max","min","precision","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","handlePayoutDateChange","payoutStatus","payoutNotes","handleNotesChange","CheckIcon","saveSplits","splitsForBackend","GET_ALL_CLIENTS","GET_OPPORTUNITY","UPDATE_OPPORTUNITY","DELETE_OPPORTUNITY","_templateObject6","GET_OPPORTUNITY_STAGES","_templateObject7","OpportunityDetail","_data$opportunity","_opportunity$paymentS","_opportunity$recurrin","_opportunity$totalSch","_opportunity$totalPai","_opportunity$projecte","_opportunity$recurrin2","_opportunity$paymentS2","_opportunity$paymentS3","navigate","useNavigate","useParams","isEditing","setIsEditing","isEditingPayments","setIsEditingPayments","paymentFormData","setPaymentFormData","paymentSchedule","recurringPayment","monthlyAmount","probability","startDate","endDate","bgMain","cardHeaderBg","primaryHover","stagesData","stages","opportunityStages","loadingClients","console","log","opportunity","updateOpportunity","deleteOpportunity","deleting","stage","expectedCloseDate","source","campaign","internalNotes","handleInputChange","field","prev","updatePaymentScheduleItem","item","i","updateRecurringPayment","formatCurrency","Intl","NumberFormat","currency","formatDate","date","toLocaleDateString","year","month","day","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","opportunitiesModuleConfig","Container","maxW","bottom","zIndex","FooterWithFourColumns","FiArrowLeft","transition","base","md","_focus","boxShadow","Heading","minW","code","LEAD","QUALIFIED","PROPOSAL","NEGOTIATION","CLOSED_WON","CLOSED_LOST","LOW","MEDIUM","HIGH","CRITICAL","handleCancel","formatDateToISO","isNaN","getTime","_objectWithoutProperties","_excluded","parseFloat","toString","isLoading","Grid","templateColumns","sm","GridItem","backdropFilter","Stat","StatLabel","InputGroup","InputLeftAddon","StatNumber","Slider","step","SliderTrack","SliderFilledTrack","SliderThumb","boxSize","FiDollarSign","expectedRevenue","StatHelpText","taskCount","meetingCount","emailCount","callCount","Tabs","isLazy","TabList","borderBottomColor","overflowX","Tab","_selected","noteCount","TabPanels","TabPanel","px","CardHeader","FiMail","clientPhone","fontStyle","_placeholder","lastActivityDate","colSpan","rows","Progress","handleCancelPayments","paidDate","totalScheduledAmount","payment","removePaymentScheduleItem","addPaymentScheduleItem","paymentIndex","totalPaidAmount","pt","borderTop","FiRefreshCcw","projectedTotalValue","bgGradient","OpportunityMembers","borderWidth","overflow","borderBottom","PaymentSplits","valuePaymentStatus","valueReceivedDate","valueMemberSplits","then","memberSplits","updatedSchedule","lastPaymentDate"],"sourceRoot":""}