{"version":3,"file":"static/js/8934.7980d995.chunk.js","mappings":"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","sources":["pages/transcriptions/TranscriptionsList.tsx"],"sourcesContent":["import React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport {\n  Box,\n  Container,\n  Heading,\n  Button,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Text,\n  HStack,\n  Card,\n  CardBody,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Badge,\n  VStack,\n  IconButton,\n  Tooltip,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { useNavigate } from 'react-router-dom';\nimport { FiPlus, FiEye, FiClock, FiCheckCircle, FiXCircle, FiAlertCircle } from 'react-icons/fi';\nimport { getColor, brandConfig } from '../../brandConfig';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport transcriptionsModuleConfig from './moduleConfig';\n\nconst GET_TRANSCRIPTIONS = gql`\n  query GetTranscriptions {\n    transcriptions {\n      id\n      title\n      description\n      status\n      duration\n      detectedLanguage\n      confidence\n      fileName\n      fileSize\n      createdAt\n      owner {\n        id\n        fName\n        lName\n      }\n    }\n  }\n`;\n\nconst TranscriptionsList: React.FC = () => {\n  const navigate = useNavigate();\n  const { colorMode } = useColorMode();\n\n  // Brand styling\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n\n  const { data, loading, error, refetch } = useQuery(GET_TRANSCRIPTIONS, {\n    pollInterval: 10000, // Poll every 10 seconds for status updates\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig: Record<string, { color: string; icon: any; label: string }> = {\n      PENDING: { color: 'gray', icon: FiClock, label: 'Pending' },\n      UPLOADING: { color: 'purple', icon: FiClock, label: 'Uploading' },\n      PROCESSING: { color: 'blue', icon: FiClock, label: 'Processing' },\n      COMPLETED: { color: 'green', icon: FiCheckCircle, label: 'Completed' },\n      FAILED: { color: 'red', icon: FiXCircle, label: 'Failed' },\n    };\n\n    const config = statusConfig[status] || statusConfig.PENDING;\n    const Icon = config.icon;\n\n    return (\n      <Badge colorScheme={config.color} display=\"flex\" alignItems=\"center\" gap={1}>\n        <Icon size={12} />\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const formatDuration = (seconds?: number) => {\n    if (!seconds) return 'N/A';\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'N/A';\n    const mb = bytes / 1024 / 1024;\n    return `${mb.toFixed(2)} MB`;\n  };\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={transcriptionsModuleConfig} />\n\n      <Container maxW=\"container.xl\" py={8} flex=\"1\">\n        <HStack justify=\"space-between\" mb={6}>\n          <VStack align=\"start\" spacing={1}>\n            <Heading\n              color={textPrimary}\n              fontFamily={brandConfig.fonts.heading}\n            >\n              ðŸŽ¤ Transcriptions\n            </Heading>\n            <Text color={textSecondary} fontSize=\"sm\">\n              AI-powered audio and video transcription\n            </Text>\n          </VStack>\n          <Button\n            leftIcon={<FiPlus />}\n            bg={primaryColor}\n            color=\"white\"\n            _hover={{ bg: primaryHover }}\n            onClick={() => navigate(\"/transcriptions/new\")}\n          >\n            New Transcription\n          </Button>\n        </HStack>\n\n        {loading && (\n          <Box textAlign=\"center\" py={10}>\n            <Spinner size=\"xl\" color={primaryColor} />\n            <Text color={textSecondary} mt={4}>Loading transcriptions...</Text>\n          </Box>\n        )}\n\n        {error && (\n          <Alert status=\"error\" borderRadius=\"lg\">\n            <AlertIcon />\n            <VStack align=\"start\" spacing={1}>\n              <Text fontWeight=\"bold\">Error loading transcriptions</Text>\n              <Text fontSize=\"sm\">{error.message}</Text>\n            </VStack>\n          </Alert>\n        )}\n\n        {data && data.transcriptions.length === 0 && (\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px\"\n            borderColor={cardBorder}\n            borderRadius=\"lg\"\n          >\n            <CardBody textAlign=\"center\" py={10}>\n              <Text color={textPrimary} fontSize=\"lg\" mb={2}>\n                No transcriptions yet\n              </Text>\n              <Text color={textSecondary} mb={4}>\n                Upload your first audio or video file to get started\n              </Text>\n              <Button\n                leftIcon={<FiPlus />}\n                bg={primaryColor}\n                color=\"white\"\n                _hover={{ bg: primaryHover }}\n                onClick={() => navigate(\"/transcriptions/new\")}\n              >\n                Create First Transcription\n              </Button>\n            </CardBody>\n          </Card>\n        )}\n\n        {data && data.transcriptions.length > 0 && (\n          <Card\n            bg={cardGradientBg}\n            backdropFilter=\"blur(10px)\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            border=\"1px\"\n            borderColor={cardBorder}\n            borderRadius=\"lg\"\n          >\n            <CardBody>\n              <Table variant=\"simple\">\n                <Thead>\n                  <Tr>\n                    <Th color={textSecondary}>Title</Th>\n                    <Th color={textSecondary}>Status</Th>\n                    <Th color={textSecondary}>File</Th>\n                    <Th color={textSecondary}>Duration</Th>\n                    <Th color={textSecondary}>Language</Th>\n                    <Th color={textSecondary}>Created</Th>\n                    <Th color={textSecondary}>Actions</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {data.transcriptions.map((transcription: any) => (\n                    <Tr\n                      key={transcription.id}\n                      _hover={{ bg: 'rgba(255, 255, 255, 0.02)' }}\n                      cursor=\"pointer\"\n                      onClick={() => navigate(`/transcriptions/${transcription.id}`)}\n                    >\n                      <Td>\n                        <VStack align=\"start\" spacing={0}>\n                          <Text color={textPrimary} fontWeight=\"medium\">\n                            {transcription.title}\n                          </Text>\n                          {transcription.description && (\n                            <Text color={textSecondary} fontSize=\"xs\" noOfLines={1}>\n                              {transcription.description}\n                            </Text>\n                          )}\n                        </VStack>\n                      </Td>\n                      <Td>{getStatusBadge(transcription.status)}</Td>\n                      <Td>\n                        <VStack align=\"start\" spacing={0}>\n                          <Text color={textPrimary} fontSize=\"sm\">\n                            {transcription.fileName || 'Unknown'}\n                          </Text>\n                          <Text color={textSecondary} fontSize=\"xs\">\n                            {formatFileSize(transcription.fileSize)}\n                          </Text>\n                        </VStack>\n                      </Td>\n                      <Td>\n                        <Text color={textPrimary} fontSize=\"sm\">\n                          {formatDuration(transcription.duration)}\n                        </Text>\n                      </Td>\n                      <Td>\n                        <Text color={textPrimary} fontSize=\"sm\">\n                          {transcription.detectedLanguage || '-'}\n                        </Text>\n                      </Td>\n                      <Td>\n                        <Text color={textPrimary} fontSize=\"sm\">\n                          {new Date(transcription.createdAt).toLocaleDateString()}\n                        </Text>\n                      </Td>\n                      <Td>\n                        <Tooltip label=\"View Details\">\n                          <IconButton\n                            aria-label=\"View transcription\"\n                            icon={<FiEye />}\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              navigate(`/transcriptions/${transcription.id}`);\n                            }}\n                          />\n                        </Tooltip>\n                      </Td>\n                    </Tr>\n                  ))}\n                </Tbody>\n              </Table>\n            </CardBody>\n          </Card>\n        )}\n\n        {/* Processing info alert */}\n        {data && data.transcriptions.some((t: any) =>\n          t.status === 'PROCESSING' || t.status === 'UPLOADING'\n        ) && (\n          <Alert status=\"info\" borderRadius=\"lg\" mt={4}>\n            <AlertIcon />\n            <Text fontSize=\"sm\">\n              Some transcriptions are still processing. This page will auto-refresh every 10 seconds.\n            </Text>\n          </Alert>\n        )}\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default TranscriptionsList;\n"],"names":["GET_TRANSCRIPTIONS","gql","_templateObject","_taggedTemplateLiteral","TranscriptionsList","navigate","useNavigate","colorMode","useColorMode","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","primaryColor","primaryHover","data","loading","error","refetch","useQuery","pollInterval","getStatusBadge","status","statusConfig","PENDING","color","icon","FiClock","label","UPLOADING","PROCESSING","COMPLETED","FiCheckCircle","FAILED","FiXCircle","config","Icon","_jsxs","Badge","colorScheme","display","alignItems","gap","children","_jsx","size","formatDuration","seconds","mins","Math","floor","secs","concat","toString","padStart","formatFileSize","bytes","toFixed","Box","bg","minH","flexDirection","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","transcriptionsModuleConfig","Container","maxW","py","flex","HStack","justify","mb","VStack","align","spacing","Heading","fontFamily","brandConfig","fonts","heading","Text","fontSize","Button","leftIcon","FiPlus","_hover","onClick","textAlign","Spinner","mt","Alert","borderRadius","AlertIcon","fontWeight","message","transcriptions","length","Card","backdropFilter","boxShadow","border","borderColor","CardBody","Table","variant","Thead","Tr","Th","Tbody","map","transcription","cursor","id","Td","title","description","noOfLines","fileName","fileSize","duration","detectedLanguage","Date","createdAt","toLocaleDateString","Tooltip","IconButton","FiEye","e","stopPropagation","some","t","FooterWithFourColumns"],"sourceRoot":""}