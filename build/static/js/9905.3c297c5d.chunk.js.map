{"version":3,"file":"static/js/9905.3c297c5d.chunk.js","mappings":"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","sources":["pages/calendars/EditCalendar.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useMutation, useQuery, gql } from '@apollo/client';\nimport {\n  Container,\n  Heading,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Select,\n  Button,\n  Stack,\n  Alert,\n  AlertIcon,\n  Box,\n  HStack,\n  Switch,\n  Text,\n  VStack,\n  Divider,\n  useToast,\n  useBreakpointValue,\n  FormHelperText,\n  InputGroup,\n  InputLeftAddon,\n  Badge,\n  Spinner,\n  Center,\n  useColorMode\n} from '@chakra-ui/react';\nimport { ArrowBackIcon, CalendarIcon, CheckIcon } from '@chakra-ui/icons';\nimport { FiCopy } from 'react-icons/fi';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { getColor, brandConfig } from '../../brandConfig';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport { calendarsModuleConfig } from './moduleConfig';\nimport { usePageTitle } from '../../hooks/useDocumentTitle';\n\nconst GET_CALENDAR = gql`\n  query GetCalendar($id: String!) {\n    calendar(id: $id) {\n      id\n      name\n      description\n      type\n      color\n      responsibleOwnerId\n      ownerType\n      visibility\n      isPublic\n      linkedEmailAddressId\n      companyId\n      projectId\n      settings {\n        timezone\n        defaultReminderMinutes\n        workingHoursStart\n        workingHoursEnd\n        workingDays\n      }\n      isActive\n      allowPublicBooking\n      bookingPageSlug\n      bookingPageTitle\n      bookingPageDescription\n      bookingPageLogo\n      requirePaymentUpfront\n      sendBookingConfirmations\n      sendBookingReminders\n    }\n  }\n`;\n\nconst UPDATE_CALENDAR = gql`\n  mutation UpdateCalendar($id: String!, $input: BusinessCalendarInput!) {\n    updateCalendar(id: $id, input: $input) {\n      id\n      name\n      type\n    }\n  }\n`;\n\nconst DELETE_CALENDAR = gql`\n  mutation DeleteCalendar($id: String!) {\n    deleteCalendar(id: $id)\n  }\n`;\n\nconst GET_COMPANIES = gql`\n  query GetCompanies {\n    companies {\n      id\n      name\n    }\n  }\n`;\n\nconst GET_EMPLOYEES = gql`\n  query GetEmployees {\n    employees {\n      id\n      fName\n      lName\n      email\n    }\n  }\n`;\n\nconst GET_ASSIGNED_EMAIL_ADDRESSES = gql`\n  query GetAssignedEmailAddresses {\n    emailAddresses {\n      email\n      name\n      type\n      associatedClients\n    }\n  }\n`;\n\nconst EditCalendar: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { user } = useAuth();\n  const { colorMode } = useColorMode();\n  const isMobile = useBreakpointValue({ base: true, md: false });\n\n  // Brand styling variables\n  const bgMain = getColor(\"background.main\", colorMode);\n  const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n  const cardBorder = getColor(\"border.darkCard\", colorMode);\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n  const textMuted = getColor(colorMode === 'light' ? \"text.muted\" : \"text.mutedDark\", colorMode);\n  const primaryColor = getColor(\"primary\", colorMode);\n  const primaryHover = getColor(\"primaryHover\", colorMode);\n  const successGreen = getColor(\"successGreen\", colorMode);\n  const errorRed = getColor(\"status.error\", colorMode);\n  const infoBlue = getColor(\"status.info\", colorMode);\n\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    type: 'BUSINESS',\n    color: '#4A90E2',\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    isShared: false,\n    publicRead: false,\n    publicWrite: false,\n    requireAuth: true,\n    allowedUsers: [],\n    linkedCompanyId: '',\n    linkedEmployeeId: '',\n    defaultReminders: true,\n    reminderMinutes: 15,\n    workingHoursStart: '09:00',\n    workingHoursEnd: '17:00',\n    workingDays: ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY'],\n    emailAddress: '',\n    allowPublicBooking: false,\n    bookingPageSlug: '',\n    bookingPageTitle: '',\n    bookingPageDescription: '',\n    bookingPageLogo: '',\n    sendBookingConfirmations: true,\n    sendBookingReminders: true\n  });\n\n  const { data: calendarData, loading: loadingCalendar } = useQuery(GET_CALENDAR, {\n    variables: { id },\n    skip: !id,\n    onCompleted: (data) => {\n      console.log('📥 ========== CALENDAR DATA LOADED ==========');\n      console.log('📊 Raw calendar data from backend:', JSON.stringify(data, null, 2));\n\n      if (data?.calendar) {\n        const calendar = data.calendar;\n\n        console.log('📅 Public booking fields from backend:');\n        console.log('  - allowPublicBooking:', calendar.allowPublicBooking);\n        console.log('  - bookingPageSlug:', calendar.bookingPageSlug);\n        console.log('  - bookingPageTitle:', calendar.bookingPageTitle);\n        console.log('  - bookingPageDescription:', calendar.bookingPageDescription);\n        console.log('  - sendBookingConfirmations:', calendar.sendBookingConfirmations);\n        console.log('  - sendBookingReminders:', calendar.sendBookingReminders);\n\n        const newFormData = {\n          name: calendar.name || '',\n          description: calendar.description || '',\n          type: calendar.type || 'BUSINESS',\n          color: calendar.color || '#4A90E2',\n          timezone: calendar.settings?.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone,\n          isShared: calendar.isPublic || false,\n          publicRead: calendar.isPublic || false,\n          publicWrite: false,\n          requireAuth: true,\n          allowedUsers: [],\n          linkedCompanyId: '',\n          linkedEmployeeId: '',\n          defaultReminders: calendar.settings?.defaultReminderMinutes > 0,\n          reminderMinutes: calendar.settings?.defaultReminderMinutes || 15,\n          workingHoursStart: calendar.settings?.workingHoursStart || '09:00',\n          workingHoursEnd: calendar.settings?.workingHoursEnd || '17:00',\n          workingDays: calendar.settings?.workingDays || ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY'],\n          emailAddress: calendar.emailAddress || '',\n          allowPublicBooking: calendar.allowPublicBooking || false,\n          bookingPageSlug: calendar.bookingPageSlug || '',\n          bookingPageTitle: calendar.bookingPageTitle || '',\n          bookingPageDescription: calendar.bookingPageDescription || '',\n          bookingPageLogo: calendar.bookingPageLogo || '',\n          sendBookingConfirmations: calendar.sendBookingConfirmations ?? true,\n          sendBookingReminders: calendar.sendBookingReminders ?? true\n        };\n\n        console.log('📝 Setting form data:', JSON.stringify(newFormData, null, 2));\n        setFormData(newFormData);\n      }\n    }\n  });\n\n  // Update page title\n  usePageTitle(calendarData?.calendar?.name ? `Edit ${calendarData.calendar.name}` : 'Edit Calendar');\n\n  const { data: companiesData } = useQuery(GET_COMPANIES);\n  const { data: employeesData } = useQuery(GET_EMPLOYEES);\n  const { data: emailAddressesData } = useQuery(GET_ASSIGNED_EMAIL_ADDRESSES);\n\n  const [updateCalendar, { loading: updating }] = useMutation(UPDATE_CALENDAR, {\n    onCompleted: (data) => {\n      console.log('✅ ========== CALENDAR UPDATE SUCCEEDED ==========');\n      console.log('📥 Response from backend:', JSON.stringify(data, null, 2));\n      console.log('✅ Calendar updated successfully:', data.updateCalendar);\n\n      toast({\n        title: 'Calendar updated',\n        description: `${data.updateCalendar.name} has been updated successfully`,\n        status: 'success',\n        duration: 3000\n      });\n      navigate(`/calendars/${data.updateCalendar.id}`);\n    },\n    onError: (error) => {\n      console.error('❌ ========== CALENDAR UPDATE FAILED ==========');\n      console.error('❌ GraphQL Error:', error);\n      console.error('❌ Error message:', error.message);\n      console.error('❌ Network error:', error.networkError);\n      console.error('❌ GraphQL errors:', error.graphQLErrors);\n\n      toast({\n        title: 'Error updating calendar',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const [deleteCalendar, { loading: deleting }] = useMutation(DELETE_CALENDAR, {\n    onCompleted: () => {\n      toast({\n        title: 'Calendar deleted',\n        description: 'The calendar has been deleted successfully',\n        status: 'success',\n        duration: 3000\n      });\n      navigate('/calendars/my');\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error deleting calendar',\n        description: error.message,\n        status: 'error',\n        duration: 5000\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    console.log('🚀 ========== CALENDAR UPDATE STARTED ==========');\n    console.log('📋 Current form data:', JSON.stringify(formData, null, 2));\n\n    const input: any = {\n      name: formData.name,\n      description: formData.description,\n      type: formData.type,\n      color: formData.color,\n      emailAddress: formData.emailAddress || undefined\n    };\n\n    // Set settings object\n    input.settings = {\n      timezone: formData.timezone,\n      defaultReminderMinutes: formData.defaultReminders ? formData.reminderMinutes : 0,\n      workingHoursStart: formData.workingHoursStart,\n      workingHoursEnd: formData.workingHoursEnd,\n      workingDays: formData.workingDays\n    };\n\n    // Handle sharing settings\n    if (formData.isShared) {\n      input.isPublic = formData.publicRead;\n    }\n\n    // ✅ PUBLIC BOOKING FIELDS - These were missing!\n    console.log('📅 Public Booking - allowPublicBooking:', formData.allowPublicBooking);\n    console.log('📅 Public Booking - bookingPageSlug:', formData.bookingPageSlug);\n\n    input.allowPublicBooking = formData.allowPublicBooking;\n\n    if (formData.allowPublicBooking) {\n      console.log('✅ Public booking is enabled, adding booking fields to input...');\n      input.bookingPageSlug = formData.bookingPageSlug;\n      input.bookingPageTitle = formData.bookingPageTitle || undefined;\n      input.bookingPageDescription = formData.bookingPageDescription || undefined;\n      input.bookingPageLogo = formData.bookingPageLogo || undefined;\n      input.sendBookingConfirmations = formData.sendBookingConfirmations;\n      input.sendBookingReminders = formData.sendBookingReminders;\n\n      console.log('📝 Booking fields added:', {\n        bookingPageSlug: input.bookingPageSlug,\n        bookingPageTitle: input.bookingPageTitle,\n        bookingPageDescription: input.bookingPageDescription,\n        sendBookingConfirmations: input.sendBookingConfirmations,\n        sendBookingReminders: input.sendBookingReminders\n      });\n    } else {\n      console.log('❌ Public booking is disabled, clearing booking fields...');\n      input.bookingPageSlug = null;\n      input.bookingPageTitle = null;\n      input.bookingPageDescription = null;\n      input.bookingPageLogo = null;\n    }\n\n    console.log('📤 Final mutation input being sent to backend:', JSON.stringify(input, null, 2));\n    console.log('🎯 Calendar ID:', id);\n\n    updateCalendar({ variables: { id, input } });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value\n    }));\n  };\n\n  const handleSwitchChange = (field: string) => (checked: boolean) => {\n    setFormData(prev => ({ ...prev, [field]: checked }));\n  };\n\n  const handleWorkingDaysChange = (day: string) => {\n    setFormData(prev => ({\n      ...prev,\n      workingDays: prev.workingDays.includes(day)\n        ? prev.workingDays.filter(d => d !== day)\n        : [...prev.workingDays, day]\n    }));\n  };\n\n  const calendarTypeOptions = [\n    { value: 'BUSINESS', label: 'Business Calendar' },\n    { value: 'EMAIL', label: 'Email Integration' },\n    { value: 'COMPANY', label: 'Company Calendar' },\n    { value: 'EMPLOYEE', label: 'Employee Calendar' },\n    { value: 'PROJECT', label: 'Project Calendar' },\n    { value: 'TEAM', label: 'Team Calendar' }\n  ];\n\n  const weekDays = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\n\n  const handleDelete = () => {\n    if (window.confirm('Are you sure you want to delete this calendar? This action cannot be undone.')) {\n      deleteCalendar({ variables: { id } });\n    }\n  };\n\n  if (loadingCalendar) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\">\n        <NavbarWithCallToAction />\n        <Center h=\"50vh\">\n          <VStack>\n            <Spinner size=\"xl\" color={primaryColor} />\n            <Text color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Loading calendar...</Text>\n          </VStack>\n        </Center>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  if (!calendarData?.calendar) {\n    return (\n      <Box bg={bgMain} minH=\"100vh\">\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />\n        <Container maxW=\"container.xl\" py={8}>\n          <Alert status=\"error\">\n            <AlertIcon />\n            Calendar not found\n          </Alert>\n        </Container>\n        <FooterWithFourColumns />\n      </Box>\n    );\n  }\n\n  return (\n    <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={calendarsModuleConfig} />\n\n      <Container maxW=\"container.lg\" py={8} flex=\"1\">\n        <VStack spacing={6} align=\"stretch\">\n          {/* Header with Back Button */}\n          <HStack justify=\"space-between\" mb={4}>\n            <HStack spacing={4}>\n              <Button\n                leftIcon={<ArrowBackIcon />}\n                onClick={() => navigate('/calendars/my')}\n                variant=\"ghost\"\n                color={primaryColor}\n                _hover={{ bg: \"rgba(59, 130, 246, 0.1)\" }}\n              >\n                Back\n              </Button>\n              <Heading size=\"lg\" color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                Edit Calendar\n              </Heading>\n            </HStack>\n            <Badge colorScheme=\"blue\" fontSize=\"md\" px={3} py={1}>\n              <CalendarIcon mr={2} />\n              {formData.type}\n            </Badge>\n          </HStack>\n\n          <Box\n            as=\"form\"\n            onSubmit={handleSubmit}\n            bg={cardGradientBg}\n            border=\"1px solid\"\n            borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n            borderRadius=\"xl\"\n            p={isMobile ? 4 : 8}\n          >\n            <Stack spacing={6}>\n              {/* Basic Information */}\n              <Box>\n                <Heading size=\"md\" color={colorMode === 'light' ? \"gray.900\" : textPrimary} mb={4}>\n                  Basic Information\n                </Heading>\n                <Stack spacing={4}>\n                  <FormControl isRequired>\n                    <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Calendar Name</FormLabel>\n                    <Input\n                      name=\"name\"\n                      value={formData.name}\n                      onChange={handleChange}\n                      placeholder=\"Enter calendar name\"\n                      bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                      borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                      color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                      _placeholder={{\n                        color: colorMode === 'light' ? \"gray.400\" : \"gray.500\"\n                      }}\n                      _hover={{ borderColor: primaryColor }}\n                      _focus={{\n                        borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                        boxShadow: `0 0 0 1px ${colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"}`\n                      }}\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Description</FormLabel>\n                    <Textarea\n                      name=\"description\"\n                      value={formData.description}\n                      onChange={handleChange}\n                      placeholder=\"Describe this calendar\"\n                      bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                      borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                      color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                      _placeholder={{\n                        color: colorMode === 'light' ? \"gray.400\" : \"gray.500\"\n                      }}\n                      _hover={{ borderColor: primaryColor }}\n                      _focus={{\n                        borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                        boxShadow: `0 0 0 1px ${colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"}`\n                      }}\n                    />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Email Integration</FormLabel>\n                    <Select\n                      name=\"emailAddress\"\n                      value={formData.emailAddress}\n                      onChange={handleChange}\n                      placeholder=\"Select an email address to link\"\n                      bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                      borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                      color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                      _hover={{ borderColor: primaryColor }}\n                      _focus={{\n                        borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                        boxShadow: `0 0 0 1px ${colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\"}`\n                      }}\n                    >\n                      <option value=\"\">No email linked</option>\n                      {emailAddressesData?.emailAddresses\n                        ?.filter((addr: any) => addr.associatedClients?.length > 0)\n                        ?.map((addr: any) => (\n                          <option key={addr.email} value={addr.email}>\n                            {addr.email} \n                            {addr.name && addr.name !== addr.email ? ` (${addr.name})` : ''}\n                          </option>\n                        ))}\n                    </Select>\n                    <FormHelperText color={textMuted}>\n                      Calendar invites sent to this email will automatically appear in this calendar.\n                      Only emails assigned to clients are available for linking.\n                    </FormHelperText>\n                  </FormControl>\n\n                  <HStack spacing={4}>\n                    <FormControl flex={1}>\n                      <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Type</FormLabel>\n                      <Select\n                        name=\"type\"\n                        value={formData.type}\n                        onChange={handleChange}\n                        bg=\"rgba(255, 255, 255, 0.05)\"\n                        borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                        color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                        _hover={{ borderColor: primaryColor }}\n                      >\n                        {calendarTypeOptions.map(option => (\n                          <option key={option.value} value={option.value}>\n                            {option.label}\n                          </option>\n                        ))}\n                      </Select>\n                    </FormControl>\n\n                    <FormControl flex={1}>\n                      <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Color</FormLabel>\n                      <Input\n                        type=\"color\"\n                        name=\"color\"\n                        value={formData.color}\n                        onChange={handleChange}\n                        h=\"38px\"\n                      />\n                    </FormControl>\n                  </HStack>\n                </Stack>\n              </Box>\n\n              <Divider borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder} />\n\n              {/* Settings */}\n              <Box>\n                <Heading size=\"md\" color={colorMode === 'light' ? \"gray.900\" : textPrimary} mb={4}>\n                  Calendar Settings\n                </Heading>\n                <Stack spacing={4}>\n                  <FormControl>\n                    <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Timezone</FormLabel>\n                    <Select\n                      name=\"timezone\"\n                      value={formData.timezone}\n                      onChange={handleChange}\n                      bg=\"rgba(255, 255, 255, 0.05)\"\n                      borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                      color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                      _hover={{ borderColor: primaryColor }}\n                    >\n                      <option value=\"UTC\">UTC</option>\n                      <option value=\"America/New_York\">Eastern Time</option>\n                      <option value=\"America/Chicago\">Central Time</option>\n                      <option value=\"America/Denver\">Mountain Time</option>\n                      <option value=\"America/Los_Angeles\">Pacific Time</option>\n                      <option value=\"Europe/London\">London</option>\n                      <option value=\"Europe/Paris\">Paris</option>\n                      <option value=\"Asia/Tokyo\">Tokyo</option>\n                      <option value=\"Australia/Sydney\">Sydney</option>\n                      <option value=\"Australia/Brisbane\">Brisbane</option>\n                    </Select>\n                  </FormControl>\n\n                  <FormControl display=\"flex\" alignItems=\"center\">\n                    <Switch\n                      id=\"defaultReminders\"\n                      isChecked={formData.defaultReminders}\n                      onChange={(e) => handleSwitchChange('defaultReminders')(e.target.checked)}\n                      colorScheme=\"blue\"\n                      mr={3}\n                    />\n                    <FormLabel htmlFor=\"defaultReminders\" mb={0} color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                      Enable default reminders\n                    </FormLabel>\n                  </FormControl>\n\n                  {formData.defaultReminders && (\n                    <FormControl>\n                      <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Reminder Time</FormLabel>\n                      <InputGroup>\n                        <Input\n                          type=\"number\"\n                          name=\"reminderMinutes\"\n                          value={formData.reminderMinutes}\n                          onChange={handleChange}\n                          bg=\"rgba(255, 255, 255, 0.05)\"\n                          borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                          color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                          _hover={{ borderColor: primaryColor }}\n                        />\n                        <InputLeftAddon\n                          bg=\"rgba(255, 255, 255, 0.1)\"\n                          borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                          color={textSecondary}\n                        >\n                          minutes before\n                        </InputLeftAddon>\n                      </InputGroup>\n                    </FormControl>\n                  )}\n\n                  <HStack spacing={4}>\n                    <FormControl flex={1}>\n                      <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Working Hours Start</FormLabel>\n                      <Input\n                        type=\"time\"\n                        name=\"workingHoursStart\"\n                        value={formData.workingHoursStart}\n                        onChange={handleChange}\n                        bg=\"rgba(255, 255, 255, 0.05)\"\n                        borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                        color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                        _hover={{ borderColor: primaryColor }}\n                      />\n                    </FormControl>\n\n                    <FormControl flex={1}>\n                      <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Working Hours End</FormLabel>\n                      <Input\n                        type=\"time\"\n                        name=\"workingHoursEnd\"\n                        value={formData.workingHoursEnd}\n                        onChange={handleChange}\n                        bg=\"rgba(255, 255, 255, 0.05)\"\n                        borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                        color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                        _hover={{ borderColor: primaryColor }}\n                      />\n                    </FormControl>\n                  </HStack>\n\n                  <FormControl>\n                    <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Working Days</FormLabel>\n                    <HStack wrap=\"wrap\" spacing={2}>\n                      {weekDays.map(day => (\n                        <Button\n                          key={day}\n                          size=\"sm\"\n                          variant={formData.workingDays.includes(day) ? 'solid' : 'outline'}\n                          colorScheme={formData.workingDays.includes(day) ? 'blue' : 'gray'}\n                          onClick={() => handleWorkingDaysChange(day)}\n                          type=\"button\"\n                        >\n                          {day.slice(0, 3)}\n                        </Button>\n                      ))}\n                    </HStack>\n                  </FormControl>\n                </Stack>\n              </Box>\n\n              <Divider borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder} />\n\n              {/* Sharing Settings */}\n              <Box>\n                <Heading size=\"md\" color={colorMode === 'light' ? \"gray.900\" : textPrimary} mb={4}>\n                  Sharing Settings\n                </Heading>\n                <Stack spacing={4}>\n                  <FormControl display=\"flex\" alignItems=\"center\">\n                    <Switch\n                      id=\"isShared\"\n                      isChecked={formData.isShared}\n                      onChange={(e) => handleSwitchChange('isShared')(e.target.checked)}\n                      colorScheme=\"blue\"\n                      mr={3}\n                    />\n                    <FormLabel htmlFor=\"isShared\" mb={0} color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                      Make this calendar public\n                    </FormLabel>\n                  </FormControl>\n\n                  {formData.isShared && (\n                    <Alert status=\"info\" bg=\"rgba(59, 130, 246, 0.1)\" borderColor={infoBlue}>\n                      <AlertIcon color={infoBlue} />\n                      <Text color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                        Public calendars can be viewed by anyone with the link\n                      </Text>\n                    </Alert>\n                  )}\n                </Stack>\n              </Box>\n\n              <Divider borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder} />\n\n              {/* Public Booking Settings (Calendly-style) */}\n              <Box>\n                <Heading size=\"md\" color={colorMode === 'light' ? \"gray.900\" : textPrimary} mb={4}>\n                  📅 Public Booking Settings\n                </Heading>\n                <Stack spacing={4}>\n                  <FormControl display=\"flex\" alignItems=\"center\">\n                    <Switch\n                      id=\"allowPublicBooking\"\n                      isChecked={formData.allowPublicBooking}\n                      onChange={(e) => handleSwitchChange('allowPublicBooking')(e.target.checked)}\n                      colorScheme=\"purple\"\n                      mr={3}\n                    />\n                    <FormLabel htmlFor=\"allowPublicBooking\" mb={0} color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                      Allow Public Booking (Calendly-style)\n                    </FormLabel>\n                  </FormControl>\n\n                  {formData.allowPublicBooking && (\n                    <>\n                      <Alert status=\"info\" bg=\"rgba(147, 51, 234, 0.1)\" borderColor=\"purple.500\">\n                        <AlertIcon color=\"purple.500\" />\n                        <Text color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                          Enable public booking to let visitors book time with you via a public URL\n                        </Text>\n                      </Alert>\n\n                      <FormControl isRequired>\n                        <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Booking Page Slug</FormLabel>\n                        <InputGroup>\n                          <InputLeftAddon\n                            bg=\"rgba(255, 255, 255, 0.1)\"\n                            borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                            color={textSecondary}\n                          >\n                            /book/\n                          </InputLeftAddon>\n                          <Input\n                            name=\"bookingPageSlug\"\n                            placeholder=\"your-name\"\n                            value={formData.bookingPageSlug || ''}\n                            onChange={handleChange}\n                            bg=\"rgba(255, 255, 255, 0.05)\"\n                            borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                            color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                            _hover={{ borderColor: primaryColor }}\n                          />\n                        </InputGroup>\n                        <FormHelperText color={textSecondary}>\n                          Example: \"john-smith\" becomes /book/john-smith\n                        </FormHelperText>\n                      </FormControl>\n\n                      {/* Copy Booking URL Button */}\n                      {formData.bookingPageSlug && (\n                        <Box>\n                          <Button\n                            leftIcon={<FiCopy />}\n                            colorScheme=\"blue\"\n                            variant=\"outline\"\n                            size=\"md\"\n                            width=\"full\"\n                            onClick={() => {\n                              const bookingUrl = `${window.location.origin}/book/${formData.bookingPageSlug}`;\n                              navigator.clipboard.writeText(bookingUrl).then(() => {\n                                toast({\n                                  title: 'Booking URL copied!',\n                                  description: `Copied: ${bookingUrl}`,\n                                  status: 'success',\n                                  duration: 3000,\n                                  isClosable: true,\n                                });\n                              }).catch((err) => {\n                                console.error('Failed to copy:', err);\n                                toast({\n                                  title: 'Failed to copy',\n                                  description: 'Please try again',\n                                  status: 'error',\n                                  duration: 3000,\n                                  isClosable: true,\n                                });\n                              });\n                            }}\n                          >\n                            📋 Copy Booking URL\n                          </Button>\n                          <Text fontSize=\"xs\" color={textSecondary} mt={2} textAlign=\"center\">\n                            {window.location.origin}/book/{formData.bookingPageSlug}\n                          </Text>\n                        </Box>\n                      )}\n\n                      <FormControl>\n                        <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Booking Page Title</FormLabel>\n                        <Input\n                          name=\"bookingPageTitle\"\n                          placeholder=\"Book time with John Smith\"\n                          value={formData.bookingPageTitle || ''}\n                          onChange={handleChange}\n                          bg=\"rgba(255, 255, 255, 0.05)\"\n                          borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                          color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                          _hover={{ borderColor: primaryColor }}\n                        />\n                      </FormControl>\n\n                      <FormControl>\n                        <FormLabel color={colorMode === 'light' ? \"gray.900\" : textPrimary}>Booking Page Description</FormLabel>\n                        <Textarea\n                          name=\"bookingPageDescription\"\n                          placeholder=\"Choose a time that works for you...\"\n                          value={formData.bookingPageDescription || ''}\n                          onChange={handleChange}\n                          bg=\"rgba(255, 255, 255, 0.05)\"\n                          borderColor={colorMode === 'light' ? \"gray.300\" : cardBorder}\n                          color={colorMode === 'light' ? \"gray.900\" : textPrimary}\n                          _hover={{ borderColor: primaryColor }}\n                          rows={3}\n                        />\n                      </FormControl>\n\n                      <HStack spacing={4}>\n                        <FormControl display=\"flex\" alignItems=\"center\">\n                          <Switch\n                            id=\"sendBookingConfirmations\"\n                            isChecked={formData.sendBookingConfirmations ?? true}\n                            onChange={(e) => handleSwitchChange('sendBookingConfirmations')(e.target.checked)}\n                            colorScheme=\"purple\"\n                            mr={3}\n                          />\n                          <FormLabel htmlFor=\"sendBookingConfirmations\" mb={0} color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                            Send confirmation emails\n                          </FormLabel>\n                        </FormControl>\n\n                        <FormControl display=\"flex\" alignItems=\"center\">\n                          <Switch\n                            id=\"sendBookingReminders\"\n                            isChecked={formData.sendBookingReminders ?? true}\n                            onChange={(e) => handleSwitchChange('sendBookingReminders')(e.target.checked)}\n                            colorScheme=\"purple\"\n                            mr={3}\n                          />\n                          <FormLabel htmlFor=\"sendBookingReminders\" mb={0} color={colorMode === 'light' ? \"gray.900\" : textPrimary}>\n                            Send reminder emails\n                          </FormLabel>\n                        </FormControl>\n                      </HStack>\n                    </>\n                  )}\n                </Stack>\n              </Box>\n\n              {/* Action Buttons */}\n              <HStack justify=\"space-between\" pt={4}>\n                <Button\n                  colorScheme=\"red\"\n                  variant=\"outline\"\n                  onClick={handleDelete}\n                  isLoading={deleting}\n                  loadingText=\"Deleting...\"\n                >\n                  Delete Calendar\n                </Button>\n                <HStack>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => navigate(`/calendars/${id}`)}\n                    color={textSecondary}\n                    _hover={{ bg: \"rgba(255, 255, 255, 0.1)\" }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    colorScheme=\"blue\"\n                    bg={primaryColor}\n                    _hover={{ bg: primaryHover }}\n                    isLoading={updating}\n                    loadingText=\"Updating...\"\n                    leftIcon={<CheckIcon />}\n                  >\n                    Update Calendar\n                  </Button>\n                </HStack>\n              </HStack>\n            </Stack>\n          </Box>\n        </VStack>\n      </Container>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default EditCalendar;"],"names":["GET_CALENDAR","gql","_templateObject","_taggedTemplateLiteral","UPDATE_CALENDAR","_templateObject2","DELETE_CALENDAR","_templateObject3","GET_COMPANIES","_templateObject4","GET_EMPLOYEES","_templateObject5","GET_ASSIGNED_EMAIL_ADDRESSES","_templateObject6","EditCalendar","_calendarData$calenda","_emailAddressesData$e","_emailAddressesData$e2","_formData$sendBooking","_formData$sendBooking2","id","useParams","navigate","useNavigate","toast","useToast","user","useAuth","colorMode","useColorMode","isMobile","useBreakpointValue","base","md","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","primaryColor","primaryHover","infoBlue","formData","setFormData","useState","name","description","type","color","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","isShared","publicRead","publicWrite","requireAuth","allowedUsers","linkedCompanyId","linkedEmployeeId","defaultReminders","reminderMinutes","workingHoursStart","workingHoursEnd","workingDays","emailAddress","allowPublicBooking","bookingPageSlug","bookingPageTitle","bookingPageDescription","bookingPageLogo","sendBookingConfirmations","sendBookingReminders","data","calendarData","loading","loadingCalendar","useQuery","variables","skip","onCompleted","console","log","JSON","stringify","calendar","_calendar$settings","_calendar$settings2","_calendar$settings3","_calendar$settings4","_calendar$settings5","_calendar$settings6","_calendar$sendBooking","_calendar$sendBooking2","newFormData","settings","isPublic","defaultReminderMinutes","usePageTitle","concat","companiesData","employeesData","emailAddressesData","updateCalendar","updating","useMutation","title","status","duration","onError","error","message","networkError","graphQLErrors","deleteCalendar","deleting","handleChange","e","value","target","prev","_objectSpread","checked","handleSwitchChange","field","_jsxs","Box","bg","minH","children","_jsx","NavbarWithCallToAction","Center","h","VStack","Spinner","size","Text","FooterWithFourColumns","display","flexDirection","ModuleBreadcrumb","moduleConfig","calendarsModuleConfig","Container","maxW","py","flex","spacing","align","HStack","justify","mb","Button","leftIcon","ArrowBackIcon","onClick","variant","_hover","Heading","Badge","colorScheme","fontSize","px","CalendarIcon","mr","as","onSubmit","preventDefault","input","undefined","border","borderColor","borderRadius","p","Stack","FormControl","isRequired","FormLabel","Input","onChange","placeholder","_placeholder","_focus","boxShadow","Textarea","Select","emailAddresses","filter","addr","_addr$associatedClien","associatedClients","length","map","email","FormHelperText","label","option","Divider","alignItems","Switch","isChecked","htmlFor","InputGroup","InputLeftAddon","wrap","day","includes","d","handleWorkingDaysChange","slice","Alert","AlertIcon","_Fragment","FiCopy","width","bookingUrl","window","location","origin","navigator","clipboard","writeText","then","isClosable","catch","err","mt","textAlign","rows","pt","handleDelete","confirm","isLoading","loadingText","CheckIcon"],"sourceRoot":""}