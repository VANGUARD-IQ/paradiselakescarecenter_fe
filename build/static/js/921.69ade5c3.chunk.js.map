{"version":3,"file":"static/js/921.69ade5c3.chunk.js","mappings":"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","sources":["pages/proposals/EditProposal.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  Text,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  VStack,\n  HStack,\n  useColorMode,\n  useToast,\n  IconButton,\n  Badge,\n  Divider,\n  Spinner,\n} from '@chakra-ui/react';\nimport { FiPlus, FiX, FiSave } from 'react-icons/fi';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { getColor } from '../../brandConfig';\nimport { FooterWithFourColumns } from '../../components/chakra/FooterWithFourColumns/FooterWithFourColumns';\nimport { NavbarWithCallToAction } from '../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction';\nimport { ModuleBreadcrumb } from '../../components/ModuleBreadcrumb';\nimport proposalsModuleConfig from './moduleConfig';\n\nconst GET_PROPOSAL = gql`\n  query GetProposal($id: ID!) {\n    getProposal(id: $id) {\n      id\n      companyName\n      slug\n      title\n      agreementMarkdown\n      customPagePath\n      projectId\n      draftBillId\n      scheduledPayments {\n        billId\n        daysAfterPrevious\n        description\n      }\n      notes\n    }\n  }\n`;\n\n// Removed unused GET_ALL_CLIENTS query\n\nconst UPDATE_PROPOSAL = gql`\n  mutation UpdateProposal($id: ID!, $input: UpdateProposalInput!) {\n    updateProposal(id: $id, input: $input) {\n      id\n      companyName\n      slug\n      title\n      status\n    }\n  }\n`;\n\n// Removed unused RequiredSigner interface\n\ninterface ScheduledPayment {\n  billId?: string;\n  daysAfterPrevious?: number;\n  description?: string;\n}\n\nconst EditProposal: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const { colorMode } = useColorMode();\n\n  const [companyName, setCompanyName] = useState('');\n  const [slug, setSlug] = useState('');\n  const [title, setTitle] = useState('');\n  const [agreementMarkdown, setAgreementMarkdown] = useState('');\n  const [customPagePath, setCustomPagePath] = useState('');\n  const [projectId, setProjectId] = useState('');\n  const [draftBillId, setDraftBillId] = useState('');\n  const [scheduledPayments, setScheduledPayments] = useState<ScheduledPayment[]>([]);\n  const [notes, setNotes] = useState('');\n\n  const { data: proposalData, loading: loadingProposal } = useQuery(GET_PROPOSAL, {\n    variables: { id },\n    skip: !id,\n  });\n\n  // Removed unused clients query\n  const [updateProposal, { loading: updating }] = useMutation(UPDATE_PROPOSAL);\n\n  const bg = getColor(\"background.main\", colorMode);\n  const cardBg = colorMode === 'light' ? 'white' : 'gray.800';\n  const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n  const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n\n  // Load proposal data\n  useEffect(() => {\n    if (proposalData?.getProposal) {\n      const proposal = proposalData.getProposal;\n      setCompanyName(proposal.companyName || '');\n      setSlug(proposal.slug || '');\n      setTitle(proposal.title || '');\n      setAgreementMarkdown(proposal.agreementMarkdown || '');\n      setCustomPagePath(proposal.customPagePath || '');\n      setProjectId(proposal.projectId || '');\n      setDraftBillId(proposal.draftBillId || '');\n      setScheduledPayments(proposal.scheduledPayments || []);\n      setNotes(proposal.notes || '');\n    }\n  }, [proposalData]);\n\n  const handleAddScheduledPayment = () => {\n    setScheduledPayments([...scheduledPayments, { billId: '', daysAfterPrevious: undefined, description: '' }]);\n  };\n\n  const handleRemoveScheduledPayment = (index: number) => {\n    setScheduledPayments(scheduledPayments.filter((_, i) => i !== index));\n  };\n\n  const handleUpdateScheduledPayment = (index: number, field: keyof ScheduledPayment, value: any) => {\n    const updated = [...scheduledPayments];\n    updated[index] = { ...updated[index], [field]: value };\n    setScheduledPayments(updated);\n  };\n\n  const handleSubmit = async () => {\n    if (!companyName || !slug || !title || !agreementMarkdown) {\n      toast({\n        title: 'Missing fields',\n        description: 'Please fill in all required fields',\n        status: 'error',\n        duration: 3000,\n      });\n      return;\n    }\n\n    try {\n      // Strip __typename from scheduledPayments before sending to backend\n      const cleanScheduledPayments = scheduledPayments.map((payment: any) => {\n        const { __typename, ...cleanPayment } = payment;\n        return cleanPayment;\n      });\n\n      await updateProposal({\n        variables: {\n          id,\n          input: {\n            companyName,\n            title,\n            agreementMarkdown,\n            projectId: projectId || undefined,\n            draftBillId: draftBillId || undefined,\n            scheduledPayments: cleanScheduledPayments.length > 0 ? cleanScheduledPayments : undefined,\n            notes: notes || undefined,\n          },\n        },\n      });\n\n      toast({\n        title: 'Proposal updated!',\n        description: `Proposal \"${companyName}\" has been updated`,\n        status: 'success',\n        duration: 5000,\n      });\n\n      navigate('/proposals');\n    } catch (error) {\n      toast({\n        title: 'Error updating proposal',\n        description: error instanceof Error ? error.message : 'Unknown error occurred',\n        status: 'error',\n        duration: 5000,\n      });\n    }\n  };\n\n  if (loadingProposal) {\n    return (\n      <Box bg={bg} minH=\"100vh\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        <Spinner size=\"xl\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <NavbarWithCallToAction />\n      <Box bg={bg} minH=\"100vh\" py={10}>\n        <Container maxW=\"container.xl\">\n          <VStack spacing={8} align=\"stretch\">\n            <ModuleBreadcrumb\n              moduleConfig={proposalsModuleConfig}\n            />\n\n            <Box bg={cardBg} p={8} borderRadius=\"lg\" shadow=\"md\">\n              <VStack spacing={6} align=\"stretch\">\n                <Heading size=\"lg\" color={textPrimary}>Edit Proposal</Heading>\n\n                <FormControl isRequired>\n                  <FormLabel color={textPrimary}>Company Name</FormLabel>\n                  <Input\n                    value={companyName}\n                    onChange={(e) => setCompanyName(e.target.value)}\n                    placeholder=\"e.g., One Group Australasia\"\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textPrimary}>URL Slug</FormLabel>\n                  <Input\n                    value={slug}\n                    isReadOnly\n                    placeholder=\"e.g., onegroup\"\n                    opacity={0.6}\n                  />\n                  <Text fontSize=\"sm\" color={textSecondary} mt={1}>\n                    Slug cannot be changed after creation\n                  </Text>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel color={textPrimary}>Proposal Title</FormLabel>\n                  <Input\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    placeholder=\"e.g., Website Development & Managed IT Agreement\"\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textPrimary}>Custom Offer Page Path (Optional)</FormLabel>\n                  <Input\n                    value={customPagePath}\n                    onChange={(e) => setCustomPagePath(e.target.value)}\n                    placeholder=\"e.g., /offers/onegroup\"\n                  />\n                  <Text fontSize=\"sm\" color={textSecondary} mt={1}>\n                    If you have a custom branded offer page, enter its path here (e.g., /offers/onegroup)\n                  </Text>\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textPrimary}>Project ID (Optional)</FormLabel>\n                  <Input\n                    value={projectId}\n                    onChange={(e) => setProjectId(e.target.value)}\n                    placeholder=\"e.g., 6234f234a234b234c234d234\"\n                  />\n                  <Text fontSize=\"sm\" color={textSecondary} mt={1}>\n                    Link this proposal to an existing project\n                  </Text>\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel color={textPrimary}>Draft Bill ID (Optional)</FormLabel>\n                  <Input\n                    value={draftBillId}\n                    onChange={(e) => setDraftBillId(e.target.value)}\n                    placeholder=\"e.g., 6234f234a234b234c234d234\"\n                  />\n                  <Text fontSize=\"sm\" color={textSecondary} mt={1}>\n                    Draft bill to be paid upon signing\n                  </Text>\n                </FormControl>\n\n                <Divider />\n\n                <Box>\n                  <HStack justify=\"space-between\" mb={4}>\n                    <Box>\n                      <Heading size=\"md\" color={textPrimary}>Scheduled Payments</Heading>\n                      <Text fontSize=\"sm\" color={textSecondary} mt={1}>\n                        Create a payment schedule with milestones\n                      </Text>\n                    </Box>\n                    <Button\n                      leftIcon={<FiPlus />}\n                      size=\"sm\"\n                      onClick={handleAddScheduledPayment}\n                      colorScheme=\"blue\"\n                    >\n                      Add Payment\n                    </Button>\n                  </HStack>\n\n                  {scheduledPayments.length === 0 ? (\n                    <Box\n                      p={6}\n                      textAlign=\"center\"\n                      borderWidth={1}\n                      borderRadius=\"md\"\n                      borderStyle=\"dashed\"\n                      color={textSecondary}\n                    >\n                      <Text>No scheduled payments yet. Click \"Add Payment\" to create a milestone.</Text>\n                    </Box>\n                  ) : (\n                    <VStack spacing={4} align=\"stretch\">\n                      {scheduledPayments.map((payment, index) => (\n                        <Box\n                          key={index}\n                          p={4}\n                          borderWidth={1}\n                          borderRadius=\"md\"\n                          bg={colorMode === 'light' ? 'gray.50' : 'gray.700'}\n                        >\n                          <HStack justify=\"space-between\" mb={3}>\n                            <Badge colorScheme=\"blue\">Payment {index + 1}</Badge>\n                            <IconButton\n                              aria-label=\"Remove payment\"\n                              icon={<FiX />}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              colorScheme=\"red\"\n                              onClick={() => handleRemoveScheduledPayment(index)}\n                            />\n                          </HStack>\n                          <VStack spacing={3} align=\"stretch\">\n                            <FormControl>\n                              <FormLabel fontSize=\"sm\" color={textPrimary}>Bill ID</FormLabel>\n                              <Input\n                                size=\"sm\"\n                                value={payment.billId || ''}\n                                onChange={(e) => handleUpdateScheduledPayment(index, 'billId', e.target.value)}\n                                placeholder=\"e.g., 6234f234a234b234c234d234\"\n                              />\n                            </FormControl>\n                            <FormControl>\n                              <FormLabel fontSize=\"sm\" color={textPrimary}>Days After Previous Payment</FormLabel>\n                              <Input\n                                size=\"sm\"\n                                type=\"number\"\n                                value={payment.daysAfterPrevious || ''}\n                                onChange={(e) => handleUpdateScheduledPayment(index, 'daysAfterPrevious', e.target.value ? parseInt(e.target.value) : undefined)}\n                                placeholder={index === 0 ? \"Days after signing (e.g., 0, 7, 14)\" : \"Days after previous payment\"}\n                              />\n                              <Text fontSize=\"xs\" color={textSecondary} mt={1}>\n                                {index === 0 ? 'Days after proposal is signed' : 'Days after the previous payment is completed'}\n                              </Text>\n                            </FormControl>\n                            <FormControl>\n                              <FormLabel fontSize=\"sm\" color={textPrimary}>Description</FormLabel>\n                              <Input\n                                size=\"sm\"\n                                value={payment.description || ''}\n                                onChange={(e) => handleUpdateScheduledPayment(index, 'description', e.target.value)}\n                                placeholder=\"e.g., Milestone 1: Core Pages & Infrastructure\"\n                              />\n                            </FormControl>\n                          </VStack>\n                        </Box>\n                      ))}\n                    </VStack>\n                  )}\n                </Box>\n\n                <Divider />\n\n                <FormControl isRequired>\n                  <FormLabel color={textPrimary}>Agreement (Markdown)</FormLabel>\n                  <Textarea\n                    value={agreementMarkdown}\n                    onChange={(e) => setAgreementMarkdown(e.target.value)}\n                    placeholder=\"Write your agreement in Markdown format\"\n                    rows={15}\n                    fontFamily=\"monospace\"\n                  />\n                  <Text fontSize=\"sm\" color={textSecondary} mt={1}>\n                    Write your agreement in Markdown format\n                  </Text>\n                </FormControl>\n\n                <Divider />\n\n                <FormControl>\n                  <FormLabel color={textPrimary}>Internal Notes (Optional)</FormLabel>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"Internal notes about this proposal...\"\n                    rows={3}\n                  />\n                </FormControl>\n\n                <HStack spacing={4} justify=\"flex-end\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => navigate('/proposals')}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    colorScheme=\"blue\"\n                    leftIcon={<FiSave />}\n                    onClick={handleSubmit}\n                    isLoading={updating}\n                  >\n                    Update Proposal\n                  </Button>\n                </HStack>\n              </VStack>\n            </Box>\n          </VStack>\n        </Container>\n      </Box>\n      <FooterWithFourColumns />\n    </>\n  );\n};\n\nexport default EditProposal;\n"],"names":["GET_PROPOSAL","gql","_templateObject","_taggedTemplateLiteral","UPDATE_PROPOSAL","_templateObject2","EditProposal","id","useParams","navigate","useNavigate","toast","useToast","colorMode","useColorMode","companyName","setCompanyName","useState","slug","setSlug","title","setTitle","agreementMarkdown","setAgreementMarkdown","customPagePath","setCustomPagePath","projectId","setProjectId","draftBillId","setDraftBillId","scheduledPayments","setScheduledPayments","notes","setNotes","data","proposalData","loading","loadingProposal","useQuery","variables","skip","updateProposal","updating","useMutation","bg","getColor","cardBg","textPrimary","textSecondary","useEffect","getProposal","proposal","handleUpdateScheduledPayment","index","field","value","updated","_objectSpread","_jsx","Box","minH","display","alignItems","justifyContent","children","Spinner","size","_jsxs","_Fragment","NavbarWithCallToAction","py","Container","maxW","VStack","spacing","align","ModuleBreadcrumb","moduleConfig","proposalsModuleConfig","p","borderRadius","shadow","Heading","color","FormControl","isRequired","FormLabel","Input","onChange","e","target","placeholder","isReadOnly","opacity","Text","fontSize","mt","Divider","HStack","justify","mb","Button","leftIcon","FiPlus","onClick","handleAddScheduledPayment","billId","daysAfterPrevious","undefined","description","colorScheme","length","textAlign","borderWidth","borderStyle","map","payment","Badge","IconButton","icon","FiX","variant","filter","_","i","handleRemoveScheduledPayment","type","parseInt","Textarea","rows","fontFamily","FiSave","async","cleanScheduledPayments","__typename","_objectWithoutProperties","_excluded","input","concat","status","duration","error","Error","message","isLoading","FooterWithFourColumns"],"sourceRoot":""}