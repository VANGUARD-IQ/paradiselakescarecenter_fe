{"version":3,"file":"static/js/9893.6bf58a3a.chunk.js","mappings":"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","sources":["pages/bills/components/StripeBillPayment.tsx","pages/bills/components/SilentBitcoinPayment.tsx","pages/bills/components/BankTransferPayment.tsx","pages/bills/components/PaymentMethodSelector.tsx","pages/bills/BillDetails.tsx","pages/bills/components/BillPDF.tsx","pages/clients/components/ClientSearchSelector.tsx","pages/bills/markdownTemplates.ts"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Text,\n  VStack,\n  HStack,\n  Badge,\n  useToast,\n  Alert,\n  AlertIcon,\n  Spinner,\n  Divider,\n} from \"@chakra-ui/react\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\nimport { brandConfig } from \"../../../brandConfig\";\nimport { useNavigate } from \"react-router-dom\";\n\n// GraphQL Queries and Mutations\nconst GET_TENANT_CONFIG = gql`\n  query GetTenantConfig($id: ID!) {\n    tenant(id: $id) {\n      id\n      apiKeys {\n        stripePublicKey\n      }\n    }\n  }\n`;\n\nconst CREATE_BILL_PAYMENT = gql`\n  mutation CreateBillPayment($billId: ID!, $paymentMethodId: String!) {\n    createBillPayment(billId: $billId, paymentMethodId: $paymentMethodId) {\n      success\n      requiresAction\n      clientSecret\n      paymentIntentId\n      message\n    }\n  }\n`;\n\ninterface StripeBillPaymentProps {\n  billId: string;\n  amount: number;\n  onPaymentComplete?: () => void;\n}\n\n// Payment Form Component\nconst CheckoutForm: React.FC<{\n  billId: string;\n  amount: number;\n  onSuccess: () => void;\n}> = ({ billId, amount, onSuccess }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const toast = useToast();\n  const navigate = useNavigate();\n\n  const [createBillPayment] = useMutation(CREATE_BILL_PAYMENT);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    console.log('[StripeBillPayment] Starting payment submission');\n    console.log('[StripeBillPayment] Bill ID:', billId);\n    console.log('[StripeBillPayment] Amount:', amount);\n\n    if (!stripe || !elements) {\n      console.error('[StripeBillPayment] Stripe or Elements not loaded');\n      return;\n    }\n\n    setIsProcessing(true);\n    setError(null);\n\n    try {\n      // Create payment method\n      const cardElement = elements.getElement(CardElement);\n      if (!cardElement) {\n        throw new Error(\"Card element not found\");\n      }\n\n      const { error: pmError, paymentMethod } = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement,\n      });\n\n      if (pmError) {\n        throw new Error(pmError.message);\n      }\n\n      if (!paymentMethod) {\n        throw new Error(\"Failed to create payment method\");\n      }\n\n      console.log(\"[StripeBillPayment] Created payment method:\", paymentMethod.id);\n\n      // Call the backend mutation\n      const { data } = await createBillPayment({\n        variables: {\n          billId,\n          paymentMethodId: paymentMethod.id,\n        },\n      });\n\n      const response = data.createBillPayment;\n\n      // Handle 3D Secure if required\n      if (response.requiresAction && response.clientSecret) {\n        console.log(\"[StripeBillPayment] Payment requires 3D Secure authentication\");\n        \n        const { error: confirmError, paymentIntent } = await stripe.confirmCardPayment(\n          response.clientSecret\n        );\n\n        if (confirmError) {\n          throw new Error(confirmError.message);\n        }\n\n        if (paymentIntent?.status === \"succeeded\") {\n          toast({\n            title: \"Payment Successful!\",\n            description: `Your payment of $${amount.toFixed(2)} has been processed.`,\n            status: \"success\",\n            duration: 5000,\n            isClosable: true,\n          });\n          onSuccess();\n          // Navigate to success page\n          navigate(`/bill/${billId}/payment-success`);\n        }\n      } else if (response.success) {\n        // Payment succeeded immediately\n        toast({\n          title: \"Payment Successful!\",\n          description: `Your payment of $${amount.toFixed(2)} has been processed.`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n        onSuccess();\n        // Navigate to success page\n        navigate(`/bill/${billId}/payment-success`);\n      } else {\n        throw new Error(response.message || \"Payment failed\");\n      }\n    } catch (err) {\n      console.error(\"[StripeBillPayment] Payment error:\", err);\n      const errorMessage = err instanceof Error ? err.message : \"Payment failed. Please try again.\";\n      setError(errorMessage);\n      toast({\n        title: \"Payment Failed\",\n        description: errorMessage,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <VStack spacing={4} align=\"stretch\">\n        <Box\n          p={4}\n          borderWidth=\"1px\"\n          borderRadius=\"md\"\n          borderColor={brandConfig.colors.border.darkCard}\n          bg={brandConfig.colors.background.main}\n        >\n          <CardElement\n            options={{\n              style: {\n                base: {\n                  fontSize: \"16px\",\n                  color: brandConfig.colors.text.inverse,\n                  \"::placeholder\": {\n                    color: brandConfig.colors.text.mutedDark,\n                  },\n                },\n              },\n            }}\n          />\n        </Box>\n\n        {error && (\n          <Alert status=\"error\" borderRadius=\"md\">\n            <AlertIcon />\n            {error}\n          </Alert>\n        )}\n\n        <Button\n          type=\"submit\"\n          colorScheme=\"blue\"\n          size=\"lg\"\n          width=\"full\"\n          isDisabled={!stripe || isProcessing}\n          isLoading={isProcessing}\n          loadingText=\"Processing Payment...\"\n        >\n          Pay ${amount.toFixed(2)} AUD with Card\n        </Button>\n\n        <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} textAlign=\"center\">\n          Your payment information is secure and encrypted. We use Stripe for payment processing.\n        </Text>\n      </VStack>\n    </form>\n  );\n};\n\n// Main Component\nexport const StripeBillPayment: React.FC<StripeBillPaymentProps> = ({\n  billId,\n  amount,\n  onPaymentComplete,\n}) => {\n  const [stripePromise, setStripePromise] = useState<Promise<any> | null>(null);\n  const toast = useToast();\n\n  // Get tenant configuration\n  const tenantId = localStorage.getItem(\"tenantId\") || \"\";\n  const { data: tenantData, loading: tenantLoading, error: tenantError } = useQuery(\n    GET_TENANT_CONFIG,\n    {\n      variables: { id: tenantId },\n      skip: !tenantId,\n    }\n  );\n\n  useEffect(() => {\n    if (tenantData?.tenant?.apiKeys?.stripePublicKey) {\n      console.log(\"[StripeBillPayment] Loading Stripe with tenant key:\", tenantData.tenant.apiKeys.stripePublicKey.substring(0, 10) + \"...\");\n      setStripePromise(loadStripe(tenantData.tenant.apiKeys.stripePublicKey));\n    } else if (!tenantLoading && !tenantError) {\n      // Fallback to environment variable if tenant doesn't have Stripe configured\n      const envStripeKey = process.env.REACT_APP_STRIPE_PUBLIC_KEY;\n      if (envStripeKey) {\n        console.log(\"[StripeBillPayment] Loading Stripe with environment key:\", envStripeKey.substring(0, 10) + \"...\");\n        setStripePromise(loadStripe(envStripeKey));\n      } else {\n        console.error(\"[StripeBillPayment] No Stripe key found in tenant config or environment\");\n      }\n    }\n  }, [tenantData, tenantLoading, tenantError]);\n\n  const handlePaymentSuccess = () => {\n    if (onPaymentComplete) {\n      onPaymentComplete();\n    }\n  };\n\n  if (tenantLoading) {\n    return (\n      <Card\n        bg={brandConfig.colors.background.cardGradient}\n        borderColor={brandConfig.colors.border.darkCard}\n        borderWidth=\"1px\"\n      >\n        <CardBody>\n          <VStack spacing={4}>\n            <Spinner size=\"xl\" color={brandConfig.colors.primary} />\n            <Text color={brandConfig.colors.text.secondaryDark}>\n              Loading payment options...\n            </Text>\n          </VStack>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  if (!stripePromise) {\n    return (\n      <Card\n        bg={brandConfig.colors.background.cardGradient}\n        borderColor={brandConfig.colors.border.darkCard}\n        borderWidth=\"1px\"\n      >\n        <CardBody>\n          <Alert status=\"warning\" borderRadius=\"md\">\n            <AlertIcon />\n            <Box>\n              <Text fontWeight=\"bold\">Payment Not Available</Text>\n              <Text fontSize=\"sm\">\n                Stripe payment is not configured for this account. Please contact support.\n              </Text>\n            </Box>\n          </Alert>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      bg={brandConfig.colors.background.cardGradient}\n      borderColor={brandConfig.colors.border.darkCard}\n      borderWidth=\"1px\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      backdropFilter=\"blur(10px)\"\n    >\n      <CardHeader>\n        <HStack justify=\"space-between\">\n          <Text fontSize=\"lg\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n            💳 Pay with Credit/Debit Card\n          </Text>\n          <Badge colorScheme=\"blue\" fontSize=\"sm\" px={3} py={1}>\n            Secure Payment\n          </Badge>\n        </HStack>\n      </CardHeader>\n\n      <CardBody>\n        <VStack spacing={6} align=\"stretch\">\n          {/* Amount Display */}\n          <Box\n            p={4}\n            bg={brandConfig.colors.background.main}\n            borderRadius=\"md\"\n            border=\"1px\"\n            borderColor={brandConfig.colors.border.darkCard}\n          >\n            <VStack spacing={2}>\n              <Text fontSize=\"sm\" color={brandConfig.colors.text.mutedDark}>\n                Amount to Pay\n              </Text>\n              <Text fontSize=\"3xl\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n                ${amount.toFixed(2)}\n              </Text>\n              <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark}>\n                AUD\n              </Text>\n            </VStack>\n          </Box>\n\n          <Divider />\n\n          {/* Stripe Elements Provider */}\n          <Elements stripe={stripePromise}>\n            <CheckoutForm\n              billId={billId}\n              amount={amount}\n              onSuccess={handlePaymentSuccess}\n            />\n          </Elements>\n\n          {/* Security Badge */}\n          <HStack justify=\"center\" spacing={4} pt={2}>\n            <HStack spacing={2}>\n              <Badge colorScheme=\"green\" variant=\"subtle\">\n                🔒 SSL Encrypted\n              </Badge>\n              <Badge colorScheme=\"purple\" variant=\"subtle\">\n                Powered by Stripe\n              </Badge>\n            </HStack>\n          </HStack>\n\n          {/* Accepted Cards */}\n          <Box textAlign=\"center\" pt={2}>\n            <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} mb={2}>\n              We accept:\n            </Text>\n            <HStack justify=\"center\" spacing={3}>\n              <Badge>Visa</Badge>\n              <Badge>Mastercard</Badge>\n              <Badge>American Express</Badge>\n              <Badge>Discover</Badge>\n            </HStack>\n          </Box>\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default StripeBillPayment;","import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Text,\n  VStack,\n  HStack,\n  Badge,\n  Icon,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Link,\n  Code,\n  Collapse,\n  useDisclosure,\n  Divider,\n  Tooltip,\n  IconButton,\n  useClipboard,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CopyIcon, ExternalLinkIcon, InfoIcon, RefreshCcwIcon } from \"lucide-react\";\nimport { QRCodeSVG } from \"qrcode.react\";\nimport { brandConfig } from \"../../../brandConfig\";\n\ninterface SilentBitcoinPaymentProps {\n  amount: number;\n  originalAmount?: number;\n  discountPercentage?: number;\n  billId: string;\n  onPaymentComplete?: () => void;\n  issuerWalletAddress?: string;\n}\n\n// Utility to generate a unique Silent Payment address\nconst generateSilentPaymentAddress = (\n  recipientStaticPubKey: string,\n  billId: string,\n  amount: number\n): string => {\n  // BIP 352 Silent Payment implementation\n  // This generates a unique address for each payment without address reuse\n  // In production, this would use proper cryptographic functions\n  const uniqueIdentifier = `${billId}-${amount}-${Date.now()}`;\n  const hash = btoa(uniqueIdentifier).replace(/[^a-zA-Z0-9]/g, \"\").substring(0, 20);\n  \n  // Generate a testnet Silent Payment address (starting with 'sp1' for mainnet, 'tsp1' for testnet)\n  return `sp1qw508d6qejxtdg4y5r3zarvary0c5xw7k${hash}`;\n};\n\n// Convert AUD to BTC using a mock exchange rate (replace with real API)\nconst convertAUDToBTC = (audAmount: number): number => {\n  const btcPriceAUD = 102000; // Mock BTC price in AUD - replace with real API call\n  return Number((audAmount / btcPriceAUD).toFixed(8));\n};\n\nexport const SilentBitcoinPayment: React.FC<SilentBitcoinPaymentProps> = ({\n  amount,\n  originalAmount,\n  discountPercentage,\n  billId,\n  onPaymentComplete,\n  issuerWalletAddress,\n}) => {\n  const [silentPaymentAddress, setSilentPaymentAddress] = useState<string>(\"\");\n  const [btcAmount, setBtcAmount] = useState<number>(0);\n  const [paymentStatus, setPaymentStatus] = useState<\"pending\" | \"processing\" | \"confirmed\">(\"pending\");\n  const [txHash, setTxHash] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { isOpen, onToggle } = useDisclosure();\n  const toast = useToast();\n  const { hasCopied: hasAddressCopied, onCopy: onAddressCopy } = useClipboard(silentPaymentAddress);\n  const { hasCopied: hasAmountCopied, onCopy: onAmountCopy } = useClipboard(btcAmount.toString());\n\n  // Generate Silent Payment address on mount or when amount changes\n  useEffect(() => {\n    console.log('[SilentBitcoinPayment] Issuer wallet address:', issuerWalletAddress);\n    if (amount > 0) {\n      setIsGenerating(true);\n      // Simulate async generation\n      setTimeout(() => {\n        const address = generateSilentPaymentAddress(\n          issuerWalletAddress || \"default-pubkey\",\n          billId,\n          amount\n        );\n        setSilentPaymentAddress(address);\n        setBtcAmount(convertAUDToBTC(amount));\n        setIsGenerating(false);\n        console.log('[SilentBitcoinPayment] Generated address:', address, 'BTC amount:', convertAUDToBTC(amount));\n      }, 1000);\n    }\n  }, [amount, billId, issuerWalletAddress]);\n\n  // Simulate payment monitoring (in production, use WebSocket or polling)\n  useEffect(() => {\n    if (paymentStatus === \"processing\") {\n      const timer = setTimeout(() => {\n        setPaymentStatus(\"confirmed\");\n        setTxHash(\"3a7f9b2c4e5d6789abcdef1234567890abcdef1234567890abcdef1234567890\");\n        if (onPaymentComplete) {\n          onPaymentComplete();\n        }\n        toast({\n          title: \"Payment Confirmed!\",\n          description: \"Your Bitcoin payment has been successfully received.\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }, 15000); // Simulate 15 second confirmation\n\n      return () => clearTimeout(timer);\n    }\n  }, [paymentStatus, onPaymentComplete, toast]);\n\n  const handlePaymentInitiated = () => {\n    setPaymentStatus(\"processing\");\n    toast({\n      title: \"Payment Processing\",\n      description: \"Monitoring for your Bitcoin transaction...\",\n      status: \"info\",\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n\n  const regenerateAddress = () => {\n    setIsGenerating(true);\n    setTimeout(() => {\n      const newAddress = generateSilentPaymentAddress(\n        issuerWalletAddress || \"default-pubkey\",\n        billId,\n        amount\n      );\n      setSilentPaymentAddress(newAddress);\n      setBtcAmount(convertAUDToBTC(amount)); // Recalculate BTC amount\n      setIsGenerating(false);\n      toast({\n        title: \"New Address Generated\",\n        description: \"A fresh Silent Payment address has been created.\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }, 1000);\n  };\n\n  const getStatusColor = () => {\n    switch (paymentStatus) {\n      case \"pending\":\n        return \"orange\";\n      case \"processing\":\n        return \"blue\";\n      case \"confirmed\":\n        return \"green\";\n      default:\n        return \"gray\";\n    }\n  };\n\n  const getStatusText = () => {\n    switch (paymentStatus) {\n      case \"pending\":\n        return \"Awaiting Payment\";\n      case \"processing\":\n        return \"Processing Transaction\";\n      case \"confirmed\":\n        return \"Payment Confirmed\";\n      default:\n        return \"Unknown\";\n    }\n  };\n\n  return (\n    <Card\n      bg={brandConfig.colors.background.cardGradient}\n      borderColor={brandConfig.colors.border.darkCard}\n      borderWidth=\"1px\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      backdropFilter=\"blur(10px)\"\n    >\n      <CardHeader>\n        <HStack justify=\"space-between\">\n          <HStack>\n            <Text fontSize=\"lg\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n              🔒 Pay with Silent Bitcoin\n            </Text>\n            <Tooltip label=\"Silent Payments (BIP 352) provide enhanced privacy by generating unique addresses for each transaction\">\n              <Icon as={InfoIcon} w={4} h={4} color={brandConfig.colors.text.mutedDark} />\n            </Tooltip>\n          </HStack>\n          <Badge colorScheme={getStatusColor()} fontSize=\"sm\" px={3} py={1}>\n            {getStatusText()}\n          </Badge>\n        </HStack>\n      </CardHeader>\n\n      <CardBody>\n        <VStack spacing={6} align=\"stretch\">\n          {/* Privacy Benefits Alert */}\n          <Alert status=\"info\" borderRadius=\"md\" fontSize=\"sm\">\n            <AlertIcon />\n            <Box>\n              <Text fontWeight=\"bold\">Enhanced Privacy Protection</Text>\n              <Text fontSize=\"xs\">\n                This payment uses Silent Payments (BIP 352) - a unique address is generated just for this transaction,\n                ensuring your privacy without additional fees.\n              </Text>\n            </Box>\n          </Alert>\n\n          {/* Amount Display */}\n          <Box p={4} bg={brandConfig.colors.background.main} borderRadius=\"md\" border=\"1px\" borderColor={brandConfig.colors.border.darkCard}>\n            <VStack spacing={2}>\n              <Text fontSize=\"sm\" color={brandConfig.colors.text.mutedDark}>\n                Amount to Pay\n              </Text>\n              <HStack spacing={4}>\n                <VStack spacing={0}>\n                  <Text fontSize=\"2xl\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n                    {btcAmount} BTC\n                  </Text>\n                  {discountPercentage && originalAmount ? (\n                    <VStack spacing={0}>\n                      <HStack>\n                        <Text fontSize=\"sm\" textDecoration=\"line-through\" color={brandConfig.colors.text.mutedDark}>\n                          ${originalAmount.toFixed(2)} AUD\n                        </Text>\n                        <Badge colorScheme=\"green\" fontSize=\"xs\">\n                          {discountPercentage}% OFF\n                        </Badge>\n                      </HStack>\n                      <Text fontSize=\"md\" fontWeight=\"bold\" color=\"green.400\">\n                        ${amount.toFixed(2)} AUD\n                      </Text>\n                      <Text fontSize=\"xs\" color=\"green.300\">\n                        You save ${(originalAmount - amount).toFixed(2)} AUD\n                      </Text>\n                    </VStack>\n                  ) : (\n                    <Text fontSize=\"sm\" color={brandConfig.colors.text.mutedDark}>\n                      (${amount.toFixed(2)} AUD)\n                    </Text>\n                  )}\n                </VStack>\n                <IconButton\n                  aria-label=\"Copy amount\"\n                  icon={hasAmountCopied ? <CheckIcon /> : <CopyIcon />}\n                  size=\"sm\"\n                  onClick={onAmountCopy}\n                  colorScheme={hasAmountCopied ? \"green\" : \"gray\"}\n                />\n              </HStack>\n            </VStack>\n          </Box>\n\n          {/* QR Code and Address */}\n          {isGenerating ? (\n            <Box textAlign=\"center\" py={8}>\n              <Spinner size=\"xl\" color={brandConfig.colors.primary} />\n              <Text mt={2} color={brandConfig.colors.text.mutedDark}>\n                Generating unique Silent Payment address...\n              </Text>\n            </Box>\n          ) : (\n            <>\n              <Box textAlign=\"center\">\n                <Box\n                  display=\"inline-block\"\n                  p={4}\n                  bg=\"white\"\n                  borderRadius=\"md\"\n                  border=\"2px\"\n                  borderColor={brandConfig.colors.border.darkCard}\n                >\n                  <QRCodeSVG\n                    value={`bitcoin:${silentPaymentAddress}?amount=${btcAmount}&label=Invoice%20${billId.substring(0, 4)}`}\n                    size={200}\n                    level=\"H\"\n                    includeMargin={true}\n                  />\n                </Box>\n              </Box>\n\n              <Box>\n                <HStack justify=\"space-between\" mb={2}>\n                  <Text fontSize=\"sm\" fontWeight=\"bold\" color={brandConfig.colors.text.secondaryDark}>\n                    Silent Payment Address:\n                  </Text>\n                  <Button\n                    size=\"xs\"\n                    leftIcon={<RefreshCcwIcon size={12} />}\n                    onClick={regenerateAddress}\n                    variant=\"ghost\"\n                    isDisabled={paymentStatus !== \"pending\"}\n                  >\n                    Regenerate\n                  </Button>\n                </HStack>\n                <HStack\n                  p={3}\n                  bg={brandConfig.colors.background.main}\n                  borderRadius=\"md\"\n                  border=\"1px\"\n                  borderColor={brandConfig.colors.border.darkCard}\n                >\n                  <Code\n                    flex={1}\n                    p={2}\n                    fontSize=\"xs\"\n                    bg=\"transparent\"\n                    color={brandConfig.colors.text.inverse}\n                    wordBreak=\"break-all\"\n                  >\n                    {silentPaymentAddress}\n                  </Code>\n                  <IconButton\n                    aria-label=\"Copy address\"\n                    icon={hasAddressCopied ? <CheckIcon /> : <CopyIcon />}\n                    size=\"sm\"\n                    onClick={onAddressCopy}\n                    colorScheme={hasAddressCopied ? \"green\" : \"gray\"}\n                  />\n                </HStack>\n              </Box>\n            </>\n          )}\n\n          {/* Payment Instructions */}\n          <Box>\n            <Button onClick={onToggle} variant=\"link\" size=\"sm\" color={brandConfig.colors.primary}>\n              {isOpen ? \"Hide\" : \"Show\"} Payment Instructions\n            </Button>\n            <Collapse in={isOpen}>\n              <Box mt={3} p={4} bg={brandConfig.colors.background.main} borderRadius=\"md\">\n                <VStack align=\"start\" spacing={2} fontSize=\"sm\">\n                  <Text fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n                    How to pay with Silent Bitcoin:\n                  </Text>\n                  <Text color={brandConfig.colors.text.secondaryDark}>\n                    1. Open your Silent Payment compatible wallet (Cake Wallet, Silentium, or BitBox02)\n                  </Text>\n                  <Text color={brandConfig.colors.text.secondaryDark}>\n                    2. Scan the QR code or copy the address above\n                  </Text>\n                  <Text color={brandConfig.colors.text.secondaryDark}>\n                    3. Send exactly {btcAmount} BTC to complete the payment\n                  </Text>\n                  <Text color={brandConfig.colors.text.secondaryDark}>\n                    4. Click \"I've Sent Payment\" below to start monitoring\n                  </Text>\n                  <Text color={brandConfig.colors.text.mutedDark} fontSize=\"xs\" fontStyle=\"italic\">\n                    Note: Silent Payments use standard Bitcoin network fees (~$1.18 average)\n                  </Text>\n                </VStack>\n              </Box>\n            </Collapse>\n          </Box>\n\n          {/* Action Buttons */}\n          <Divider />\n          \n          {paymentStatus === \"pending\" && (\n            <Button\n              colorScheme=\"orange\"\n              size=\"lg\"\n              onClick={handlePaymentInitiated}\n              width=\"full\"\n            >\n              I've Sent Payment\n            </Button>\n          )}\n\n          {paymentStatus === \"processing\" && (\n            <VStack spacing={3}>\n              <HStack>\n                <Spinner size=\"sm\" color={brandConfig.colors.primary} />\n                <Text color={brandConfig.colors.text.secondaryDark}>\n                  Monitoring blockchain for your transaction...\n                </Text>\n              </HStack>\n              <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark}>\n                This usually takes 10-30 minutes depending on network congestion\n              </Text>\n            </VStack>\n          )}\n\n          {paymentStatus === \"confirmed\" && txHash && (\n            <Alert status=\"success\" borderRadius=\"md\">\n              <AlertIcon />\n              <Box>\n                <Text fontWeight=\"bold\">Payment Confirmed!</Text>\n                <HStack mt={2}>\n                  <Text fontSize=\"xs\">Transaction ID:</Text>\n                  <Link\n                    href={`https://mempool.space/tx/${txHash}`}\n                    isExternal\n                    color=\"blue.500\"\n                    fontSize=\"xs\"\n                  >\n                    {txHash.substring(0, 10)}...{txHash.substring(txHash.length - 10)}\n                    <Icon as={ExternalLinkIcon} ml={1} w={3} h={3} />\n                  </Link>\n                </HStack>\n              </Box>\n            </Alert>\n          )}\n\n          {/* Payment Destination Info */}\n          {issuerWalletAddress && issuerWalletAddress !== \"default-pubkey\" && (\n            <Alert status=\"info\" borderRadius=\"md\" fontSize=\"sm\" mb={4}>\n              <AlertIcon />\n              <Box>\n                <Text fontWeight=\"bold\">Payment Destination</Text>\n                <Text fontSize=\"xs\">\n                  This payment will be sent to the business's Bitcoin wallet.\n                  The Silent Payment protocol ensures your privacy while the funds go directly to the merchant.\n                </Text>\n              </Box>\n            </Alert>\n          )}\n\n          {(!issuerWalletAddress || issuerWalletAddress === \"default-pubkey\") && (\n            <Alert status=\"warning\" borderRadius=\"md\" fontSize=\"sm\" mb={4}>\n              <AlertIcon />\n              <Box>\n                <Text fontWeight=\"bold\">No Bitcoin Receiving Address Configured</Text>\n                <Text fontSize=\"xs\">\n                  The merchant has not configured a Bitcoin wallet address to receive payments.\n                  Please contact the merchant to add their Bitcoin (BTC) wallet address in their profile settings\n                  under \"Payment Receiving Details\" → \"Cryptocurrency Wallets\".\n                </Text>\n              </Box>\n            </Alert>\n          )}\n\n          {/* Wallet Recommendations */}\n          <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\" fontSize=\"xs\">\n            <Text fontWeight=\"bold\" mb={2} color={brandConfig.colors.text.secondaryDark}>\n              Recommended Wallets for Silent Payments:\n            </Text>\n            <HStack spacing={4} flexWrap=\"wrap\">\n              <Link href=\"https://cakewallet.com\" isExternal color=\"blue.400\">\n                Cake Wallet <Icon as={ExternalLinkIcon} w={3} h={3} />\n              </Link>\n              <Link href=\"https://github.com/Silentium-app/Silentium\" isExternal color=\"blue.400\">\n                Silentium <Icon as={ExternalLinkIcon} w={3} h={3} />\n              </Link>\n              <Link href=\"https://shiftcrypto.ch/bitbox02/\" isExternal color=\"blue.400\">\n                BitBox02 <Icon as={ExternalLinkIcon} w={3} h={3} />\n              </Link>\n            </HStack>\n          </Box>\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default SilentBitcoinPayment;","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Text,\n  VStack,\n  HStack,\n  Badge,\n  useToast,\n  Alert,\n  AlertIcon,\n  SimpleGrid,\n  Divider,\n  useClipboard,\n  IconButton,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CopyIcon, ExternalLinkIcon } from \"lucide-react\";\nimport { brandConfig } from \"../../../brandConfig\";\n\ninterface BankTransferPaymentProps {\n  billId: string;\n  amount: number;\n  bankDetails?: {\n    accountName: string;\n    bsb: string;\n    accountNumber: string;\n    bankName?: string;\n    swiftCode?: string;\n  };\n  onPaymentInitiated?: () => void;\n}\n\nexport const BankTransferPayment: React.FC<BankTransferPaymentProps> = ({\n  billId,\n  amount,\n  bankDetails,\n  onPaymentInitiated,\n}) => {\n  const [referenceCode] = useState(`INV-${billId.substring(0, 4).toUpperCase()}`);\n  const [paymentInitiated, setPaymentInitiated] = useState(false);\n  const toast = useToast();\n\n  // Clipboard hooks for each field\n  const { hasCopied: hasAccountNameCopied, onCopy: onAccountNameCopy } = useClipboard(\n    bankDetails?.accountName || \"\"\n  );\n  const { hasCopied: hasBsbCopied, onCopy: onBsbCopy } = useClipboard(\n    bankDetails?.bsb || \"\"\n  );\n  const { hasCopied: hasAccountNumberCopied, onCopy: onAccountNumberCopy } = useClipboard(\n    bankDetails?.accountNumber || \"\"\n  );\n  const { hasCopied: hasReferenceCopied, onCopy: onReferenceCopy } = useClipboard(\n    referenceCode\n  );\n  const { hasCopied: hasAmountCopied, onCopy: onAmountCopy } = useClipboard(\n    amount.toFixed(2)\n  );\n\n  const handlePaymentInitiated = () => {\n    setPaymentInitiated(true);\n    if (onPaymentInitiated) {\n      onPaymentInitiated();\n    }\n    toast({\n      title: \"Payment Instructions Sent\",\n      description: \"Please complete the bank transfer using the details provided. Your payment will be confirmed once received.\",\n      status: \"info\",\n      duration: 5000,\n      isClosable: true,\n    });\n  };\n\n  if (!bankDetails) {\n    return (\n      <Card\n        bg={brandConfig.colors.background.cardGradient}\n        borderColor={brandConfig.colors.border.darkCard}\n        borderWidth=\"1px\"\n      >\n        <CardBody>\n          <Alert status=\"warning\" borderRadius=\"md\">\n            <AlertIcon />\n            <Box>\n              <Text fontWeight=\"bold\">Bank Transfer Not Available</Text>\n              <Text fontSize=\"sm\">\n                Bank account details have not been configured for this merchant.\n                Please choose a different payment method.\n              </Text>\n            </Box>\n          </Alert>\n        </CardBody>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      bg={brandConfig.colors.background.cardGradient}\n      borderColor={brandConfig.colors.border.darkCard}\n      borderWidth=\"1px\"\n      boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n      backdropFilter=\"blur(10px)\"\n    >\n      <CardHeader>\n        <HStack justify=\"space-between\">\n          <Text fontSize=\"lg\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n            🏦 Bank Transfer Payment\n          </Text>\n          <Badge colorScheme=\"blue\" fontSize=\"sm\" px={3} py={1}>\n            Manual Transfer\n          </Badge>\n        </HStack>\n      </CardHeader>\n\n      <CardBody>\n        <VStack spacing={6} align=\"stretch\">\n          {/* Important Notice */}\n          <Alert status=\"info\" borderRadius=\"md\">\n            <AlertIcon />\n            <Box>\n              <Text fontWeight=\"bold\">Important: Include Reference Number</Text>\n              <Text fontSize=\"sm\">\n                Please include the reference number when making your transfer to ensure your payment is correctly matched to this bill.\n              </Text>\n            </Box>\n          </Alert>\n\n          {/* Amount Display */}\n          <Box\n            p={4}\n            bg={brandConfig.colors.background.main}\n            borderRadius=\"md\"\n            border=\"1px\"\n            borderColor={brandConfig.colors.border.darkCard}\n          >\n            <VStack spacing={2}>\n              <Text fontSize=\"sm\" color={brandConfig.colors.text.mutedDark}>\n                Amount to Transfer\n              </Text>\n              <HStack>\n                <Text fontSize=\"3xl\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n                  ${amount.toFixed(2)}\n                </Text>\n                <Tooltip label={hasAmountCopied ? \"Copied!\" : \"Copy amount\"}>\n                  <IconButton\n                    aria-label=\"Copy amount\"\n                    icon={hasAmountCopied ? <CheckIcon /> : <CopyIcon />}\n                    size=\"sm\"\n                    onClick={onAmountCopy}\n                    colorScheme={hasAmountCopied ? \"green\" : \"gray\"}\n                    variant=\"ghost\"\n                  />\n                </Tooltip>\n              </HStack>\n              <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark}>\n                AUD - Australian Dollars\n              </Text>\n            </VStack>\n          </Box>\n\n          <Divider />\n\n          {/* Bank Account Details */}\n          <Box>\n            <Text fontWeight=\"bold\" fontSize=\"md\" mb={3} color={brandConfig.colors.text.inverse}>\n              Bank Account Details\n            </Text>\n            \n            <VStack spacing={3} align=\"stretch\">\n              {/* Account Name */}\n              <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\">\n                <HStack justify=\"space-between\">\n                  <Box flex={1}>\n                    <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} mb={1}>\n                      Account Name\n                    </Text>\n                    <Text fontWeight=\"semibold\" color={brandConfig.colors.text.inverse}>\n                      {bankDetails.accountName}\n                    </Text>\n                  </Box>\n                  <Tooltip label={hasAccountNameCopied ? \"Copied!\" : \"Copy\"}>\n                    <IconButton\n                      aria-label=\"Copy account name\"\n                      icon={hasAccountNameCopied ? <CheckIcon /> : <CopyIcon />}\n                      size=\"sm\"\n                      onClick={onAccountNameCopy}\n                      colorScheme={hasAccountNameCopied ? \"green\" : \"gray\"}\n                      variant=\"ghost\"\n                    />\n                  </Tooltip>\n                </HStack>\n              </Box>\n\n              {/* BSB and Account Number */}\n              <SimpleGrid columns={2} spacing={3}>\n                <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\">\n                  <HStack justify=\"space-between\">\n                    <Box flex={1}>\n                      <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} mb={1}>\n                        BSB\n                      </Text>\n                      <Text fontWeight=\"semibold\" color={brandConfig.colors.text.inverse}>\n                        {bankDetails.bsb}\n                      </Text>\n                    </Box>\n                    <Tooltip label={hasBsbCopied ? \"Copied!\" : \"Copy\"}>\n                      <IconButton\n                        aria-label=\"Copy BSB\"\n                        icon={hasBsbCopied ? <CheckIcon /> : <CopyIcon />}\n                        size=\"sm\"\n                        onClick={onBsbCopy}\n                        colorScheme={hasBsbCopied ? \"green\" : \"gray\"}\n                        variant=\"ghost\"\n                      />\n                    </Tooltip>\n                  </HStack>\n                </Box>\n\n                <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\">\n                  <HStack justify=\"space-between\">\n                    <Box flex={1}>\n                      <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} mb={1}>\n                        Account Number\n                      </Text>\n                      <Text fontWeight=\"semibold\" color={brandConfig.colors.text.inverse}>\n                        {bankDetails.accountNumber}\n                      </Text>\n                    </Box>\n                    <Tooltip label={hasAccountNumberCopied ? \"Copied!\" : \"Copy\"}>\n                      <IconButton\n                        aria-label=\"Copy account number\"\n                        icon={hasAccountNumberCopied ? <CheckIcon /> : <CopyIcon />}\n                        size=\"sm\"\n                        onClick={onAccountNumberCopy}\n                        colorScheme={hasAccountNumberCopied ? \"green\" : \"gray\"}\n                        variant=\"ghost\"\n                      />\n                    </Tooltip>\n                  </HStack>\n                </Box>\n              </SimpleGrid>\n\n              {/* Bank Name (if available) */}\n              {bankDetails.bankName && (\n                <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\">\n                  <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} mb={1}>\n                    Bank Name\n                  </Text>\n                  <Text fontWeight=\"semibold\" color={brandConfig.colors.text.inverse}>\n                    {bankDetails.bankName}\n                  </Text>\n                </Box>\n              )}\n\n              {/* SWIFT Code (if available for international) */}\n              {bankDetails.swiftCode && (\n                <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\">\n                  <Text fontSize=\"xs\" color={brandConfig.colors.text.mutedDark} mb={1}>\n                    SWIFT Code (International Transfers)\n                  </Text>\n                  <Text fontWeight=\"semibold\" color={brandConfig.colors.text.inverse}>\n                    {bankDetails.swiftCode}\n                  </Text>\n                </Box>\n              )}\n\n              {/* Reference Number - IMPORTANT */}\n              <Box p={3} bg=\"orange.900\" borderRadius=\"md\" borderWidth=\"2px\" borderColor=\"orange.500\">\n                <HStack justify=\"space-between\">\n                  <Box flex={1}>\n                    <Text fontSize=\"xs\" color=\"orange.200\" mb={1}>\n                      ⚠️ IMPORTANT - Payment Reference\n                    </Text>\n                    <Text fontWeight=\"bold\" fontSize=\"lg\" color=\"white\">\n                      {referenceCode}\n                    </Text>\n                  </Box>\n                  <Tooltip label={hasReferenceCopied ? \"Copied!\" : \"Copy reference\"}>\n                    <IconButton\n                      aria-label=\"Copy reference\"\n                      icon={hasReferenceCopied ? <CheckIcon /> : <CopyIcon />}\n                      size=\"sm\"\n                      onClick={onReferenceCopy}\n                      colorScheme={hasReferenceCopied ? \"green\" : \"orange\"}\n                      variant=\"solid\"\n                    />\n                  </Tooltip>\n                </HStack>\n              </Box>\n            </VStack>\n          </Box>\n\n          <Divider />\n\n          {/* Payment Instructions */}\n          <Box>\n            <Text fontWeight=\"bold\" fontSize=\"sm\" mb={2} color={brandConfig.colors.text.inverse}>\n              How to Complete Your Payment:\n            </Text>\n            <VStack align=\"start\" spacing={2} fontSize=\"sm\" color={brandConfig.colors.text.secondaryDark}>\n              <Text>1. Log in to your online banking or visit your bank branch</Text>\n              <Text>2. Create a new payment or transfer</Text>\n              <Text>3. Enter the bank account details exactly as shown above</Text>\n              <Text>4. Enter ${amount.toFixed(2)} as the amount</Text>\n              <Text>5. <Text as=\"span\" fontWeight=\"bold\" color=\"orange.400\">Include the reference: {referenceCode}</Text></Text>\n              <Text>6. Complete the transfer</Text>\n              <Text>7. Click \"I've Made the Transfer\" below</Text>\n            </VStack>\n          </Box>\n\n          {/* Action Button */}\n          {!paymentInitiated ? (\n            <Button\n              colorScheme=\"blue\"\n              size=\"lg\"\n              width=\"full\"\n              onClick={handlePaymentInitiated}\n            >\n              I've Made the Transfer\n            </Button>\n          ) : (\n            <Alert status=\"success\" borderRadius=\"md\">\n              <AlertIcon />\n              <Box>\n                <Text fontWeight=\"bold\">Transfer Instructions Recorded</Text>\n                <Text fontSize=\"sm\">\n                  We'll confirm your payment once it's received (usually 1-2 business days).\n                  You'll receive an email confirmation when the payment is processed.\n                </Text>\n              </Box>\n            </Alert>\n          )}\n\n          {/* Processing Time Notice */}\n          <Box p={3} bg={brandConfig.colors.background.main} borderRadius=\"md\" fontSize=\"xs\">\n            <HStack spacing={2}>\n              <Text fontWeight=\"bold\" color={brandConfig.colors.text.secondaryDark}>\n                Processing Time:\n              </Text>\n              <Text color={brandConfig.colors.text.mutedDark}>\n                1-2 business days for domestic transfers, 3-5 days for international\n              </Text>\n            </HStack>\n          </Box>\n        </VStack>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default BankTransferPayment;","import React, { useState } from \"react\";\nimport {\n  Box,\n  VStack,\n  HStack,\n  Button,\n  Card,\n  CardBody,\n  Text,\n  Icon,\n  SimpleGrid,\n  Badge,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport { CreditCard, Bitcoin, ChevronRight, Building2, Info } from \"lucide-react\";\nimport { StripeBillPayment } from \"./StripeBillPayment\";\nimport { SilentBitcoinPayment } from \"./SilentBitcoinPayment\";\nimport { BankTransferPayment } from \"./BankTransferPayment\";\nimport { brandConfig } from \"../../../brandConfig\";\n\ninterface PaymentMethodSelectorProps {\n  billId: string;\n  amount: number;\n  issuerWalletAddress?: string;\n  issuerBankDetails?: {\n    accountName: string;\n    bsb: string;\n    accountNumber: string;\n    bankName?: string;\n    swiftCode?: string;\n  };\n  cryptoDiscountPercentage?: number;\n  acceptCardPayment?: boolean;\n  acceptCryptoPayment?: boolean;\n  onPaymentComplete: () => void;\n}\n\nexport const PaymentMethodSelector: React.FC<PaymentMethodSelectorProps> = ({\n  billId,\n  amount,\n  issuerWalletAddress,\n  issuerBankDetails,\n  cryptoDiscountPercentage,\n  acceptCardPayment = true,\n  acceptCryptoPayment = false,\n  onPaymentComplete,\n}) => {\n  const [selectedMethod, setSelectedMethod] = useState<\"bank\" | \"stripe\" | \"bitcoin\" | null>(null);\n\n  // Calculate discounted amount for Bitcoin\n  const bitcoinDiscountedAmount = cryptoDiscountPercentage\n    ? amount * (1 - cryptoDiscountPercentage / 100)\n    : amount;\n\n  // Format currency with commas\n  const formatCurrency = (value: number) => {\n    return value.toLocaleString(\"en-US\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  };\n\n  const paymentMethods = [\n    {\n      id: \"bank\" as const,\n      name: \"Bank Transfer\",\n      description: \"Transaction data monitored by banks & AI surveillance companies\",\n      icon: Building2,\n      color: \"green\",\n      badge: \"Most Popular\",\n      processingTime: \"1-2 days\",\n      available: !!issuerBankDetails,\n      sovereignty: \"Centralized • Subject to bank policies\",\n      privacyTooltip: \"Bank transfers are subject to complete financial surveillance. Your transaction data is shared with government agencies, analyzed by AI companies like Palantir (a CIA-funded surveillance company), and stored indefinitely. This data is used to create a permanent digital profile of you that will be used to judge your behavior, limit your future options, deny services, and control what you can buy or sell. Banks can freeze, reverse, or block transactions at will based on their policies, government orders, or AI-driven risk scores. You have no control over your financial privacy or autonomy.\",\n    },\n    {\n      id: \"stripe\" as const,\n      name: \"Credit/Debit Card\",\n      description: \"All data scraped by Palantir & AI companies for surveillance\",\n      icon: CreditCard,\n      color: \"blue\",\n      badge: \"Card Payment\",\n      processingTime: \"1-2 days\",\n      available: acceptCardPayment,\n      sovereignty: \"Centralized • Card network controlled\",\n      privacyTooltip: \"Credit card payments are the least private payment method. Palantir (a data mining company founded with CIA funding) aggregates all card transaction data to build detailed profiles of your spending habits, political views, and personal life. This permanent digital profile will be used to judge you, determine your social credit score, limit your access to services, control your interest rates, insurance premiums, and employment opportunities. Your purchase history becomes a tool for discrimination and social control. Card networks can block transactions, freeze accounts, and share your entire purchase history without your consent. Every purchase strengthens the surveillance system that will limit your children's freedoms.\",\n    },\n    {\n      id: \"bitcoin\" as const,\n      name: \"Bitcoin (Silent Payment)\",\n      description: cryptoDiscountPercentage \n        ? `Enhanced privacy with BIP 352 + ${cryptoDiscountPercentage}% discount!`\n        : \"Enhanced privacy with BIP 352 Silent Payments\",\n      icon: Bitcoin,\n      color: \"orange\",\n      badge: cryptoDiscountPercentage ? `${cryptoDiscountPercentage}% OFF` : \"Sovereign\",\n      processingTime: \"10-30 min\",\n      available: acceptCryptoPayment,\n      sovereignty: \"Sovereign • Self-custodial & censorship-resistant\",\n      privacyTooltip: \"Bitcoin with Silent Payments (BIP 352) provides true financial sovereignty. No company, bank, or government can freeze, reverse, or censor your transactions. Silent Payments generate unique addresses for each transaction, preventing surveillance and protecting your privacy. You maintain complete control over your money without intermediaries collecting your data.\",\n    },\n  ].filter(method => method.available);\n\n  return (\n    <VStack spacing={6} align=\"stretch\">\n      {/* Payment Method Selection */}\n      {!selectedMethod && (\n        <Box>\n          <HStack mb={4}>\n            <Text fontSize=\"lg\" fontWeight=\"bold\" color={brandConfig.colors.text.primaryDark}>\n              Choose Payment Method\n            </Text>\n            <Badge colorScheme=\"red\" fontSize=\"sm\">\n              Required\n            </Badge>\n          </HStack>\n          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>\n            {paymentMethods.map((method) => (\n              <Card\n                key={method.id}\n                cursor=\"pointer\"\n                onClick={() => setSelectedMethod(method.id)}\n                variant=\"outline\"\n                borderWidth=\"2px\"\n                borderColor={brandConfig.colors.border.medium}\n                bg=\"transparent\"\n                _hover={{\n                  borderColor: `${method.color}.500`,\n                  bg: brandConfig.colors.background.cardGradient,\n                  transform: \"translateY(-2px)\",\n                  boxShadow: \"md\",\n                }}\n                transition=\"all 0.2s\"\n              >\n                <CardBody>\n                  <VStack align=\"start\" spacing={3}>\n                    <HStack justify=\"space-between\" width=\"100%\">\n                      <Icon as={method.icon} w={8} h={8} color={`${method.color}.500`} />\n                      <Icon as={ChevronRight} w={5} h={5} color={brandConfig.colors.text.mutedDark} />\n                    </HStack>\n                    \n                    <Box>\n                      <HStack spacing={2} mb={1}>\n                        <Text fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n                          {method.name}\n                        </Text>\n                        {method.badge && (\n                          <Badge colorScheme={method.color} size=\"sm\">\n                            {method.badge}\n                          </Badge>\n                        )}\n                      </HStack>\n                      <HStack spacing={1} align=\"start\">\n                        <Text fontSize=\"sm\" color={brandConfig.colors.text.secondaryDark}>\n                          {method.description}\n                        </Text>\n                        {method.privacyTooltip && (\n                          <Tooltip \n                            label={method.privacyTooltip}\n                            fontSize=\"xs\"\n                            placement=\"top\"\n                            hasArrow\n                            bg={method.id === \"bitcoin\" ? \"green.600\" : \"red.600\"}\n                            color=\"white\"\n                            p={3}\n                            maxW=\"300px\"\n                          >\n                            <Icon \n                              as={Info} \n                              w={4} \n                              h={4} \n                              color={method.id === \"bitcoin\" ? \"green.400\" : \"yellow.500\"}\n                              cursor=\"help\"\n                            />\n                          </Tooltip>\n                        )}\n                      </HStack>\n                    </Box>\n\n                    <HStack spacing={4} fontSize=\"xs\" color={brandConfig.colors.text.mutedDark}>\n                      <Text>\n                        Processing: <Text as=\"span\" fontWeight=\"bold\">{method.processingTime}</Text>\n                      </Text>\n                    </HStack>\n                    \n                    {method.sovereignty && (\n                      <Text \n                        fontSize=\"xs\" \n                        color={method.id === \"bitcoin\" ? \"orange.300\" : \"yellow.600\"}\n                        fontStyle=\"italic\"\n                      >\n                        {method.sovereignty}\n                      </Text>\n                    )}\n\n                    <Box pt={2} width=\"100%\">\n                      {method.id === \"bitcoin\" && cryptoDiscountPercentage ? (\n                        <VStack align=\"start\" spacing={0}>\n                          <HStack>\n                            <Text fontSize=\"lg\" textDecoration=\"line-through\" color={brandConfig.colors.text.mutedDark}>\n                              ${formatCurrency(amount)}\n                            </Text>\n                            <Badge colorScheme=\"green\" fontSize=\"xs\">\n                              Save ${formatCurrency(amount - bitcoinDiscountedAmount)}\n                            </Badge>\n                          </HStack>\n                          <Text fontSize=\"2xl\" fontWeight=\"bold\" color=\"green.400\">\n                            ${formatCurrency(bitcoinDiscountedAmount)}\n                          </Text>\n                        </VStack>\n                      ) : (\n                        <Text fontSize=\"2xl\" fontWeight=\"bold\" color={brandConfig.colors.text.inverse}>\n                          ${formatCurrency(amount)}\n                        </Text>\n                      )}\n                    </Box>\n                  </VStack>\n                </CardBody>\n              </Card>\n            ))}\n          </SimpleGrid>\n        </Box>\n      )}\n\n      {/* Selected Payment Method */}\n      {selectedMethod && (\n        <Box>\n          <HStack justify=\"space-between\" mb={4}>\n            <Text fontSize=\"lg\" fontWeight=\"bold\" color={brandConfig.colors.text.primaryDark}>\n              Complete Payment\n            </Text>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSelectedMethod(null)}\n              color={brandConfig.colors.text.secondaryDark}\n            >\n              ← Choose Different Method\n            </Button>\n          </HStack>\n\n          {selectedMethod === \"bank\" && (\n            <BankTransferPayment\n              billId={billId}\n              amount={amount}\n              bankDetails={issuerBankDetails}\n              onPaymentInitiated={() => {\n                console.log('[PaymentMethodSelector] Bank transfer initiated');\n                // Note: Bank transfers don't complete instantly, so we just record that it was initiated\n                // The actual payment confirmation will come later via manual verification\n              }}\n            />\n          )}\n\n          {selectedMethod === \"stripe\" && (\n            <StripeBillPayment\n              billId={billId}\n              amount={amount}\n              onPaymentComplete={onPaymentComplete}\n            />\n          )}\n\n          {selectedMethod === \"bitcoin\" && (\n            <SilentBitcoinPayment\n              amount={bitcoinDiscountedAmount}\n              originalAmount={cryptoDiscountPercentage ? amount : undefined}\n              discountPercentage={cryptoDiscountPercentage}\n              billId={billId}\n              issuerWalletAddress={issuerWalletAddress}\n              onPaymentComplete={onPaymentComplete}\n            />\n          )}\n        </Box>\n      )}\n    </VStack>\n  );\n};\n\nexport default PaymentMethodSelector;","import React from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { gql, useQuery, useApolloClient, useMutation } from \"@apollo/client\";\nimport { FORMAT_SPEC_CONTENT, BILL_TEMPLATE_CONTENT, downloadMarkdownFile } from \"./markdownTemplates\";\nimport {\n  Box,\n  Container,\n  Heading,\n  VStack,\n  HStack,\n  Text,\n  Badge,\n  Card,\n  CardHeader,\n  CardBody,\n  Skeleton,\n  Alert,\n  AlertIcon,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  SimpleGrid,\n  Switch,\n  useToast,\n  useClipboard,\n  IconButton,\n  Button,\n  Input,\n  InputGroup,\n  InputRightAddon,\n  FormControl,\n  FormLabel,\n  Divider,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  Textarea,\n  Tooltip,\n  Select,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport billsModuleConfig from \"./moduleConfig\";\nimport { EditIcon, DownloadIcon, ViewIcon, DeleteIcon } from \"@chakra-ui/icons\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { pdf } from '@react-pdf/renderer';\nimport { BillPDF } from './components/BillPDF';\nimport { getColor, getComponent, brandConfig } from \"../../brandConfig\";\nimport { PaymentMethodSelector } from \"./components/PaymentMethodSelector\";\nimport { ClientSearchSelector } from \"../clients/components/ClientSearchSelector\";\n// import { LoginModal } from '../authentication';\n\nenum BillStatus {\n  PROPOSAL = \"PROPOSAL\",\n  DRAFT = \"DRAFT\",\n  SENT = \"SENT\"\n}\n\nconst GET_BILL = gql`\n  query GetBillById($id: ID!) {\n    bill(id: $id) {\n      id\n      isPaid\n      status\n      paymentMethod\n      currency\n      acceptCardPayment\n      acceptCryptoPayment\n      projectId\n      clientId\n      issuedBy\n      lineItems {\n        id\n        description\n        amount\n        createdAt\n        updatedAt\n      }\n      subtotal\n      taxPercentage\n      taxAmount\n      totalAmount\n      tenantId\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst GET_CLIENT = gql`\n  query GetClient($id: ID!) {\n    client(id: $id) {\n      id\n      fName\n      lName\n      email\n      businessName\n      phoneNumber\n    }\n  }\n`;\n\nconst TOGGLE_BILL_PAYMENT_STATUS = gql`\n  mutation ToggleBillPaymentStatus($id: ID!) {\n    toggleBillPaymentStatus(id: $id) {\n      id\n      isPaid\n    }\n  }\n`;\n\nconst TOGGLE_BILL_DRAFT_STATUS = gql`\n  mutation ToggleBillDraftStatus($id: ID!) {\n    toggleBillDraftStatus(id: $id) {\n      id\n      status\n    }\n  }\n`;\n\nconst UPDATE_BILL_STATUS = gql`\n  mutation UpdateBillStatus($id: ID!, $status: BillStatus!) {\n    updateBillStatus(id: $id, status: $status) {\n      id\n      status\n      lineItems {\n        id\n        description\n        amount\n      }\n      isPaid\n      totalAmount\n      paymentMethod\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nconst UPDATE_LINE_ITEM = gql`\n  mutation UpdateLineItem($billId: ID!, $lineItemId: ID!, $amount: Float, $description: String) {\n    updateLineItem(\n      billId: $billId\n      lineItemId: $lineItemId\n      amount: $amount\n      description: $description\n    ) {\n      id\n      lineItems {\n        id\n        description\n        amount\n        createdAt\n        updatedAt\n      }\n      status\n      totalAmount\n      isPaid\n      updatedAt\n    }\n  }\n`;\n\nconst DELETE_LINE_ITEM = gql`\n  mutation DeleteLineItem($billId: ID!, $lineItemId: ID!) {\n    deleteLineItem(billId: $billId, lineItemId: $lineItemId) {\n      id\n      lineItems {\n        id\n        description\n        amount\n        createdAt\n        updatedAt\n      }\n      status\n      totalAmount\n      isPaid\n      updatedAt\n    }\n  }\n`;\n\nconst UPDATE_BILL_PAYMENT_METHODS = gql`\n  mutation UpdateBill($id: ID!, $input: BillInput!) {\n    updateBill(id: $id, input: $input) {\n      id\n      acceptCardPayment\n      acceptCryptoPayment\n    }\n  }\n`;\n\nconst DUPLICATE_BILL_WITH_PERCENTAGE = gql`\n  mutation DuplicateBillWithPercentage($id: ID!, $percentage: Float!, $paymentTerms: String) {\n    duplicateBillWithPercentage(id: $id, percentage: $percentage, paymentTerms: $paymentTerms) {\n      id\n      isPaid\n      status\n      currency\n      lineItems {\n        id\n        description\n        amount\n      }\n      totalAmount\n      percentageOfTotal\n      paymentTerms\n    }\n  }\n`;\n\nconst GET_CLIENT_BY_BILL = gql`\n  query GetClientDetailsByBillId($billId: ID!) {\n    getClientDetailsByBillId(billId: $billId) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      businessName\n    }\n  }\n`;\n\nconst CHANGE_BILL_CLIENT = gql`\n  mutation ChangeBillClient($billId: ID!, $newClientId: ID!) {\n    changeBillClient(billId: $billId, newClientId: $newClientId)\n  }\n`;\n\nconst GET_BILL_ISSUER = gql`\n  query GetBillIssuerDetails($billId: ID!) {\n    getBillIssuerDetails(billId: $billId) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      businessName\n      businessRegistrationNumber\n      paymentReceivingDetails {\n        acceptedMethods\n        bankAccount {\n          accountName\n          bsb\n          accountNumber\n          bankName\n          swiftCode\n        }\n        cryptoWallets {\n          walletAddress\n          network\n          memo\n        }\n        stripeConnect {\n          stripeAccountId\n          accountVerified\n          verifiedAt\n        }\n        paypalEmail\n        isVerified\n        cryptoDiscountPercentage\n      }\n    }\n  }\n`;\n\nconst IMPORT_LINE_ITEMS_FROM_MARKDOWN = gql`\n  mutation ImportLineItemsFromMarkdown($billId: ID!, $markdown: String!) {\n    importLineItemsFromMarkdown(billId: $billId, markdown: $markdown) {\n      id\n      lineItems {\n        id\n        description\n        amount\n      }\n      totalAmount\n      status\n      isPaid\n      updatedAt\n    }\n  }\n`;\n\nconst GET_CURRENT_TENANT_DETAILS = gql`\n  query GetCurrentTenantDetails {\n    currentTenant {\n      id\n      name\n      companyDetails {\n        companyName\n        taxId\n        billingEmail\n        billingPhone\n        billingAddress {\n          addressLine1\n          addressLine2\n          city\n          state\n          postalCode\n          country\n        }\n      }\n      paymentReceivingDetails {\n        acceptedMethods\n        bankAccount {\n          accountName\n          bsb\n          accountNumber\n          bankName\n          swiftCode\n        }\n        cryptoWallets {\n          walletAddress\n          network\n          memo\n        }\n        paypalEmail\n        cryptoDiscountPercentage\n      }\n    }\n  }\n`;\n\nconst BillDetails = () => {\n  usePageTitle(\"Bill Details\");\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const { user, isAuthenticated, loading: authLoading } = useAuth();\n  const { colorMode } = useColorMode();\n\n  // Brand colors setup\n  const bg = getColor(\"background.main\");\n  const cardGradientBg = getColor(\"background.cardGradient\");\n  const cardBorder = getColor(\"border.darkCard\");\n  const textPrimary = getColor(\"text.primary\");\n  const textSecondary = getColor(\"text.secondary\");\n  const textMuted = getColor(\"text.muted\");\n  const statusSuccess = getColor(\"status.success\");\n\n  // Check if user has admin permissions\n  const isAdmin = user?.permissions?.includes(\"ADMIN\") || user?.permissions?.includes(\"admin\");\n\n  // Rule: Display only the first 4 digits of the MongoDB ID for invoice ID\n  const getDisplayBillId = (fullId: string) => {\n    return fullId.substring(0, 4);\n  };\n\n  // Allow public access to bills - no redirect needed\n  // Bills can be viewed by anyone with the link (especially PROPOSAL status bills for client review)\n  // React.useEffect(() => {\n  //   if (!authLoading && !isAuthenticated) {\n  //     navigate(`/bill/${id}/preview`);\n  //   }\n  // }, [authLoading, isAuthenticated, navigate, id]);\n\n  const { loading, error, data } = useQuery(GET_BILL, {\n    variables: { id },\n  });\n\n  // Fetch client details if bill has a clientId\n  const { data: clientData, loading: clientLoading, error: clientError } = useQuery(GET_CLIENT, {\n    variables: { id: data?.bill?.clientId },\n    skip: !data?.bill?.clientId, // Only fetch if clientId exists\n  });\n\n  // Debug logging with useEffect\n  React.useEffect(() => {\n    if (data?.bill) {\n      console.log('📋 Bill data loaded:', {\n        billId: data.bill.id,\n        clientId: data.bill.clientId,\n        hasClientId: !!data.bill.clientId,\n        projectId: data.bill.projectId\n      });\n    }\n  }, [data]);\n\n  // Log client query status\n  React.useEffect(() => {\n    console.log('🔍 Client query status:', {\n      loading: clientLoading,\n      hasData: !!clientData,\n      hasClient: !!clientData?.client,\n      hasError: !!clientError,\n      skip: !data?.bill?.clientId,\n      clientId: data?.bill?.clientId\n    });\n  }, [clientLoading, clientData, clientError, data?.bill?.clientId]);\n\n  React.useEffect(() => {\n    if (clientData?.client) {\n      console.log('👤 Client data loaded:', {\n        clientId: clientData.client.id,\n        name: `${clientData.client.fName} ${clientData.client.lName}`,\n        email: clientData.client.email\n      });\n    }\n    if (clientError) {\n      console.error('❌ Error loading client:', clientError);\n    }\n  }, [clientData, clientError]);\n\n  const { data: issuerData, loading: issuerLoading } = useQuery(GET_BILL_ISSUER, {\n    variables: { billId: id },\n  });\n\n  // Fetch tenant details as fallback for old bills\n  const { data: tenantData, loading: tenantLoading } = useQuery(GET_CURRENT_TENANT_DETAILS, {\n    skip: !isAuthenticated, // Only fetch if authenticated\n  });\n\n  // Use tenant data as fallback if issuer data is not available\n  const effectiveIssuerData = issuerData?.getBillIssuerDetails || {\n    businessName: tenantData?.currentTenant?.companyDetails?.companyName,\n    email: tenantData?.currentTenant?.companyDetails?.billingEmail,\n    phoneNumber: tenantData?.currentTenant?.companyDetails?.billingPhone,\n    paymentReceivingDetails: tenantData?.currentTenant?.paymentReceivingDetails,\n    fName: \"\",\n    lName: \"\",\n  };\n\n  console.log(\"Raw data:\", data);\n  console.log(\"Bill:\", data?.bill);\n  console.log(\"Line Items:\", data?.bill?.lineItems);\n  console.log(\"[BillDetails] Issuer crypto wallets:\", effectiveIssuerData?.paymentReceivingDetails?.cryptoWallets);\n  console.log(\"[BillDetails] Bitcoin wallet found:\", effectiveIssuerData?.paymentReceivingDetails?.cryptoWallets?.find(\n    (wallet: any) => wallet.network === \"BTC\"\n  ));\n\n  const client = useApolloClient();\n  const toast = useToast();\n\n  const [updateBillStatus] = useMutation(UPDATE_BILL_STATUS);\n  const [updateLineItem] = useMutation(UPDATE_LINE_ITEM);\n  const [deleteLineItem] = useMutation(DELETE_LINE_ITEM);\n  const [updateBillPaymentMethods] = useMutation(UPDATE_BILL_PAYMENT_METHODS);\n  const [duplicateBillWithPercentage] = useMutation(DUPLICATE_BILL_WITH_PERCENTAGE);\n  const [toggleBillDraftStatus] = useMutation(TOGGLE_BILL_DRAFT_STATUS);\n  const [changeBillClient] = useMutation(CHANGE_BILL_CLIENT);\n  const [importLineItemsFromMarkdown] = useMutation(IMPORT_LINE_ITEMS_FROM_MARKDOWN);\n\n  const [editingId, setEditingId] = React.useState<string | null>(null);\n  const [editValues, setEditValues] = React.useState<{\n    description: string;\n    amount: number;\n  }>({ description: \"\", amount: 0 });\n\n  // Duplicate bill modal state\n  const { isOpen: isDuplicateModalOpen, onOpen: openDuplicateModal, onClose: closeDuplicateModal } = useDisclosure();\n  const { isOpen: isChangeClientModalOpen, onOpen: openChangeClientModal, onClose: closeChangeClientModal } = useDisclosure();\n  const { isOpen: isImportModalOpen, onOpen: openImportModal, onClose: closeImportModal } = useDisclosure();\n  const [duplicatePercentage, setDuplicatePercentage] = React.useState(50);\n  const [duplicatePaymentTerms, setDuplicatePaymentTerms] = React.useState(\"\");\n  const [importingFile, setImportingFile] = React.useState(false);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n  const [selectedNewClientId, setSelectedNewClientId] = React.useState<string[]>([]);\n\n  // const { isOpen, onOpen, onClose } = useDisclosure();\n  // const [isAuthenticated, setIsAuthenticated] = React.useState(false);\n\n  // React.useEffect(() => {\n  //   const authToken = localStorage.getItem('auth_token');\n  //   if (!authToken) {\n  //     onOpen();\n  //   } else {\n  //     setIsAuthenticated(true);\n  //   }\n  // }, [onOpen]);\n\n  const handleTogglePayment = async (billId: string) => {\n    try {\n      await client.mutate({\n        mutation: TOGGLE_BILL_PAYMENT_STATUS,\n        variables: { id: billId },\n        refetchQueries: [{ query: GET_BILL, variables: { id: billId } }]\n      });\n\n      toast({\n        title: `Bill marked as ${data?.bill.isPaid ? \"unpaid\" : \"paid\"}`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.error(\"Error toggling payment status:\", error);\n      toast({\n        title: \"Error updating payment status\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleStatusChange = async (newStatus: string) => {\n    try {\n      await updateBillStatus({\n        variables: { \n          id: data?.bill.id,\n          status: newStatus\n        },\n        refetchQueries: [{ query: GET_BILL, variables: { id: data?.bill.id } }]\n      });\n\n      toast({\n        title: `Bill marked as ${newStatus}`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.error(\"Error updating bill status:\", error);\n      toast({\n        title: \"Error updating bill status\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleUpdatePaymentMethods = async (acceptCard: boolean, acceptCrypto: boolean) => {\n    try {\n      await updateBillPaymentMethods({\n        variables: {\n          id: data.bill.id,\n          input: {\n            acceptCardPayment: acceptCard,\n            acceptCryptoPayment: acceptCrypto,\n            projectId: data.bill.projectId,\n            isPaid: data.bill.isPaid,\n            currency: data.bill.currency || \"AUD\"\n          }\n        },\n        refetchQueries: [{ query: GET_BILL, variables: { id: data.bill.id } }]\n      });\n\n      toast({\n        title: \"Payment methods updated\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      console.error(\"Error updating payment methods:\", error);\n      toast({\n        title: \"Error updating payment methods\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleDuplicateBill = async () => {\n    try {\n      const paymentTermsText = duplicatePaymentTerms || `${duplicatePercentage}% upfront payment`;\n\n      const { data: duplicateData } = await duplicateBillWithPercentage({\n        variables: {\n          id: data.bill.id,\n          percentage: duplicatePercentage,\n          paymentTerms: paymentTermsText\n        }\n      });\n\n      toast({\n        title: \"Bill duplicated successfully\",\n        description: `Created ${duplicatePercentage}% partial bill`,\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n\n      closeDuplicateModal();\n\n      // Navigate to the new bill\n      navigate(`/bill/${duplicateData.duplicateBillWithPercentage.id}`);\n    } catch (error) {\n      console.error(\"Error duplicating bill:\", error);\n      toast({\n        title: \"Error duplicating bill\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleChangeClient = async () => {\n    if (selectedNewClientId.length === 0) {\n      toast({\n        title: \"No client selected\",\n        description: \"Please select a client to change to\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    try {\n      await changeBillClient({\n        variables: {\n          billId: id,\n          newClientId: selectedNewClientId[0]\n        }\n      });\n\n      toast({\n        title: \"Client changed successfully\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n\n      // Refetch client data\n      await client.refetchQueries({\n        include: [GET_CLIENT_BY_BILL]\n      });\n\n      closeChangeClientModal();\n      setSelectedNewClientId([]);\n    } catch (error) {\n      console.error(\"Error changing client:\", error);\n      toast({\n        title: \"Error changing client\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleSendBill = async () => {\n    try {\n      await updateBillStatus({\n        variables: {\n          id: data.bill.id,\n          status: BillStatus.SENT\n        },\n        refetchQueries: [{ query: GET_BILL, variables: { id: data.bill.id } }]\n      });\n\n      toast({\n        title: \"Bill sent successfully\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error sending bill\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      const doc = <BillPDF bill={bill} clientData={clientData} issuerData={issuerData} />;\n      const pdfBlob = await pdf(doc).toBlob();\n\n      // Create download link\n      const url = URL.createObjectURL(pdfBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `Invoice_${getDisplayBillId(bill.id)}_${new Date().toISOString().split('T')[0]}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"PDF downloaded successfully\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error generating PDF\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n    }\n  };\n\n  const handlePreviewPDF = () => {\n    navigate(`/bill/${id}/preview`);\n  };\n\n  // Show loading while data is loading\n  if (loading || authLoading) {\n    return (\n      <>\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n        <Container maxW=\"container.xl\" py={8}>\n          <VStack spacing={6}>\n            <Skeleton height=\"60px\" width=\"100%\" />\n            <Skeleton height=\"200px\" width=\"100%\" />\n            <Skeleton height=\"300px\" width=\"100%\" />\n          </VStack>\n        </Container>\n        <FooterWithFourColumns />\n      </>\n    );\n  }\n\n  if (error) {\n    return (\n      <>\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n        <Container maxW=\"container.xl\" py={8}>\n          <Alert status=\"error\">\n            <AlertIcon />\n            Error loading bill details: {error.message}\n          </Alert>\n        </Container>\n      </>\n    );\n  }\n\n  const bill = data?.bill;\n\n  console.log('[RENDER CHECK 1] About to check if bill exists', { bill: !!bill });\n\n  if (!bill) {\n    console.log('[RENDER CHECK 2] Bill not found, showing error');\n    return (\n      <>\n        <NavbarWithCallToAction />\n        <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n        <Container maxW=\"container.xl\" py={8}>\n          <Alert status=\"info\">\n            <AlertIcon />\n            Bill not found\n          </Alert>\n        </Container>\n      </>\n    );\n  }\n\n  console.log('[RENDER CHECK 3] Bill found, preparing to render');\n  console.log('[RENDER CHECK 4] isAuthenticated:', isAuthenticated);\n  console.log('[RENDER CHECK 5] user:', user);\n  console.log('[RENDER CHECK 6] isAdmin:', isAdmin);\n\n  const formatDate = (dateString: string | { $date: string }) => {\n    const date = dateString instanceof Object ? dateString.$date : dateString;\n    return new Date(date).toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      timeZoneName: \"short\",\n    });\n  };\n\n  const formatCurrency = (amount: number | null | undefined) => {\n    if (amount === null || amount === undefined) {\n      return \"0.00\";\n    }\n    return amount.toLocaleString(\"en-US\", {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  };\n\n  // Handle file import\n  const handleFileImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.name.endsWith('.md')) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please upload a .md (markdown) file',\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n      });\n      return;\n    }\n\n    setImportingFile(true);\n\n    try {\n      // Read file content\n      const markdown = await file.text();\n\n      // Call mutation\n      await importLineItemsFromMarkdown({\n        variables: {\n          billId: id,\n          markdown\n        },\n        refetchQueries: [{ query: GET_BILL, variables: { id } }]\n      });\n\n      toast({\n        title: 'Line items imported',\n        description: `Successfully imported line items from ${file.name}`,\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n      });\n\n      closeImportModal();\n\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n\n    } catch (error: any) {\n      toast({\n        title: 'Import failed',\n        description: error.message || 'Failed to import line items',\n        status: 'error',\n        duration: 7000,\n        isClosable: true,\n      });\n    } finally {\n      setImportingFile(false);\n    }\n  };\n\n  console.log('[RENDER CHECK 7] About to return main component');\n\n  return (\n    <Box minH=\"100vh\" bg={bg}>\n      <NavbarWithCallToAction />\n      <ModuleBreadcrumb moduleConfig={billsModuleConfig} />\n      {/* {!isAuthenticated ? (\n        <>\n          <Container maxW=\"container.xl\" py={8}>\n            <Alert status=\"warning\">\n              <AlertIcon />\n              Please log in to view bill details\n            </Alert>\n          </Container>\n          <LoginModal \n            isOpen={isOpen} \n            onClose={() => {\n              onClose();\n              const authToken = localStorage.getItem('auth_token');\n              if (authToken) {\n                setIsAuthenticated(true);\n              }\n            }} \n          />\n        </>\n      ) : ( */}\n      <Container maxW=\"container.xl\" py={8}>\n        <VStack spacing={6} align=\"stretch\">\n          <Card\n            bg={cardGradientBg}\n            borderColor={cardBorder}\n            borderWidth=\"1px\"\n            boxShadow=\"0 8px 32px 0 rgba(0, 0, 0, 0.37)\"\n            backdropFilter=\"blur(10px)\">\n            <CardHeader>\n              <VStack spacing={4} width=\"100%\">\n                <HStack justify=\"space-between\" width=\"100%\">\n                  <VStack align=\"start\" spacing={2}>\n                    <Heading size={{ base: \"md\", md: \"lg\" }} color={textPrimary}>Bill Details</Heading>\n                    <Text color={textMuted} fontSize={{ base: \"sm\", md: \"md\" }}>Invoice ID: {getDisplayBillId(bill.id)}</Text>\n                  </VStack>\n                  <HStack spacing={{ base: 2, md: 4 }} flexWrap=\"wrap\">\n                    {(bill.status === BillStatus.DRAFT || bill.status === BillStatus.PROPOSAL) && isAdmin && (\n                      <Button\n                        colorScheme=\"blue\"\n                        size={{ base: \"sm\", md: \"md\" }}\n                        onClick={() => {\n                          setDuplicatePaymentTerms(`${duplicatePercentage}% upfront payment`);\n                          openDuplicateModal();\n                        }}\n                      >\n                        Duplicate (Partial)\n                      </Button>\n                    )}\n                    <Button\n                      colorScheme=\"purple\"\n                      size={{ base: \"sm\", md: \"md\" }}\n                      onClick={handlePreviewPDF}\n                      leftIcon={<ViewIcon />}\n                    >\n                      Preview PDF\n                    </Button>\n                    <Button\n                      colorScheme=\"green\"\n                      size={{ base: \"sm\", md: \"md\" }}\n                      onClick={handleDownloadPDF}\n                      leftIcon={<DownloadIcon />}\n                    >\n                      Download PDF\n                    </Button>\n                    {isAdmin && (\n                      <Button\n                        colorScheme=\"blue\"\n                        size={{ base: \"sm\", md: \"md\" }}\n                        onClick={handleSendBill}\n                        isDisabled={bill.status === BillStatus.SENT}\n                      >\n                        Send Bill\n                      </Button>\n                    )}\n                    <Badge\n                      fontSize={{ base: \"md\", md: \"lg\" }}\n                      colorScheme={bill.status === BillStatus.SENT ? \"blue\" : \"gray\"}\n                      p={2}\n                      borderRadius=\"md\"\n                    >\n                      {bill.status}\n                    </Badge>\n                  </HStack>\n                </HStack>\n\n                <Card p={6} width=\"100%\" bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\" borderRadius=\"lg\">\n                  <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>\n                    <VStack align=\"start\" spacing={4}>\n                      <VStack spacing={4} align=\"stretch\">\n                        <Tooltip \n                          label=\"Toggle the payment status of this bill. Use this when payment has been received or to mark as unpaid.\" \n                          placement=\"top\"\n                          hasArrow\n                        >\n                          <HStack justify=\"flex-start\" spacing={4} flexWrap=\"wrap\">\n                            <Text fontSize={{ base: \"lg\", md: \"xl\" }} fontWeight=\"bold\" color={textPrimary}>Payment Status:</Text>\n                            <Switch\n                              size=\"lg\"\n                              isChecked={bill.isPaid}\n                              onChange={() => handleTogglePayment(bill.id)}\n                              colorScheme=\"green\"\n                              sx={{\n                                \"span.chakra-switch__track\": {\n                                  w: \"4rem\",\n                                  h: \"2rem\",\n                                },\n                                \"span.chakra-switch__thumb\": {\n                                  w: \"1.75rem\",\n                                  h: \"1.75rem\",\n                                }\n                              }}\n                            />\n                            <Text fontSize={{ base: \"lg\", md: \"xl\" }} fontWeight=\"bold\" color={bill.isPaid ? statusSuccess : textMuted}>\n                              {bill.isPaid ? \"PAID\" : \"UNPAID\"}\n                            </Text>\n                          </HStack>\n                        </Tooltip>\n\n                        <Divider />\n\n                        <VStack align=\"stretch\" spacing={2}>\n                          <HStack justify=\"flex-start\" spacing={4} flexWrap=\"wrap\" align=\"center\">\n                            <Text fontSize={{ base: \"lg\", md: \"xl\" }} fontWeight=\"bold\" color={textPrimary}>Bill Status:</Text>\n                            {isAdmin ? (\n                              <Select\n                                value={bill.status}\n                                onChange={(e) => handleStatusChange(e.target.value)}\n                                width=\"200px\"\n                                size=\"lg\"\n                                bg={\n                                  colorMode === 'light'\n                                    ? (bill.status === BillStatus.PROPOSAL ? \"purple.50\" :\n                                       bill.status === BillStatus.DRAFT ? \"orange.50\" : \"blue.50\")\n                                    : (bill.status === BillStatus.PROPOSAL ? \"purple.900\" :\n                                       bill.status === BillStatus.DRAFT ? \"orange.900\" : \"blue.900\")\n                                }\n                                borderColor={\n                                  bill.status === BillStatus.PROPOSAL ? \"purple.500\" :\n                                  bill.status === BillStatus.DRAFT ? \"orange.500\" : \"blue.500\"\n                                }\n                                fontWeight=\"bold\"\n                                _hover={{\n                                  borderColor: \"gray.400\"\n                                }}\n                              >\n                                <option value={BillStatus.PROPOSAL}>PROPOSAL</option>\n                                <option value={BillStatus.DRAFT}>DRAFT</option>\n                                <option value={BillStatus.SENT}>SENT</option>\n                              </Select>\n                            ) : (\n                              <Badge\n                                colorScheme={\n                                  bill.status === BillStatus.PROPOSAL ? \"purple\" :\n                                  bill.status === BillStatus.DRAFT ? \"orange\" : \"blue\"\n                                }\n                                fontSize=\"lg\"\n                                px={4}\n                                py={2}\n                              >\n                                {bill.status}\n                              </Badge>\n                            )}\n                            <Tooltip\n                              label={\n                                bill.status === BillStatus.PROPOSAL ? \"This is a proposal/quote - not counted in billing metrics\" :\n                                bill.status === BillStatus.DRAFT ? \"This bill is in draft status - not sent to client yet\" :\n                                \"This bill has been marked as sent to the client\"\n                              }\n                              hasArrow\n                            >\n                              <Badge\n                                colorScheme={\n                                  bill.status === BillStatus.PROPOSAL ? \"purple\" :\n                                  bill.status === BillStatus.DRAFT ? \"orange\" : \"blue\"\n                                }\n                                fontSize=\"sm\"\n                                px={3}\n                                py={1}\n                              >\n                                {bill.status === BillStatus.PROPOSAL ? \"Quote - Not in metrics\" :\n                                 bill.status === BillStatus.DRAFT ? \"Not sent\" : \"Sent to client\"}\n                              </Badge>\n                            </Tooltip>\n                          </HStack>\n                          {bill.status === BillStatus.DRAFT && isAdmin && (\n                            <Text fontSize=\"sm\" color={textMuted} pl={2}>\n                              💡 Use \"Send Bill to Client\" button below to email this bill\n                            </Text>\n                          )}\n                        </VStack>\n                      </VStack>\n                    </VStack>\n                  </SimpleGrid>\n                </Card>\n              </VStack>\n            </CardHeader>\n\n            <CardBody>\n              <VStack spacing={6} align=\"stretch\">\n                <Box>\n                  <Heading size=\"md\" mb={4} color={textPrimary}>Bill Information</Heading>\n                  <Card variant=\"outline\" bg={cardGradientBg} borderColor={cardBorder}>\n                    <CardBody>\n                      <SimpleGrid columns={2} spacing={4}>\n                        <Box>\n                          <Text fontWeight=\"bold\" color={textSecondary}>Created Date</Text>\n                          <Text color={textPrimary}>{formatDate(bill.createdAt)}</Text>\n                        </Box>\n                        <Box>\n                          <Text fontWeight=\"bold\" color={textSecondary}>Last Updated</Text>\n                          <Text color={textPrimary}>{formatDate(bill.updatedAt)}</Text>\n                        </Box>\n                        <Box>\n                          <Text fontWeight=\"bold\" color={textSecondary}>Payment Method</Text>\n                          <Text color={textPrimary}>{bill.paymentMethod || \"Not specified\"}</Text>\n                        </Box>\n                        <Box>\n                          <Text fontWeight=\"bold\" color={textSecondary}>Total Amount</Text>\n                          <Text color={textPrimary}>\n                            ${(bill.totalAmount && bill.totalAmount > 0) ?\n                              formatCurrency(bill.totalAmount) :\n                              formatCurrency(bill.lineItems?.reduce((total: number, item: any) => total + Number(item.amount), 0) || 0)} {bill.currency || \"AUD\"}\n                          </Text>\n                        </Box>\n                        <Box>\n                          <Text fontWeight=\"bold\" color={textSecondary}>Tenant ID</Text>\n                          <Text color={textPrimary}>{bill.tenantId}</Text>\n                        </Box>\n                        <Box>\n                          <Text fontWeight=\"bold\" color={textSecondary}>Project ID</Text>\n                          {bill.projectId ? (\n                            <Text\n                              color=\"blue.500\"\n                              textDecoration=\"underline\"\n                              cursor=\"pointer\"\n                              _hover={{ color: \"blue.700\" }}\n                              onClick={() => window.open(`/project/${bill.projectId}`, '_blank')}\n                            >\n                              {bill.projectId}\n                            </Text>\n                          ) : (\n                            <Text color={textPrimary}>Not associated with a project</Text>\n                          )}\n                        </Box>\n                      </SimpleGrid>\n                      \n                      {/* Payment Method Toggles - Only visible for DRAFT bills */}\n                      {bill.status === BillStatus.DRAFT && isAdmin && (\n                        <>\n                          <Divider my={4} borderColor={cardBorder} />\n                          <Box>\n                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={textPrimary} mb={3}>\n                              Payment Methods Available to Customer\n                            </Text>\n                            <VStack align=\"stretch\" spacing={3}>\n                              <FormControl display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                                <FormLabel htmlFor=\"card-payment-edit\" mb=\"0\" color={textSecondary}>\n                                  Accept Card Payments (Stripe)\n                                </FormLabel>\n                                <Switch\n                                  id=\"card-payment-edit\"\n                                  isChecked={bill.acceptCardPayment ?? true}\n                                  onChange={(e) => handleUpdatePaymentMethods(e.target.checked, bill.acceptCryptoPayment ?? false)}\n                                  colorScheme=\"blue\"\n                                />\n                              </FormControl>\n\n                              <FormControl display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                                <FormLabel htmlFor=\"crypto-payment-edit\" mb=\"0\" color={textSecondary}>\n                                  Accept Crypto Payments (Bitcoin)\n                                </FormLabel>\n                                <Switch\n                                  id=\"crypto-payment-edit\"\n                                  isChecked={bill.acceptCryptoPayment ?? false}\n                                  onChange={(e) => handleUpdatePaymentMethods(bill.acceptCardPayment ?? true, e.target.checked)}\n                                  colorScheme=\"blue\"\n                                />\n                              </FormControl>\n                            </VStack>\n                            <Text fontSize=\"xs\" color={textMuted} mt={2}>\n                              These options can only be changed while the bill is in DRAFT status\n                            </Text>\n                          </Box>\n                        </>\n                      )}\n\n                      {/* Display payment methods for non-draft bills */}\n                      {bill.status !== BillStatus.DRAFT && (\n                        <Box mt={4}>\n                          <Text fontSize=\"sm\" fontWeight=\"bold\" color={textPrimary} mb={2}>\n                            Available Payment Methods:\n                          </Text>\n                          <HStack spacing={3}>\n                            {(bill.acceptCardPayment ?? true) && (\n                              <Badge colorScheme=\"blue\">Card Payment</Badge>\n                            )}\n                            {bill.acceptCryptoPayment && (\n                              <Badge colorScheme=\"orange\">Crypto Payment</Badge>\n                            )}\n                            {!bill.acceptCardPayment && !bill.acceptCryptoPayment && (\n                              <Text fontSize=\"sm\" color={textMuted}>Bank Transfer Only</Text>\n                            )}\n                          </HStack>\n                        </Box>\n                      )}\n                    </CardBody>\n                  </Card>\n                </Box>\n\n                <Box>\n                  <HStack justify=\"space-between\" mb={4}>\n                    <Heading size=\"md\" color={textPrimary}>Client Information</Heading>\n                    {isAdmin && (\n                      <Button\n                        size=\"sm\"\n                        leftIcon={<EditIcon />}\n                        onClick={openChangeClientModal}\n                        colorScheme=\"blue\"\n                        variant=\"outline\"\n                      >\n                        Change Client\n                      </Button>\n                    )}\n                  </HStack>\n                  <Card variant=\"outline\" bg={cardGradientBg} borderColor={cardBorder}>\n                    <CardBody>\n                      {clientLoading ? (\n                        <Skeleton height=\"100px\" />\n                      ) : clientData?.client ? (\n                        <SimpleGrid columns={2} spacing={4}>\n                          <Box>\n                            <Text fontWeight=\"bold\" color={textSecondary}>Name</Text>\n                            <Text color={textPrimary}>{clientData.client.fName} {clientData.client.lName}</Text>\n                          </Box>\n                          <Box>\n                            <Text fontWeight=\"bold\" color={textSecondary}>Email</Text>\n                            <Text color={textPrimary}>{clientData.client.email}</Text>\n                          </Box>\n                          <Box>\n                            <Text fontWeight=\"bold\" color={textSecondary}>Phone</Text>\n                            <Text color={textPrimary}>{clientData.client.phoneNumber || \"Not provided\"}</Text>\n                          </Box>\n                          <Box>\n                            <Text fontWeight=\"bold\" color={textSecondary}>Business Name</Text>\n                            <Text color={textPrimary}>{clientData.client.businessName || \"Not provided\"}</Text>\n                          </Box>\n                        </SimpleGrid>\n                      ) : (\n                        <Text color={textMuted}>No client information available</Text>\n                      )}\n                    </CardBody>\n                  </Card>\n                </Box>\n\n                <Box>\n                  <Heading size=\"md\" mb={4} color={textPrimary}>Bill Issued By</Heading>\n                  <Card variant=\"outline\" bg={cardGradientBg} borderColor={cardBorder}>\n                    <CardBody>\n                      {(issuerLoading || tenantLoading) ? (\n                        <Skeleton height=\"200px\" />\n                      ) : effectiveIssuerData ? (\n                        <VStack spacing={6} align=\"stretch\">\n                          {/* Business Information */}\n                          <Box>\n                            <Text fontWeight=\"bold\" fontSize=\"lg\" mb={3} color={textPrimary}>Business Information</Text>\n                            <SimpleGrid columns={2} spacing={4}>\n                              <Box>\n                                <Text fontWeight=\"bold\" color={textSecondary}>Business Name</Text>\n                                <Text color={textPrimary}>\n                                  {brandConfig.contact.businessName || effectiveIssuerData.businessName || \"Not provided\"}\n                                </Text>\n                              </Box>\n                              {effectiveIssuerData.businessRegistrationNumber && (\n                                <Box>\n                                  <Text fontWeight=\"bold\" color={textSecondary}>Registration Number</Text>\n                                  <Text color={textPrimary}>{effectiveIssuerData.businessRegistrationNumber}</Text>\n                                </Box>\n                              )}\n                              <Box>\n                                <Text fontWeight=\"bold\" color={textSecondary}>Contact Person</Text>\n                                <Text color={textPrimary}>\n                                  {brandConfig.contact.contactName || `${effectiveIssuerData.fName} ${effectiveIssuerData.lName}`}\n                                </Text>\n                              </Box>\n                              <Box>\n                                <Text fontWeight=\"bold\" color={textSecondary}>Email</Text>\n                                <Text color={textPrimary}>\n                                  {brandConfig.contact.email || effectiveIssuerData.email}\n                                </Text>\n                              </Box>\n                              <Box>\n                                <Text fontWeight=\"bold\" color={textSecondary}>Phone</Text>\n                                <Text color={textPrimary}>\n                                  {brandConfig.contact.phone || effectiveIssuerData.phoneNumber || \"Not provided\"}\n                                </Text>\n                              </Box>\n                            </SimpleGrid>\n                          </Box>\n\n                          {/* Payment Information - Hidden by default for cleaner UI */}\n                          {false && effectiveIssuerData.paymentReceivingDetails && (\n                            <Box>\n                              <Text fontWeight=\"bold\" fontSize=\"lg\" mb={3} color={textPrimary}>Payment Information</Text>\n\n                              {/* Bank Account Details */}\n                              {effectiveIssuerData.paymentReceivingDetails.bankAccount && (\n                                <Box p={4} bg={cardGradientBg} borderRadius=\"md\" mb={4} border=\"1px\" borderColor={cardBorder}>\n                                  <Text fontWeight=\"bold\" mb={2} color={textPrimary}>🏦 Bank Account Details</Text>\n                                  <SimpleGrid columns={2} spacing={4}>\n                                    <Box>\n                                      <Text fontWeight=\"semibold\" color={textSecondary}>Account Name</Text>\n                                      <HStack>\n                                        <Text color={textPrimary}>{effectiveIssuerData.paymentReceivingDetails.bankAccount.accountName}</Text>\n                                        <Button size=\"xs\" onClick={() => navigator.clipboard.writeText(effectiveIssuerData.paymentReceivingDetails.bankAccount.accountName)}>\n                                          Copy\n                                        </Button>\n                                      </HStack>\n                                    </Box>\n                                    <Box>\n                                      <Text fontWeight=\"semibold\" color={textSecondary}>BSB</Text>\n                                      <HStack>\n                                        <Text color={textPrimary}>{effectiveIssuerData.paymentReceivingDetails.bankAccount.bsb}</Text>\n                                        <Button size=\"xs\" onClick={() => navigator.clipboard.writeText(effectiveIssuerData.paymentReceivingDetails.bankAccount.bsb)}>\n                                          Copy\n                                        </Button>\n                                      </HStack>\n                                    </Box>\n                                    <Box>\n                                      <Text fontWeight=\"semibold\" color={textSecondary}>Account Number</Text>\n                                      <HStack>\n                                        <Text color={textPrimary}>{effectiveIssuerData.paymentReceivingDetails.bankAccount.accountNumber}</Text>\n                                        <Button size=\"xs\" onClick={() => navigator.clipboard.writeText(effectiveIssuerData.paymentReceivingDetails.bankAccount.accountNumber)}>\n                                          Copy\n                                        </Button>\n                                      </HStack>\n                                    </Box>\n                                    {effectiveIssuerData.paymentReceivingDetails.bankAccount.bankName && (\n                                      <Box>\n                                        <Text fontWeight=\"semibold\" color={textSecondary}>Bank Name</Text>\n                                        <Text color={textPrimary}>{effectiveIssuerData.paymentReceivingDetails.bankAccount.bankName}</Text>\n                                      </Box>\n                                    )}\n                                    {effectiveIssuerData.paymentReceivingDetails.bankAccount.swiftCode && (\n                                      <Box>\n                                        <Text fontWeight=\"semibold\" color={textSecondary}>SWIFT Code</Text>\n                                        <HStack>\n                                          <Text color={textPrimary}>{effectiveIssuerData.paymentReceivingDetails.bankAccount.swiftCode}</Text>\n                                          <Button size=\"xs\" onClick={() => navigator.clipboard.writeText(effectiveIssuerData.paymentReceivingDetails.bankAccount.swiftCode)}>\n                                            Copy\n                                          </Button>\n                                        </HStack>\n                                      </Box>\n                                    )}\n                                  </SimpleGrid>\n                                </Box>\n                              )}\n\n                              {/* Crypto Wallets */}\n                              {effectiveIssuerData.paymentReceivingDetails.cryptoWallets?.length > 0 && (\n                                <Box p={4} bg={cardGradientBg} borderRadius=\"md\" mb={4} border=\"1px\" borderColor={cardBorder}>\n                                  <Text fontWeight=\"bold\" mb={2} color={textPrimary}>₿ Cryptocurrency Wallets</Text>\n                                  <VStack spacing={3}>\n                                    {effectiveIssuerData.paymentReceivingDetails.cryptoWallets.map((wallet: any, index: number) => (\n                                      <Box key={index} p={3} bg={cardGradientBg} borderRadius=\"md\" border=\"1px\" borderColor={cardBorder} width=\"100%\">\n                                        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>\n                                          <Box>\n                                            <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>Network</Text>\n                                            <Badge colorScheme=\"purple\">{wallet.network}</Badge>\n                                          </Box>\n                                          <Box>\n                                            <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>Wallet Address</Text>\n                                            <HStack>\n                                              <Text fontSize=\"sm\" fontFamily=\"mono\" color={textPrimary}>{wallet.walletAddress}</Text>\n                                              <Button size=\"xs\" onClick={() => navigator.clipboard.writeText(wallet.walletAddress)}>\n                                                Copy\n                                              </Button>\n                                            </HStack>\n                                          </Box>\n                                          {wallet.memo && (\n                                            <Box>\n                                              <Text fontSize=\"sm\" fontWeight=\"semibold\" color={textSecondary}>Memo</Text>\n                                              <Text fontSize=\"sm\" color={textPrimary}>{wallet.memo}</Text>\n                                            </Box>\n                                          )}\n                                        </SimpleGrid>\n                                      </Box>\n                                    ))}\n                                  </VStack>\n                                </Box>\n                              )}\n\n                              {/* PayPal */}\n                              {effectiveIssuerData.paymentReceivingDetails.paypalEmail && (\n                                <Box p={4} bg={cardGradientBg} borderRadius=\"md\" mb={4} border=\"1px\" borderColor={cardBorder}>\n                                  <Text fontWeight=\"bold\" mb={2} color={textPrimary}>💰 PayPal</Text>\n                                  <HStack>\n                                    <Text color={textPrimary}>{effectiveIssuerData.paymentReceivingDetails.paypalEmail}</Text>\n                                    <Button size=\"xs\" onClick={() => navigator.clipboard.writeText(effectiveIssuerData.paymentReceivingDetails.paypalEmail)}>\n                                      Copy\n                                    </Button>\n                                  </HStack>\n                                </Box>\n                              )}\n\n                              {/* Stripe Connect */}\n                              {effectiveIssuerData.paymentReceivingDetails.stripeConnect && (\n                                <Box p={4} bg={cardGradientBg} borderRadius=\"md\" mb={4} border=\"1px\" borderColor={cardBorder}>\n                                  <Text fontWeight=\"bold\" mb={2} color={textPrimary}>💳 Stripe Connect</Text>\n                                  <HStack spacing={4}>\n                                    <Badge colorScheme={effectiveIssuerData.paymentReceivingDetails.stripeConnect.accountVerified ? \"green\" : \"yellow\"}>\n                                      {effectiveIssuerData.paymentReceivingDetails.stripeConnect.accountVerified ? \"✅ Verified\" : \"⏳ Pending Verification\"}\n                                    </Badge>\n                                    <Text fontSize=\"sm\" color={textSecondary}>\n                                      Available for credit card payments\n                                    </Text>\n                                  </HStack>\n                                </Box>\n                              )}\n\n                              {/* Accepted Payment Methods */}\n                              <Box>\n                                <Text fontWeight=\"semibold\" mb={2} color={textPrimary}>Accepted Payment Methods</Text>\n                                <HStack spacing={2} flexWrap=\"wrap\">\n                                  {effectiveIssuerData.paymentReceivingDetails.acceptedMethods?.map((method: string) => (\n                                    <Badge key={method} colorScheme=\"blue\" variant=\"solid\">\n                                      {method === \"BANK_TRANSFER\" ? \"🏦 Bank Transfer\" :\n                                        method === \"CRYPTO\" ? \"₿ Cryptocurrency\" :\n                                          method === \"STRIPE\" ? \"💳 Credit Cards\" :\n                                            method === \"PAYPAL\" ? \"💰 PayPal\" : method}\n                                    </Badge>\n                                  ))}\n                                </HStack>\n                              </Box>\n                            </Box>\n                          )}\n                        </VStack>\n                      ) : (\n                        <Text color={textMuted}>No issuer information available</Text>\n                      )}\n                    </CardBody>\n                  </Card>\n                </Box>\n\n                <Box>\n                  <HStack justify=\"space-between\" mb={4}>\n                    <Heading size=\"md\" color={textPrimary}>Line Items</Heading>\n                    {isAdmin && (\n                      <HStack spacing={2}>\n                        <Tooltip label=\"Delete all line items\">\n                          <Button\n                            size=\"sm\"\n                            colorScheme=\"red\"\n                            variant=\"outline\"\n                            leftIcon={<DeleteIcon />}\n                            onClick={() => {\n                              if (window.confirm(`Are you sure you want to delete all ${bill.lineItems?.length || 0} line items? This cannot be undone.`)) {\n                                // Delete all line items one by one\n                                const deletePromises = bill.lineItems?.map((item: any) =>\n                                  deleteLineItem({\n                                    variables: {\n                                      billId: bill.id,\n                                      lineItemId: item.id\n                                    }\n                                  })\n                                );\n\n                                Promise.all(deletePromises || [])\n                                  .then(() => {\n                                    toast({\n                                      title: 'All line items deleted',\n                                      status: 'success',\n                                      duration: 3000,\n                                      isClosable: true,\n                                    });\n                                    client.refetchQueries({\n                                      include: [GET_BILL]\n                                    });\n                                  })\n                                  .catch((error) => {\n                                    toast({\n                                      title: 'Error deleting line items',\n                                      description: error.message,\n                                      status: 'error',\n                                      duration: 5000,\n                                      isClosable: true,\n                                    });\n                                  });\n                              }\n                            }}\n                            isDisabled={!bill.lineItems || bill.lineItems.length === 0}\n                          >\n                            Delete All\n                          </Button>\n                        </Tooltip>\n                        <Tooltip label=\"Export line items to markdown file\">\n                          <Button\n                            size=\"sm\"\n                            bg=\"rgba(168, 85, 247, 0.2)\"\n                            color=\"purple.400\"\n                            border=\"1px\"\n                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                            _hover={{\n                              bg: \"rgba(168, 85, 247, 0.3)\",\n                              borderColor: \"purple.400\"\n                            }}\n                            leftIcon={<DownloadIcon />}\n                            onClick={() => {\n                              // Generate markdown from bill line items\n                              let markdown = `# ${bill.projectId?.projectName || 'Bill'}\\n\\n`;\n\n                              markdown += `## Project Information\\n`;\n                              markdown += `**Project Name:** ${bill.projectId?.projectName || 'N/A'}\\n`;\n                              if (bill.projectId?.projectGoal) {\n                                markdown += `**Project Goal:** ${bill.projectId.projectGoal}\\n`;\n                              }\n                              if (bill.projectId?.projectDescription) {\n                                markdown += `**Project Description:** ${bill.projectId.projectDescription}\\n`;\n                              }\n                              markdown += `\\n`;\n\n                              markdown += `## Bill Information\\n`;\n                              markdown += `**Currency:** ${bill.currency || 'AUD'}\\n`;\n                              markdown += `**Payment Method:** ${bill.paymentMethod || 'AUD_TRANSFER'}\\n`;\n                              markdown += `**Status:** ${bill.status || 'PROPOSAL'}\\n`;\n                              markdown += `\\n`;\n\n                              markdown += `## Line Items\\n\\n`;\n                              bill.lineItems?.forEach((item: any, index: number) => {\n                                markdown += `### ${index + 1}. ${item.description}\\n`;\n                                markdown += `**Price:** $${item.amount.toFixed(2)}\\n`;\n                                markdown += `**Billable:** Yes\\n`;\n                                markdown += `**Status:** PENDING\\n`;\n                                markdown += `**Assignee:** Unassigned\\n`;\n                                markdown += `\\n`;\n                              });\n\n                              markdown += `## Agreement\\n\\n`;\n                              markdown += `[Add your agreement text here, or leave this section empty]\\n`;\n\n                              // Download file\n                              const blob = new Blob([markdown], { type: 'text/markdown' });\n                              const url = URL.createObjectURL(blob);\n                              const link = document.createElement('a');\n                              link.href = url;\n                              const fileName = `bill_${bill.id.substring(0, 8)}_line_items.md`;\n                              link.download = fileName;\n                              document.body.appendChild(link);\n                              link.click();\n                              document.body.removeChild(link);\n                              URL.revokeObjectURL(url);\n\n                              toast({\n                                title: 'Line items exported',\n                                description: `Downloaded ${fileName}`,\n                                status: 'success',\n                                duration: 3000,\n                                isClosable: true,\n                              });\n                            }}\n                          >\n                            Export (.md)\n                          </Button>\n                        </Tooltip>\n                        <input\n                          type=\"file\"\n                          ref={fileInputRef}\n                          onChange={handleFileImport}\n                          accept=\".md\"\n                          style={{ display: 'none' }}\n                        />\n                        <Tooltip label=\"Import line items from markdown file\">\n                          <Button\n                            size=\"sm\"\n                            bg=\"rgba(168, 85, 247, 0.2)\"\n                            color=\"purple.400\"\n                            border=\"1px\"\n                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                            _hover={{\n                              bg: \"rgba(168, 85, 247, 0.3)\",\n                              borderColor: \"purple.400\"\n                            }}\n                            leftIcon={<DownloadIcon transform=\"rotate(180deg)\" />}\n                            onClick={() => fileInputRef.current?.click()}\n                            isLoading={importingFile}\n                          >\n                            Import (.md)\n                          </Button>\n                        </Tooltip>\n                        <Tooltip label=\"Download markdown format specification guide\">\n                          <Button\n                            size=\"sm\"\n                            bg=\"rgba(168, 85, 247, 0.2)\"\n                            color=\"purple.400\"\n                            border=\"1px\"\n                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                            _hover={{\n                              bg: \"rgba(168, 85, 247, 0.3)\",\n                              borderColor: \"purple.400\"\n                            }}\n                            leftIcon={<ViewIcon />}\n                            onClick={() => {\n                              downloadMarkdownFile(FORMAT_SPEC_CONTENT, 'FORMAT_SPEC.md');\n                              toast({\n                                title: 'Format guide downloaded',\n                                description: 'Downloaded FORMAT_SPEC.md',\n                                status: 'success',\n                                duration: 3000,\n                                isClosable: true,\n                              });\n                            }}\n                          >\n                            Format Guide\n                          </Button>\n                        </Tooltip>\n                        <Tooltip label=\"Download blank markdown template\">\n                          <Button\n                            size=\"sm\"\n                            bg=\"rgba(168, 85, 247, 0.2)\"\n                            color=\"purple.400\"\n                            border=\"1px\"\n                            borderColor=\"rgba(168, 85, 247, 0.3)\"\n                            _hover={{\n                              bg: \"rgba(168, 85, 247, 0.3)\",\n                              borderColor: \"purple.400\"\n                            }}\n                            leftIcon={<DownloadIcon />}\n                            onClick={() => {\n                              downloadMarkdownFile(BILL_TEMPLATE_CONTENT, 'bill_template.md');\n                              toast({\n                                title: 'Template downloaded',\n                                description: 'Downloaded bill_template.md',\n                                status: 'success',\n                                duration: 3000,\n                                isClosable: true,\n                              });\n                            }}\n                          >\n                            Template\n                          </Button>\n                        </Tooltip>\n                      </HStack>\n                    )}\n                  </HStack>\n                  <Card variant=\"outline\" bg={cardGradientBg} borderColor={cardBorder}>\n                    <CardBody>\n                      <Box overflowX=\"auto\" width=\"100%\">\n                        <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\" }}>\n                          <Thead>\n                            <Tr>\n                              <Th color={textSecondary}>Description</Th>\n                              <Th isNumeric color={textSecondary}>Amount ({bill.currency || \"AUD\"})</Th>\n                              <Th color={textSecondary}>{isAdmin ? \"Actions\" : \"\"}</Th>\n                            </Tr>\n                          </Thead>\n                          <Tbody>\n                            {bill.lineItems && bill.lineItems.map((item: any) => {\n                              const isEditing = editingId === (item.id);\n\n                              const handleEdit = () => {\n                                console.log(\"Setting edit ID to:\", item.id);\n                                setEditingId(item.id);\n                                setEditValues({\n                                  description: item.description,\n                                  amount: item.amount\n                                });\n                              };\n\n                              const handleSave = async () => {\n                                try {\n                                  await updateLineItem({\n                                    variables: {\n                                      billId: bill.id,\n                                      lineItemId: item.id,\n                                      description: editValues.description,\n                                      amount: parseFloat(editValues.amount.toString())\n                                    },\n                                    refetchQueries: [{ query: GET_BILL, variables: { id: bill.id } }]\n                                  });\n\n                                  setEditingId(null);\n                                  toast({\n                                    title: \"Line item updated\",\n                                    status: \"success\",\n                                    duration: 3000,\n                                    isClosable: true,\n                                  });\n                                } catch (error) {\n                                  toast({\n                                    title: \"Error updating line item\",\n                                    description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                                    status: \"error\",\n                                    duration: 5000,\n                                    isClosable: true,\n                                  });\n                                }\n                              };\n\n                              const handleDelete = async () => {\n                                if (!window.confirm('Are you sure you want to delete this line item?')) {\n                                  return;\n                                }\n\n                                try {\n                                  await deleteLineItem({\n                                    variables: {\n                                      billId: bill.id,\n                                      lineItemId: item.id\n                                    },\n                                    refetchQueries: [{ query: GET_BILL, variables: { id: bill.id } }]\n                                  });\n\n                                  toast({\n                                    title: \"Line item deleted\",\n                                    status: \"success\",\n                                    duration: 3000,\n                                    isClosable: true,\n                                  });\n                                } catch (error) {\n                                  toast({\n                                    title: \"Error deleting line item\",\n                                    description: error instanceof Error ? error.message : \"Unknown error occurred\",\n                                    status: \"error\",\n                                    duration: 5000,\n                                    isClosable: true,\n                                  });\n                                }\n                              };\n\n                              return (\n                                <Tr key={item.id}>\n                                  <Td maxW={{ base: \"150px\", md: \"300px\" }} overflow=\"hidden\" textOverflow=\"ellipsis\">\n                                    {isEditing ? (\n                                      <Input\n                                        value={editValues.description}\n                                        onChange={(e) => setEditValues(prev => ({\n                                          ...prev,\n                                          description: e.target.value\n                                        }))}\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                        bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                                        color={textPrimary}\n                                        borderColor={cardBorder}\n                                        _focus={{\n                                          borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                                          boxShadow: colorMode === 'light' ? \"0 0 0 1px rgba(0, 122, 255, 0.2)\" : \"0 0 0 1px rgba(59, 130, 246, 0.2)\"\n                                        }}\n                                      />\n                                    ) : (\n                                      <Text color={textPrimary}>{item.description}</Text>\n                                    )}\n                                  </Td>\n                                  <Td isNumeric>\n                                    {isEditing ? (\n                                      <Input\n                                        type=\"number\"\n                                        value={editValues.amount}\n                                        onChange={(e) => setEditValues(prev => ({\n                                          ...prev,\n                                          amount: parseFloat(e.target.value)\n                                        }))}\n                                        textAlign=\"right\"\n                                        size={{ base: \"sm\", md: \"md\" }}\n                                        bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                                        color={textPrimary}\n                                        borderColor={cardBorder}\n                                        _focus={{\n                                          borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                                          boxShadow: colorMode === 'light' ? \"0 0 0 1px rgba(0, 122, 255, 0.2)\" : \"0 0 0 1px rgba(59, 130, 246, 0.2)\"\n                                        }}\n                                      />\n                                    ) : (\n                                      <Text color={textPrimary}>${formatCurrency(Number(item.amount))}</Text>\n                                    )}\n                                  </Td>\n                                  <Td>\n                                    {isAdmin ? (\n                                      <HStack spacing={2}>\n                                        {isEditing ? (\n                                          <>\n                                            <Button\n                                              size=\"sm\"\n                                              colorScheme=\"green\"\n                                              onClick={handleSave}\n                                              px={{ base: 2, md: 4 }}\n                                            >\n                                              Save\n                                            </Button>\n                                            <Button\n                                              size=\"sm\"\n                                              onClick={() => setEditingId(null)}\n                                              px={{ base: 2, md: 4 }}\n                                            >\n                                              Cancel\n                                            </Button>\n                                          </>\n                                        ) : (\n                                          <>\n                                            <IconButton\n                                              aria-label=\"Edit line item\"\n                                              icon={<EditIcon />}\n                                              size=\"sm\"\n                                              colorScheme=\"blue\"\n                                              onClick={handleEdit}\n                                            />\n                                            <IconButton\n                                              aria-label=\"Delete line item\"\n                                              icon={<DeleteIcon />}\n                                              size=\"sm\"\n                                              colorScheme=\"red\"\n                                              onClick={handleDelete}\n                                            />\n                                          </>\n                                        )}\n                                      </HStack>\n                                    ) : (\n                                      <Text color={textMuted} fontSize=\"sm\">-</Text>\n                                    )}\n                                  </Td>\n                                </Tr>\n                              );\n                            })}\n                          </Tbody>\n                        </Table>\n\n                        {/* Total Summary with GST Breakdown */}\n                        <VStack align=\"stretch\" mt={6} bg={cardGradientBg} p={4} borderRadius=\"md\" border=\"1px\" borderColor={cardBorder} spacing={2}>\n                          {/* Subtotal */}\n                          <HStack justify=\"space-between\">\n                            <Text fontSize=\"md\" color={textSecondary}>Subtotal:</Text>\n                            <Text fontSize=\"md\" color={textPrimary}>\n                              ${bill.subtotal !== undefined ? formatCurrency(bill.subtotal) : formatCurrency(bill.lineItems?.reduce((total: number, item: any) => total + Number(item.amount), 0) || 0)} {bill.currency || \"AUD\"}\n                            </Text>\n                          </HStack>\n\n                          {/* GST/Tax */}\n                          {bill.taxPercentage !== undefined && bill.taxPercentage > 0 && (\n                            <HStack justify=\"space-between\">\n                              <Text fontSize=\"md\" color={textSecondary}>GST ({bill.taxPercentage}%):</Text>\n                              <Text fontSize=\"md\" color={textPrimary}>\n                                ${bill.taxAmount !== undefined ? formatCurrency(bill.taxAmount) : '0.00'} {bill.currency || \"AUD\"}\n                              </Text>\n                            </HStack>\n                          )}\n\n                          {/* Divider */}\n                          <Divider />\n\n                          {/* Total */}\n                          <HStack justify=\"space-between\">\n                            <Text fontWeight=\"bold\" fontSize=\"lg\" color={textPrimary}>Total:</Text>\n                            <Text fontWeight=\"bold\" fontSize=\"lg\" color={textPrimary}>\n                              ${(bill.totalAmount && bill.totalAmount > 0) ?\n                                formatCurrency(bill.totalAmount) :\n                                formatCurrency(bill.lineItems?.reduce((total: number, item: any) => total + Number(item.amount), 0) || 0)} {bill.currency || \"AUD\"}\n                            </Text>\n                          </HStack>\n                        </VStack>\n                      </Box>\n                    </CardBody>\n                  </Card>\n                </Box>\n\n                {/* Payment Options - Placed after all bill details */}\n                {!bill.isPaid && (\n                  <Box>\n                    <Card\n                      variant=\"outline\"\n                      borderColor=\"blue.500\"\n                      borderWidth=\"2px\"\n                      bg={cardGradientBg}\n                      boxShadow=\"0 4px 20px 0 rgba(59, 130, 246, 0.15)\"\n                    >\n                      <CardBody>\n                        <PaymentMethodSelector\n                          billId={bill.id}\n                          amount={\n                            (bill.totalAmount && bill.totalAmount > 0)\n                              ? bill.totalAmount\n                              : (bill.lineItems?.reduce((total: number, item: any) => total + Number(item.amount), 0) || 0)\n                          }\n                          acceptCardPayment={bill.acceptCardPayment ?? true}\n                          acceptCryptoPayment={bill.acceptCryptoPayment ?? false}\n                          issuerBankDetails={\n                            effectiveIssuerData?.paymentReceivingDetails?.bankAccount\n                          }\n                          issuerWalletAddress={\n                            effectiveIssuerData?.paymentReceivingDetails?.cryptoWallets?.find(\n                              (wallet: any) => wallet.network === \"BTC\"\n                            )?.walletAddress\n                          }\n                          cryptoDiscountPercentage={\n                            effectiveIssuerData?.paymentReceivingDetails?.cryptoDiscountPercentage\n                          }\n                          onPaymentComplete={() => {\n                            console.log('[BillDetails] Payment completed, refreshing bill data');\n                            // Refresh the bill data to update payment status\n                            client.refetchQueries({\n                              include: [GET_BILL],\n                            });\n                            toast({\n                              title: \"Payment Successful\",\n                              description: \"Your payment has been processed successfully.\",\n                              status: \"success\",\n                              duration: 5000,\n                              isClosable: true,\n                            });\n                          }}\n                        />\n                      </CardBody>\n                    </Card>\n                  </Box>\n                )}\n              </VStack>\n            </CardBody>\n          </Card>\n        </VStack>\n      </Container>\n      {/* )} */}\n      \n      {/* Duplicate Bill Modal */}\n      <Modal isOpen={isDuplicateModalOpen} onClose={closeDuplicateModal} size=\"xl\">\n        <ModalOverlay />\n        <ModalContent bg={cardGradientBg} borderColor={cardBorder} borderWidth=\"1px\">\n          <ModalHeader color={textPrimary}>Create Partial Bill</ModalHeader>\n          <ModalCloseButton color={textPrimary} />\n          <ModalBody>\n            <VStack spacing={6} align=\"stretch\">\n              <Box>\n                <FormLabel color={textPrimary} mb={3}>\n                  Percentage of Total\n                </FormLabel>\n                <HStack spacing={4} align=\"start\">\n                  <Box flex={1}>\n                    <Slider\n                      value={duplicatePercentage > 10 ? duplicatePercentage : 10}\n                      onChange={setDuplicatePercentage}\n                      min={10}\n                      max={100}\n                      step={1}\n                      colorScheme=\"blue\"\n                    >\n                      <SliderTrack bg=\"gray.600\">\n                        <SliderFilledTrack />\n                      </SliderTrack>\n                      <SliderThumb boxSize={6} />\n                    </Slider>\n                    <HStack justify=\"space-between\" mt={2}>\n                      <Text fontSize=\"sm\" color={textMuted}>10%</Text>\n                      <Text fontSize=\"sm\" color={textMuted}>50%</Text>\n                      <Text fontSize=\"sm\" color={textMuted}>100%</Text>\n                    </HStack>\n                    <Text fontSize=\"xs\" color={textMuted} mt={1}>\n                      Use slider for rough percentages (10-100%), or type exact decimal in the input →\n                    </Text>\n                  </Box>\n                  <Box width=\"140px\">\n                    <InputGroup size=\"md\">\n                      <Input\n                        type=\"number\"\n                        value={duplicatePercentage}\n                        onChange={(e) => {\n                          const val = parseFloat(e.target.value);\n                          if (!isNaN(val) && val >= 0.01 && val <= 100) {\n                            setDuplicatePercentage(val);\n                          }\n                        }}\n                        min={0.01}\n                        max={100}\n                        step=\"any\"\n                        bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                        borderColor={cardBorder}\n                        color={textPrimary}\n                        textAlign=\"right\"\n                      />\n                      <InputRightAddon bg={colorMode === 'light' ? \"gray.100\" : \"gray.700\"} color={textPrimary}>\n                        %\n                      </InputRightAddon>\n                    </InputGroup>\n                    <Text fontSize=\"xs\" color={textMuted} mt={1} textAlign=\"center\">\n                      Any % (e.g., 11.90688813)\n                    </Text>\n                  </Box>\n                </HStack>\n              </Box>\n\n              <Box>\n                <FormLabel color={textPrimary}>Payment Terms (Optional)</FormLabel>\n                <Textarea\n                  placeholder={`${duplicatePercentage}% upfront payment`}\n                  value={duplicatePaymentTerms}\n                  onChange={(e) => setDuplicatePaymentTerms(e.target.value)}\n                  bg={colorMode === 'light' ? \"white\" : \"rgba(255, 255, 255, 0.05)\"}\n                  borderColor={cardBorder}\n                  color={textPrimary}\n                  _placeholder={{ color: textMuted }}\n                  _hover={{ borderColor: textSecondary }}\n                  _focus={{\n                    borderColor: colorMode === 'light' ? \"#007AFF\" : \"#3B82F6\",\n                    boxShadow: colorMode === 'light' ? \"0 0 0 1px rgba(0, 122, 255, 0.2)\" : \"0 0 0 1px rgba(59, 130, 246, 0.2)\"\n                  }}\n                  rows={2}\n                />\n              </Box>\n\n              <Box p={4} bg={colorMode === 'light' ? \"gray.50\" : \"rgba(0, 0, 0, 0.3)\"} borderRadius=\"md\">\n                <Text color={textPrimary} fontWeight=\"bold\" mb={3}>\n                  New Bill Preview:\n                </Text>\n                <VStack align=\"stretch\" spacing={2}>\n                  {bill?.lineItems?.map((item: any, index: number) => (\n                    <HStack key={index} justify=\"space-between\">\n                      <Text color={textSecondary} fontSize=\"sm\" noOfLines={1}>\n                        {item.description}\n                      </Text>\n                      <Text color={textPrimary} fontWeight=\"bold\">\n                        ${formatCurrency((item.amount * duplicatePercentage) / 100)}\n                      </Text>\n                    </HStack>\n                  ))}\n                  <Divider borderColor={cardBorder} />\n                  <HStack justify=\"space-between\">\n                    <Text color={textPrimary} fontWeight=\"bold\">Total:</Text>\n                    <Text color={textPrimary} fontWeight=\"bold\" fontSize=\"lg\">\n                      ${(() => {\n                        // Calculate total from line items if totalAmount is not available\n                        const originalTotal = bill?.totalAmount && bill.totalAmount > 0\n                          ? bill.totalAmount\n                          : bill?.lineItems?.reduce((sum: number, item: any) => sum + Number(item.amount), 0) || 0;\n                        return formatCurrency(originalTotal * duplicatePercentage / 100);\n                      })()} {bill?.currency || 'AUD'}\n                    </Text>\n                  </HStack>\n                </VStack>\n              </Box>\n            </VStack>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={closeDuplicateModal} color={textPrimary}>\n              Cancel\n            </Button>\n            <Button colorScheme=\"blue\" onClick={handleDuplicateBill}>\n              Create {duplicatePercentage}% Bill\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      {/* Change Client Modal */}\n      <Modal isOpen={isChangeClientModalOpen} onClose={closeChangeClientModal} size=\"xl\">\n        <ModalOverlay />\n        <ModalContent bg={bg} color={textPrimary}>\n          <ModalHeader>Change Bill Client</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack spacing={4} align=\"stretch\">\n              <Text color={textSecondary}>\n                Select a new client for this bill. This will update the billing information.\n              </Text>\n\n              {clientData?.getClientDetailsByBillId && (\n                <Box p={4} borderRadius=\"md\" bg={colorMode === 'dark' ? 'rgba(30, 30, 35, 0.8)' : 'gray.50'}>\n                  <Text fontSize=\"sm\" fontWeight=\"bold\" color={textSecondary} mb={2}>\n                    Current Client:\n                  </Text>\n                  <Text color={textPrimary}>\n                    {clientData.getClientDetailsByBillId.fName} {clientData.getClientDetailsByBillId.lName}\n                  </Text>\n                  <Text fontSize=\"sm\" color={textSecondary}>\n                    {clientData.getClientDetailsByBillId.email}\n                  </Text>\n                </Box>\n              )}\n\n              <Divider />\n\n              <Box>\n                <Text fontSize=\"sm\" fontWeight=\"bold\" color={textSecondary} mb={3}>\n                  Select New Client:\n                </Text>\n                <ClientSearchSelector\n                  selectedClients={selectedNewClientId}\n                  onSelectionChange={setSelectedNewClientId}\n                  allowMultiple={false}\n                  placeholder=\"Search for a client...\"\n                />\n              </Box>\n            </VStack>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={closeChangeClientModal} color={textPrimary}>\n              Cancel\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleChangeClient}\n              isDisabled={selectedNewClientId.length === 0}\n            >\n              Change Client\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      <FooterWithFourColumns />\n    </Box>\n  );\n};\n\nexport default BillDetails; ","import React from 'react';\nimport { Document, Page, Text, View, StyleSheet, Font, Link } from '@react-pdf/renderer';\nimport { brandConfig } from '../../../brandConfig';\n\n// Define styles for the PDF\nconst styles = StyleSheet.create({\n    page: {\n        fontFamily: 'Helvetica',\n        fontSize: 11,\n        paddingTop: 30,\n        paddingLeft: 60,\n        paddingRight: 60,\n        paddingBottom: 40,\n        lineHeight: 1.5,\n        flexDirection: 'column',\n    },\n    header: {\n        flexDirection: 'row',\n        marginBottom: 20,\n        paddingBottom: 20,\n        borderBottomWidth: 2,\n        borderBottomColor: '#112233',\n    },\n    headerLeft: {\n        flex: 1,\n    },\n    headerRight: {\n        flex: 1,\n        textAlign: 'right',\n    },\n    title: {\n        fontSize: 24,\n        marginBottom: 10,\n        fontWeight: 'bold',\n        color: '#112233',\n    },\n    billInfo: {\n        flexDirection: 'row',\n        marginBottom: 20,\n    },\n    billInfoLeft: {\n        flex: 1,\n    },\n    billInfoRight: {\n        flex: 1,\n    },\n    section: {\n        marginBottom: 15,\n    },\n    sectionTitle: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        marginBottom: 8,\n        color: '#112233',\n        borderBottomWidth: 1,\n        borderBottomColor: '#112233',\n        paddingBottom: 4,\n    },\n    row: {\n        flexDirection: 'row',\n        marginBottom: 5,\n    },\n    label: {\n        fontSize: 10,\n        fontWeight: 'bold',\n        marginRight: 10,\n        color: '#666',\n        width: 100,\n    },\n    value: {\n        fontSize: 10,\n        flex: 1,\n    },\n    table: {\n        marginTop: 15,\n        marginBottom: 20,\n    },\n    tableHeader: {\n        flexDirection: 'row',\n        borderBottomWidth: 2,\n        borderBottomColor: '#112233',\n        backgroundColor: '#f5f5f5',\n        paddingTop: 8,\n        paddingBottom: 8,\n    },\n    tableRow: {\n        flexDirection: 'row',\n        borderBottomWidth: 1,\n        borderBottomColor: '#e0e0e0',\n        paddingTop: 8,\n        paddingBottom: 8,\n    },\n    tableCol: {\n        fontSize: 10,\n        paddingLeft: 8,\n        paddingRight: 8,\n    },\n    tableColHeader: {\n        fontSize: 11,\n        fontWeight: 'bold',\n        paddingLeft: 8,\n        paddingRight: 8,\n        color: '#112233',\n    },\n    descriptionCol: {\n        width: '50%',\n    },\n    dateCol: {\n        width: '25%',\n    },\n    amountCol: {\n        width: '25%',\n        textAlign: 'right',\n    },\n    totalSection: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        marginTop: 15,\n        paddingTop: 15,\n        borderTopWidth: 2,\n        borderTopColor: '#112233',\n    },\n    totalLabel: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        marginRight: 20,\n        color: '#112233',\n    },\n    totalAmount: {\n        fontSize: 14,\n        fontWeight: 'bold',\n        color: '#112233',\n        width: 100,\n        textAlign: 'right',\n    },\n    paymentStatus: {\n        marginTop: 20,\n        padding: 10,\n        backgroundColor: '#f9f9f9',\n        borderRadius: 4,\n    },\n    paymentStatusText: {\n        fontSize: 12,\n        fontWeight: 'bold',\n        textAlign: 'center',\n    },\n    paymentPaid: {\n        color: '#22c55e',\n    },\n    paymentUnpaid: {\n        color: '#ef4444',\n    },\n    footer: {\n        marginTop: 40,\n        paddingTop: 20,\n        borderTopWidth: 1,\n        borderTopColor: '#e0e0e0',\n        textAlign: 'center',\n        fontSize: 9,\n        color: '#666',\n    },\n});\n\ninterface BillPDFProps {\n    bill: any;\n    clientData?: any;\n    issuerData?: any;\n}\n\nexport const BillPDF: React.FC<BillPDFProps> = ({ bill, clientData, issuerData }) => {\n    // Debug logging\n    console.log('[BillPDF] Bill data:', {\n        id: bill?.id,\n        acceptCardPayment: bill?.acceptCardPayment,\n        acceptCryptoPayment: bill?.acceptCryptoPayment,\n        status: bill?.status\n    });\n\n    const formatDate = (dateString: string | { $date: string }) => {\n        const date = dateString instanceof Object ? dateString.$date : dateString;\n        return new Date(date).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n        });\n    };\n\n    const formatCurrency = (amount: number) => {\n        return amount.toLocaleString(\"en-US\", {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        });\n    };\n\n    const calculateTotal = () => {\n        if (bill.totalAmount && bill.totalAmount > 0) {\n            return formatCurrency(bill.totalAmount);\n        }\n        if (bill.lineItems?.length > 0) {\n            const total = bill.lineItems.reduce((total: number, item: any) => total + Number(item.amount), 0);\n            return formatCurrency(total);\n        }\n        return '0.00';\n    };\n\n    const calculateTotalNumeric = () => {\n        if (bill.totalAmount && bill.totalAmount > 0) {\n            return bill.totalAmount;\n        }\n        if (bill.lineItems?.length > 0) {\n            return bill.lineItems.reduce((total: number, item: any) => total + Number(item.amount), 0);\n        }\n        return 0;\n    };\n\n    // Rule: Display only the first 4 digits of the MongoDB ID for invoice ID\n    const getDisplayBillId = (fullId: string) => {\n        return fullId.substring(0, 4);\n    };\n\n    return (\n        <Document>\n            <Page size=\"A4\" style={styles.page}>\n                {/* Header */}\n                <View style={styles.header}>\n                    <View style={styles.headerLeft}>\n                        <Text style={styles.title}>INVOICE</Text>\n                        <Text>Invoice ID: {getDisplayBillId(bill.id)}</Text>\n                        <Text>Status: {bill.status}</Text>\n                    </View>\n                    <View style={styles.headerRight}>\n                        <Text>Date: {formatDate(bill.createdAt)}</Text>\n                        {bill.status === 'SENT' && (\n                            <Text>Sent: {formatDate(bill.updatedAt)}</Text>\n                        )}\n                    </View>\n                </View>\n\n                {/* Bill From/To Information */}\n                <View style={styles.billInfo}>\n                    <View style={styles.billInfoLeft}>\n                        <View style={styles.section}>\n                            <Text style={styles.sectionTitle}>Bill From:</Text>\n                            {issuerData?.getBillIssuerDetails ? (\n                                <>\n                                    {(brandConfig.contact.businessName || issuerData.getBillIssuerDetails.businessName) && (\n                                        <View style={styles.row}>\n                                            <Text style={styles.label}>Business:</Text>\n                                            <Text style={styles.value}>{brandConfig.contact.businessName || issuerData.getBillIssuerDetails.businessName}</Text>\n                                        </View>\n                                    )}\n                                    <View style={styles.row}>\n                                        <Text style={styles.label}>Contact:</Text>\n                                        <Text style={styles.value}>\n                                            {brandConfig.contact.contactName || `${issuerData.getBillIssuerDetails.fName} ${issuerData.getBillIssuerDetails.lName}`}\n                                        </Text>\n                                    </View>\n                                    <View style={styles.row}>\n                                        <Text style={styles.label}>Email:</Text>\n                                        <Text style={styles.value}>{brandConfig.contact.email || issuerData.getBillIssuerDetails.email}</Text>\n                                    </View>\n                                    <View style={styles.row}>\n                                        <Text style={styles.label}>Phone:</Text>\n                                        <Text style={styles.value}>{brandConfig.contact.phone || issuerData.getBillIssuerDetails.phoneNumber}</Text>\n                                    </View>\n                                    {issuerData.getBillIssuerDetails.businessRegistrationNumber && (\n                                        <View style={styles.row}>\n                                            <Text style={styles.label}>ABN/ACN:</Text>\n                                            <Text style={styles.value}>{issuerData.getBillIssuerDetails.businessRegistrationNumber}</Text>\n                                        </View>\n                                    )}\n                                </>\n                            ) : (\n                                <Text style={styles.value}>Issuer information not available</Text>\n                            )}\n                        </View>\n                    </View>\n\n                    <View style={styles.billInfoRight}>\n                        <View style={styles.section}>\n                            <Text style={styles.sectionTitle}>Bill To:</Text>\n                            {clientData?.getClientDetailsByBillId ? (\n                                <>\n                                    <View style={styles.row}>\n                                        <Text style={styles.label}>Name:</Text>\n                                        <Text style={styles.value}>\n                                            {clientData.getClientDetailsByBillId.fName} {clientData.getClientDetailsByBillId.lName}\n                                        </Text>\n                                    </View>\n                                    <View style={styles.row}>\n                                        <Text style={styles.label}>Email:</Text>\n                                        <Text style={styles.value}>{clientData.getClientDetailsByBillId.email}</Text>\n                                    </View>\n                                    {clientData.getClientDetailsByBillId.phoneNumber && (\n                                        <View style={styles.row}>\n                                            <Text style={styles.label}>Phone:</Text>\n                                            <Text style={styles.value}>{clientData.getClientDetailsByBillId.phoneNumber}</Text>\n                                        </View>\n                                    )}\n                                    {clientData.getClientDetailsByBillId.businessName && (\n                                        <View style={styles.row}>\n                                            <Text style={styles.label}>Business:</Text>\n                                            <Text style={styles.value}>{clientData.getClientDetailsByBillId.businessName}</Text>\n                                        </View>\n                                    )}\n                                </>\n                            ) : (\n                                <Text style={styles.value}>Client information not available</Text>\n                            )}\n                        </View>\n                    </View>\n                </View>\n\n                {/* Line Items Table */}\n                <View style={styles.section}>\n                    <Text style={styles.sectionTitle}>Services & Items</Text>\n                    <View style={styles.table}>\n                        <View style={styles.tableHeader}>\n                            <Text style={[styles.tableColHeader, styles.descriptionCol]}>Description</Text>\n                            <Text style={[styles.tableColHeader, styles.dateCol]}>Date</Text>\n                            <Text style={[styles.tableColHeader, styles.amountCol]}>Amount (AUD)</Text>\n                        </View>\n                        {bill.lineItems && bill.lineItems.map((item: any, index: number) => (\n                            <View key={index} style={styles.tableRow}>\n                                <Text style={[styles.tableCol, styles.descriptionCol]}>{item.description}</Text>\n                                <Text style={[styles.tableCol, styles.dateCol]}>{formatDate(item.createdAt)}</Text>\n                                <Text style={[styles.tableCol, styles.amountCol]}>${formatCurrency(Number(item.amount))}</Text>\n                            </View>\n                        ))}\n                    </View>\n                </View>\n\n                {/* Total */}\n                <View style={styles.totalSection}>\n                    <Text style={styles.totalLabel}>Total Amount ({bill.currency || 'AUD'}):</Text>\n                    <Text style={styles.totalAmount}>${calculateTotal()} {bill.currency || 'AUD'}</Text>\n                </View>\n\n                {/* Payment Status */}\n                <View style={styles.paymentStatus}>\n                    <Text style={[\n                        styles.paymentStatusText,\n                        bill.isPaid ? styles.paymentPaid : styles.paymentUnpaid\n                    ]}>\n                        Payment Status: {bill.isPaid ? 'PAID' : 'UNPAID'}\n                    </Text>\n                </View>\n\n                {/* Payment Information */}\n                {issuerData?.getBillIssuerDetails?.paymentReceivingDetails && (\n                    <View style={[styles.section, { marginBottom: 30 }]}>\n                        <Text style={styles.sectionTitle}>Payment Information</Text>\n\n                        {/* Bank Account */}\n                        {issuerData.getBillIssuerDetails.paymentReceivingDetails.bankAccount && (\n                            <View style={{ marginBottom: 10 }}>\n                                <Text style={{ fontSize: 11, fontWeight: 'bold', marginBottom: 5 }}>Bank Transfer:</Text>\n                                <View style={styles.row}>\n                                    <Text style={styles.label}>Account Name:</Text>\n                                    <Text style={styles.value}>{issuerData.getBillIssuerDetails.paymentReceivingDetails.bankAccount.accountName}</Text>\n                                </View>\n                                <View style={styles.row}>\n                                    <Text style={styles.label}>BSB:</Text>\n                                    <Text style={styles.value}>{issuerData.getBillIssuerDetails.paymentReceivingDetails.bankAccount.bsb}</Text>\n                                </View>\n                                <View style={styles.row}>\n                                    <Text style={styles.label}>Account:</Text>\n                                    <Text style={styles.value}>{issuerData.getBillIssuerDetails.paymentReceivingDetails.bankAccount.accountNumber}</Text>\n                                </View>\n                            </View>\n                        )}\n\n                        {/* Payment Reference */}\n                        <View style={styles.row}>\n                            <Text style={styles.label}>Reference:</Text>\n                            <Text style={styles.value}>INV-{bill.id.substring(0, 4).toUpperCase()}</Text>\n                        </View>\n\n                        {/* Online Payment Options */}\n                        {((issuerData.getBillIssuerDetails.paymentReceivingDetails.acceptedMethods?.includes('STRIPE') && bill.acceptCardPayment !== false) || \n                          (issuerData.getBillIssuerDetails.paymentReceivingDetails.acceptedMethods?.includes('CRYPTO') && bill.acceptCryptoPayment === true)) && (\n                            <View style={{ marginTop: 10, marginBottom: 15, padding: 10, backgroundColor: '#f7f9fc', borderRadius: 5, border: '1px solid #e0e0e0' }}>\n                                <Text style={{ fontSize: 11, fontWeight: 'bold', marginBottom: 8, color: '#333' }}>Online Payment Options</Text>\n                                \n                                {/* Generate the payment URL - in production this should use actual domain */}\n                                {(() => {\n                                    const baseUrl = 'https://tommillerservices.com';\n                                    const paymentUrl = `${baseUrl}/bill/${bill.id}`;\n                                    \n                                    return (\n                                        <View>\n                                            {issuerData.getBillIssuerDetails.paymentReceivingDetails.acceptedMethods?.includes('STRIPE') && \n                                             bill.acceptCardPayment !== false && (\n                                                <View style={{ marginBottom: 5 }}>\n                                                    <View style={styles.row}>\n                                                        <Text style={styles.label}>Credit/Debit Card:</Text>\n                                                        <Link src={paymentUrl} style={{ fontSize: 10, color: '#007AFF', textDecoration: 'underline', flex: 1 }}>\n                                                            Pay with Visa, Mastercard, or Amex\n                                                        </Link>\n                                                    </View>\n                                                </View>\n                                            )}\n                                            \n                                            {issuerData.getBillIssuerDetails.paymentReceivingDetails.acceptedMethods?.includes('CRYPTO') && \n                                             bill.acceptCryptoPayment === true && (\n                                                <View style={{ marginBottom: 5 }}>\n                                                    <View style={styles.row}>\n                                                        <Text style={styles.label}>Bitcoin (BTC):</Text>\n                                                        <View style={{ flex: 1 }}>\n                                                            <Link src={paymentUrl} style={{ fontSize: 10, color: '#007AFF', textDecoration: 'underline' }}>\n                                                                Pay with Bitcoin Silent Payments\n                                                                {issuerData.getBillIssuerDetails.paymentReceivingDetails.cryptoDiscountPercentage && \n                                                                    ` (${issuerData.getBillIssuerDetails.paymentReceivingDetails.cryptoDiscountPercentage}% discount)`\n                                                                }\n                                                            </Link>\n                                                            {issuerData.getBillIssuerDetails.paymentReceivingDetails.cryptoDiscountPercentage && (\n                                                                <Text style={{ fontSize: 9, color: '#28a745', marginTop: 2 }}>\n                                                                    Save ${formatCurrency(calculateTotalNumeric() * issuerData.getBillIssuerDetails.paymentReceivingDetails.cryptoDiscountPercentage / 100)} {bill.currency || 'AUD'}\n                                                                </Text>\n                                                            )}\n                                                        </View>\n                                                    </View>\n                                                </View>\n                                            )}\n                                            \n                                            <View style={{ marginTop: 8, padding: 5, backgroundColor: '#e8f4f8', borderRadius: 3 }}>\n                                                <Text style={{ fontSize: 9, color: '#666', marginBottom: 3 }}>\n                                                    Payment Link: \n                                                </Text>\n                                                <Link src={paymentUrl} style={{ fontSize: 9, color: '#007AFF', textDecoration: 'underline' }}>\n                                                    {paymentUrl}\n                                                </Link>\n                                            </View>\n                                        </View>\n                                    );\n                                })()}\n                            </View>\n                        )}\n\n                        {/* Other payment methods */}\n                        {issuerData.getBillIssuerDetails.paymentReceivingDetails.acceptedMethods && (\n                            <View style={[styles.row, { marginTop: 10, marginBottom: 20 }]}>\n                                <Text style={styles.label}>All Methods:</Text>\n                                <Text style={styles.value}>\n                                    {issuerData.getBillIssuerDetails.paymentReceivingDetails.acceptedMethods\n                                        .filter((method: string) => {\n                                            // Always show bank transfer\n                                            if (method === 'BANK_TRANSFER') return true;\n                                            // Only show Stripe if card payment is enabled (default true if undefined)\n                                            if (method === 'STRIPE') return bill.acceptCardPayment !== false;\n                                            // Only show Crypto if crypto payment is explicitly enabled\n                                            if (method === 'CRYPTO') return bill.acceptCryptoPayment === true;\n                                            // Show other methods by default\n                                            return true;\n                                        })\n                                        .map((method: string) => {\n                                            switch(method) {\n                                                case 'BANK_TRANSFER': return 'Bank Transfer';\n                                                case 'STRIPE': return 'Credit Card';\n                                                case 'CRYPTO': return 'Bitcoin';\n                                                case 'PAYPAL': return 'PayPal';\n                                                default: return method;\n                                            }\n                                        })\n                                        .join(', ')}\n                                </Text>\n                            </View>\n                        )}\n                    </View>\n                )}\n\n                {/* Footer */}\n                <View style={styles.footer}>\n                    <Text style={{ fontSize: 10, color: '#666' }}>\n                        Thank you for your business! • Generated on {new Date().toLocaleDateString()}\n                    </Text>\n                </View>\n            </Page>\n        </Document>\n    );\n}; ","import React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  VStack,\n  HStack,\n  Checkbox,\n  CheckboxGroup,\n  Text,\n  Tag,\n  TagLabel,\n  Wrap,\n  WrapItem,\n  Badge,\n  Button,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Divider,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n} from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { useQuery, gql } from '@apollo/client';\nimport { getColor, getComponent } from '../../../brandConfig';\nimport { Client } from \"../../../generated/graphql\";\n\nconst SEARCH_CLIENTS = gql`\n  query SearchClients($search: String, $tags: [String!]) {\n    searchClients(search: $search, tags: $tags) {\n      id\n      fName\n      lName\n      email\n      phoneNumber\n      tags\n    }\n  }\n`;\n\nconst GET_ALL_TAGS = gql`\n  query GetAllClientTags {\n    allClientTags\n  }\n`;\n\n\ninterface ClientSearchSelectorProps {\n  selectedClients: string[];\n  onSelectionChange: (clients: string[]) => void;\n  allowMultiple?: boolean;\n  placeholder?: string;\n}\n\nexport const ClientSearchSelector: React.FC<ClientSearchSelectorProps> = ({\n  selectedClients,\n  onSelectionChange,\n  allowMultiple = true,\n  placeholder = \"Search clients by name, email, or phone...\"\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [expandedSections, setExpandedSections] = useState<number[]>([0, 1]);\n  const toast = useToast();\n  \n  // Query all available tags\n  const { data: tagsData } = useQuery(GET_ALL_TAGS);\n  \n  // Search clients based on search term and tags\n  const { loading, data, error } = useQuery(SEARCH_CLIENTS, {\n    variables: {\n      search: searchTerm || undefined,\n      tags: selectedTags.length > 0 ? selectedTags : undefined,\n    },\n    skip: !searchTerm && selectedTags.length === 0,\n  });\n  \n  const textSecondary = getColor(\"text.secondary\");\n  const textMuted = getColor(\"text.muted\");\n  const borderColor = getColor(\"border.light\");\n  \n  const handleClientToggle = (clientId: string) => {\n    if (allowMultiple) {\n      if (selectedClients.includes(clientId)) {\n        onSelectionChange(selectedClients.filter(id => id !== clientId));\n      } else {\n        onSelectionChange([...selectedClients, clientId]);\n      }\n    } else {\n      onSelectionChange([clientId]);\n    }\n  };\n  \n  const handleTagToggle = (tag: string) => {\n    setSelectedTags(prev =>\n      prev.includes(tag)\n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n  \n  const handleSelectAll = () => {\n    if (data?.searchClients) {\n      const allIds = data.searchClients.map((client: Client) => client.id);\n      onSelectionChange(allIds);\n    }\n  };\n  \n  const handleClearSelection = () => {\n    onSelectionChange([]);\n  };\n  \n  const selectedCount = selectedClients.length;\n  const totalCount = data?.searchClients?.length || 0;\n  \n  return (\n    <VStack spacing={4} align=\"stretch\">\n      <Accordion allowMultiple index={expandedSections} onChange={(expandedIndex) => setExpandedSections(expandedIndex as number[])}>\n        {/* Search Section */}\n        <AccordionItem border=\"none\">\n          <AccordionButton px={0}>\n            <Box flex=\"1\" textAlign=\"left\">\n              <Text fontWeight=\"medium\">Search Clients</Text>\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n          <AccordionPanel px={0}>\n            <VStack spacing={3} align=\"stretch\">\n              {/* Search Input */}\n              <InputGroup>\n                <InputLeftElement pointerEvents=\"none\">\n                  <SearchIcon color={textMuted} />\n                </InputLeftElement>\n                <Input\n                  placeholder={placeholder}\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  bg={getComponent(\"form\", \"fieldBg\")}\n                  border=\"1px\"\n                  borderColor={getComponent(\"form\", \"fieldBorder\")}\n                  _focus={{\n                    borderColor: getComponent(\"form\", \"fieldBorderFocus\"),\n                    boxShadow: getComponent(\"form\", \"fieldShadowFocus\"),\n                  }}\n                />\n              </InputGroup>\n              \n              {/* Client Results */}\n              {loading && (\n                <HStack justify=\"center\" py={4}>\n                  <Spinner size=\"sm\" />\n                  <Text fontSize=\"sm\" color={textSecondary}>Searching...</Text>\n                </HStack>\n              )}\n              \n              {error && (\n                <Alert status=\"error\" borderRadius=\"md\">\n                  <AlertIcon />\n                  Error searching clients: {error.message}\n                </Alert>\n              )}\n              \n              {data?.searchClients && data.searchClients.length > 0 && (\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\" color={textSecondary}>\n                      Found {totalCount} client{totalCount !== 1 ? 's' : ''}\n                    </Text>\n                    {allowMultiple && (\n                      <HStack spacing={2}>\n                        <Button size=\"xs\" variant=\"link\" onClick={handleSelectAll}>\n                          Select All\n                        </Button>\n                        {selectedCount > 0 && (\n                          <Button size=\"xs\" variant=\"link\" onClick={handleClearSelection}>\n                            Clear\n                          </Button>\n                        )}\n                      </HStack>\n                    )}\n                  </HStack>\n                  \n                  <VStack\n                    align=\"stretch\"\n                    spacing={1}\n                    maxH=\"200px\"\n                    overflowY=\"auto\"\n                    border=\"1px\"\n                    borderColor={borderColor}\n                    borderRadius=\"md\"\n                    p={2}\n                  >\n                    {data.searchClients.map((client: Client) => (\n                      <Box\n                        key={client.id}\n                        p={2}\n                        borderRadius=\"md\"\n                        _hover={{ bg: getColor(\"background.overlay\") }}\n                      >\n                        <HStack justify=\"space-between\">\n                          <HStack \n                            spacing={3} \n                            flex={1}\n                            cursor=\"pointer\"\n                            onClick={() => handleClientToggle(client.id)}\n                          >\n                            <Box onClick={(e) => e.stopPropagation()}>\n                              <Checkbox\n                                isChecked={selectedClients.includes(client.id)}\n                                onChange={() => handleClientToggle(client.id)}\n                              />\n                            </Box>\n                            <VStack align=\"start\" spacing={0}>\n                              <Text fontSize=\"sm\" fontWeight=\"medium\">\n                                {client.fName} {client.lName}\n                              </Text>\n                              <Text fontSize=\"xs\" color={textMuted}>\n                                {client.email || client.phoneNumber || 'No contact info'}\n                              </Text>\n                            </VStack>\n                          </HStack>\n                          {client.tags && client.tags.length > 0 && (\n                            <Wrap spacing={1}>\n                              {client.tags.slice(0, 2).map(tag => (\n                                <WrapItem key={tag}>\n                                  <Tag size=\"sm\" variant=\"subtle\" colorScheme=\"blue\">\n                                    <TagLabel>{tag}</TagLabel>\n                                  </Tag>\n                                </WrapItem>\n                              ))}\n                              {client.tags.length > 2 && (\n                                <WrapItem>\n                                  <Badge fontSize=\"xs\" colorScheme=\"gray\">\n                                    +{client.tags.length - 2}\n                                  </Badge>\n                                </WrapItem>\n                              )}\n                            </Wrap>\n                          )}\n                        </HStack>\n                      </Box>\n                    ))}\n                  </VStack>\n                </Box>\n              )}\n              \n              {data?.searchClients && data.searchClients.length === 0 && (\n                <Text fontSize=\"sm\" color={textMuted} textAlign=\"center\" py={4}>\n                  No clients found matching your search\n                </Text>\n              )}\n            </VStack>\n          </AccordionPanel>\n        </AccordionItem>\n        \n        {/* Tag Filter Section */}\n        <AccordionItem border=\"none\">\n          <AccordionButton px={0}>\n            <Box flex=\"1\" textAlign=\"left\">\n              <HStack>\n                <Text fontWeight=\"medium\">Filter by Tags</Text>\n                {selectedTags.length > 0 && (\n                  <Badge colorScheme=\"blue\" fontSize=\"xs\">\n                    {selectedTags.length} selected\n                  </Badge>\n                )}\n              </HStack>\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n          <AccordionPanel px={0}>\n            {tagsData?.allClientTags && tagsData.allClientTags.length > 0 ? (\n              <VStack align=\"stretch\" spacing={3}>\n                <Text fontSize=\"sm\" color={textSecondary}>\n                  Select tags to filter clients:\n                </Text>\n                <Wrap spacing={2}>\n                  {tagsData.allClientTags.map((tag: string) => (\n                    <WrapItem key={tag}>\n                      <Tag\n                        size=\"md\"\n                        variant={selectedTags.includes(tag) ? \"solid\" : \"outline\"}\n                        colorScheme={selectedTags.includes(tag) ? \"blue\" : \"gray\"}\n                        cursor=\"pointer\"\n                        onClick={() => handleTagToggle(tag)}\n                        _hover={{\n                          transform: \"scale(1.05)\",\n                        }}\n                      >\n                        <TagLabel>{tag}</TagLabel>\n                      </Tag>\n                    </WrapItem>\n                  ))}\n                </Wrap>\n                {selectedTags.length > 0 && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => setSelectedTags([])}\n                  >\n                    Clear Tag Filters\n                  </Button>\n                )}\n              </VStack>\n            ) : (\n              <Text fontSize=\"sm\" color={textMuted} textAlign=\"center\" py={4}>\n                No tags available\n              </Text>\n            )}\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n      \n      {/* Selection Summary */}\n      {selectedCount > 0 && (\n        <Box>\n          <Divider my={2} />\n          <HStack justify=\"space-between\">\n            <Text fontSize=\"sm\" color={textSecondary}>\n              {selectedCount} client{selectedCount !== 1 ? 's' : ''} selected\n            </Text>\n            <Button\n              size=\"xs\"\n              variant=\"ghost\"\n              onClick={handleClearSelection}\n              colorScheme=\"red\"\n            >\n              Clear Selection\n            </Button>\n          </HStack>\n        </Box>\n      )}\n    </VStack>\n  );\n};","/**\n * Centralized markdown templates for import/export functionality\n * Single source of truth for FORMAT_SPEC.md and bill/project templates\n */\n\nexport const FORMAT_SPEC_CONTENT = `# Unified Markdown Format Specification\n\n**Version:** 1.0\n**Last Updated:** January 2025\n\nThis document defines the unified markdown format for importing/exporting projects, bills, and proposals.\n\n---\n\n## 📝 Format Overview\n\nThe unified format combines:\n- Project metadata (name, goal, description)\n- Bill metadata (currency, payment method, status)\n- Line items / Tasks (description, price, status, assignee)\n- Agreement text (optional)\n\nThis allows editing proposals in Claude and importing them into the system.\n\n---\n\n## 📋 Complete Example\n\n\\`\\`\\`markdown\n# One Group Website Development Proposal\n\n## Project Information\n**Project Name:** One Group Website Development\n**Project Goal:** Build unified digital platform for Solar, Finance & Property Investment\n**Project Description:** Complete 80-page unified platform representing all three One Group verticals with custom calculators, CRM integration, and SEO optimization.\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. Content Page: onegroupaustralasia.com.au/\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 2. Content Page: onegroupaustralasia.com.au/about\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n### 3. Custom Logic: onegroupaustralasia.com.au/solar/calculator\n**Price:** $300.00\n**Billable:** Yes\n**Status:** IN_PROGRESS\n**Assignee:** jane@tommillerservices.com\n\n### 4. Project management and coordination\n**Price:** $0.00\n**Billable:** No\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\n### 5. Internal testing and QA\n**Price:** [ENTER PRICE]\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n## Agreement\n\n[Full agreement text goes here...]\n\n**Between:** Tom Miller Services Pty Ltd (\"TMS\")\n**And:** One Group (\"Client\")\n\n[Rest of agreement...]\n\\`\\`\\`\n\n---\n\n## 🔍 Field Specifications\n\n### Project Information Section\n\n| Field | Required | Format | Example |\n|-------|----------|--------|---------|\n| Project Name | Yes | Plain text | \\`One Group Website Development\\` |\n| Project Goal | No | Max 17 words | \\`Build unified digital platform for Solar, Finance & Property\\` |\n| Project Description | No | Max 200 words | \\`Complete 80-page unified platform...\\` |\n\n**Notes:**\n- Project Goal is used for taglines (keep concise)\n- Project Description provides context for the work\n\n---\n\n### Bill Information Section\n\n| Field | Required | Format | Options |\n|-------|----------|--------|---------|\n| Currency | Yes | Uppercase code | \\`AUD\\`, \\`USD\\` |\n| Payment Method | No | Enum value | \\`AUD_TRANSFER\\`, \\`CARD\\`, \\`CRYPTO\\` |\n| Status | No | Enum value | \\`PROPOSAL\\`, \\`DRAFT\\`, \\`SENT\\` |\n\n**Notes:**\n- Currency affects how prices are parsed\n- If Payment Method is omitted, defaults to \\`AUD_TRANSFER\\`\n- If Status is omitted, defaults to \\`PROPOSAL\\`\n\n---\n\n### Line Items Section\n\nEach line item uses this format:\n\n\\`\\`\\`markdown\n### [Number]. [Description]\n**Price:** [Amount]\n**Billable:** [Yes/No]\n**Status:** [Status]\n**Assignee:** [Email or \"Unassigned\"]\n\\`\\`\\`\n\n#### Field Details:\n\n| Field | Required | Format | Options/Rules |\n|-------|----------|--------|---------------|\n| Number | No | Integer | Sequential numbering (1, 2, 3...) |\n| Description | Yes | Plain text | Task/line item description |\n| Price | Yes | Number with currency symbol | \\`$100.00\\`, \\`[ENTER PRICE]\\` (placeholder) |\n| Billable | No | Yes/No | Defaults to \\`Yes\\` if omitted |\n| Status | No | Enum | \\`PENDING\\`, \\`IN_PROGRESS\\`, \\`COMPLETED\\` (defaults to \\`PENDING\\`) |\n| Assignee | No | Email or \"Unassigned\" | Must be valid email or literal \"Unassigned\" |\n\n**Price Format Rules:**\n- With symbol: \\`$100.00\\`, \\`$100\\`, \\`$99.50\\`\n- Without symbol: \\`100.00\\`, \\`100\\`, \\`99.50\\`\n- Placeholder: \\`[ENTER PRICE]\\` ← **Fails import** (must add price before importing)\n- Zero price: \\`$0.00\\` ← Creates non-billable line item\n\n**Assignee Rules:**\n- Valid email: \\`tom@tommillerservices.com\\` ← Looks up user and assigns\n- Invalid email: Creates unassigned task and shows warning\n- \"Unassigned\": Creates unassigned task\n- Omitted: Creates unassigned task\n\n---\n\n## 🔄 Import/Export Behavior\n\n### Export (Project → Markdown)\n\nWhen exporting a project to markdown:\n1. **Project Info:** Populated from project.projectName, projectGoal, projectDescription\n2. **Bill Info:** Uses default values (Currency from tenant, Status = PROPOSAL)\n3. **Line Items:**\n   - Description from task.description\n   - Price = \\`[ENTER PRICE]\\` for billable tasks, \\`$0.00\\` for non-billable\n   - Billable from task.billable (defaults to Yes)\n   - Status from task.status\n   - Assignee from task.assignedTo.email (or \"Unassigned\")\n4. **Agreement:** Not included in export (add manually if needed)\n\n### Import (Markdown → Bill)\n\nWhen importing markdown to a bill:\n1. **Project Info:** Ignored (bill already linked to project)\n2. **Bill Info:** Updates bill.currency if specified\n3. **Line Items:**\n   - **Replaces all existing line items** (with confirmation modal)\n   - Creates new line items from each \\`### [Number]. [Description]\\` section\n   - Parses price and converts to cents for Stripe\n   - Sets billable flag based on price ($0 = non-billable)\n   - Assignee is stored but not enforced (bills don't have task assignments)\n4. **Agreement:** Ignored during bill import\n\n---\n\n## ✅ Validation Rules\n\n### During Export\n- [ ] At least 1 task exists in project\n- [ ] Task descriptions are not empty\n- [ ] All billable tasks marked with price placeholder\n\n### During Import to Bill\n- [ ] Valid markdown structure\n- [ ] At least 1 line item found\n- [ ] All line items have valid prices (no \\`[ENTER PRICE]\\` placeholders)\n- [ ] All prices are positive numbers or zero\n- [ ] Currency code is valid (AUD or USD)\n- [ ] Status enum is valid (if provided)\n\n---\n\n## 🚫 Common Parse Errors\n\n| Error | Cause | Solution |\n|-------|-------|----------|\n| \"No line items found\" | Missing \\`## Line Items\\` section | Add section header |\n| \"Invalid price format\" | Price has \\`[ENTER PRICE]\\` | Replace with actual dollar amount |\n| \"Currency not supported\" | Invalid currency code | Use \\`AUD\\` or \\`USD\\` |\n| \"Line item missing description\" | Empty description after number | Add description text |\n| \"Negative price not allowed\" | Price is negative | Use positive number or $0.00 |\n\n---\n\n## 🎨 Formatting Tips for Claude Editing\n\n### Adding New Line Items\n\\`\\`\\`markdown\n### 81. New feature: User authentication module\n**Price:** $500.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** tom@tommillerservices.com\n\\`\\`\\`\n\n### Bulk Price Adjustments\nAsk Claude: \"Increase all Content Page items by 20%\"\nClaude will update:\n- \\`**Price:** $100.00\\` → \\`**Price:** $120.00\\`\n\n### Reassigning Tasks\nAsk Claude: \"Assign all calculator tasks to jane@tommillerservices.com\"\nClaude will update:\n- \\`**Assignee:** Unassigned\\` → \\`**Assignee:** jane@tommillerservices.com\\`\n\n### Marking Tasks Complete\nAsk Claude: \"Mark tasks 1-10 as completed\"\nClaude will update:\n- \\`**Status:** PENDING\\` → \\`**Status:** COMPLETED\\`\n\n---\n\n**Version History:**\n- v1.0 (Jan 2025) - Initial specification\n`;\n\nexport const BILL_TEMPLATE_CONTENT = `# Bill Line Items Template\n\n## Project Information\n**Project Name:** [Enter project name]\n**Project Goal:** [Enter project goal - max 17 words]\n**Project Description:** [Enter project description - max 200 words]\n\n## Bill Information\n**Currency:** AUD\n**Payment Method:** AUD_TRANSFER\n**Status:** PROPOSAL\n\n## Line Items\n\n### 1. [Task description]\n**Price:** $100.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** email@example.com\n\n### 2. [Another task description]\n**Price:** $200.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n### 3. [Add more line items as needed]\n**Price:** $150.00\n**Billable:** Yes\n**Status:** PENDING\n**Assignee:** Unassigned\n\n## Agreement\n\n[Add your agreement text here, or leave this section empty]\n`;\n\n/**\n * Download a markdown file with the given content\n */\nexport const downloadMarkdownFile = (content: string, filename: string) => {\n  const blob = new Blob([content], { type: 'text/markdown' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n"],"names":["GET_TENANT_CONFIG","gql","_templateObject","_taggedTemplateLiteral","CREATE_BILL_PAYMENT","_templateObject2","CheckoutForm","_ref","billId","amount","onSuccess","stripe","useStripe","elements","useElements","isProcessing","setIsProcessing","useState","error","setError","toast","useToast","navigate","useNavigate","createBillPayment","useMutation","_jsx","onSubmit","async","event","preventDefault","console","log","cardElement","getElement","CardElement","Error","pmError","paymentMethod","createPaymentMethod","type","card","message","id","data","variables","paymentMethodId","response","requiresAction","clientSecret","confirmError","paymentIntent","confirmCardPayment","status","title","description","concat","toFixed","duration","isClosable","success","err","errorMessage","children","_jsxs","VStack","spacing","align","Box","p","borderWidth","borderRadius","borderColor","brandConfig","colors","border","darkCard","bg","background","main","options","style","base","fontSize","color","text","inverse","mutedDark","Alert","AlertIcon","Button","colorScheme","size","width","isDisabled","isLoading","loadingText","Text","textAlign","StripeBillPayment","_ref2","onPaymentComplete","stripePromise","setStripePromise","tenantId","localStorage","getItem","tenantData","loading","tenantLoading","tenantError","useQuery","skip","useEffect","_tenantData$tenant","_tenantData$tenant$ap","tenant","apiKeys","stripePublicKey","substring","loadStripe","envStripeKey","process","REACT_APP_STRIPE_PUBLIC_KEY","Card","cardGradient","CardBody","Spinner","primary","secondaryDark","boxShadow","backdropFilter","CardHeader","HStack","justify","fontWeight","Badge","px","py","Divider","Elements","handlePaymentSuccess","pt","variant","mb","generateSilentPaymentAddress","recipientStaticPubKey","uniqueIdentifier","Date","now","hash","btoa","replace","convertAUDToBTC","audAmount","Number","SilentBitcoinPayment","originalAmount","discountPercentage","issuerWalletAddress","silentPaymentAddress","setSilentPaymentAddress","btcAmount","setBtcAmount","paymentStatus","setPaymentStatus","txHash","setTxHash","isGenerating","setIsGenerating","isOpen","onToggle","useDisclosure","hasCopied","hasAddressCopied","onCopy","onAddressCopy","useClipboard","hasAmountCopied","onAmountCopy","toString","setTimeout","address","timer","clearTimeout","Tooltip","label","Icon","as","InfoIcon","w","h","getStatusColor","getStatusText","textDecoration","IconButton","icon","CheckIcon","CopyIcon","onClick","mt","_Fragment","display","QRCodeSVG","value","level","includeMargin","leftIcon","RefreshCcwIcon","regenerateAddress","newAddress","Code","flex","wordBreak","Collapse","in","fontStyle","handlePaymentInitiated","Link","href","isExternal","length","ExternalLinkIcon","ml","flexWrap","BankTransferPayment","bankDetails","onPaymentInitiated","referenceCode","toUpperCase","paymentInitiated","setPaymentInitiated","hasAccountNameCopied","onAccountNameCopy","accountName","hasBsbCopied","onBsbCopy","bsb","hasAccountNumberCopied","onAccountNumberCopy","accountNumber","hasReferenceCopied","onReferenceCopy","SimpleGrid","columns","bankName","swiftCode","PaymentMethodSelector","issuerBankDetails","cryptoDiscountPercentage","acceptCardPayment","acceptCryptoPayment","selectedMethod","setSelectedMethod","bitcoinDiscountedAmount","formatCurrency","toLocaleString","minimumFractionDigits","maximumFractionDigits","paymentMethods","name","Building2","badge","processingTime","available","sovereignty","privacyTooltip","CreditCard","Bitcoin","filter","method","primaryDark","md","map","cursor","medium","_hover","transform","transition","ChevronRight","placement","hasArrow","maxW","Info","undefined","BillStatus","GET_BILL","GET_CLIENT","TOGGLE_BILL_PAYMENT_STATUS","_templateObject3","TOGGLE_BILL_DRAFT_STATUS","_templateObject4","UPDATE_BILL_STATUS","_templateObject5","UPDATE_LINE_ITEM","_templateObject6","DELETE_LINE_ITEM","_templateObject7","UPDATE_BILL_PAYMENT_METHODS","_templateObject8","DUPLICATE_BILL_WITH_PERCENTAGE","_templateObject9","GET_CLIENT_BY_BILL","_templateObject0","CHANGE_BILL_CLIENT","_templateObject1","GET_BILL_ISSUER","_templateObject10","IMPORT_LINE_ITEMS_FROM_MARKDOWN","_templateObject11","GET_CURRENT_TENANT_DETAILS","_templateObject12","BillDetails","_user$permissions","_user$permissions2","_data$bill","_data$bill2","_data$bill5","_tenantData$currentTe","_tenantData$currentTe2","_tenantData$currentTe3","_tenantData$currentTe4","_tenantData$currentTe5","_tenantData$currentTe6","_tenantData$currentTe7","_data$bill6","_effectiveIssuerData$","_effectiveIssuerData$2","_effectiveIssuerData$3","_bill$lineItems","_bill$acceptCardPayme","_bill$acceptCryptoPay2","_bill$acceptCardPayme3","_bill$lineItems5","_bill$lineItems6","_bill$lineItems7","_bill$acceptCardPayme4","_bill$acceptCryptoPay3","_effectiveIssuerData$6","_effectiveIssuerData$7","_effectiveIssuerData$8","_effectiveIssuerData$9","_effectiveIssuerData$0","_bill$lineItems8","usePageTitle","useParams","user","isAuthenticated","authLoading","useAuth","colorMode","useColorMode","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","textMuted","statusSuccess","isAdmin","permissions","includes","getDisplayBillId","fullId","clientData","clientLoading","clientError","bill","clientId","React","hasClientId","projectId","_data$bill3","_data$bill4","hasData","hasClient","client","hasError","fName","lName","email","issuerData","issuerLoading","effectiveIssuerData","getBillIssuerDetails","businessName","currentTenant","companyDetails","companyName","billingEmail","phoneNumber","billingPhone","paymentReceivingDetails","lineItems","cryptoWallets","find","wallet","network","useApolloClient","updateBillStatus","updateLineItem","deleteLineItem","updateBillPaymentMethods","duplicateBillWithPercentage","toggleBillDraftStatus","changeBillClient","importLineItemsFromMarkdown","editingId","setEditingId","editValues","setEditValues","isDuplicateModalOpen","onOpen","openDuplicateModal","onClose","closeDuplicateModal","isChangeClientModalOpen","openChangeClientModal","closeChangeClientModal","isImportModalOpen","openImportModal","closeImportModal","duplicatePercentage","setDuplicatePercentage","duplicatePaymentTerms","setDuplicatePaymentTerms","importingFile","setImportingFile","fileInputRef","selectedNewClientId","setSelectedNewClientId","handleUpdatePaymentMethods","acceptCard","acceptCrypto","input","isPaid","currency","refetchQueries","query","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","billsModuleConfig","Container","Skeleton","height","FooterWithFourColumns","formatDate","dateString","date","Object","$date","year","month","day","hour","minute","timeZoneName","minH","Heading","DRAFT","PROPOSAL","handlePreviewPDF","ViewIcon","doc","BillPDF","pdfBlob","pdf","toBlob","url","URL","createObjectURL","link","document","createElement","download","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","DownloadIcon","SENT","Switch","isChecked","onChange","mutate","mutation","handleTogglePayment","sx","Select","e","newStatus","handleStatusChange","target","pl","createdAt","updatedAt","totalAmount","reduce","total","item","window","open","my","FormControl","alignItems","justifyContent","FormLabel","htmlFor","_bill$acceptCryptoPay","checked","_bill$acceptCardPayme2","EditIcon","contact","businessRegistrationNumber","contactName","phone","DeleteIcon","_bill$lineItems2","confirm","_bill$lineItems3","deletePromises","lineItemId","Promise","all","then","include","catch","_bill$projectId","_bill$projectId2","_bill$projectId3","_bill$projectId4","_bill$lineItems4","markdown","projectName","projectGoal","projectDescription","forEach","index","blob","Blob","fileName","ref","_event$target$files","file","files","endsWith","current","accept","_fileInputRef$current","downloadMarkdownFile","FORMAT_SPEC_CONTENT","BILL_TEMPLATE_CONTENT","overflowX","Table","Thead","Tr","Th","isNumeric","Tbody","isEditing","Td","overflow","textOverflow","Input","prev","_objectSpread","_focus","parseFloat","handleEdit","subtotal","taxPercentage","taxAmount","bankAccount","walletAddress","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Slider","min","max","step","SliderTrack","SliderFilledTrack","SliderThumb","boxSize","InputGroup","val","isNaN","InputRightAddon","Textarea","placeholder","_placeholder","rows","noOfLines","_bill$lineItems9","originalTotal","sum","ModalFooter","mr","paymentTermsText","duplicateData","percentage","paymentTerms","getClientDetailsByBillId","ClientSearchSelector","selectedClients","onSelectionChange","allowMultiple","newClientId","styles","StyleSheet","create","page","fontFamily","paddingTop","paddingLeft","paddingRight","paddingBottom","lineHeight","flexDirection","header","marginBottom","borderBottomWidth","borderBottomColor","headerLeft","headerRight","billInfo","billInfoLeft","billInfoRight","section","sectionTitle","row","marginRight","table","marginTop","tableHeader","backgroundColor","tableRow","tableCol","tableColHeader","descriptionCol","dateCol","amountCol","totalSection","borderTopWidth","borderTopColor","totalLabel","padding","paymentStatusText","paymentPaid","paymentUnpaid","footer","_issuerData$getBillIs","_issuerData$getBillIs2","_issuerData$getBillIs3","toLocaleDateString","calculateTotalNumeric","Document","Page","View","calculateTotal","acceptedMethods","_issuerData$getBillIs4","_issuerData$getBillIs5","paymentUrl","src","join","SEARCH_CLIENTS","GET_ALL_TAGS","_data$searchClients","searchTerm","setSearchTerm","selectedTags","setSelectedTags","expandedSections","setExpandedSections","tagsData","search","tags","handleClientToggle","handleClearSelection","selectedCount","totalCount","searchClients","Accordion","expandedIndex","AccordionItem","AccordionButton","AccordionIcon","AccordionPanel","InputLeftElement","pointerEvents","SearchIcon","getComponent","handleSelectAll","allIds","maxH","overflowY","stopPropagation","Checkbox","Wrap","slice","tag","WrapItem","Tag","TagLabel","allClientTags","t","handleTagToggle","content","filename"],"sourceRoot":""}