{"version":3,"file":"static/js/1096.457f554c.chunk.js","mappings":"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","sources":["pages/companyknowledge/CompanyKnowledgeViewer.tsx"],"sourcesContent":["import React from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport {\n    Box,\n    Container,\n    Heading,\n    Text,\n    Button,\n    HStack,\n    VStack,\n    Badge,\n    useColorMode,\n    useToast,\n    Spinner,\n    Alert,\n    AlertIcon,\n    Divider,\n    Tag,\n    TagLabel,\n    Card,\n    CardBody,\n    Flex,\n    IconButton,\n    Tooltip,\n} from \"@chakra-ui/react\";\nimport { EditIcon, DeleteIcon, StarIcon, CopyIcon } from \"@chakra-ui/icons\";\nimport { NavbarWithCallToAction } from \"../../components/chakra/NavbarWithCallToAction/NavbarWithCallToAction\";\nimport { FooterWithFourColumns } from \"../../components/chakra/FooterWithFourColumns/FooterWithFourColumns\";\nimport { ModuleBreadcrumb } from \"../../components/ModuleBreadcrumb\";\nimport companyKnowledgeModuleConfig from \"./moduleConfig\";\nimport { usePageTitle } from \"../../hooks/useDocumentTitle\";\nimport { getColor, brandConfig } from \"../../brandConfig\";\nimport { format } from \"date-fns\";\nimport DOMPurify from \"dompurify\";\n\nconst GET_ARTICLE = gql`\n    query GetArticle($id: ID!) {\n        companyKnowledgeArticle(id: $id) {\n            id\n            title\n            content\n            category\n            tags\n            visibility\n            allowPublicAccess\n            publicSlug\n            shareToken\n            isPinned\n            isPublished\n            viewCount\n            metaDescription\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\nconst DELETE_ARTICLE = gql`\n    mutation DeleteArticle($id: ID!) {\n        deleteCompanyKnowledgeArticle(id: $id)\n    }\n`;\n\nconst TOGGLE_PIN = gql`\n    mutation TogglePin($id: ID!) {\n        togglePinCompanyKnowledgeArticle(id: $id) {\n            id\n            isPinned\n        }\n    }\n`;\n\nconst CompanyKnowledgeViewer: React.FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const navigate = useNavigate();\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n    usePageTitle(\"View Article\");\n\n    const bgMain = getColor(\"background.main\", colorMode);\n    const cardGradientBg = getColor(\"background.cardGradient\", colorMode);\n    const cardBorder = getColor(\"border.darkCard\", colorMode);\n    const textPrimary = getColor(colorMode === 'light' ? \"text.primary\" : \"text.primaryDark\", colorMode);\n    const textSecondary = getColor(colorMode === 'light' ? \"text.secondary\" : \"text.secondaryDark\", colorMode);\n\n    const { data, loading, error } = useQuery(GET_ARTICLE, {\n        variables: { id },\n        skip: !id,\n    });\n\n    const [deleteArticle] = useMutation(DELETE_ARTICLE, {\n        onCompleted: () => {\n            toast({\n                title: \"Article deleted\",\n                status: \"success\",\n                duration: 3000,\n            });\n            navigate(\"/companyknowledge\");\n        },\n        onError: (error) => {\n            toast({\n                title: \"Error deleting article\",\n                description: error.message,\n                status: \"error\",\n                duration: 5000,\n            });\n        },\n    });\n\n    const [togglePin] = useMutation(TOGGLE_PIN, {\n        onCompleted: () => {\n            toast({\n                title: \"Pin status updated\",\n                status: \"success\",\n                duration: 2000,\n            });\n        },\n    });\n\n    const handleDelete = () => {\n        if (window.confirm(`Are you sure you want to delete \"${article.title}\"?`)) {\n            deleteArticle({ variables: { id } });\n        }\n    };\n\n    const copyShareLink = () => {\n        const link = article.allowPublicAccess\n            ? `${window.location.origin}/kb/${article.publicSlug}`\n            : article.shareToken\n                ? `${window.location.origin}/kb/shared/${article.shareToken}`\n                : null;\n\n        if (link) {\n            navigator.clipboard.writeText(link);\n            toast({\n                title: \"Link copied!\",\n                description: \"Share link copied to clipboard\",\n                status: \"success\",\n                duration: 2000,\n            });\n        }\n    };\n\n    if (loading) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Flex justify=\"center\" align=\"center\" minH=\"400px\">\n                        <Spinner size=\"xl\" />\n                    </Flex>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    if (error || !data?.companyKnowledgeArticle) {\n        return (\n            <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n                <NavbarWithCallToAction />\n                <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n                <Container maxW=\"container.xl\" py={8} flex=\"1\">\n                    <Alert status=\"error\">\n                        <AlertIcon />\n                        {error?.message || \"Article not found\"}\n                    </Alert>\n                </Container>\n                <FooterWithFourColumns />\n            </Box>\n        );\n    }\n\n    const article = data.companyKnowledgeArticle;\n    const sanitizedContent = DOMPurify.sanitize(article.content);\n\n    return (\n        <Box bg={bgMain} minH=\"100vh\" display=\"flex\" flexDirection=\"column\">\n            <NavbarWithCallToAction />\n            <ModuleBreadcrumb moduleConfig={companyKnowledgeModuleConfig} />\n\n            <Container maxW=\"container.lg\" py={8} flex=\"1\">\n                {/* Header */}\n                <VStack align=\"stretch\" spacing={6}>\n                    {/* Title & Actions */}\n                    <Flex justify=\"space-between\" align=\"start\">\n                        <VStack align=\"start\" spacing={2} flex={1}>\n                            <HStack>\n                                {article.isPinned && (\n                                    <StarIcon color=\"yellow.400\" boxSize={5} />\n                                )}\n                                <Heading color={textPrimary} fontFamily={brandConfig.fonts.heading}>\n                                    {article.title}\n                                </Heading>\n                            </HStack>\n                            <HStack spacing={2}>\n                                <Badge colorScheme={article.allowPublicAccess ? \"green\" : article.visibility === \"SHARED\" ? \"blue\" : \"purple\"}>\n                                    {article.allowPublicAccess ? \"PUBLIC\" : article.visibility}\n                                </Badge>\n                                {!article.isPublished && (\n                                    <Badge colorScheme=\"gray\">DRAFT</Badge>\n                                )}\n                                {article.category && (\n                                    <Badge colorScheme=\"cyan\">{article.category}</Badge>\n                                )}\n                            </HStack>\n                        </VStack>\n                        <HStack>\n                            <Tooltip label=\"Copy share link\">\n                                <IconButton\n                                    icon={<CopyIcon />}\n                                    aria-label=\"Copy link\"\n                                    onClick={copyShareLink}\n                                    variant=\"ghost\"\n                                />\n                            </Tooltip>\n                            <Tooltip label={article.isPinned ? \"Unpin\" : \"Pin\"}>\n                                <IconButton\n                                    icon={<StarIcon />}\n                                    aria-label=\"Toggle pin\"\n                                    onClick={() => togglePin({ variables: { id } })}\n                                    variant=\"ghost\"\n                                    color={article.isPinned ? \"yellow.400\" : undefined}\n                                />\n                            </Tooltip>\n                            <Button\n                                leftIcon={<EditIcon />}\n                                onClick={() => navigate(`/companyknowledge/${id}/edit`)}\n                                size=\"sm\"\n                            >\n                                Edit\n                            </Button>\n                            <Button\n                                leftIcon={<DeleteIcon />}\n                                colorScheme=\"red\"\n                                variant=\"outline\"\n                                onClick={handleDelete}\n                                size=\"sm\"\n                            >\n                                Delete\n                            </Button>\n                        </HStack>\n                    </Flex>\n\n                    {/* Metadata */}\n                    <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                        <CardBody>\n                            <HStack justify=\"space-between\" wrap=\"wrap\">\n                                <Text fontSize=\"sm\" color={textSecondary}>\n                                    👁️ {article.viewCount || 0} views\n                                </Text>\n                                <Text fontSize=\"sm\" color={textSecondary}>\n                                    Created: {format(new Date(article.createdAt), 'MMM dd, yyyy')}\n                                </Text>\n                                <Text fontSize=\"sm\" color={textSecondary}>\n                                    Updated: {format(new Date(article.updatedAt), 'MMM dd, yyyy')}\n                                </Text>\n                            </HStack>\n                        </CardBody>\n                    </Card>\n\n                    {/* Tags */}\n                    {article.tags && article.tags.length > 0 && (\n                        <HStack wrap=\"wrap\" spacing={2}>\n                            {article.tags.map((tag: string) => (\n                                <Tag key={tag} colorScheme=\"blue\">\n                                    <TagLabel>{tag}</TagLabel>\n                                </Tag>\n                            ))}\n                        </HStack>\n                    )}\n\n                    {/* Public/Share Link Info */}\n                    {(article.publicSlug || article.shareToken) && (\n                        <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                            <CardBody>\n                                <VStack align=\"stretch\" spacing={3}>\n                                    {article.publicSlug && (\n                                        <VStack align=\"stretch\" spacing={2}>\n                                            <Text fontSize=\"sm\" color={textSecondary} fontWeight=\"bold\">Public URL:</Text>\n                                            <HStack>\n                                                <Button\n                                                    as=\"a\"\n                                                    href={`/kb/${article.publicSlug}`}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                    colorScheme=\"green\"\n                                                    size=\"sm\"\n                                                    flex={1}\n                                                >\n                                                    🌐 Open Public Link\n                                                </Button>\n                                                <Button\n                                                    onClick={() => {\n                                                        navigator.clipboard.writeText(`${window.location.origin}/kb/${article.publicSlug}`);\n                                                        toast({\n                                                            title: \"Link copied!\",\n                                                            description: \"Public URL copied to clipboard\",\n                                                            status: \"success\",\n                                                            duration: 2000,\n                                                        });\n                                                    }}\n                                                    colorScheme=\"green\"\n                                                    variant=\"outline\"\n                                                    size=\"sm\"\n                                                >\n                                                    Copy\n                                                </Button>\n                                            </HStack>\n                                            <Text fontSize=\"xs\" color={textSecondary} fontFamily=\"mono\">\n                                                {window.location.origin}/kb/{article.publicSlug}\n                                            </Text>\n                                        </VStack>\n                                    )}\n                                    {article.shareToken && (\n                                        <VStack align=\"stretch\" spacing={2}>\n                                            <Text fontSize=\"sm\" color={textSecondary} fontWeight=\"bold\">Share URL:</Text>\n                                            <HStack>\n                                                <Button\n                                                    as=\"a\"\n                                                    href={`/kb/shared/${article.shareToken}`}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                    colorScheme=\"blue\"\n                                                    size=\"sm\"\n                                                    flex={1}\n                                                >\n                                                    🔐 Open Shared Link\n                                                </Button>\n                                                <Button\n                                                    onClick={() => {\n                                                        navigator.clipboard.writeText(`${window.location.origin}/kb/shared/${article.shareToken}`);\n                                                        toast({\n                                                            title: \"Link copied!\",\n                                                            description: \"Share URL copied to clipboard\",\n                                                            status: \"success\",\n                                                            duration: 2000,\n                                                        });\n                                                    }}\n                                                    colorScheme=\"blue\"\n                                                    variant=\"outline\"\n                                                    size=\"sm\"\n                                                >\n                                                    Copy\n                                                </Button>\n                                            </HStack>\n                                            <Text fontSize=\"xs\" color={textSecondary} fontFamily=\"mono\">\n                                                {window.location.origin}/kb/shared/{article.shareToken}\n                                            </Text>\n                                        </VStack>\n                                    )}\n                                </VStack>\n                            </CardBody>\n                        </Card>\n                    )}\n\n                    <Divider />\n\n                    {/* Article Content */}\n                    <Card bg={cardGradientBg} border=\"1px\" borderColor={cardBorder}>\n                        <CardBody>\n                            <Box\n                                className=\"article-content\"\n                                dangerouslySetInnerHTML={{ __html: sanitizedContent }}\n                                sx={{\n                                    '& h1': { fontSize: '2xl', fontWeight: 'bold', mb: 4, color: textPrimary },\n                                    '& h2': { fontSize: 'xl', fontWeight: 'bold', mb: 3, color: textPrimary },\n                                    '& h3': { fontSize: 'lg', fontWeight: 'bold', mb: 2, color: textPrimary },\n                                    '& p': { mb: 4, color: textPrimary },\n                                    '& ul, & ol': { ml: 6, mb: 4, color: textPrimary },\n                                    '& li': { mb: 2 },\n                                    '& a': { color: 'blue.500', textDecoration: 'underline' },\n                                    '& code': { bg: 'gray.100', px: 2, py: 1, borderRadius: 'md', fontSize: 'sm' },\n                                    '& pre': { bg: 'gray.100', p: 4, borderRadius: 'md', overflowX: 'auto', mb: 4 },\n                                    '& img': { maxW: '100%', borderRadius: 'md', my: 4 },\n                                    '& blockquote': { borderLeft: '4px solid', borderColor: 'blue.500', pl: 4, py: 2, fontStyle: 'italic', mb: 4 },\n                                }}\n                            />\n                        </CardBody>\n                    </Card>\n\n                    {/* Back Button */}\n                    <Button onClick={() => navigate(\"/companyknowledge\")} variant=\"outline\">\n                        ← Back to Articles\n                    </Button>\n                </VStack>\n            </Container>\n\n            <FooterWithFourColumns />\n        </Box>\n    );\n};\n\nexport default CompanyKnowledgeViewer;\n"],"names":["GET_ARTICLE","gql","_templateObject","_taggedTemplateLiteral","DELETE_ARTICLE","_templateObject2","TOGGLE_PIN","_templateObject3","CompanyKnowledgeViewer","id","useParams","navigate","useNavigate","toast","useToast","colorMode","useColorMode","usePageTitle","bgMain","getColor","cardGradientBg","cardBorder","textPrimary","textSecondary","data","loading","error","useQuery","variables","skip","deleteArticle","useMutation","onCompleted","title","status","duration","onError","description","message","togglePin","_jsxs","Box","bg","minH","display","flexDirection","children","_jsx","NavbarWithCallToAction","ModuleBreadcrumb","moduleConfig","companyKnowledgeModuleConfig","Container","maxW","py","flex","Flex","justify","align","Spinner","size","FooterWithFourColumns","companyKnowledgeArticle","Alert","AlertIcon","article","sanitizedContent","DOMPurify","sanitize","content","VStack","spacing","HStack","isPinned","StarIcon","color","boxSize","Heading","fontFamily","brandConfig","fonts","heading","Badge","colorScheme","allowPublicAccess","visibility","isPublished","category","Tooltip","label","IconButton","icon","CopyIcon","onClick","copyShareLink","link","concat","window","location","origin","publicSlug","shareToken","navigator","clipboard","writeText","variant","undefined","Button","leftIcon","EditIcon","DeleteIcon","handleDelete","confirm","Card","border","borderColor","CardBody","wrap","Text","fontSize","viewCount","format","Date","createdAt","updatedAt","tags","length","map","tag","Tag","TagLabel","fontWeight","as","href","target","rel","Divider","className","dangerouslySetInnerHTML","__html","sx","mb","ml","textDecoration","px","borderRadius","p","overflowX","my","borderLeft","pl","fontStyle"],"sourceRoot":""}